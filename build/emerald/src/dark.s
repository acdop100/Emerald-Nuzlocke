@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gUnknown_08596FC8
	.section .rodata
	.align	2, 0
	.type	 gUnknown_08596FC8,object
	.size	 gUnknown_08596FC8,24
gUnknown_08596FC8:
	.short	0x271f
	.short	0x271f
	.word	gUnknown_0852490C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_81138D4
	.globl	gUnknown_08596FE0
	.align	2, 0
	.type	 gUnknown_08596FE0,object
gUnknown_08596FE0:
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08596FE0,16
	.globl	gUnknown_08596FF0
	.align	2, 0
	.type	 gUnknown_08596FF0,object
gUnknown_08596FF0:
	.short	0x0
	.short	0x0
	.byte	0x20
	.byte	0x1
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08596FF0,16
	.globl	gUnknown_08597000
	.align	2, 0
	.type	 gUnknown_08597000,object
gUnknown_08597000:
	.short	0x0
	.short	0x0
	.byte	0x40
	.byte	0x1
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08597000,16
	.globl	gUnknown_08597010
	.align	2, 0
	.type	 gUnknown_08597010,object
gUnknown_08597010:
	.short	0x0
	.short	0x0
	.byte	0x60
	.byte	0x1
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08597010,16
	.globl	gUnknown_08597020
	.align	2, 0
	.type	 gUnknown_08597020,object
gUnknown_08597020:
	.short	0x0
	.short	0x0
	.byte	0x80
	.byte	0x1
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08597020,16
	.globl	gUnknown_08597030
	.align	2, 0
	.type	 gUnknown_08597030,object
gUnknown_08597030:
	.short	0x0
	.short	0x0
	.byte	0xa0
	.byte	0x1
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08597030,16
	.globl	gUnknown_08597040
	.align	2, 0
	.type	 gUnknown_08597040,object
gUnknown_08597040:
	.short	0x0
	.short	0x0
	.byte	0xc0
	.byte	0x1
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08597040,16
	.globl	gUnknown_08597050
	.align	2, 0
	.type	 gUnknown_08597050,object
gUnknown_08597050:
	.short	0x0
	.short	0x0
	.byte	0xe0
	.byte	0x1
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08597050,16
	.globl	gUnknown_08597060
	.align	2, 0
	.type	 gUnknown_08597060,object
gUnknown_08597060:
	.word	gUnknown_08596FE0
	.word	gUnknown_08596FF0
	.word	gUnknown_08597000
	.word	gUnknown_08597010
	.word	gUnknown_08597020
	.word	gUnknown_08597030
	.word	gUnknown_08597040
	.word	gUnknown_08597050
	.size	 gUnknown_08597060,32
	.globl	gUnknown_08597080
	.align	2, 0
	.type	 gUnknown_08597080,object
	.size	 gUnknown_08597080,24
gUnknown_08597080:
	.short	0x279b
	.short	0x279b
	.word	gUnknown_08524A9C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08597060
	.word	sub_81139DC
	.globl	gUnknown_08597098
	.align	2, 0
	.type	 gUnknown_08597098,object
	.size	 gUnknown_08597098,24
gUnknown_08597098:
	.short	0x27a1
	.short	0x27a1
	.word	gUnknown_08524A9C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08597060
	.word	sub_81139DC
	.globl	gUnknown_085970B0
	.align	2, 0
	.type	 gUnknown_085970B0,object
gUnknown_085970B0:
	.short	0xc0
	.short	0xc0
	.byte	0x50
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xfe
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_085970B0,24
	.globl	gUnknown_085970C8
	.align	2, 0
	.type	 gUnknown_085970C8,object
gUnknown_085970C8:
	.short	0xc0
	.short	0xc0
	.byte	0xb0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x2
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_085970C8,24
	.globl	gUnknown_085970E0
	.align	2, 0
	.type	 gUnknown_085970E0,object
gUnknown_085970E0:
	.word	gUnknown_085970B0
	.word	gUnknown_085970C8
	.size	 gUnknown_085970E0,8
	.globl	gUnknown_085970E8
	.align	2, 0
	.type	 gUnknown_085970E8,object
	.size	 gUnknown_085970E8,24
gUnknown_085970E8:
	.short	0x27ab
	.short	0x27ab
	.word	gUnknown_0852496C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_085970E0
	.word	sub_8113A90
	.globl	gUnknown_08597100
	.align	2, 0
	.type	 gUnknown_08597100,object
gUnknown_08597100:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x30
	.byte	0x4
	.space	1
	.short	0x40
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08597100,24
	.globl	gUnknown_08597118
	.align	2, 0
	.type	 gUnknown_08597118,object
gUnknown_08597118:
	.short	0x0
	.byte	0x44
	.space	1
	.short	0x10
	.byte	0x44
	.space	1
	.short	0x20
	.byte	0x44
	.space	1
	.short	0x30
	.byte	0x44
	.space	1
	.short	0x40
	.byte	0x44
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08597118,24
	.globl	gUnknown_08597130
	.align	2, 0
	.type	 gUnknown_08597130,object
gUnknown_08597130:
	.word	gUnknown_08597100
	.word	gUnknown_08597118
	.size	 gUnknown_08597130,8
	.globl	gBattleAnimSpriteTemplate_8597138
	.align	2, 0
	.type	 gBattleAnimSpriteTemplate_8597138,object
	.size	 gBattleAnimSpriteTemplate_8597138,24
gBattleAnimSpriteTemplate_8597138:
	.short	0x2737
	.short	0x2737
	.word	gUnknown_08524914
	.word	gUnknown_08597130
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_81144BC
.text
	.align	2, 0
	.globl	sub_81136E8
	.type	 sub_81136E8,function
	.thumb_func
sub_81136E8:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L5
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L5+0x4
	ldrh	r1, [r1]
	strh	r1, [r0, #0x8]
	ldr	r1, .L5+0x8
	ldrb	r4, [r1]
	mov	r1, #0x10
	strh	r1, [r0, #0xa]
	mov	r0, #0x52
	bl	SetGpuReg
	add	r0, r4, #0
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L3	@cond_branch
	ldr	r1, .L5+0xc
	mov	r0, #0x50
	bl	SetGpuReg
	b	.L4
.L6:
	.align	2, 0
.L5:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	0x3f42
.L3:
	ldr	r1, .L7
	mov	r0, #0x50
	bl	SetGpuReg
.L4:
	ldr	r0, .L7+0x4
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L7+0x8
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L8:
	.align	2, 0
.L7:
	.word	0x3f44
	.word	gTasks
	.word	sub_811375C
.Lfe1:
	.size	 sub_81136E8,.Lfe1-sub_81136E8
	.align	2, 0
	.type	 sub_811375C,function
	.thumb_func
sub_811375C:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L13
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r6, r0, r1
	ldrh	r0, [r6, #0xa]
	lsr	r4, r0, #0x8
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r2, #0xc
	ldrsh	r0, [r6, r2]
	ldrb	r2, [r6, #0x8]
	cmp	r0, r2
	bne	.L10	@cond_branch
	add	r4, r4, #0x1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	sub	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r4, #0x8
	orr	r1, r1, r0
	mov	r5, #0x0
	strh	r1, [r6, #0xa]
	ldrh	r1, [r6, #0xa]
	mov	r0, #0x52
	bl	SetGpuReg
	strh	r5, [r6, #0xc]
	cmp	r4, #0x10
	bne	.L12	@cond_branch
	ldr	r2, .L13+0x4
	ldr	r1, .L13+0x8
	ldr	r0, .L13+0xc
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
	b	.L12
.L14:
	.align	2, 0
.L13:
	.word	gTasks
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
.L10:
	ldrh	r0, [r6, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xc]
.L12:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 sub_811375C,.Lfe2-sub_811375C
	.align	2, 0
	.globl	sub_81137E4
	.type	 sub_81137E4,function
	.thumb_func
sub_81137E4:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L16
	lsl	r2, r0, #0x2
	add	r2, r2, r0
	lsl	r2, r2, #0x3
	add	r2, r2, r1
	ldr	r0, .L16+0x4
	ldrh	r0, [r0]
	strh	r0, [r2, #0x8]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	strh	r1, [r2, #0xa]
	ldr	r0, .L16+0x8
	str	r0, [r2]
	mov	r0, #0x52
	bl	SetGpuReg
	pop	{r0}
	bx	r0
.L17:
	.align	2, 0
.L16:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	sub_811381C
.Lfe3:
	.size	 sub_81137E4,.Lfe3-sub_81137E4
	.align	2, 0
	.type	 sub_811381C,function
	.thumb_func
sub_811381C:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L22
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r6, r0, r1
	ldrh	r0, [r6, #0xa]
	lsr	r4, r0, #0x8
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r2, #0xc
	ldrsh	r0, [r6, r2]
	ldrb	r2, [r6, #0x8]
	cmp	r0, r2
	bne	.L19	@cond_branch
	sub	r4, r4, #0x1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r4, #0x8
	orr	r1, r1, r0
	mov	r5, #0x0
	strh	r1, [r6, #0xa]
	ldrh	r1, [r6, #0xa]
	mov	r0, #0x52
	bl	SetGpuReg
	strh	r5, [r6, #0xc]
	cmp	r4, #0
	bne	.L21	@cond_branch
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
	b	.L21
.L23:
	.align	2, 0
.L22:
	.word	gTasks
.L19:
	ldrh	r0, [r6, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xc]
.L21:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 sub_811381C,.Lfe4-sub_811381C
	.align	2, 0
	.globl	sub_8113888
	.type	 sub_8113888,function
	.thumb_func
sub_8113888:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r0, .L27
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L25	@cond_branch
	ldr	r1, .L27+0x4
	mov	r0, #0x50
	bl	SetGpuReg
	b	.L26
.L28:
	.align	2, 0
.L27:
	.word	gBattleAnimAttacker
	.word	0x3f42
.L25:
	ldr	r1, .L29
	mov	r0, #0x50
	bl	SetGpuReg
.L26:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L30:
	.align	2, 0
.L29:
	.word	0x3f44
.Lfe5:
	.size	 sub_8113888,.Lfe5-sub_8113888
	.align	2, 0
	.globl	sub_81138D4
	.type	 sub_81138D4,function
	.thumb_func
sub_81138D4:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r6, .L32
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x30]
	ldr	r5, .L32+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x34]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	mov	r0, #0x7e
	strh	r0, [r4, #0x2e]
	add	r0, r4, #0
	bl	InitSpriteDataForLinearTranslation
	ldrh	r0, [r4, #0x30]
	neg	r0, r0
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x32]
	neg	r0, r0
	strh	r0, [r4, #0x36]
	ldr	r0, .L32+0x8
	strh	r0, [r4, #0x3a]
	ldr	r1, .L32+0xc
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L33:
	.align	2, 0
.L32:
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
	.word	0xffd8
	.word	sub_8113950
.Lfe6:
	.size	 sub_81138D4,.Lfe6-sub_81138D4
	.align	2, 0
	.type	 sub_8113950,function
	.thumb_func
sub_8113950:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldrh	r5, [r4, #0x30]
	ldrh	r0, [r4, #0x34]
	add	r2, r5, r0
	strh	r2, [r4, #0x34]
	ldrh	r3, [r4, #0x32]
	ldrh	r6, [r4, #0x36]
	add	r1, r3, r6
	strh	r1, [r4, #0x36]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	mov	r6, #0x3c
	ldrsh	r0, [r4, r6]
	cmp	r0, #0
	bne	.L35	@cond_branch
	add	r0, r2, r5
	strh	r0, [r4, #0x34]
	add	r1, r1, r3
	strh	r1, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r4, #0x26]
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
.L35:
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r2, #0x3a
	ldrsh	r1, [r4, r2]
	bl	Sin
	ldrh	r6, [r4, #0x26]
	add	r0, r0, r6
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x3
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	cmp	r0, #0x7f
	ble	.L36	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x3a]
	add	r0, r0, #0x14
	strh	r0, [r4, #0x3a]
	ldrh	r0, [r4, #0x3c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x3c]
.L36:
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L37	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L37:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 sub_8113950,.Lfe7-sub_8113950
	.align	2, 0
	.globl	sub_81139DC
	.type	 sub_81139DC,function
	.thumb_func
sub_81139DC:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L39
	ldrh	r0, [r5]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldrb	r1, [r5, #0x4]
	add	r0, r4, #0
	bl	StartSpriteAffineAnim
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r5, #0xa]
	strh	r0, [r4, #0x32]
	ldr	r0, .L39+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L40:
	.align	2, 0
.L39:
	.word	gBattleAnimArgs
	.word	sub_8113A18
.Lfe8:
	.size	 sub_81139DC,.Lfe8-sub_81139DC
	.align	2, 0
	.type	 sub_8113A18,function
	.thumb_func
sub_8113A18:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	ldrh	r1, [r2, #0x36]
	add	r0, r0, r1
	strh	r0, [r2, #0x36]
	ldrh	r1, [r2, #0x30]
	ldrh	r3, [r2, #0x38]
	add	r1, r1, r3
	strh	r1, [r2, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r2, #0x24]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r2, #0x26]
	ldrh	r0, [r2, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x32
	ldrsh	r1, [r2, r3]
	cmp	r0, r1
	bne	.L42	@cond_branch
	ldr	r0, .L43
	str	r0, [r2, #0x1c]
.L42:
	pop	{r0}
	bx	r0
.L44:
	.align	2, 0
.L43:
	.word	sub_8113A58
.Lfe9:
	.size	 sub_8113A18,.Lfe9-sub_8113A18
	.align	2, 0
	.type	 sub_8113A58,function
	.thumb_func
sub_8113A58:
	push	{lr}
	add	r3, r0, #0
	ldrh	r1, [r3, #0x36]
	ldrh	r0, [r3, #0x2e]
	sub	r1, r1, r0
	strh	r1, [r3, #0x36]
	ldrh	r0, [r3, #0x38]
	ldrh	r2, [r3, #0x30]
	sub	r0, r0, r2
	strh	r0, [r3, #0x38]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r3, #0x24]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r3, #0x26]
	ldrh	r0, [r3, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x34]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L46	@cond_branch
	add	r0, r3, #0
	bl	DestroySpriteAndMatrix
.L46:
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 sub_8113A58,.Lfe10-sub_8113A58
	.align	2, 0
	.globl	sub_8113A90
	.type	 sub_8113A90,function
	.thumb_func
sub_8113A90:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldr	r0, .L60
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	add	r3, r0, #0
	cmp	r1, #0
	bne	.L48	@cond_branch
	ldr	r0, .L60+0x4
	b	.L58
.L61:
	.align	2, 0
.L60:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L48:
	ldr	r0, .L62
.L58:
	ldrb	r5, [r0]
	mov	r6, #0x14
	ldrh	r2, [r4, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x4
	ldr	r7, .L62+0x4
	add	r0, r7, #0
	and	r1, r1, r0
	ldr	r0, .L62+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	mov	r1, #0x2
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x1
	beq	.L52	@cond_branch
	cmp	r0, #0x1
	bgt	.L57	@cond_branch
	cmp	r0, #0
	beq	.L51	@cond_branch
	b	.L50
.L63:
	.align	2, 0
.L62:
	.word	gBattleAnimTarget
	.word	0x3ff
	.word	-0x400
.L57:
	cmp	r0, #0x2
	beq	.L53	@cond_branch
	cmp	r0, #0x3
	beq	.L54	@cond_branch
	b	.L50
.L51:
	add	r0, r5, #0
	mov	r1, #0x5
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x8
	strh	r0, [r4, #0x20]
	add	r0, r5, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
	strh	r0, [r4, #0x22]
	b	.L50
.L52:
	add	r0, r5, #0
	mov	r1, #0x5
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0xe
	strh	r0, [r4, #0x20]
	add	r0, r5, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x10
	strh	r0, [r4, #0x22]
	b	.L50
.L53:
	add	r0, r5, #0
	mov	r1, #0x4
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
	strh	r0, [r4, #0x20]
	add	r0, r5, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
	b	.L59
.L54:
	add	r0, r5, #0
	mov	r1, #0x4
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0xe
	strh	r0, [r4, #0x20]
	add	r0, r5, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x10
.L59:
	strh	r0, [r4, #0x22]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	mov	r6, #0xec
.L50:
	mov	r0, #0x20
	strh	r0, [r4, #0x2e]
	lsl	r0, r6, #0x18
	asr	r0, r0, #0x18
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0xc
	strh	r0, [r4, #0x36]
	ldr	r0, .L64
	strh	r0, [r4, #0x38]
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldr	r0, .L64+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L65:
	.align	2, 0
.L64:
	.word	0xfff4
	.word	sub_8113B90
.Lfe11:
	.size	 sub_8113A90,.Lfe11-sub_8113A90
	.align	2, 0
	.type	 sub_8113B90,function
	.thumb_func
sub_8113B90:
	push	{r4, lr}
	add	r4, r0, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L67	@cond_branch
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
.L67:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 sub_8113B90,.Lfe12-sub_8113B90
	.align	2, 0
	.globl	sub_8113BAC
	.type	 sub_8113BAC,function
	.thumb_func
sub_8113BAC:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x1c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L82
	add	r5, r1, r0
	ldr	r4, .L82+0x4
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1f
	mov	r6, #0x0
	strh	r0, [r5, #0x16]
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x7
	strh	r0, [r5, #0x14]
	ldrh	r1, [r5, #0x16]
	strh	r1, [r5, #0x12]
	strh	r0, [r5, #0x10]
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	strh	r1, [r5, #0x22]
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	sub	r1, r1, #0x20
	strh	r1, [r5, #0x24]
	add	r0, r0, #0x20
	strh	r0, [r5, #0x26]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L69	@cond_branch
	ldr	r0, .L82+0x8
	b	.L80
.L83:
	.align	2, 0
.L82:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	0xfff4
.L69:
	ldr	r0, .L84
.L80:
	strh	r0, [r5, #0x18]
	ldr	r0, .L84+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0xe]
	cmp	r0, #0x1
	bne	.L71	@cond_branch
	add	r4, sp, #0xc
	add	r0, r4, #0
	bl	sub_80A6B30
	ldr	r0, .L84+0x8
	ldrh	r0, [r0]
	strh	r0, [r5, #0x1c]
	ldr	r1, .L84+0xc
	mov	r0, #0x50
	bl	SetGpuReg
	ldrb	r1, [r4, #0x8]
	lsl	r1, r1, #0x4
	mov	r0, #0x0
	mov	r2, #0x20
	bl	FillPalette
	ldr	r0, .L84+0x10
	str	r0, [sp]
	mov	r7, #0x2
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L73	@cond_branch
	ldr	r1, .L84+0x14
	b	.L81
.L85:
	.align	2, 0
.L84:
	.word	0xffc0
	.word	gBattleAnimAttacker
	.word	gBattle_BG1_Y
	.word	0x3f42
	.word	0x4000016
	.word	gBattle_BG2_X
.L71:
	ldr	r0, .L86
	ldrh	r0, [r0]
	strh	r0, [r5, #0x1c]
	ldr	r1, .L86+0x4
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r0, #0x0
	mov	r1, #0x90
	mov	r2, #0x20
	bl	FillPalette
	ldr	r0, .L86+0x8
	str	r0, [sp]
	mov	r7, #0x4
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L73	@cond_branch
	ldr	r1, .L86+0xc
.L81:
	ldrh	r0, [r1]
	add	r0, r0, #0xf0
	strh	r0, [r1]
.L73:
	ldr	r0, .L86+0x10
	str	r0, [sp, #0x4]
	mov	r2, sp
	mov	r1, #0x0
	mov	r0, #0x1
	strb	r0, [r2, #0x8]
	mov	r0, sp
	strb	r1, [r0, #0x9]
	strh	r1, [r5, #0x1e]
	mov	r0, #0x10
	strh	r0, [r5, #0x20]
	strh	r1, [r5, #0x8]
	strh	r1, [r5, #0xa]
	strh	r1, [r5, #0xc]
	mov	r0, #0x3
	bl	sub_8114374
	mov	r3, #0x0
	ldr	r4, .L86+0x14
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r6, r4, r0
.L78:
	lsl	r1, r3, #0x1
	add	r2, r1, r4
	ldrh	r0, [r5, #0x1c]
	strh	r0, [r2]
	add	r1, r1, r6
	ldrh	r0, [r5, #0x1c]
	strh	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x6f
	bls	.L78	@cond_branch
	ldr	r0, [sp]
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp, #0x8]
	bl	ScanlineEffect_SetParams
	mov	r0, #0x3f
	eor	r7, r7, r0
	mov	r1, #0xfc
	lsl	r1, r1, #0x6
	add	r0, r1, #0
	orr	r7, r7, r0
	mov	r0, #0x4a
	add	r1, r7, #0
	bl	SetGpuReg
	ldr	r1, .L86+0x18
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r2, .L86+0x1c
	ldrh	r0, [r5, #0x24]
	lsl	r0, r0, #0x8
	ldrh	r1, [r5, #0x26]
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L86+0x20
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r0, .L86+0x24
	str	r0, [r5]
	add	sp, sp, #0x1c
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L87:
	.align	2, 0
.L86:
	.word	gBattle_BG2_Y
	.word	0x3f44
	.word	0x400001a
	.word	gBattle_BG1_X
	.word	-0x5d9fffff
	.word	gScanlineEffectRegBuffers
	.word	0x3f3f
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	sub_8113D60
.Lfe13:
	.size	 sub_8113BAC,.Lfe13-sub_8113BAC
	.align	2, 0
	.type	 sub_8113D60,function
	.thumb_func
sub_8113D60:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L107
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	bls	.LCB1063
	b	.L89	@long jump
.LCB1063:
	lsl	r0, r0, #0x2
	ldr	r1, .L107+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L108:
	.align	2, 0
.L107:
	.word	gTasks
	.word	.L104
	.align	2, 0
	.align	2, 0
.L104:
	.word	.L90
	.word	.L97
	.word	.L99
	.word	.L102
	.word	.L103
.L90:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L89	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L92	@cond_branch
	ldrh	r1, [r4, #0x1e]
	mov	r2, #0x1e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xc
	beq	.L94	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x1e]
	b	.L94
.L92:
	ldrh	r1, [r4, #0x20]
	mov	r2, #0x20
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x8
	beq	.L94	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x20]
.L94:
	ldrh	r1, [r4, #0x20]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x1e]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x1e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xc
	bne	.L89	@cond_branch
	mov	r2, #0x20
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x8
	bne	.L89	@cond_branch
	b	.L106
.L97:
	ldrh	r0, [r4, #0x10]
	sub	r0, r0, #0x8
	strh	r0, [r4, #0x10]
	add	r0, r4, #0
	bl	sub_8114244
	mov	r0, #0x10
	ldrsh	r1, [r4, r0]
	mov	r2, #0x18
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bge	.L89	@cond_branch
	b	.L106
.L99:
	ldrh	r0, [r4, #0x10]
	sub	r0, r0, #0x8
	strh	r0, [r4, #0x10]
	add	r0, r4, #0
	bl	sub_8114244
	ldrh	r1, [r4, #0x24]
	add	r1, r1, #0x4
	strh	r1, [r4, #0x24]
	ldrh	r0, [r4, #0x26]
	sub	r2, r0, #0x4
	strh	r2, [r4, #0x26]
	lsl	r1, r1, #0x10
	lsl	r0, r2, #0x10
	cmp	r1, r0
	blt	.L100	@cond_branch
	strh	r2, [r4, #0x24]
.L100:
	ldr	r3, .L109
	ldrh	r2, [r4, #0x24]
	lsl	r0, r2, #0x8
	ldrh	r1, [r4, #0x26]
	orr	r0, r0, r1
	strh	r0, [r3]
	lsl	r2, r2, #0x10
	lsl	r1, r1, #0x10
	cmp	r2, r1
	bne	.L89	@cond_branch
	b	.L106
.L110:
	.align	2, 0
.L109:
	.word	gBattle_WIN0H
.L102:
	ldr	r1, .L111
	mov	r0, #0x3
	strb	r0, [r1, #0x15]
.L106:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L89
.L112:
	.align	2, 0
.L111:
	.word	gScanlineEffect
.L103:
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L89:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 sub_8113D60,.Lfe14-sub_8113D60
	.align	2, 0
	.globl	sub_8113E78
	.type	 sub_8113E78,function
	.thumb_func
sub_8113E78:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x1c
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L143
	add	r5, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x4
	bls	.LCB1245
	b	.L114	@long jump
.LCB1245:
	lsl	r0, r0, #0x2
	ldr	r1, .L143+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L144:
	.align	2, 0
.L143:
	.word	gTasks
	.word	.L137
	.align	2, 0
	.align	2, 0
.L137:
	.word	.L115
	.word	.L120
	.word	.L123
	.word	.L126
	.word	.L134
.L115:
	bl	IsContest
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L116	@cond_branch
	ldr	r0, .L145
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L145+0x4
	strh	r1, [r0]
	ldr	r4, .L145+0x8
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	b	.L114
.L146:
	.align	2, 0
.L145:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
.L116:
	ldr	r0, .L147
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0xe]
	cmp	r0, #0x1
	bne	.L118	@cond_branch
	ldr	r1, .L147+0x4
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r1, .L147+0x8
	b	.L139
.L148:
	.align	2, 0
.L147:
	.word	gBattleAnimTarget
	.word	0x3f42
	.word	gBattle_BG2_X
.L118:
	ldr	r1, .L149
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r1, .L149+0x4
.L139:
	ldrh	r0, [r1]
	add	r0, r0, #0xf0
	strh	r0, [r1]
	b	.L140
.L150:
	.align	2, 0
.L149:
	.word	0x3f44
	.word	gBattle_BG1_X
.L120:
	mov	r1, #0xe
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	bne	.L121	@cond_branch
	mov	r0, sp
	bl	sub_80A6B30
	ldr	r0, .L151
	ldrh	r0, [r0]
	strh	r0, [r5, #0x1c]
	mov	r0, sp
	ldrb	r1, [r0, #0x8]
	lsl	r1, r1, #0x4
	mov	r0, #0x0
	mov	r2, #0x20
	bl	FillPalette
	b	.L122
.L152:
	.align	2, 0
.L151:
	.word	gBattle_BG1_Y
.L121:
	ldr	r0, .L153
	ldrh	r0, [r0]
	strh	r0, [r5, #0x1c]
	mov	r0, #0x0
	mov	r1, #0x90
	mov	r2, #0x20
	bl	FillPalette
.L122:
	mov	r0, #0x3
	bl	sub_8114374
	b	.L140
.L154:
	.align	2, 0
.L153:
	.word	gBattle_BG2_Y
.L123:
	ldr	r4, .L155
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1f
	mov	r6, #0x0
	strh	r0, [r5, #0x16]
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x7
	strh	r0, [r5, #0x14]
	ldrh	r1, [r5, #0x16]
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	strh	r1, [r5, #0x22]
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r1, r0, #0x4
	strh	r1, [r5, #0x24]
	add	r0, r0, #0x4
	strh	r0, [r5, #0x26]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L124	@cond_branch
	ldr	r0, .L155+0x4
	b	.L141
.L156:
	.align	2, 0
.L155:
	.word	gBattleAnimTarget
	.word	0xfff4
.L124:
	ldr	r0, .L157
.L141:
	strh	r0, [r5, #0x18]
	ldrh	r0, [r5, #0x18]
	strh	r0, [r5, #0x10]
	strh	r0, [r5, #0x12]
	mov	r0, #0xc
	strh	r0, [r5, #0x1e]
	mov	r0, #0x8
	strh	r0, [r5, #0x20]
	b	.L140
.L158:
	.align	2, 0
.L157:
	.word	0xffc0
.L126:
	mov	r1, #0xe
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	bne	.L127	@cond_branch
	ldr	r0, .L159
	b	.L142
.L160:
	.align	2, 0
.L159:
	.word	0x4000016
.L127:
	ldr	r0, .L161
.L142:
	str	r0, [sp, #0x10]
	mov	r3, #0x0
	add	r4, sp, #0x10
	ldr	r6, .L161+0x4
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r7, r6, r0
.L132:
	lsl	r1, r3, #0x1
	add	r2, r1, r6
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x9f
	sub	r0, r0, r3
	strh	r0, [r2]
	add	r1, r1, r7
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x9f
	sub	r0, r0, r3
	strh	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x6f
	bls	.L132	@cond_branch
	ldr	r1, .L161+0x8
	str	r1, [r4, #0x4]
	mov	r2, #0x0
	mov	r0, #0x1
	strb	r0, [r4, #0x8]
	strb	r2, [r4, #0x9]
	ldr	r0, [sp, #0x10]
	ldr	r2, [r4, #0x8]
	bl	ScanlineEffect_SetParams
.L140:
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	b	.L114
.L162:
	.align	2, 0
.L161:
	.word	0x400001a
	.word	gScanlineEffectRegBuffers
	.word	-0x5d9fffff
.L134:
	mov	r1, #0xe
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	bne	.L135	@cond_branch
	ldr	r1, .L163
	mov	r0, #0x4a
	bl	SetGpuReg
	b	.L136
.L164:
	.align	2, 0
.L163:
	.word	0x3f3d
.L135:
	ldr	r1, .L165
	mov	r0, #0x4a
	bl	SetGpuReg
.L136:
	ldr	r1, .L165+0x4
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r2, .L165+0x8
	ldrh	r0, [r5, #0x24]
	lsl	r0, r0, #0x8
	ldrh	r1, [r5, #0x26]
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L165+0xc
	mov	r0, #0xa0
	strh	r0, [r1]
	mov	r0, #0x0
	strh	r0, [r5, #0x8]
	strh	r0, [r5, #0xa]
	strh	r0, [r5, #0xc]
	ldr	r1, .L165+0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r0, .L165+0x14
	str	r0, [r5]
.L114:
	add	sp, sp, #0x1c
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L166:
	.align	2, 0
.L165:
	.word	0x3f3b
	.word	0x3f3f
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x80c
	.word	sub_81140C8
.Lfe15:
	.size	 sub_8113E78,.Lfe15-sub_8113E78
	.align	2, 0
	.type	 sub_81140C8,function
	.thumb_func
sub_81140C8:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L189
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	bls	.LCB1629
	b	.L168	@long jump
.LCB1629:
	lsl	r0, r0, #0x2
	ldr	r1, .L189+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L190:
	.align	2, 0
.L189:
	.word	gTasks
	.word	.L186
	.align	2, 0
	.align	2, 0
.L186:
	.word	.L169
	.word	.L172
	.word	.L177
	.word	.L184
	.word	.L185
.L169:
	ldrh	r0, [r4, #0x12]
	add	r0, r0, #0x8
	strh	r0, [r4, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r2, [r4, #0x16]
	mov	r3, #0x16
	ldrsh	r1, [r4, r3]
	cmp	r0, r1
	blt	.L170	@cond_branch
	strh	r2, [r4, #0x12]
.L170:
	add	r0, r4, #0
	bl	sub_8114244
	mov	r0, #0x12
	ldrsh	r1, [r4, r0]
	mov	r2, #0x16
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	beq	.LCB1671
	b	.L168	@long jump
.LCB1671:
	b	.L188
.L172:
	mov	r3, #0x26
	ldrsh	r0, [r4, r3]
	mov	r2, #0x24
	ldrsh	r1, [r4, r2]
	sub	r0, r0, r1
	cmp	r0, #0x3f
	bgt	.L173	@cond_branch
	ldrh	r0, [r4, #0x24]
	sub	r0, r0, #0x4
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x26]
	add	r0, r0, #0x4
	strh	r0, [r4, #0x26]
	b	.L174
.L173:
	mov	r0, #0x1
	strh	r0, [r4, #0xa]
.L174:
	ldr	r2, .L191
	ldrh	r0, [r4, #0x24]
	lsl	r0, r0, #0x8
	ldrh	r1, [r4, #0x26]
	orr	r0, r0, r1
	strh	r0, [r2]
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x8
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r2, [r4, #0x14]
	mov	r3, #0x14
	ldrsh	r1, [r4, r3]
	cmp	r0, r1
	blt	.L175	@cond_branch
	strh	r2, [r4, #0x10]
.L175:
	add	r0, r4, #0
	bl	sub_8114244
	mov	r0, #0x10
	ldrsh	r1, [r4, r0]
	mov	r2, #0x14
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L168	@cond_branch
	mov	r3, #0xa
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L168	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	b	.L188
.L192:
	.align	2, 0
.L191:
	.word	gBattle_WIN0H
.L177:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L168	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L179	@cond_branch
	ldrh	r1, [r4, #0x1e]
	mov	r2, #0x1e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L181	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x1e]
	b	.L181
.L179:
	ldrh	r1, [r4, #0x20]
	mov	r3, #0x20
	ldrsh	r0, [r4, r3]
	cmp	r0, #0xf
	bgt	.L181	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x20]
.L181:
	ldrh	r1, [r4, #0x20]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x1e]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x1e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L168	@cond_branch
	mov	r2, #0x20
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x10
	bne	.L168	@cond_branch
	b	.L188
.L184:
	ldr	r1, .L193
	mov	r0, #0x3
	strb	r0, [r1, #0x15]
.L188:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L168
.L194:
	.align	2, 0
.L193:
	.word	gScanlineEffect
.L185:
	ldr	r0, .L195
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L195+0x4
	strh	r1, [r0]
	ldr	r4, .L195+0x8
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L168:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L196:
	.align	2, 0
.L195:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
.Lfe16:
	.size	 sub_81140C8,.Lfe16-sub_81140C8
	.align	2, 0
	.type	 sub_8114244,function
	.thumb_func
sub_8114244:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	ldrh	r0, [r6, #0x12]
	ldrh	r4, [r6, #0x10]
	sub	r0, r0, r4
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	cmp	r1, #0
	beq	.L198	@cond_branch
	mov	r2, #0x22
	ldrsh	r0, [r6, r2]
	bl	__divsi3
	mov	r8, r0
	mov	r3, #0x14
	ldrsh	r0, [r6, r3]
	lsl	r5, r0, #0x8
	lsl	r0, r4, #0x10
	mov	r4, #0x0
	cmp	r0, #0
	ble	.L200	@cond_branch
	ldr	r0, .L222
	mov	ip, r0
	ldr	r7, .L222+0x4
.L202:
	lsl	r2, r4, #0x10
	asr	r2, r2, #0x10
	lsl	r3, r2, #0x1
	ldrb	r1, [r7, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	add	r3, r3, r0
	add	r3, r3, ip
	add	r1, r2, #0
	sub	r1, r1, #0x9f
	ldrh	r0, [r6, #0x1c]
	sub	r0, r0, r1
	strh	r0, [r3]
	add	r2, r2, #0x1
	lsl	r2, r2, #0x10
	lsr	r4, r2, #0x10
	asr	r2, r2, #0x10
	mov	r1, #0x10
	ldrsh	r0, [r6, r1]
	cmp	r2, r0
	blt	.L202	@cond_branch
.L200:
	ldrh	r4, [r6, #0x10]
	lsl	r3, r4, #0x10
	asr	r1, r3, #0x10
	mov	r2, #0x12
	ldrsh	r0, [r6, r2]
	cmp	r1, r0
	bgt	.L205	@cond_branch
	ldr	r0, .L222
	mov	ip, r0
	ldr	r7, .L222+0x4
.L207:
	asr	r4, r3, #0x10
	cmp	r4, #0
	blt	.L208	@cond_branch
	asr	r1, r5, #0x8
	sub	r1, r1, r4
	lsl	r3, r4, #0x1
	ldrb	r2, [r7, #0x14]
	lsl	r0, r2, #0x4
	sub	r0, r0, r2
	lsl	r0, r0, #0x7
	add	r3, r3, r0
	add	r3, r3, ip
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	ldrh	r2, [r6, #0x1c]
	add	r1, r1, r2
	strh	r1, [r3]
.L208:
	add	r5, r5, r8
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	lsl	r3, r4, #0x10
	asr	r1, r3, #0x10
	mov	r2, #0x12
	ldrsh	r0, [r6, r2]
	cmp	r1, r0
	ble	.L207	@cond_branch
.L205:
	mov	r3, #0x1c
	ldrsh	r0, [r6, r3]
	add	r0, r0, #0x9f
	lsl	r2, r4, #0x10
	asr	r1, r2, #0x10
	sub	r5, r0, r1
	mov	r3, #0x16
	ldrsh	r0, [r6, r3]
	cmp	r1, r0
	bge	.L216	@cond_branch
	ldr	r7, .L222
	ldr	r4, .L222+0x4
.L213:
	asr	r3, r2, #0x10
	cmp	r3, #0
	blt	.L212	@cond_branch
	lsl	r2, r3, #0x1
	ldrb	r1, [r4, #0x14]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x7
	add	r2, r2, r0
	add	r2, r2, r7
	strh	r5, [r2]
	sub	r5, r5, #0x1
.L212:
	add	r0, r3, #0x1
	lsl	r2, r0, #0x10
	asr	r1, r2, #0x10
	mov	r3, #0x16
	ldrsh	r0, [r6, r3]
	cmp	r1, r0
	blt	.L213	@cond_branch
	b	.L216
.L223:
	.align	2, 0
.L222:
	.word	gScanlineEffectRegBuffers
	.word	gScanlineEffect
.L198:
	mov	r1, #0x1c
	ldrsh	r0, [r6, r1]
	add	r5, r0, #0
	add	r5, r5, #0x9f
	mov	r4, #0x0
	ldr	r3, .L224
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r6, r3, r2
.L220:
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	lsl	r2, r0, #0x1
	add	r1, r2, r3
	strh	r5, [r1]
	add	r2, r2, r6
	strh	r5, [r2]
	sub	r5, r5, #0x1
	add	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6f
	ble	.L220	@cond_branch
.L216:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L225:
	.align	2, 0
.L224:
	.word	gScanlineEffectRegBuffers
.Lfe17:
	.size	 sub_8114244,.Lfe17-sub_8114244
	.align	2, 0
	.type	 sub_8114374,function
	.thumb_func
sub_8114374:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r4, #0x0
	ldr	r7, .L233
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r5, r0, #0x2
	mov	r0, #0xd
	neg	r0, r0
	add	r6, r0, #0
.L230:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L229	@cond_branch
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrb	r0, [r1, #0x5]
	and	r0, r0, r6
	orr	r0, r0, r5
	strb	r0, [r1, #0x5]
.L229:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x3
	bls	.L230	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L234:
	.align	2, 0
.L233:
	.word	gSprites
.Lfe18:
	.size	 sub_8114374,.Lfe18-sub_8114374
	.align	2, 0
	.globl	sub_81143C0
	.type	 sub_81143C0,function
	.thumb_func
sub_81143C0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r6, .L238
	ldrb	r0, [r6]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	eor	r0, r0, r1
	neg	r1, r0
	orr	r1, r1, r0
	lsr	r4, r1, #0x1f
	ldrb	r0, [r6]
	add	r1, r4, #0
	mov	r2, #0x1
	bl	MoveBattlerSpriteToBG
	ldr	r0, .L238+0x4
	mov	r9, r0
	ldr	r0, .L238+0x8
	mov	r8, r0
	ldrb	r0, [r6]
	add	r0, r0, r8
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	mov	r7, #0x5
	neg	r7, r7
	add	r0, r7, #0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r6]
	mov	r5, #0x2
	eor	r0, r0, r5
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L237	@cond_branch
	ldrb	r0, [r6]
	eor	r0, r0, r5
	mov	r1, #0x1
	eor	r4, r4, r1
	add	r1, r4, #0
	mov	r2, #0x1
	bl	MoveBattlerSpriteToBG
	ldrb	r0, [r6]
	eor	r0, r0, r5
	add	r0, r0, r8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	add	r1, r7, #0
	and	r1, r1, r2
	strb	r1, [r0]
.L237:
	mov	r0, sl
	bl	DestroyAnimVisualTask
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L239:
	.align	2, 0
.L238:
	.word	gBattleAnimAttacker
	.word	gSprites
	.word	gBattlerSpriteIds
.Lfe19:
	.size	 sub_81143C0,.Lfe19-sub_81143C0
	.align	2, 0
	.globl	sub_8114470
	.type	 sub_8114470,function
	.thumb_func
sub_8114470:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r4, .L243
	ldrb	r0, [r4]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	eor	r0, r0, r1
	neg	r1, r0
	orr	r1, r1, r0
	lsr	r5, r1, #0x1f
	add	r0, r5, #0
	bl	sub_80A477C
	ldrb	r1, [r4]
	mov	r0, #0x2
	eor	r0, r0, r1
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L242	@cond_branch
	mov	r0, #0x1
	eor	r5, r5, r0
	add	r0, r5, #0
	bl	sub_80A477C
.L242:
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L244:
	.align	2, 0
.L243:
	.word	gBattleAnimAttacker
.Lfe20:
	.size	 sub_8114470,.Lfe20-sub_8114470
	.align	2, 0
	.globl	sub_81144BC
	.type	 sub_81144BC,function
	.thumb_func
sub_81144BC:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L246
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldrb	r1, [r1, #0x4]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldr	r0, .L246+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L246+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4}
	pop	{r0}
	bx	r0
.L247:
	.align	2, 0
.L246:
	.word	gBattleAnimArgs
	.word	RunStoredCallbackWhenAnimEnds
	.word	DestroyAnimSprite
.Lfe21:
	.size	 sub_81144BC,.Lfe21-sub_81144BC
	.align	2, 0
	.globl	AnimTask_MetallicShine
	.type	 AnimTask_MetallicShine,function
	.thumb_func
AnimTask_MetallicShine:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r6, #0x0
	ldr	r0, .L261
	strh	r6, [r0]
	ldr	r0, .L261+0x4
	strh	r6, [r0]
	ldr	r1, .L261+0x8
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L261+0xc
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldr	r1, .L261+0x10
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r1, .L261+0x14
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L249	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x1
	bl	SetAnimBgAttribute
.L249:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L250	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L250	@cond_branch
	ldr	r4, .L261+0x18
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	beq	.L252	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L250	@cond_branch
.L252:
	ldrb	r0, [r4]
	mov	r5, #0x2
	eor	r0, r0, r5
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L250	@cond_branch
	ldr	r3, .L261+0x1c
	ldr	r1, .L261+0x20
	ldrb	r0, [r4]
	eor	r0, r0, r5
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrb	r3, [r2, #0x5]
	lsl	r1, r3, #0x1c
	lsr	r1, r1, #0x1e
	sub	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	mov	r6, #0x1
.L250:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L254	@cond_branch
	ldr	r0, .L261+0x24
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	ldrh	r5, [r0]
	b	.L255
.L262:
	.align	2, 0
.L261:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	0x3f3d
	.word	0x3f42
	.word	0xc08
	.word	gBattleAnimAttacker
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gContestResources
.L254:
	ldr	r4, .L263
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L256	@cond_branch
	ldr	r1, .L263+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L263+0x8
	b	.L260
.L264:
	.align	2, 0
.L263:
	.word	gBattleAnimAttacker
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L256:
	ldr	r1, .L265
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L265+0x4
.L260:
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L255:
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L265+0x8
	ldrb	r0, [r0]
	add	r1, r4, #0
	add	r2, r5, #0
	bl	sub_80A89C8
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, sp
	bl	sub_80A6B30
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L265+0xc
	bl	AnimLoadCompressedBgTilemap
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L265+0x10
	mov	r2, sp
	ldrh	r2, [r2, #0xa]
	bl	AnimLoadCompressedBgGfx
	ldr	r0, .L265+0x14
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldr	r2, .L265+0x18
	ldr	r0, .L265+0x1c
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x20]
	neg	r0, r0
	add	r0, r0, #0x60
	strh	r0, [r2]
	ldr	r2, .L265+0x20
	ldrh	r0, [r1, #0x22]
	neg	r0, r0
	add	r0, r0, #0x20
	strh	r0, [r2]
	ldrb	r0, [r1, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	add	r1, r0, #0
	ldr	r2, .L265+0x24
	mov	r3, #0x2
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	bne	.L258	@cond_branch
	add	r0, r1, #0
	mov	r1, #0x0
	bl	SetGreyscaleOrOriginalPalette
	b	.L259
.L266:
	.align	2, 0
.L265:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattleAnimAttacker
	.word	gMetalShineTilemap
	.word	gMetalShineGfx
	.word	gMetalShinePalette
	.word	gBattle_BG1_X
	.word	gSprites
	.word	gBattle_BG1_Y
	.word	gBattleAnimArgs
.L258:
	lsl	r0, r1, #0x4
	ldrh	r3, [r2, #0x4]
	mov	r1, #0x10
	mov	r2, #0xb
	bl	BlendPalette
.L259:
	ldr	r1, .L267
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r5, [r0, #0x8]
	ldr	r2, .L267+0x4
	ldrh	r1, [r2]
	strh	r1, [r0, #0xa]
	ldrh	r1, [r2, #0x2]
	strh	r1, [r0, #0xc]
	ldrh	r1, [r2, #0x4]
	strh	r1, [r0, #0xe]
	strh	r6, [r0, #0x14]
	ldr	r1, .L267+0x8
	str	r1, [r0]
	add	sp, sp, #0x10
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L268:
	.align	2, 0
.L267:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	sub_8114748
.Lfe22:
	.size	 AnimTask_MetallicShine,.Lfe22-AnimTask_MetallicShine
	.align	2, 0
	.type	 sub_8114748,function
	.thumb_func
sub_8114748:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	ldr	r1, .L277
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x4
	mov	r5, #0x0
	strh	r0, [r4, #0x1c]
	ldr	r2, .L277+0x4
	ldrh	r3, [r2]
	sub	r1, r3, #0x4
	strh	r1, [r2]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x80
	beq	.LCB2696
	b	.L270	@long jump
.LCB2696:
	strh	r5, [r4, #0x1c]
	add	r0, r3, #0
	add	r0, r0, #0x7c
	strh	r0, [r2]
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L271	@cond_branch
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L277+0x8
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	add	r1, r0, #0
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L272	@cond_branch
	add	r0, r1, #0
	mov	r1, #0x1
	bl	SetGreyscaleOrOriginalPalette
.L272:
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
	mov	r0, sp
	bl	sub_80A6B30
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	bl	sub_80A6C68
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	bne	.L270	@cond_branch
	ldr	r2, .L277+0xc
	ldr	r0, .L277+0x10
	ldrb	r1, [r0]
	mov	r0, #0x2
	eor	r0, r0, r1
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r5
	ldrb	r3, [r2, #0x5]
	lsl	r1, r3, #0x1c
	lsr	r1, r1, #0x1e
	add	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
	b	.L270
.L278:
	.align	2, 0
.L277:
	.word	gTasks
	.word	gBattle_BG1_X
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
.L271:
	cmp	r0, #0x3
	bne	.L270	@cond_branch
	ldr	r0, .L279
	strh	r5, [r0]
	ldr	r0, .L279+0x4
	strh	r5, [r0]
	ldr	r4, .L279+0x8
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L276	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x0
	bl	SetAnimBgAttribute
.L276:
	mov	r0, #0x0
	bl	GetGpuReg
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	eor	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L270:
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L280:
	.align	2, 0
.L279:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
.Lfe23:
	.size	 sub_8114748,.Lfe23-sub_8114748
	.align	2, 0
	.globl	AnimTask_SetGreyscaleOrOriginalPal
	.type	 AnimTask_SetGreyscaleOrOriginalPal,function
	.thumb_func
AnimTask_SetGreyscaleOrOriginalPal:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r0, .L298
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	add	r2, r0, #0
	cmp	r1, #0x7
	bhi	.L291	@cond_branch
	lsl	r0, r1, #0x2
	ldr	r1, .L298+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L299:
	.align	2, 0
.L298:
	.word	gBattleAnimArgs
	.word	.L292
	.align	2, 0
	.align	2, 0
.L292:
	.word	.L286
	.word	.L286
	.word	.L286
	.word	.L286
	.word	.L287
	.word	.L288
	.word	.L289
	.word	.L290
.L286:
	ldrb	r0, [r2]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	b	.L282
.L287:
	mov	r4, #0x0
	b	.L297
.L288:
	mov	r4, #0x2
	b	.L297
.L289:
	mov	r4, #0x1
	b	.L297
.L290:
	mov	r4, #0x3
	b	.L297
.L291:
	mov	r2, #0xff
.L282:
	mov	r0, #0x0
	cmp	r0, #0
	beq	.L293	@cond_branch
.L297:
	add	r0, r4, #0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L294	@cond_branch
	ldr	r0, .L300
	add	r0, r4, r0
	ldrb	r2, [r0]
	b	.L293
.L301:
	.align	2, 0
.L300:
	.word	gBattlerSpriteIds
.L294:
	mov	r2, #0xff
.L293:
	cmp	r2, #0xff
	beq	.L296	@cond_branch
	ldr	r1, .L302
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	ldr	r1, .L302+0x4
	ldrb	r1, [r1, #0x2]
	bl	SetGreyscaleOrOriginalPalette
.L296:
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L303:
	.align	2, 0
.L302:
	.word	gSprites
	.word	gBattleAnimArgs
.Lfe24:
	.size	 AnimTask_SetGreyscaleOrOriginalPal,.Lfe24-AnimTask_SetGreyscaleOrOriginalPal
	.align	2, 0
	.globl	sub_8114960
	.type	 sub_8114960,function
	.thumb_func
sub_8114960:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r2, .L307
	ldrb	r0, [r2]
	cmp	r0, #0x1
	bhi	.L305	@cond_branch
	ldr	r1, .L307+0x4
	mov	r0, #0x0
	strh	r0, [r1, #0xe]
.L305:
	ldrb	r0, [r2]
	cmp	r0, #0x2
	bne	.L306	@cond_branch
	ldr	r1, .L307+0x4
	mov	r0, #0x1
	strh	r0, [r1, #0xe]
.L306:
	add	r0, r3, #0
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L308:
	.align	2, 0
.L307:
	.word	gAnimMoveTurn
	.word	gBattleAnimArgs
.Lfe25:
	.size	 sub_8114960,.Lfe25-sub_8114960
.text
	.align	2, 0

