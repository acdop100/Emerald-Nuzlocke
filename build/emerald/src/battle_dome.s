@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gUnknown_0203CD70
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gUnknown_0203CD70,object
	.size	 gUnknown_0203CD70,4
gUnknown_0203CD70:
	.word	0x0
	.align	2, 0
	.type	 gUnknown_0203CD74,object
	.size	 gUnknown_0203CD74,4
gUnknown_0203CD74:
	.word	0x0
	.align	2, 0
	.type	 sBattleDomeStruct,object
	.size	 sBattleDomeStruct,4
sBattleDomeStruct:
	.word	0x0
	.align	2, 0
	.type	 sTilemapBuffer,object
	.size	 sTilemapBuffer,4
sTilemapBuffer:
	.word	0x0
	.section .rodata
	.type	 sMovePointsForDomeTrainers,object
	.size	 sMovePointsForDomeTrainers,5680
sMovePointsForDomeTrainers:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.type	 gUnknown_0860C988,object
gUnknown_0860C988:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x7
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 gUnknown_0860C988,496
	.type	 sUnusedArray,object
sUnusedArray:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0xfd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xfd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xfd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xfd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xfd
	.byte	0xfe
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xfe
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xfe
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xfe
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xfe
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 sUnusedArray,121
	.type	 sTourneyTreeCursorMovementMap,object
sTourneyTreeCursorMovementMap:
	.byte	0x7
	.byte	0x1
	.byte	0x8
	.byte	0x10
	.byte	0x7
	.byte	0x1
	.byte	0x8
	.byte	0x10
	.byte	0x7
	.byte	0x1
	.byte	0x8
	.byte	0x10
	.byte	0x7
	.byte	0x1
	.byte	0x8
	.byte	0x10
	.byte	0x7
	.byte	0x1
	.byte	0x8
	.byte	0x10
	.byte	0x0
	.byte	0x2
	.byte	0x9
	.byte	0x10
	.byte	0x0
	.byte	0x2
	.byte	0x9
	.byte	0x10
	.byte	0x0
	.byte	0x2
	.byte	0x9
	.byte	0x10
	.byte	0x0
	.byte	0x2
	.byte	0x9
	.byte	0x10
	.byte	0x0
	.byte	0x2
	.byte	0x9
	.byte	0x10
	.byte	0x1
	.byte	0x3
	.byte	0xa
	.byte	0x11
	.byte	0x1
	.byte	0x3
	.byte	0xa
	.byte	0x11
	.byte	0x1
	.byte	0x3
	.byte	0xa
	.byte	0x11
	.byte	0x1
	.byte	0x3
	.byte	0xa
	.byte	0x11
	.byte	0x1
	.byte	0x3
	.byte	0xa
	.byte	0x11
	.byte	0x2
	.byte	0x4
	.byte	0xb
	.byte	0x11
	.byte	0x2
	.byte	0x4
	.byte	0xb
	.byte	0x11
	.byte	0x2
	.byte	0x4
	.byte	0xb
	.byte	0x11
	.byte	0x2
	.byte	0x4
	.byte	0xb
	.byte	0x11
	.byte	0x2
	.byte	0x4
	.byte	0xb
	.byte	0x11
	.byte	0x3
	.byte	0x5
	.byte	0xc
	.byte	0x12
	.byte	0x3
	.byte	0x5
	.byte	0xc
	.byte	0x12
	.byte	0x3
	.byte	0x5
	.byte	0xc
	.byte	0x12
	.byte	0x3
	.byte	0x5
	.byte	0xc
	.byte	0x12
	.byte	0x3
	.byte	0x5
	.byte	0xc
	.byte	0x12
	.byte	0x4
	.byte	0x6
	.byte	0xd
	.byte	0x12
	.byte	0x4
	.byte	0x6
	.byte	0xd
	.byte	0x12
	.byte	0x4
	.byte	0x6
	.byte	0xd
	.byte	0x12
	.byte	0x4
	.byte	0x6
	.byte	0xd
	.byte	0x12
	.byte	0x4
	.byte	0x6
	.byte	0xd
	.byte	0x12
	.byte	0x5
	.byte	0x7
	.byte	0xe
	.byte	0x13
	.byte	0x5
	.byte	0x7
	.byte	0xe
	.byte	0x13
	.byte	0x5
	.byte	0x7
	.byte	0xe
	.byte	0x13
	.byte	0x5
	.byte	0x7
	.byte	0xe
	.byte	0x13
	.byte	0x5
	.byte	0x7
	.byte	0xe
	.byte	0x13
	.byte	0x6
	.byte	0x0
	.byte	0xf
	.byte	0x13
	.byte	0x6
	.byte	0x0
	.byte	0xf
	.byte	0x13
	.byte	0x6
	.byte	0x0
	.byte	0xf
	.byte	0x13
	.byte	0x6
	.byte	0x0
	.byte	0xf
	.byte	0x13
	.byte	0x6
	.byte	0x0
	.byte	0xf
	.byte	0x13
	.byte	0x1f
	.byte	0x9
	.byte	0x14
	.byte	0x1f
	.byte	0x1f
	.byte	0x9
	.byte	0x14
	.byte	0x1f
	.byte	0x1f
	.byte	0x9
	.byte	0x14
	.byte	0x1f
	.byte	0x1f
	.byte	0x9
	.byte	0x14
	.byte	0x1f
	.byte	0x1f
	.byte	0x9
	.byte	0x14
	.byte	0x1f
	.byte	0x8
	.byte	0xa
	.byte	0x14
	.byte	0x1
	.byte	0x8
	.byte	0xa
	.byte	0x14
	.byte	0x1
	.byte	0x8
	.byte	0xa
	.byte	0x14
	.byte	0x1
	.byte	0x8
	.byte	0xa
	.byte	0x14
	.byte	0x1
	.byte	0x8
	.byte	0xa
	.byte	0x14
	.byte	0x1
	.byte	0x9
	.byte	0xb
	.byte	0x15
	.byte	0x2
	.byte	0x9
	.byte	0xb
	.byte	0x15
	.byte	0x2
	.byte	0x9
	.byte	0xb
	.byte	0x15
	.byte	0x2
	.byte	0x9
	.byte	0xb
	.byte	0x15
	.byte	0x2
	.byte	0x9
	.byte	0xb
	.byte	0x15
	.byte	0x2
	.byte	0xa
	.byte	0xc
	.byte	0x15
	.byte	0x3
	.byte	0xa
	.byte	0xc
	.byte	0x15
	.byte	0x3
	.byte	0xa
	.byte	0xc
	.byte	0x15
	.byte	0x3
	.byte	0xa
	.byte	0xc
	.byte	0x15
	.byte	0x3
	.byte	0xa
	.byte	0xc
	.byte	0x15
	.byte	0x3
	.byte	0xb
	.byte	0xd
	.byte	0x16
	.byte	0x4
	.byte	0xb
	.byte	0xd
	.byte	0x16
	.byte	0x4
	.byte	0xb
	.byte	0xd
	.byte	0x16
	.byte	0x4
	.byte	0xb
	.byte	0xd
	.byte	0x16
	.byte	0x4
	.byte	0xb
	.byte	0xd
	.byte	0x16
	.byte	0x4
	.byte	0xc
	.byte	0xe
	.byte	0x16
	.byte	0x5
	.byte	0xc
	.byte	0xe
	.byte	0x16
	.byte	0x5
	.byte	0xc
	.byte	0xe
	.byte	0x16
	.byte	0x5
	.byte	0xc
	.byte	0xe
	.byte	0x16
	.byte	0x5
	.byte	0xc
	.byte	0xe
	.byte	0x16
	.byte	0x5
	.byte	0xd
	.byte	0xf
	.byte	0x17
	.byte	0x6
	.byte	0xd
	.byte	0xf
	.byte	0x17
	.byte	0x6
	.byte	0xd
	.byte	0xf
	.byte	0x17
	.byte	0x6
	.byte	0xd
	.byte	0xf
	.byte	0x17
	.byte	0x6
	.byte	0xd
	.byte	0xf
	.byte	0x17
	.byte	0x6
	.byte	0xe
	.byte	0x1f
	.byte	0x17
	.byte	0x7
	.byte	0xe
	.byte	0x1f
	.byte	0x17
	.byte	0x7
	.byte	0xe
	.byte	0x1f
	.byte	0x17
	.byte	0x7
	.byte	0xe
	.byte	0x1f
	.byte	0x17
	.byte	0x7
	.byte	0xe
	.byte	0x1f
	.byte	0x17
	.byte	0x7
	.byte	0x13
	.byte	0x11
	.byte	0x0
	.byte	0x14
	.byte	0x13
	.byte	0x11
	.byte	0x0
	.byte	0x18
	.byte	0x13
	.byte	0x11
	.byte	0x0
	.byte	0x18
	.byte	0x13
	.byte	0x11
	.byte	0x0
	.byte	0x18
	.byte	0x13
	.byte	0x11
	.byte	0x0
	.byte	0x18
	.byte	0x10
	.byte	0x12
	.byte	0x2
	.byte	0x15
	.byte	0x10
	.byte	0x12
	.byte	0x2
	.byte	0x18
	.byte	0x10
	.byte	0x12
	.byte	0x2
	.byte	0x18
	.byte	0x10
	.byte	0x12
	.byte	0x2
	.byte	0x18
	.byte	0x10
	.byte	0x12
	.byte	0x2
	.byte	0x18
	.byte	0x11
	.byte	0x13
	.byte	0x4
	.byte	0x16
	.byte	0x11
	.byte	0x13
	.byte	0x4
	.byte	0x19
	.byte	0x11
	.byte	0x13
	.byte	0x4
	.byte	0x19
	.byte	0x11
	.byte	0x13
	.byte	0x4
	.byte	0x19
	.byte	0x11
	.byte	0x13
	.byte	0x4
	.byte	0x19
	.byte	0x12
	.byte	0x10
	.byte	0x6
	.byte	0x17
	.byte	0x12
	.byte	0x10
	.byte	0x6
	.byte	0x19
	.byte	0x12
	.byte	0x10
	.byte	0x6
	.byte	0x19
	.byte	0x12
	.byte	0x10
	.byte	0x6
	.byte	0x19
	.byte	0x12
	.byte	0x10
	.byte	0x6
	.byte	0x19
	.byte	0x17
	.byte	0x15
	.byte	0x10
	.byte	0x8
	.byte	0x17
	.byte	0x15
	.byte	0x1a
	.byte	0x8
	.byte	0x17
	.byte	0x15
	.byte	0x1a
	.byte	0x8
	.byte	0x17
	.byte	0x15
	.byte	0x1a
	.byte	0x8
	.byte	0x17
	.byte	0x15
	.byte	0x1a
	.byte	0x8
	.byte	0x14
	.byte	0x16
	.byte	0x11
	.byte	0xa
	.byte	0x14
	.byte	0x16
	.byte	0x1a
	.byte	0xa
	.byte	0x14
	.byte	0x16
	.byte	0x1a
	.byte	0xa
	.byte	0x14
	.byte	0x16
	.byte	0x1a
	.byte	0xa
	.byte	0x14
	.byte	0x16
	.byte	0x1a
	.byte	0xa
	.byte	0x15
	.byte	0x17
	.byte	0x12
	.byte	0xc
	.byte	0x15
	.byte	0x17
	.byte	0x1b
	.byte	0xc
	.byte	0x15
	.byte	0x17
	.byte	0x1b
	.byte	0xc
	.byte	0x15
	.byte	0x17
	.byte	0x1b
	.byte	0xc
	.byte	0x15
	.byte	0x17
	.byte	0x1b
	.byte	0xc
	.byte	0x16
	.byte	0x14
	.byte	0x13
	.byte	0xe
	.byte	0x16
	.byte	0x14
	.byte	0x1b
	.byte	0xe
	.byte	0x16
	.byte	0x14
	.byte	0x1b
	.byte	0xe
	.byte	0x16
	.byte	0x14
	.byte	0x1b
	.byte	0xe
	.byte	0x16
	.byte	0x14
	.byte	0x1b
	.byte	0xe
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x19
	.byte	0x19
	.byte	0x10
	.byte	0x1a
	.byte	0x19
	.byte	0x19
	.byte	0x10
	.byte	0x1c
	.byte	0x19
	.byte	0x19
	.byte	0x10
	.byte	0x1c
	.byte	0x19
	.byte	0x19
	.byte	0x10
	.byte	0x1c
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x18
	.byte	0x18
	.byte	0x12
	.byte	0x1b
	.byte	0x18
	.byte	0x18
	.byte	0x12
	.byte	0x1c
	.byte	0x18
	.byte	0x18
	.byte	0x12
	.byte	0x1c
	.byte	0x18
	.byte	0x18
	.byte	0x12
	.byte	0x1c
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x1b
	.byte	0x1b
	.byte	0x18
	.byte	0x14
	.byte	0x1b
	.byte	0x1b
	.byte	0x1d
	.byte	0x14
	.byte	0x1b
	.byte	0x1b
	.byte	0x1d
	.byte	0x14
	.byte	0x1b
	.byte	0x1b
	.byte	0x1d
	.byte	0x14
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x1a
	.byte	0x1a
	.byte	0x19
	.byte	0x16
	.byte	0x1a
	.byte	0x1a
	.byte	0x1d
	.byte	0x16
	.byte	0x1a
	.byte	0x1a
	.byte	0x1d
	.byte	0x16
	.byte	0x1a
	.byte	0x1a
	.byte	0x1d
	.byte	0x16
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x18
	.byte	0x1d
	.byte	0xff
	.byte	0xff
	.byte	0x18
	.byte	0x1e
	.byte	0xff
	.byte	0xff
	.byte	0x18
	.byte	0x1e
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x1c
	.byte	0x1a
	.byte	0xff
	.byte	0xff
	.byte	0x1e
	.byte	0x1a
	.byte	0xff
	.byte	0xff
	.byte	0x1e
	.byte	0x1a
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x1c
	.byte	0x1d
	.byte	0xff
	.byte	0xff
	.byte	0x1c
	.byte	0x1d
	.byte	0xf
	.byte	0x8
	.byte	0x8
	.byte	0x0
	.byte	0xf
	.byte	0x8
	.byte	0x8
	.byte	0x0
	.byte	0xf
	.byte	0x8
	.byte	0x8
	.byte	0x0
	.byte	0xf
	.byte	0x8
	.byte	0x8
	.byte	0x0
	.byte	0xf
	.byte	0x8
	.byte	0x8
	.byte	0x0
	.size	 sTourneyTreeCursorMovementMap,640
	.align	2, 0
	.type	 gUnknown_0860CE74,object
	.size	 gUnknown_0860CE74,16
gUnknown_0860CE74:
	.byte	0xc0
	.byte	0x1
	.byte	0x0
	.space	1
	.byte	0xd5
	.byte	0x11
	.byte	0x0
	.space	1
	.byte	0xea
	.byte	0x21
	.byte	0x0
	.space	1
	.byte	0xfb
	.byte	0x21
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 gUnknown_0860CE84,object
	.size	 gUnknown_0860CE84,16
gUnknown_0860CE84:
	.byte	0x40
	.byte	0x7
	.byte	0x0
	.space	1
	.byte	0x85
	.byte	0x7
	.byte	0x0
	.space	1
	.byte	0xca
	.byte	0x17
	.byte	0x0
	.space	1
	.byte	0x7b
	.byte	0x10
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 gUnknown_0860CE94,object
gUnknown_0860CE94:
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x8
	.byte	0x10
	.byte	0xf
	.short	0x10
	.byte	0x0
	.byte	0x16
	.byte	0x3
	.byte	0x8
	.byte	0x10
	.byte	0xf
	.short	0x90
	.byte	0x0
	.byte	0x8
	.byte	0x1
	.byte	0xe
	.byte	0x2
	.byte	0xf
	.short	0x110
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 gUnknown_0860CE94,32
	.align	2, 0
	.type	 gUnknown_0860CEB4,object
gUnknown_0860CEB4:
	.byte	0x0
	.byte	0x2
	.byte	0x2
	.byte	0x1a
	.byte	0x2
	.byte	0xf
	.short	0x1
	.byte	0x0
	.byte	0x10
	.byte	0x5
	.byte	0x8
	.byte	0x2
	.byte	0xf
	.short	0x35
	.byte	0x0
	.byte	0x13
	.byte	0x7
	.byte	0x9
	.byte	0x3
	.byte	0xf
	.short	0x45
	.byte	0x0
	.byte	0x10
	.byte	0xa
	.byte	0x8
	.byte	0x2
	.byte	0xf
	.short	0x60
	.byte	0x0
	.byte	0x2
	.byte	0xc
	.byte	0x1a
	.byte	0x7
	.byte	0xf
	.short	0x70
	.byte	0x0
	.byte	0x5
	.byte	0x2
	.byte	0x17
	.byte	0x2
	.byte	0xf
	.short	0x126
	.byte	0x0
	.byte	0x2
	.byte	0x5
	.byte	0x8
	.byte	0x2
	.byte	0xf
	.short	0x154
	.byte	0x0
	.byte	0x14
	.byte	0x5
	.byte	0x8
	.byte	0x2
	.byte	0xf
	.short	0x164
	.byte	0x0
	.byte	0x2
	.byte	0x10
	.byte	0x1a
	.byte	0x2
	.byte	0xf
	.short	0x174
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x1a
	.byte	0x2
	.byte	0xf
	.short	0x1
	.byte	0x1
	.byte	0x10
	.byte	0x5
	.byte	0x8
	.byte	0x2
	.byte	0xf
	.short	0x35
	.byte	0x1
	.byte	0x13
	.byte	0x7
	.byte	0x9
	.byte	0x3
	.byte	0xf
	.short	0x45
	.byte	0x1
	.byte	0x10
	.byte	0xa
	.byte	0x8
	.byte	0x2
	.byte	0xf
	.short	0x60
	.byte	0x1
	.byte	0x2
	.byte	0xc
	.byte	0x1a
	.byte	0x7
	.byte	0xf
	.short	0x70
	.byte	0x1
	.byte	0x5
	.byte	0x2
	.byte	0x17
	.byte	0x2
	.byte	0xf
	.short	0x126
	.byte	0x1
	.byte	0x2
	.byte	0x5
	.byte	0x8
	.byte	0x2
	.byte	0xf
	.short	0x154
	.byte	0x1
	.byte	0x14
	.byte	0x5
	.byte	0x8
	.byte	0x2
	.byte	0xf
	.short	0x164
	.byte	0x1
	.byte	0x2
	.byte	0x10
	.byte	0x1a
	.byte	0x2
	.byte	0xf
	.short	0x174
	.size	 gUnknown_0860CEB4,144
	.align	2, 0
	.type	 sTourneyTreeScanlineEffectParams,object
	.size	 sTourneyTreeScanlineEffectParams,12
sTourneyTreeScanlineEffectParams:
	.word	0x400000e
	.word	-0x5d9fffff
	.byte	0x1
	.space	3
	.align	2, 0
	.type	 sDomeOptionsSpriteSheet,object
sDomeOptionsSpriteSheet:
	.word	gBattleFrontierGfx_DomeOptions
	.short	0x600
	.short	0x0
	.space	8
	.size	 sDomeOptionsSpriteSheet,16
	.align	2, 0
	.type	 gUnknown_0860CF60,object
gUnknown_0860CF60:
	.word	gUnknown_08D85444
	.short	0x0
	.space	2
	.space	8
	.size	 gUnknown_0860CF60,16
	.align	2, 0
	.type	 gUnknown_0860CF70,object
	.size	 gUnknown_0860CF70,8
gUnknown_0860CF70:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 gUnknown_0860CF78,object
	.size	 gUnknown_0860CF78,8
gUnknown_0860CF78:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x10
	.short	0x0
	.align	2, 0
	.type	 gUnknown_0860CF80,object
	.size	 gUnknown_0860CF80,8
gUnknown_0860CF80:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x20
	.short	0x0
	.align	2, 0
	.type	 gUnknown_0860CF88,object
	.size	 gUnknown_0860CF88,8
gUnknown_0860CF88:
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x20
	.short	0x0
	.align	2, 0
	.type	 gUnknown_0860CF90,object
gUnknown_0860CF90:
	.short	0x14
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0860CF90,8
	.align	2, 0
	.type	 gUnknown_0860CF98,object
gUnknown_0860CF98:
	.short	0x18
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0860CF98,8
	.align	2, 0
	.type	 gUnknown_0860CFA0,object
gUnknown_0860CFA0:
	.word	gUnknown_0860CF90
	.word	gUnknown_0860CF98
	.size	 gUnknown_0860CFA0,8
	.align	2, 0
	.type	 gUnknown_0860CFA8,object
	.size	 gUnknown_0860CFA8,24
gUnknown_0860CFA8:
	.short	0x0
	.short	0xffff
	.word	gUnknown_0860CF70
	.word	gUnknown_0860CFA0
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 gUnknown_0860CFC0,object
gUnknown_0860CFC0:
	.short	0x8
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0860CFC0,8
	.align	2, 0
	.type	 gUnknown_0860CFC8,object
gUnknown_0860CFC8:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0860CFC8,8
	.align	2, 0
	.type	 gUnknown_0860CFD0,object
gUnknown_0860CFD0:
	.word	gUnknown_0860CFC0
	.word	gUnknown_0860CFC8
	.size	 gUnknown_0860CFD0,8
	.align	2, 0
	.type	 gUnknown_0860CFD8,object
	.size	 gUnknown_0860CFD8,24
gUnknown_0860CFD8:
	.short	0x0
	.short	0xffff
	.word	gUnknown_0860CF78
	.word	gUnknown_0860CFD0
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 gUnknown_0860CFF0,object
gUnknown_0860CFF0:
	.short	0x28
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0860CFF0,8
	.align	2, 0
	.type	 gUnknown_0860CFF8,object
gUnknown_0860CFF8:
	.short	0x20
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0860CFF8,8
	.align	2, 0
	.type	 gUnknown_0860D000,object
gUnknown_0860D000:
	.word	gUnknown_0860CFF0
	.word	gUnknown_0860CFF8
	.size	 gUnknown_0860D000,8
	.align	2, 0
	.type	 gUnknown_0860D008,object
	.size	 gUnknown_0860D008,24
gUnknown_0860D008:
	.short	0x0
	.short	0xffff
	.word	gUnknown_0860CF78
	.word	gUnknown_0860D000
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 gUnknown_0860D020,object
gUnknown_0860D020:
	.short	0x12
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0860D020,8
	.align	2, 0
	.type	 gUnknown_0860D028,object
gUnknown_0860D028:
	.short	0x12
	.byte	0x81
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0860D028,8
	.align	2, 0
	.type	 gUnknown_0860D030,object
gUnknown_0860D030:
	.short	0x10
	.byte	0x41
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0860D030,8
	.align	2, 0
	.type	 gUnknown_0860D038,object
gUnknown_0860D038:
	.short	0x10
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0860D038,8
	.align	2, 0
	.type	 gUnknown_0860D040,object
gUnknown_0860D040:
	.word	gUnknown_0860D020
	.word	gUnknown_0860D028
	.size	 gUnknown_0860D040,8
	.align	2, 0
	.type	 gUnknown_0860D048,object
gUnknown_0860D048:
	.word	gUnknown_0860D030
	.word	gUnknown_0860D038
	.size	 gUnknown_0860D048,8
	.align	2, 0
	.type	 gUnknown_0860D050,object
	.size	 gUnknown_0860D050,24
gUnknown_0860D050:
	.short	0x0
	.short	0xffff
	.word	gUnknown_0860CF88
	.word	gUnknown_0860D048
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8190B40
	.align	2, 0
	.type	 gUnknown_0860D068,object
	.size	 gUnknown_0860D068,24
gUnknown_0860D068:
	.short	0x0
	.short	0xffff
	.word	gUnknown_0860CF80
	.word	gUnknown_0860D040
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8190C6C
	.type	 sTourneyTreeTrainerIds,object
sTourneyTreeTrainerIds:
	.byte	0x0
	.byte	0x8
	.byte	0xc
	.byte	0x4
	.byte	0x7
	.byte	0xf
	.byte	0xb
	.byte	0x3
	.byte	0x2
	.byte	0xa
	.byte	0xe
	.byte	0x6
	.byte	0x5
	.byte	0xd
	.byte	0x9
	.byte	0x1
	.size	 sTourneyTreeTrainerIds,16
	.align	2, 0
	.type	 sBattleDomeFunctions,object
sBattleDomeFunctions:
	.word	InitDomeChallenge
	.word	GetDomeData
	.word	SetDomeData
	.word	BufferDomeRoundText
	.word	BufferDomeOpponentName
	.word	InitDomeOpponentParty
	.word	ShowDomeOpponentInfo
	.word	ShowDomeTourneyTree
	.word	ShowPreviousDomeResultsTourneyTree
	.word	SetDomeOpponentId
	.word	SetDomeOpponentGraphicsId
	.word	ShowNonInteractiveDomeTourneyTree
	.word	ResolveDomeRoundWinners
	.word	sub_81902F8
	.word	UpdateDomeStreaks
	.word	InitDomeFacilityTrainersAndMons
	.word	RestoreDomePlayerParty
	.word	RestoreDomePlayerPartyHeldItems
	.word	ReduceDomePlayerPartyTo3Mons
	.word	GetPlayerSeededBeforeOpponent
	.word	BufferLastDomeWinnerName
	.word	sub_8194F58
	.word	InitDomeTrainers
	.size	 sBattleDomeFunctions,92
	.align	2, 0
	.type	 gUnknown_0860D0EC,object
gUnknown_0860D0EC:
	.word	0x4
	.word	0x8
	.word	0x100000
	.word	0x200000
	.size	 gUnknown_0860D0EC,16
	.align	2, 0
	.type	 gUnknown_0860D0FC,object
gUnknown_0860D0FC:
	.word	-0x5
	.word	-0x9
	.word	-0x100001
	.word	-0x200001
	.size	 gUnknown_0860D0FC,16
	.type	 sIdToOpponentId,object
	.size	 sIdToOpponentId,64
sIdToOpponentId:
	.byte	0x8
	.byte	0x0
	.byte	0x4
	.byte	0x8
	.byte	0x9
	.byte	0xc
	.byte	0x8
	.byte	0x0
	.byte	0xa
	.byte	0x8
	.byte	0xc
	.byte	0x0
	.byte	0xb
	.byte	0x4
	.byte	0x0
	.byte	0x8
	.byte	0xc
	.byte	0x0
	.byte	0x4
	.byte	0x8
	.byte	0xd
	.byte	0xc
	.byte	0x8
	.byte	0x0
	.byte	0xe
	.byte	0x8
	.byte	0xc
	.byte	0x0
	.byte	0xf
	.byte	0x4
	.byte	0x0
	.byte	0x8
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.byte	0x8
	.byte	0x1
	.byte	0xc
	.byte	0x8
	.byte	0x0
	.byte	0x2
	.byte	0x8
	.byte	0xc
	.byte	0x0
	.byte	0x3
	.byte	0x4
	.byte	0x0
	.byte	0x8
	.byte	0x4
	.byte	0x0
	.byte	0x4
	.byte	0x8
	.byte	0x5
	.byte	0xc
	.byte	0x8
	.byte	0x0
	.byte	0x6
	.byte	0x8
	.byte	0xc
	.byte	0x0
	.byte	0x7
	.byte	0x4
	.byte	0x0
	.byte	0x8
	.type	 gUnknown_0860D14C,object
gUnknown_0860D14C:
	.byte	0x0
	.byte	0x8
	.byte	0x4
	.byte	0xc
	.byte	0x7
	.byte	0xf
	.byte	0x3
	.byte	0xb
	.byte	0x2
	.byte	0xa
	.byte	0x6
	.byte	0xe
	.byte	0x5
	.byte	0xd
	.byte	0x1
	.byte	0x9
	.size	 gUnknown_0860D14C,16
	.type	 gUnknown_0860D15C,object
gUnknown_0860D15C:
	.byte	0x0
	.byte	0x8
	.byte	0xc
	.byte	0xe
	.byte	0x0
	.byte	0x8
	.byte	0xc
	.byte	0xe
	.byte	0x1
	.byte	0x8
	.byte	0xc
	.byte	0xe
	.byte	0x1
	.byte	0x8
	.byte	0xc
	.byte	0xe
	.byte	0x2
	.byte	0x9
	.byte	0xc
	.byte	0xe
	.byte	0x2
	.byte	0x9
	.byte	0xc
	.byte	0xe
	.byte	0x3
	.byte	0x9
	.byte	0xc
	.byte	0xe
	.byte	0x3
	.byte	0x9
	.byte	0xc
	.byte	0xe
	.byte	0x4
	.byte	0xa
	.byte	0xd
	.byte	0xe
	.byte	0x4
	.byte	0xa
	.byte	0xd
	.byte	0xe
	.byte	0x5
	.byte	0xa
	.byte	0xd
	.byte	0xe
	.byte	0x5
	.byte	0xa
	.byte	0xd
	.byte	0xe
	.byte	0x6
	.byte	0xb
	.byte	0xd
	.byte	0xe
	.byte	0x6
	.byte	0xb
	.byte	0xd
	.byte	0xe
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0xe
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0xe
	.size	 gUnknown_0860D15C,64
	.type	 gUnknown_0860D19C,object
gUnknown_0860D19C:
	.byte	0x17
	.byte	0x1b
	.byte	0x1d
	.byte	0x1e
	.size	 gUnknown_0860D19C,4
	.type	 gUnknown_0860D1A0,object
gUnknown_0860D1A0:
	.byte	0x10
	.byte	0x18
	.byte	0x1c
	.byte	0x1e
	.byte	0x11
	.byte	0x18
	.byte	0x1c
	.byte	0x1e
	.byte	0x12
	.byte	0x19
	.byte	0x1c
	.byte	0x1e
	.byte	0x13
	.byte	0x19
	.byte	0x1c
	.byte	0x1e
	.byte	0x14
	.byte	0x1a
	.byte	0x1d
	.byte	0x1e
	.byte	0x15
	.byte	0x1a
	.byte	0x1d
	.byte	0x1e
	.byte	0x16
	.byte	0x1b
	.byte	0x1d
	.byte	0x1e
	.byte	0x17
	.byte	0x1b
	.byte	0x1d
	.byte	0x1e
	.size	 gUnknown_0860D1A0,32
	.type	 gUnknown_0860D1C0,object
gUnknown_0860D1C0:
	.byte	0x0
	.byte	0xf
	.byte	0x8
	.byte	0x7
	.byte	0x3
	.byte	0xc
	.byte	0xb
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x9
	.byte	0x6
	.byte	0x2
	.byte	0xd
	.byte	0xa
	.byte	0x5
	.size	 gUnknown_0860D1C0,16
	.align	2, 0
	.type	 sBattleDomePotentialTexts,object
sBattleDomePotentialTexts:
	.word	gBattleDomeOpponentPotentialText1
	.word	gBattleDomeOpponentPotentialText2
	.word	gBattleDomeOpponentPotentialText3
	.word	gBattleDomeOpponentPotentialText4
	.word	gBattleDomeOpponentPotentialText5
	.word	gBattleDomeOpponentPotentialText6
	.word	gBattleDomeOpponentPotentialText7
	.word	gBattleDomeOpponentPotentialText8
	.word	gBattleDomeOpponentPotentialText9
	.word	gBattleDomeOpponentPotentialText10
	.word	gBattleDomeOpponentPotentialText11
	.word	gBattleDomeOpponentPotentialText12
	.word	gBattleDomeOpponentPotentialText13
	.word	gBattleDomeOpponentPotentialText14
	.word	gBattleDomeOpponentPotentialText15
	.word	gBattleDomeOpponentPotentialText16
	.word	gBattleDomeOpponentPotentialText17
	.size	 sBattleDomePotentialTexts,68
	.align	2, 0
	.type	 sBattleDomeOpponentStyleTexts,object
sBattleDomeOpponentStyleTexts:
	.word	gBattleDomeOpponentStyleText1
	.word	gBattleDomeOpponentStyleText2
	.word	gBattleDomeOpponentStyleText3
	.word	gBattleDomeOpponentStyleText4
	.word	gBattleDomeOpponentStyleText5
	.word	gBattleDomeOpponentStyleText6
	.word	gBattleDomeOpponentStyleText7
	.word	gBattleDomeOpponentStyleText8
	.word	gBattleDomeOpponentStyleText9
	.word	gBattleDomeOpponentStyleText10
	.word	gBattleDomeOpponentStyleText11
	.word	gBattleDomeOpponentStyleText12
	.word	gBattleDomeOpponentStyleText13
	.word	gBattleDomeOpponentStyleText14
	.word	gBattleDomeOpponentStyleText15
	.word	gBattleDomeOpponentStyleText16
	.word	gBattleDomeOpponentStyleText17
	.word	gBattleDomeOpponentStyleText18
	.word	gBattleDomeOpponentStyleText19
	.word	gBattleDomeOpponentStyleText20
	.word	gBattleDomeOpponentStyleText21
	.word	gBattleDomeOpponentStyleText22
	.word	gBattleDomeOpponentStyleText23
	.word	gBattleDomeOpponentStyleText24
	.word	gBattleDomeOpponentStyleText25
	.word	gBattleDomeOpponentStyleText26
	.word	gBattleDomeOpponentStyleText27
	.word	gBattleDomeOpponentStyleText28
	.word	gBattleDomeOpponentStyleTextUnused1
	.word	gBattleDomeOpponentStyleTextUnused2
	.word	gBattleDomeOpponentStyleTextUnused3
	.word	gBattleDomeOpponentStyleTextUnused4
	.size	 sBattleDomeOpponentStyleTexts,128
	.align	2, 0
	.type	 sBattleDomeOpponentStatsTexts,object
sBattleDomeOpponentStatsTexts:
	.word	gBattleDomeOpponentStatsText1
	.word	gBattleDomeOpponentStatsText2
	.word	gBattleDomeOpponentStatsText3
	.word	gBattleDomeOpponentStatsText4
	.word	gBattleDomeOpponentStatsText5
	.word	gBattleDomeOpponentStatsText6
	.word	gBattleDomeOpponentStatsText7
	.word	gBattleDomeOpponentStatsText8
	.word	gBattleDomeOpponentStatsText9
	.word	gBattleDomeOpponentStatsText10
	.word	gBattleDomeOpponentStatsText11
	.word	gBattleDomeOpponentStatsText12
	.word	gBattleDomeOpponentStatsText13
	.word	gBattleDomeOpponentStatsText14
	.word	gBattleDomeOpponentStatsText15
	.word	gBattleDomeOpponentStatsText16
	.word	gBattleDomeOpponentStatsText17
	.word	gBattleDomeOpponentStatsText18
	.word	gBattleDomeOpponentStatsText19
	.word	gBattleDomeOpponentStatsText20
	.word	gBattleDomeOpponentStatsText21
	.word	gBattleDomeOpponentStatsText22
	.word	gBattleDomeOpponentStatsText23
	.word	gBattleDomeOpponentStatsText24
	.word	gBattleDomeOpponentStatsText25
	.word	gBattleDomeOpponentStatsText26
	.word	gBattleDomeOpponentStatsText27
	.word	gBattleDomeOpponentStatsText28
	.word	gBattleDomeOpponentStatsText29
	.word	gBattleDomeOpponentStatsText30
	.word	gBattleDomeOpponentStatsText31
	.word	gBattleDomeOpponentStatsText32
	.word	gBattleDomeOpponentStatsText33
	.word	gBattleDomeOpponentStatsText34
	.word	gBattleDomeOpponentStatsText35
	.word	gBattleDomeOpponentStatsText36
	.word	gBattleDomeOpponentStatsText37
	.word	gBattleDomeOpponentStatsText38
	.word	gBattleDomeOpponentStatsText39
	.word	gBattleDomeOpponentStatsText40
	.word	gBattleDomeOpponentStatsText41
	.word	gBattleDomeOpponentStatsText42
	.word	gBattleDomeOpponentStatsText43
	.size	 sBattleDomeOpponentStatsTexts,172
	.type	 sInfoTrainerMonX,object
sInfoTrainerMonX:
	.byte	0x68
	.byte	0x88
	.byte	0x68
	.size	 sInfoTrainerMonX,3
	.type	 sInfoTrainerMonY,object
sInfoTrainerMonY:
	.byte	0x26
	.byte	0x3e
	.byte	0x4e
	.size	 sInfoTrainerMonY,3
	.type	 gUnknown_0860D346,object
gUnknown_0860D346:
	.byte	0x0
	.byte	0x4
	.byte	0x0
	.size	 gUnknown_0860D346,3
	.type	 gUnknown_0860D349,object
gUnknown_0860D349:
	.byte	0x0
	.byte	0x5
	.byte	0x9
	.byte	0xc
	.byte	0xe
	.byte	0x0
	.byte	0x0
	.size	 gUnknown_0860D349,7
	.align	2, 0
	.type	 sBattleDomeMatchNumberTexts,object
sBattleDomeMatchNumberTexts:
	.word	gBattleDomeMatchNumberText1
	.word	gBattleDomeMatchNumberText2
	.word	gBattleDomeMatchNumberText3
	.word	gBattleDomeMatchNumberText4
	.word	gBattleDomeMatchNumberText5
	.word	gBattleDomeMatchNumberText6
	.word	gBattleDomeMatchNumberText7
	.word	gBattleDomeMatchNumberText8
	.word	gBattleDomeMatchNumberText9
	.word	gBattleDomeMatchNumberText10
	.word	gBattleDomeMatchNumberText11
	.word	gBattleDomeMatchNumberText12
	.word	gBattleDomeMatchNumberText13
	.word	gBattleDomeMatchNumberText14
	.word	gBattleDomeMatchNumberText15
	.size	 sBattleDomeMatchNumberTexts,60
	.align	2, 0
	.type	 sBattleDomeWinTexts,object
sBattleDomeWinTexts:
	.word	gBattleDomeWinText1
	.word	gBattleDomeWinText2
	.word	gBattleDomeWinText3
	.word	gBattleDomeWinText4
	.word	gBattleDomeWinText5
	.word	gBattleDomeWinText6
	.word	gBattleDomeWinText7
	.size	 sBattleDomeWinTexts,28
	.type	 sFirstTrainerMonX,object
sFirstTrainerMonX:
	.byte	0x60
	.byte	0x60
	.byte	0x60
	.size	 sFirstTrainerMonX,3
	.type	 sFirstTrainerMonY,object
sFirstTrainerMonY:
	.byte	0x38
	.byte	0x50
	.byte	0x68
	.size	 sFirstTrainerMonY,3
	.type	 sSecondTrainerMonX,object
sSecondTrainerMonX:
	.byte	0x90
	.byte	0x90
	.byte	0x90
	.size	 sSecondTrainerMonX,3
	.type	 sSecondTrainerMonY,object
sSecondTrainerMonY:
	.byte	0x38
	.byte	0x50
	.byte	0x68
	.size	 sSecondTrainerMonY,3
	.type	 gUnknown_0860D3B4,object
gUnknown_0860D3B4:
	.byte	0x0
	.byte	0x8
	.byte	0xc
	.byte	0x4
	.byte	0x7
	.byte	0xf
	.byte	0xb
	.byte	0x3
	.byte	0x2
	.byte	0xa
	.byte	0xe
	.byte	0x6
	.byte	0x5
	.byte	0xd
	.byte	0x9
	.byte	0x1
	.size	 gUnknown_0860D3B4,16
	.type	 gUnknown_0860D3C4,object
gUnknown_0860D3C4:
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x2
	.byte	0x2
	.byte	0x0
	.byte	0x4
	.byte	0x2
	.byte	0x0
	.byte	0x6
	.byte	0x2
	.byte	0x0
	.byte	0x8
	.byte	0x2
	.byte	0x0
	.byte	0xa
	.byte	0x2
	.byte	0x0
	.byte	0xc
	.byte	0x2
	.byte	0x0
	.byte	0xe
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.byte	0x8
	.byte	0x2
	.byte	0x8
	.byte	0x8
	.byte	0x2
	.byte	0x0
	.byte	0x10
	.byte	0x3
	.size	 gUnknown_0860D3C4,45
	.type	 gUnknown_0860D3F1,object
gUnknown_0860D3F1:
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x70
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x70
	.byte	0x0
	.byte	0x30
	.byte	0x1
	.byte	0x40
	.byte	0x1
	.byte	0x30
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x10
	.byte	0x1
	.byte	0x60
	.byte	0x1
	.byte	0x10
	.byte	0x0
	.byte	0x60
	.byte	0x0
	.byte	0x20
	.byte	0x1
	.byte	0x50
	.byte	0x1
	.byte	0x20
	.byte	0x0
	.byte	0x50
	.size	 gUnknown_0860D3F1,32
	.type	 gUnknown_0860D411,object
gUnknown_0860D411:
	.byte	0x44
	.byte	0x21
	.byte	0x44
	.byte	0x31
	.byte	0x44
	.byte	0x41
	.byte	0x44
	.byte	0x51
	.byte	0x44
	.byte	0x61
	.byte	0x44
	.byte	0x71
	.byte	0x44
	.byte	0x81
	.byte	0x44
	.byte	0x91
	.byte	0xac
	.byte	0x21
	.byte	0xac
	.byte	0x31
	.byte	0xac
	.byte	0x41
	.byte	0xac
	.byte	0x51
	.byte	0xac
	.byte	0x61
	.byte	0xac
	.byte	0x71
	.byte	0xac
	.byte	0x81
	.byte	0xac
	.byte	0x91
	.byte	0x57
	.byte	0x29
	.byte	0x57
	.byte	0x49
	.byte	0x57
	.byte	0x69
	.byte	0x57
	.byte	0x89
	.byte	0x99
	.byte	0x29
	.byte	0x99
	.byte	0x49
	.byte	0x99
	.byte	0x69
	.byte	0x99
	.byte	0x89
	.byte	0x5f
	.byte	0x39
	.byte	0x5f
	.byte	0x79
	.byte	0x91
	.byte	0x39
	.byte	0x91
	.byte	0x79
	.byte	0x67
	.byte	0x59
	.byte	0x89
	.byte	0x59
	.byte	0x78
	.byte	0x59
	.size	 gUnknown_0860D411,62
	.align	2, 0
	.type	 gUnknown_0860d450,object
gUnknown_0860d450:
	.byte	0x9
	.byte	0x4
	.short	0x6021
	.byte	0xa
	.byte	0x4
	.short	0x6023
	.byte	0xa
	.byte	0x5
	.short	0x6047
	.byte	0xb
	.byte	0x5
	.short	0x6043
	.size	 gUnknown_0860d450,16
	.align	2, 0
	.type	 gUnknown_0860d460,object
gUnknown_0860d460:
	.byte	0x9
	.byte	0x4
	.short	0x6021
	.byte	0xa
	.byte	0x4
	.short	0x6023
	.byte	0xa
	.byte	0x5
	.short	0x6047
	.byte	0xb
	.byte	0x5
	.short	0x6023
	.byte	0xb
	.byte	0x6
	.short	0x6027
	.byte	0xb
	.byte	0x7
	.short	0x6047
	.byte	0xc
	.byte	0x7
	.short	0x6043
	.size	 gUnknown_0860d460,28
	.align	2, 0
	.type	 gUnknown_0860d47c,object
gUnknown_0860d47c:
	.byte	0x9
	.byte	0x4
	.short	0x6021
	.byte	0xa
	.byte	0x4
	.short	0x6023
	.byte	0xa
	.byte	0x5
	.short	0x6047
	.byte	0xb
	.byte	0x5
	.short	0x6023
	.byte	0xb
	.byte	0x6
	.short	0x6027
	.byte	0xb
	.byte	0x7
	.short	0x6047
	.byte	0xc
	.byte	0x7
	.short	0x6023
	.byte	0xc
	.byte	0x8
	.short	0x6027
	.byte	0xc
	.byte	0x9
	.short	0x6027
	.byte	0xc
	.byte	0xa
	.short	0x6027
	.byte	0xc
	.byte	0xb
	.short	0x603b
	.size	 gUnknown_0860d47c,44
	.align	2, 0
	.type	 gUnknown_0860d4a8,object
gUnknown_0860d4a8:
	.byte	0x9
	.byte	0x4
	.short	0x6021
	.byte	0xa
	.byte	0x4
	.short	0x6023
	.byte	0xa
	.byte	0x5
	.short	0x6047
	.byte	0xb
	.byte	0x5
	.short	0x6023
	.byte	0xb
	.byte	0x6
	.short	0x6027
	.byte	0xb
	.byte	0x7
	.short	0x6047
	.byte	0xc
	.byte	0x7
	.short	0x6023
	.byte	0xc
	.byte	0x8
	.short	0x6027
	.byte	0xc
	.byte	0x9
	.short	0x6027
	.byte	0xc
	.byte	0xa
	.short	0x6027
	.byte	0xc
	.byte	0xb
	.short	0x603b
	.byte	0xd
	.byte	0xb
	.short	0x602c
	.byte	0xe
	.byte	0xb
	.short	0x602d
	.size	 gUnknown_0860d4a8,52
	.align	2, 0
	.type	 gUnknown_0860d4dc,object
gUnknown_0860d4dc:
	.byte	0x9
	.byte	0x6
	.short	0x6021
	.byte	0xa
	.byte	0x6
	.short	0x6021
	.byte	0xa
	.byte	0x5
	.short	0x6027
	.byte	0xb
	.byte	0x5
	.short	0x6043
	.size	 gUnknown_0860d4dc,16
	.align	2, 0
	.type	 gUnknown_0860d4ec,object
gUnknown_0860d4ec:
	.byte	0x9
	.byte	0x6
	.short	0x6021
	.byte	0xa
	.byte	0x6
	.short	0x6021
	.byte	0xa
	.byte	0x5
	.short	0x6027
	.byte	0xb
	.byte	0x5
	.short	0x6023
	.byte	0xb
	.byte	0x6
	.short	0x6027
	.byte	0xb
	.byte	0x7
	.short	0x6047
	.byte	0xc
	.byte	0x7
	.short	0x6043
	.size	 gUnknown_0860d4ec,28
	.align	2, 0
	.type	 gUnknown_0860d508,object
gUnknown_0860d508:
	.byte	0x9
	.byte	0x6
	.short	0x6021
	.byte	0xa
	.byte	0x6
	.short	0x6021
	.byte	0xa
	.byte	0x5
	.short	0x6027
	.byte	0xb
	.byte	0x5
	.short	0x6023
	.byte	0xb
	.byte	0x6
	.short	0x6027
	.byte	0xb
	.byte	0x7
	.short	0x6047
	.byte	0xc
	.byte	0x7
	.short	0x6023
	.byte	0xc
	.byte	0x8
	.short	0x6027
	.byte	0xc
	.byte	0x9
	.short	0x6027
	.byte	0xc
	.byte	0xa
	.short	0x6027
	.byte	0xc
	.byte	0xb
	.short	0x603b
	.size	 gUnknown_0860d508,44
	.align	2, 0
	.type	 gUnknown_0860d534,object
gUnknown_0860d534:
	.byte	0x9
	.byte	0x6
	.short	0x6021
	.byte	0xa
	.byte	0x6
	.short	0x6021
	.byte	0xa
	.byte	0x5
	.short	0x6027
	.byte	0xb
	.byte	0x5
	.short	0x6023
	.byte	0xb
	.byte	0x6
	.short	0x6027
	.byte	0xb
	.byte	0x7
	.short	0x6047
	.byte	0xc
	.byte	0x7
	.short	0x6023
	.byte	0xc
	.byte	0x8
	.short	0x6027
	.byte	0xc
	.byte	0x9
	.short	0x6027
	.byte	0xc
	.byte	0xa
	.short	0x6027
	.byte	0xc
	.byte	0xb
	.short	0x603b
	.byte	0xd
	.byte	0xb
	.short	0x602c
	.byte	0xe
	.byte	0xb
	.short	0x602d
	.size	 gUnknown_0860d534,52
	.align	2, 0
	.type	 gUnknown_0860d568,object
gUnknown_0860d568:
	.byte	0x9
	.byte	0x8
	.short	0x6021
	.byte	0xa
	.byte	0x8
	.short	0x6023
	.byte	0xa
	.byte	0x9
	.short	0x6047
	.byte	0xb
	.byte	0x9
	.short	0x6021
	.size	 gUnknown_0860d568,16
	.align	2, 0
	.type	 gUnknown_0860d578,object
gUnknown_0860d578:
	.byte	0x9
	.byte	0x8
	.short	0x6021
	.byte	0xa
	.byte	0x8
	.short	0x6023
	.byte	0xa
	.byte	0x9
	.short	0x6047
	.byte	0xb
	.byte	0x9
	.short	0x6021
	.byte	0xb
	.byte	0x8
	.short	0x6027
	.byte	0xb
	.byte	0x7
	.short	0x6027
	.byte	0xc
	.byte	0x7
	.short	0x6043
	.size	 gUnknown_0860d578,28
	.align	2, 0
	.type	 gUnknown_0860d594,object
gUnknown_0860d594:
	.byte	0x9
	.byte	0x8
	.short	0x6021
	.byte	0xa
	.byte	0x8
	.short	0x6023
	.byte	0xa
	.byte	0x9
	.short	0x6047
	.byte	0xb
	.byte	0x9
	.short	0x6021
	.byte	0xb
	.byte	0x8
	.short	0x6027
	.byte	0xb
	.byte	0x7
	.short	0x6027
	.byte	0xc
	.byte	0x7
	.short	0x6023
	.byte	0xc
	.byte	0x8
	.short	0x6027
	.byte	0xc
	.byte	0x9
	.short	0x6027
	.byte	0xc
	.byte	0xa
	.short	0x6027
	.byte	0xc
	.byte	0xb
	.short	0x603b
	.size	 gUnknown_0860d594,44
	.align	2, 0
	.type	 gUnknown_0860d5c0,object
gUnknown_0860d5c0:
	.byte	0x9
	.byte	0x8
	.short	0x6021
	.byte	0xa
	.byte	0x8
	.short	0x6023
	.byte	0xa
	.byte	0x9
	.short	0x6047
	.byte	0xb
	.byte	0x9
	.short	0x6021
	.byte	0xb
	.byte	0x8
	.short	0x6027
	.byte	0xb
	.byte	0x7
	.short	0x6027
	.byte	0xc
	.byte	0x7
	.short	0x6023
	.byte	0xc
	.byte	0x8
	.short	0x6027
	.byte	0xc
	.byte	0x9
	.short	0x6027
	.byte	0xc
	.byte	0xa
	.short	0x6027
	.byte	0xc
	.byte	0xb
	.short	0x603b
	.byte	0xd
	.byte	0xb
	.short	0x602c
	.byte	0xe
	.byte	0xb
	.short	0x602d
	.size	 gUnknown_0860d5c0,52
	.align	2, 0
	.type	 gUnknown_0860d5f4,object
gUnknown_0860d5f4:
	.byte	0x9
	.byte	0xa
	.short	0x6021
	.byte	0xa
	.byte	0xa
	.short	0x6021
	.byte	0xa
	.byte	0x9
	.short	0x6027
	.byte	0xb
	.byte	0x9
	.short	0x6021
	.size	 gUnknown_0860d5f4,16
	.align	2, 0
	.type	 gUnknown_0860d604,object
gUnknown_0860d604:
	.byte	0x9
	.byte	0xa
	.short	0x6021
	.byte	0xa
	.byte	0xa
	.short	0x6021
	.byte	0xa
	.byte	0x9
	.short	0x6027
	.byte	0xb
	.byte	0x9
	.short	0x6021
	.byte	0xb
	.byte	0x8
	.short	0x6027
	.byte	0xb
	.byte	0x7
	.short	0x6027
	.byte	0xc
	.byte	0x7
	.short	0x6043
	.size	 gUnknown_0860d604,28
	.align	2, 0
	.type	 gUnknown_0860d620,object
gUnknown_0860d620:
	.byte	0x9
	.byte	0xa
	.short	0x6021
	.byte	0xa
	.byte	0xa
	.short	0x6021
	.byte	0xa
	.byte	0x9
	.short	0x6027
	.byte	0xb
	.byte	0x9
	.short	0x6021
	.byte	0xb
	.byte	0x8
	.short	0x6027
	.byte	0xb
	.byte	0x7
	.short	0x6027
	.byte	0xc
	.byte	0x7
	.short	0x6023
	.byte	0xc
	.byte	0x8
	.short	0x6027
	.byte	0xc
	.byte	0x9
	.short	0x6027
	.byte	0xc
	.byte	0xa
	.short	0x6027
	.byte	0xc
	.byte	0xb
	.short	0x603b
	.size	 gUnknown_0860d620,44
	.align	2, 0
	.type	 gUnknown_0860d64c,object
gUnknown_0860d64c:
	.byte	0x9
	.byte	0xa
	.short	0x6021
	.byte	0xa
	.byte	0xa
	.short	0x6021
	.byte	0xa
	.byte	0x9
	.short	0x6027
	.byte	0xb
	.byte	0x9
	.short	0x6021
	.byte	0xb
	.byte	0x8
	.short	0x6027
	.byte	0xb
	.byte	0x7
	.short	0x6027
	.byte	0xc
	.byte	0x7
	.short	0x6023
	.byte	0xc
	.byte	0x8
	.short	0x6027
	.byte	0xc
	.byte	0x9
	.short	0x6027
	.byte	0xc
	.byte	0xa
	.short	0x6027
	.byte	0xc
	.byte	0xb
	.short	0x603b
	.byte	0xd
	.byte	0xb
	.short	0x602c
	.byte	0xe
	.byte	0xb
	.short	0x602d
	.size	 gUnknown_0860d64c,52
	.align	2, 0
	.type	 gUnknown_0860d680,object
gUnknown_0860d680:
	.byte	0x9
	.byte	0xc
	.short	0x6021
	.byte	0xa
	.byte	0xc
	.short	0x6023
	.byte	0xa
	.byte	0xd
	.short	0x6047
	.byte	0xb
	.byte	0xd
	.short	0x6043
	.size	 gUnknown_0860d680,16
	.align	2, 0
	.type	 gUnknown_0860d690,object
gUnknown_0860d690:
	.byte	0x9
	.byte	0xc
	.short	0x6021
	.byte	0xa
	.byte	0xc
	.short	0x6023
	.byte	0xa
	.byte	0xd
	.short	0x6047
	.byte	0xb
	.byte	0xd
	.short	0x6023
	.byte	0xb
	.byte	0xe
	.short	0x6027
	.byte	0xb
	.byte	0xf
	.short	0x6047
	.byte	0xc
	.byte	0xf
	.short	0x6021
	.size	 gUnknown_0860d690,28
	.align	2, 0
	.type	 gUnknown_0860d6ac,object
gUnknown_0860d6ac:
	.byte	0x9
	.byte	0xc
	.short	0x6021
	.byte	0xa
	.byte	0xc
	.short	0x6023
	.byte	0xa
	.byte	0xd
	.short	0x6047
	.byte	0xb
	.byte	0xd
	.short	0x6023
	.byte	0xb
	.byte	0xe
	.short	0x6027
	.byte	0xb
	.byte	0xf
	.short	0x6047
	.byte	0xc
	.byte	0xf
	.short	0x6021
	.byte	0xc
	.byte	0xe
	.short	0x6033
	.byte	0xc
	.byte	0xd
	.short	0x6032
	.byte	0xc
	.byte	0xc
	.short	0x6031
	.byte	0xc
	.byte	0xb
	.short	0x6030
	.size	 gUnknown_0860d6ac,44
	.align	2, 0
	.type	 gUnknown_0860d6d8,object
gUnknown_0860d6d8:
	.byte	0x9
	.byte	0xc
	.short	0x6021
	.byte	0xa
	.byte	0xc
	.short	0x6023
	.byte	0xa
	.byte	0xd
	.short	0x6047
	.byte	0xb
	.byte	0xd
	.short	0x6023
	.byte	0xb
	.byte	0xe
	.short	0x6027
	.byte	0xb
	.byte	0xf
	.short	0x6047
	.byte	0xc
	.byte	0xf
	.short	0x6021
	.byte	0xc
	.byte	0xe
	.short	0x6033
	.byte	0xc
	.byte	0xd
	.short	0x6032
	.byte	0xc
	.byte	0xc
	.short	0x6031
	.byte	0xc
	.byte	0xb
	.short	0x6030
	.byte	0xd
	.byte	0xb
	.short	0x602c
	.byte	0xe
	.byte	0xb
	.short	0x602d
	.size	 gUnknown_0860d6d8,52
	.align	2, 0
	.type	 gUnknown_0860d70c,object
gUnknown_0860d70c:
	.byte	0x9
	.byte	0xe
	.short	0x6021
	.byte	0xa
	.byte	0xe
	.short	0x6021
	.byte	0xa
	.byte	0xd
	.short	0x6027
	.byte	0xb
	.byte	0xd
	.short	0x6043
	.size	 gUnknown_0860d70c,16
	.align	2, 0
	.type	 gUnknown_0860d71c,object
gUnknown_0860d71c:
	.byte	0x9
	.byte	0xe
	.short	0x6021
	.byte	0xa
	.byte	0xe
	.short	0x6021
	.byte	0xa
	.byte	0xd
	.short	0x6027
	.byte	0xb
	.byte	0xd
	.short	0x6023
	.byte	0xb
	.byte	0xe
	.short	0x6027
	.byte	0xb
	.byte	0xf
	.short	0x6047
	.byte	0xc
	.byte	0xf
	.short	0x6021
	.size	 gUnknown_0860d71c,28
	.align	2, 0
	.type	 gUnknown_0860d738,object
gUnknown_0860d738:
	.byte	0x9
	.byte	0xe
	.short	0x6021
	.byte	0xa
	.byte	0xe
	.short	0x6021
	.byte	0xa
	.byte	0xd
	.short	0x6027
	.byte	0xb
	.byte	0xd
	.short	0x6023
	.byte	0xb
	.byte	0xe
	.short	0x6027
	.byte	0xb
	.byte	0xf
	.short	0x6047
	.byte	0xc
	.byte	0xf
	.short	0x6021
	.byte	0xc
	.byte	0xe
	.short	0x6033
	.byte	0xc
	.byte	0xd
	.short	0x6032
	.byte	0xc
	.byte	0xc
	.short	0x6031
	.byte	0xc
	.byte	0xb
	.short	0x6030
	.size	 gUnknown_0860d738,44
	.align	2, 0
	.type	 gUnknown_0860d764,object
gUnknown_0860d764:
	.byte	0x9
	.byte	0xe
	.short	0x6021
	.byte	0xa
	.byte	0xe
	.short	0x6021
	.byte	0xa
	.byte	0xd
	.short	0x6027
	.byte	0xb
	.byte	0xd
	.short	0x6023
	.byte	0xb
	.byte	0xe
	.short	0x6027
	.byte	0xb
	.byte	0xf
	.short	0x6047
	.byte	0xc
	.byte	0xf
	.short	0x6021
	.byte	0xc
	.byte	0xe
	.short	0x6033
	.byte	0xc
	.byte	0xd
	.short	0x6032
	.byte	0xc
	.byte	0xc
	.short	0x6031
	.byte	0xc
	.byte	0xb
	.short	0x6030
	.byte	0xd
	.byte	0xb
	.short	0x602c
	.byte	0xe
	.byte	0xb
	.short	0x602d
	.size	 gUnknown_0860d764,52
	.align	2, 0
	.type	 gUnknown_0860d798,object
gUnknown_0860d798:
	.byte	0x9
	.byte	0x10
	.short	0x6021
	.byte	0xa
	.byte	0x10
	.short	0x6023
	.byte	0xa
	.byte	0x11
	.short	0x6047
	.byte	0xb
	.byte	0x11
	.short	0x6021
	.size	 gUnknown_0860d798,16
	.align	2, 0
	.type	 gUnknown_0860d7a8,object
gUnknown_0860d7a8:
	.byte	0x9
	.byte	0x10
	.short	0x6021
	.byte	0xa
	.byte	0x10
	.short	0x6023
	.byte	0xa
	.byte	0x11
	.short	0x6047
	.byte	0xb
	.byte	0x11
	.short	0x6021
	.byte	0xb
	.byte	0x10
	.short	0x6027
	.byte	0xb
	.byte	0xf
	.short	0x6027
	.byte	0xc
	.byte	0xf
	.short	0x6021
	.size	 gUnknown_0860d7a8,28
	.align	2, 0
	.type	 gUnknown_0860d7c4,object
gUnknown_0860d7c4:
	.byte	0x9
	.byte	0x10
	.short	0x6021
	.byte	0xa
	.byte	0x10
	.short	0x6023
	.byte	0xa
	.byte	0x11
	.short	0x6047
	.byte	0xb
	.byte	0x11
	.short	0x6021
	.byte	0xb
	.byte	0x10
	.short	0x6027
	.byte	0xb
	.byte	0xf
	.short	0x6027
	.byte	0xc
	.byte	0xf
	.short	0x6021
	.byte	0xc
	.byte	0xe
	.short	0x6033
	.byte	0xc
	.byte	0xd
	.short	0x6032
	.byte	0xc
	.byte	0xc
	.short	0x6031
	.byte	0xc
	.byte	0xb
	.short	0x6030
	.size	 gUnknown_0860d7c4,44
	.align	2, 0
	.type	 gUnknown_0860d7f0,object
gUnknown_0860d7f0:
	.byte	0x9
	.byte	0x10
	.short	0x6021
	.byte	0xa
	.byte	0x10
	.short	0x6023
	.byte	0xa
	.byte	0x11
	.short	0x6047
	.byte	0xb
	.byte	0x11
	.short	0x6021
	.byte	0xb
	.byte	0x10
	.short	0x6027
	.byte	0xb
	.byte	0xf
	.short	0x6027
	.byte	0xc
	.byte	0xf
	.short	0x6021
	.byte	0xc
	.byte	0xe
	.short	0x6033
	.byte	0xc
	.byte	0xd
	.short	0x6032
	.byte	0xc
	.byte	0xc
	.short	0x6031
	.byte	0xc
	.byte	0xb
	.short	0x6030
	.byte	0xd
	.byte	0xb
	.short	0x602c
	.byte	0xe
	.byte	0xb
	.short	0x602d
	.size	 gUnknown_0860d7f0,52
	.align	2, 0
	.type	 gUnknown_0860d824,object
gUnknown_0860d824:
	.byte	0x9
	.byte	0x12
	.short	0x602b
	.byte	0xa
	.byte	0x12
	.short	0x602b
	.byte	0xa
	.byte	0x11
	.short	0x6027
	.byte	0xb
	.byte	0x11
	.short	0x6021
	.size	 gUnknown_0860d824,16
	.align	2, 0
	.type	 gUnknown_0860d834,object
gUnknown_0860d834:
	.byte	0x9
	.byte	0x12
	.short	0x602b
	.byte	0xa
	.byte	0x12
	.short	0x602b
	.byte	0xa
	.byte	0x11
	.short	0x6027
	.byte	0xb
	.byte	0x11
	.short	0x6021
	.byte	0xb
	.byte	0x10
	.short	0x6027
	.byte	0xb
	.byte	0xf
	.short	0x6027
	.byte	0xc
	.byte	0xf
	.short	0x6021
	.size	 gUnknown_0860d834,28
	.align	2, 0
	.type	 gUnknown_0860d850,object
gUnknown_0860d850:
	.byte	0x9
	.byte	0x12
	.short	0x602b
	.byte	0xa
	.byte	0x12
	.short	0x602b
	.byte	0xa
	.byte	0x11
	.short	0x6027
	.byte	0xb
	.byte	0x11
	.short	0x6021
	.byte	0xb
	.byte	0x10
	.short	0x6027
	.byte	0xb
	.byte	0xf
	.short	0x6027
	.byte	0xc
	.byte	0xf
	.short	0x6021
	.byte	0xc
	.byte	0xe
	.short	0x6033
	.byte	0xc
	.byte	0xd
	.short	0x6032
	.byte	0xc
	.byte	0xc
	.short	0x6031
	.byte	0xc
	.byte	0xb
	.short	0x6030
	.size	 gUnknown_0860d850,44
	.align	2, 0
	.type	 gUnknown_0860d87c,object
gUnknown_0860d87c:
	.byte	0x9
	.byte	0x12
	.short	0x602b
	.byte	0xa
	.byte	0x12
	.short	0x602b
	.byte	0xa
	.byte	0x11
	.short	0x6027
	.byte	0xb
	.byte	0x11
	.short	0x6021
	.byte	0xb
	.byte	0x10
	.short	0x6027
	.byte	0xb
	.byte	0xf
	.short	0x6027
	.byte	0xc
	.byte	0xf
	.short	0x6021
	.byte	0xc
	.byte	0xe
	.short	0x6033
	.byte	0xc
	.byte	0xd
	.short	0x6032
	.byte	0xc
	.byte	0xc
	.short	0x6031
	.byte	0xc
	.byte	0xb
	.short	0x6030
	.byte	0xd
	.byte	0xb
	.short	0x602c
	.byte	0xe
	.byte	0xb
	.short	0x602d
	.size	 gUnknown_0860d87c,52
	.align	2, 0
	.type	 gUnknown_0860d8b0,object
gUnknown_0860d8b0:
	.byte	0x14
	.byte	0x4
	.short	0x6021
	.byte	0x13
	.byte	0x4
	.short	0x6025
	.byte	0x13
	.byte	0x5
	.short	0x6049
	.byte	0x12
	.byte	0x5
	.short	0x6045
	.size	 gUnknown_0860d8b0,16
	.align	2, 0
	.type	 gUnknown_0860d8c0,object
gUnknown_0860d8c0:
	.byte	0x14
	.byte	0x4
	.short	0x6021
	.byte	0x13
	.byte	0x4
	.short	0x6025
	.byte	0x13
	.byte	0x5
	.short	0x6049
	.byte	0x12
	.byte	0x5
	.short	0x6025
	.byte	0x12
	.byte	0x6
	.short	0x6029
	.byte	0x12
	.byte	0x7
	.short	0x6049
	.byte	0x11
	.byte	0x7
	.short	0x6045
	.size	 gUnknown_0860d8c0,28
	.align	2, 0
	.type	 gUnknown_0860d8dc,object
gUnknown_0860d8dc:
	.byte	0x14
	.byte	0x4
	.short	0x6021
	.byte	0x13
	.byte	0x4
	.short	0x6025
	.byte	0x13
	.byte	0x5
	.short	0x6049
	.byte	0x12
	.byte	0x5
	.short	0x6025
	.byte	0x12
	.byte	0x6
	.short	0x6029
	.byte	0x12
	.byte	0x7
	.short	0x6049
	.byte	0x11
	.byte	0x7
	.short	0x6025
	.byte	0x11
	.byte	0x8
	.short	0x6029
	.byte	0x11
	.byte	0x9
	.short	0x6029
	.byte	0x11
	.byte	0xa
	.short	0x6029
	.byte	0x11
	.byte	0xb
	.short	0x603c
	.size	 gUnknown_0860d8dc,44
	.align	2, 0
	.type	 gUnknown_0860d908,object
gUnknown_0860d908:
	.byte	0x14
	.byte	0x4
	.short	0x6021
	.byte	0x13
	.byte	0x4
	.short	0x6025
	.byte	0x13
	.byte	0x5
	.short	0x6049
	.byte	0x12
	.byte	0x5
	.short	0x6025
	.byte	0x12
	.byte	0x6
	.short	0x6029
	.byte	0x12
	.byte	0x7
	.short	0x6049
	.byte	0x11
	.byte	0x7
	.short	0x6025
	.byte	0x11
	.byte	0x8
	.short	0x6029
	.byte	0x11
	.byte	0x9
	.short	0x6029
	.byte	0x11
	.byte	0xa
	.short	0x6029
	.byte	0x11
	.byte	0xb
	.short	0x603c
	.byte	0x10
	.byte	0xb
	.short	0x602f
	.byte	0xf
	.byte	0xb
	.short	0x602e
	.size	 gUnknown_0860d908,52
	.align	2, 0
	.type	 gUnknown_0860d93c,object
gUnknown_0860d93c:
	.byte	0x14
	.byte	0x6
	.short	0x6021
	.byte	0x13
	.byte	0x6
	.short	0x6021
	.byte	0x13
	.byte	0x5
	.short	0x6029
	.byte	0x12
	.byte	0x5
	.short	0x6045
	.size	 gUnknown_0860d93c,16
	.align	2, 0
	.type	 gUnknown_0860d94c,object
gUnknown_0860d94c:
	.byte	0x14
	.byte	0x6
	.short	0x6021
	.byte	0x13
	.byte	0x6
	.short	0x6021
	.byte	0x13
	.byte	0x5
	.short	0x6029
	.byte	0x12
	.byte	0x5
	.short	0x6025
	.byte	0x12
	.byte	0x6
	.short	0x6029
	.byte	0x12
	.byte	0x7
	.short	0x6049
	.byte	0x11
	.byte	0x7
	.short	0x6045
	.size	 gUnknown_0860d94c,28
	.align	2, 0
	.type	 gUnknown_0860d968,object
gUnknown_0860d968:
	.byte	0x14
	.byte	0x6
	.short	0x6021
	.byte	0x13
	.byte	0x6
	.short	0x6021
	.byte	0x13
	.byte	0x5
	.short	0x6029
	.byte	0x12
	.byte	0x5
	.short	0x6025
	.byte	0x12
	.byte	0x6
	.short	0x6029
	.byte	0x12
	.byte	0x7
	.short	0x6049
	.byte	0x11
	.byte	0x7
	.short	0x6025
	.byte	0x11
	.byte	0x8
	.short	0x6029
	.byte	0x11
	.byte	0x9
	.short	0x6029
	.byte	0x11
	.byte	0xa
	.short	0x6029
	.byte	0x11
	.byte	0xb
	.short	0x603c
	.size	 gUnknown_0860d968,44
	.align	2, 0
	.type	 gUnknown_0860d994,object
gUnknown_0860d994:
	.byte	0x14
	.byte	0x6
	.short	0x6021
	.byte	0x13
	.byte	0x6
	.short	0x6021
	.byte	0x13
	.byte	0x5
	.short	0x6029
	.byte	0x12
	.byte	0x5
	.short	0x6025
	.byte	0x12
	.byte	0x6
	.short	0x6029
	.byte	0x12
	.byte	0x7
	.short	0x6049
	.byte	0x11
	.byte	0x7
	.short	0x6025
	.byte	0x11
	.byte	0x8
	.short	0x6029
	.byte	0x11
	.byte	0x9
	.short	0x6029
	.byte	0x11
	.byte	0xa
	.short	0x6029
	.byte	0x11
	.byte	0xb
	.short	0x603c
	.byte	0x10
	.byte	0xb
	.short	0x602f
	.byte	0xf
	.byte	0xb
	.short	0x602e
	.size	 gUnknown_0860d994,52
	.align	2, 0
	.type	 gUnknown_0860d9c8,object
gUnknown_0860d9c8:
	.byte	0x14
	.byte	0x8
	.short	0x6021
	.byte	0x13
	.byte	0x8
	.short	0x6025
	.byte	0x13
	.byte	0x9
	.short	0x6049
	.byte	0x12
	.byte	0x9
	.short	0x6021
	.size	 gUnknown_0860d9c8,16
	.align	2, 0
	.type	 gUnknown_0860d9d8,object
gUnknown_0860d9d8:
	.byte	0x14
	.byte	0x8
	.short	0x6021
	.byte	0x13
	.byte	0x8
	.short	0x6025
	.byte	0x13
	.byte	0x9
	.short	0x6049
	.byte	0x12
	.byte	0x9
	.short	0x6021
	.byte	0x12
	.byte	0x8
	.short	0x6029
	.byte	0x12
	.byte	0x7
	.short	0x6029
	.byte	0x11
	.byte	0x7
	.short	0x6045
	.size	 gUnknown_0860d9d8,28
	.align	2, 0
	.type	 gUnknown_0860d9f4,object
gUnknown_0860d9f4:
	.byte	0x14
	.byte	0x8
	.short	0x6021
	.byte	0x13
	.byte	0x8
	.short	0x6025
	.byte	0x13
	.byte	0x9
	.short	0x6049
	.byte	0x12
	.byte	0x9
	.short	0x6021
	.byte	0x12
	.byte	0x8
	.short	0x6029
	.byte	0x12
	.byte	0x7
	.short	0x6029
	.byte	0x11
	.byte	0x7
	.short	0x6025
	.byte	0x11
	.byte	0x8
	.short	0x6029
	.byte	0x11
	.byte	0x9
	.short	0x6029
	.byte	0x11
	.byte	0xa
	.short	0x6029
	.byte	0x11
	.byte	0xb
	.short	0x603c
	.size	 gUnknown_0860d9f4,44
	.align	2, 0
	.type	 gUnknown_0860da20,object
gUnknown_0860da20:
	.byte	0x14
	.byte	0x8
	.short	0x6021
	.byte	0x13
	.byte	0x8
	.short	0x6025
	.byte	0x13
	.byte	0x9
	.short	0x6049
	.byte	0x12
	.byte	0x9
	.short	0x6021
	.byte	0x12
	.byte	0x8
	.short	0x6029
	.byte	0x12
	.byte	0x7
	.short	0x6029
	.byte	0x11
	.byte	0x7
	.short	0x6025
	.byte	0x11
	.byte	0x8
	.short	0x6029
	.byte	0x11
	.byte	0x9
	.short	0x6029
	.byte	0x11
	.byte	0xa
	.short	0x6029
	.byte	0x11
	.byte	0xb
	.short	0x603c
	.byte	0x10
	.byte	0xb
	.short	0x602f
	.byte	0xf
	.byte	0xb
	.short	0x602e
	.size	 gUnknown_0860da20,52
	.align	2, 0
	.type	 gUnknown_0860da54,object
gUnknown_0860da54:
	.byte	0x14
	.byte	0xa
	.short	0x6021
	.byte	0x13
	.byte	0xa
	.short	0x6021
	.byte	0x13
	.byte	0x9
	.short	0x6029
	.byte	0x12
	.byte	0x9
	.short	0x6021
	.size	 gUnknown_0860da54,16
	.align	2, 0
	.type	 gUnknown_0860da64,object
gUnknown_0860da64:
	.byte	0x14
	.byte	0xa
	.short	0x6021
	.byte	0x13
	.byte	0xa
	.short	0x6021
	.byte	0x13
	.byte	0x9
	.short	0x6029
	.byte	0x12
	.byte	0x9
	.short	0x6021
	.byte	0x12
	.byte	0x8
	.short	0x6029
	.byte	0x12
	.byte	0x7
	.short	0x6029
	.byte	0x11
	.byte	0x7
	.short	0x6045
	.size	 gUnknown_0860da64,28
	.align	2, 0
	.type	 gUnknown_0860da80,object
gUnknown_0860da80:
	.byte	0x14
	.byte	0xa
	.short	0x6021
	.byte	0x13
	.byte	0xa
	.short	0x6021
	.byte	0x13
	.byte	0x9
	.short	0x6029
	.byte	0x12
	.byte	0x9
	.short	0x6021
	.byte	0x12
	.byte	0x8
	.short	0x6029
	.byte	0x12
	.byte	0x7
	.short	0x6029
	.byte	0x11
	.byte	0x7
	.short	0x6025
	.byte	0x11
	.byte	0x8
	.short	0x6029
	.byte	0x11
	.byte	0x9
	.short	0x6029
	.byte	0x11
	.byte	0xa
	.short	0x6029
	.byte	0x11
	.byte	0xb
	.short	0x603c
	.size	 gUnknown_0860da80,44
	.align	2, 0
	.type	 gUnknown_0860daac,object
gUnknown_0860daac:
	.byte	0x14
	.byte	0xa
	.short	0x6021
	.byte	0x13
	.byte	0xa
	.short	0x6021
	.byte	0x13
	.byte	0x9
	.short	0x6029
	.byte	0x12
	.byte	0x9
	.short	0x6021
	.byte	0x12
	.byte	0x8
	.short	0x6029
	.byte	0x12
	.byte	0x7
	.short	0x6029
	.byte	0x11
	.byte	0x7
	.short	0x6025
	.byte	0x11
	.byte	0x8
	.short	0x6029
	.byte	0x11
	.byte	0x9
	.short	0x6029
	.byte	0x11
	.byte	0xa
	.short	0x6029
	.byte	0x11
	.byte	0xb
	.short	0x603c
	.byte	0x10
	.byte	0xb
	.short	0x602f
	.byte	0xf
	.byte	0xb
	.short	0x602e
	.size	 gUnknown_0860daac,52
	.align	2, 0
	.type	 gUnknown_0860dae0,object
gUnknown_0860dae0:
	.byte	0x14
	.byte	0xc
	.short	0x6021
	.byte	0x13
	.byte	0xc
	.short	0x6025
	.byte	0x13
	.byte	0xd
	.short	0x6049
	.byte	0x12
	.byte	0xd
	.short	0x6045
	.size	 gUnknown_0860dae0,16
	.align	2, 0
	.type	 gUnknown_0860daf0,object
gUnknown_0860daf0:
	.byte	0x14
	.byte	0xc
	.short	0x6021
	.byte	0x13
	.byte	0xc
	.short	0x6025
	.byte	0x13
	.byte	0xd
	.short	0x6049
	.byte	0x12
	.byte	0xd
	.short	0x6025
	.byte	0x12
	.byte	0xe
	.short	0x6029
	.byte	0x12
	.byte	0xf
	.short	0x6049
	.byte	0x11
	.byte	0xf
	.short	0x6021
	.size	 gUnknown_0860daf0,28
	.align	2, 0
	.type	 gUnknown_0860db0c,object
gUnknown_0860db0c:
	.byte	0x14
	.byte	0xc
	.short	0x6021
	.byte	0x13
	.byte	0xc
	.short	0x6025
	.byte	0x13
	.byte	0xd
	.short	0x6049
	.byte	0x12
	.byte	0xd
	.short	0x6025
	.byte	0x12
	.byte	0xe
	.short	0x6029
	.byte	0x12
	.byte	0xf
	.short	0x6049
	.byte	0x11
	.byte	0xf
	.short	0x6021
	.byte	0x11
	.byte	0xe
	.short	0x6038
	.byte	0x11
	.byte	0xd
	.short	0x6037
	.byte	0x11
	.byte	0xc
	.short	0x6036
	.byte	0x11
	.byte	0xb
	.short	0x6035
	.size	 gUnknown_0860db0c,44
	.align	2, 0
	.type	 gUnknown_0860db38,object
gUnknown_0860db38:
	.byte	0x14
	.byte	0xc
	.short	0x6021
	.byte	0x13
	.byte	0xc
	.short	0x6025
	.byte	0x13
	.byte	0xd
	.short	0x6049
	.byte	0x12
	.byte	0xd
	.short	0x6025
	.byte	0x12
	.byte	0xe
	.short	0x6029
	.byte	0x12
	.byte	0xf
	.short	0x6049
	.byte	0x11
	.byte	0xf
	.short	0x6021
	.byte	0x11
	.byte	0xe
	.short	0x6038
	.byte	0x11
	.byte	0xd
	.short	0x6037
	.byte	0x11
	.byte	0xc
	.short	0x6036
	.byte	0x11
	.byte	0xb
	.short	0x6035
	.byte	0x10
	.byte	0xb
	.short	0x602f
	.byte	0xf
	.byte	0xb
	.short	0x602e
	.size	 gUnknown_0860db38,52
	.align	2, 0
	.type	 gUnknown_0860db6c,object
gUnknown_0860db6c:
	.byte	0x14
	.byte	0xe
	.short	0x6021
	.byte	0x13
	.byte	0xe
	.short	0x6021
	.byte	0x13
	.byte	0xd
	.short	0x6029
	.byte	0x12
	.byte	0xd
	.short	0x6045
	.size	 gUnknown_0860db6c,16
	.align	2, 0
	.type	 gUnknown_0860db7c,object
gUnknown_0860db7c:
	.byte	0x14
	.byte	0xe
	.short	0x6021
	.byte	0x13
	.byte	0xe
	.short	0x6021
	.byte	0x13
	.byte	0xd
	.short	0x6029
	.byte	0x12
	.byte	0xd
	.short	0x6025
	.byte	0x12
	.byte	0xe
	.short	0x6029
	.byte	0x12
	.byte	0xf
	.short	0x6049
	.byte	0x11
	.byte	0xf
	.short	0x6021
	.size	 gUnknown_0860db7c,28
	.align	2, 0
	.type	 gUnknown_0860db98,object
gUnknown_0860db98:
	.byte	0x14
	.byte	0xe
	.short	0x6021
	.byte	0x13
	.byte	0xe
	.short	0x6021
	.byte	0x13
	.byte	0xd
	.short	0x6029
	.byte	0x12
	.byte	0xd
	.short	0x6025
	.byte	0x12
	.byte	0xe
	.short	0x6029
	.byte	0x12
	.byte	0xf
	.short	0x6049
	.byte	0x11
	.byte	0xf
	.short	0x6021
	.byte	0x11
	.byte	0xe
	.short	0x6038
	.byte	0x11
	.byte	0xd
	.short	0x6037
	.byte	0x11
	.byte	0xc
	.short	0x6036
	.byte	0x11
	.byte	0xb
	.short	0x6035
	.size	 gUnknown_0860db98,44
	.align	2, 0
	.type	 gUnknown_0860dbc4,object
gUnknown_0860dbc4:
	.byte	0x14
	.byte	0xe
	.short	0x6021
	.byte	0x13
	.byte	0xe
	.short	0x6021
	.byte	0x13
	.byte	0xd
	.short	0x6029
	.byte	0x12
	.byte	0xd
	.short	0x6025
	.byte	0x12
	.byte	0xe
	.short	0x6029
	.byte	0x12
	.byte	0xf
	.short	0x6049
	.byte	0x11
	.byte	0xf
	.short	0x6021
	.byte	0x11
	.byte	0xe
	.short	0x6038
	.byte	0x11
	.byte	0xd
	.short	0x6037
	.byte	0x11
	.byte	0xc
	.short	0x6036
	.byte	0x11
	.byte	0xb
	.short	0x6035
	.byte	0x10
	.byte	0xb
	.short	0x602f
	.byte	0xf
	.byte	0xb
	.short	0x602e
	.size	 gUnknown_0860dbc4,52
	.align	2, 0
	.type	 gUnknown_0860dbf8,object
gUnknown_0860dbf8:
	.byte	0x14
	.byte	0x10
	.short	0x6021
	.byte	0x13
	.byte	0x10
	.short	0x6025
	.byte	0x13
	.byte	0x11
	.short	0x6049
	.byte	0x12
	.byte	0x11
	.short	0x6021
	.size	 gUnknown_0860dbf8,16
	.align	2, 0
	.type	 gUnknown_0860dc08,object
gUnknown_0860dc08:
	.byte	0x14
	.byte	0x10
	.short	0x6021
	.byte	0x13
	.byte	0x10
	.short	0x6025
	.byte	0x13
	.byte	0x11
	.short	0x6049
	.byte	0x12
	.byte	0x11
	.short	0x6021
	.byte	0x12
	.byte	0x10
	.short	0x6029
	.byte	0x12
	.byte	0xf
	.short	0x6029
	.byte	0x11
	.byte	0xf
	.short	0x6021
	.size	 gUnknown_0860dc08,28
	.align	2, 0
	.type	 gUnknown_0860dc24,object
gUnknown_0860dc24:
	.byte	0x14
	.byte	0x10
	.short	0x6021
	.byte	0x13
	.byte	0x10
	.short	0x6025
	.byte	0x13
	.byte	0x11
	.short	0x6049
	.byte	0x12
	.byte	0x11
	.short	0x6021
	.byte	0x12
	.byte	0x10
	.short	0x6029
	.byte	0x12
	.byte	0xf
	.short	0x6029
	.byte	0x11
	.byte	0xf
	.short	0x6021
	.byte	0x11
	.byte	0xe
	.short	0x6038
	.byte	0x11
	.byte	0xd
	.short	0x6037
	.byte	0x11
	.byte	0xc
	.short	0x6036
	.byte	0x11
	.byte	0xb
	.short	0x6035
	.size	 gUnknown_0860dc24,44
	.align	2, 0
	.type	 gUnknown_0860dc50,object
gUnknown_0860dc50:
	.byte	0x14
	.byte	0x10
	.short	0x6021
	.byte	0x13
	.byte	0x10
	.short	0x6025
	.byte	0x13
	.byte	0x11
	.short	0x6049
	.byte	0x12
	.byte	0x11
	.short	0x6021
	.byte	0x12
	.byte	0x10
	.short	0x6029
	.byte	0x12
	.byte	0xf
	.short	0x6029
	.byte	0x11
	.byte	0xf
	.short	0x6021
	.byte	0x11
	.byte	0xe
	.short	0x6038
	.byte	0x11
	.byte	0xd
	.short	0x6037
	.byte	0x11
	.byte	0xc
	.short	0x6036
	.byte	0x11
	.byte	0xb
	.short	0x6035
	.byte	0x10
	.byte	0xb
	.short	0x602f
	.byte	0xf
	.byte	0xb
	.short	0x602e
	.size	 gUnknown_0860dc50,52
	.align	2, 0
	.type	 gUnknown_0860dc84,object
gUnknown_0860dc84:
	.byte	0x14
	.byte	0x12
	.short	0x602b
	.byte	0x13
	.byte	0x12
	.short	0x602b
	.byte	0x13
	.byte	0x11
	.short	0x6029
	.byte	0x12
	.byte	0x11
	.short	0x6021
	.size	 gUnknown_0860dc84,16
	.align	2, 0
	.type	 gUnknown_0860dc94,object
gUnknown_0860dc94:
	.byte	0x14
	.byte	0x12
	.short	0x602b
	.byte	0x13
	.byte	0x12
	.short	0x602b
	.byte	0x13
	.byte	0x11
	.short	0x6029
	.byte	0x12
	.byte	0x11
	.short	0x6021
	.byte	0x12
	.byte	0x10
	.short	0x6029
	.byte	0x12
	.byte	0xf
	.short	0x6029
	.byte	0x11
	.byte	0xf
	.short	0x6021
	.size	 gUnknown_0860dc94,28
	.align	2, 0
	.type	 gUnknown_0860dcb0,object
gUnknown_0860dcb0:
	.byte	0x14
	.byte	0x12
	.short	0x602b
	.byte	0x13
	.byte	0x12
	.short	0x602b
	.byte	0x13
	.byte	0x11
	.short	0x6029
	.byte	0x12
	.byte	0x11
	.short	0x6021
	.byte	0x12
	.byte	0x10
	.short	0x6029
	.byte	0x12
	.byte	0xf
	.short	0x6029
	.byte	0x11
	.byte	0xf
	.short	0x6021
	.byte	0x11
	.byte	0xe
	.short	0x6038
	.byte	0x11
	.byte	0xd
	.short	0x6037
	.byte	0x11
	.byte	0xc
	.short	0x6036
	.byte	0x11
	.byte	0xb
	.short	0x6035
	.size	 gUnknown_0860dcb0,44
	.align	2, 0
	.type	 gUnknown_0860dcdc,object
gUnknown_0860dcdc:
	.byte	0x14
	.byte	0x12
	.short	0x602b
	.byte	0x13
	.byte	0x12
	.short	0x602b
	.byte	0x13
	.byte	0x11
	.short	0x6029
	.byte	0x12
	.byte	0x11
	.short	0x6021
	.byte	0x12
	.byte	0x10
	.short	0x6029
	.byte	0x12
	.byte	0xf
	.short	0x6029
	.byte	0x11
	.byte	0xf
	.short	0x6021
	.byte	0x11
	.byte	0xe
	.short	0x6038
	.byte	0x11
	.byte	0xd
	.short	0x6037
	.byte	0x11
	.byte	0xc
	.short	0x6036
	.byte	0x11
	.byte	0xb
	.short	0x6035
	.byte	0x10
	.byte	0xb
	.short	0x602f
	.byte	0xf
	.byte	0xb
	.short	0x602e
	.size	 gUnknown_0860dcdc,52
	.align	2, 0
	.type	 gUnknown_0860DD10,object
	.size	 gUnknown_0860DD10,256
gUnknown_0860DD10:
	.word	gUnknown_0860d450
	.word	gUnknown_0860d460
	.word	gUnknown_0860d47c
	.word	gUnknown_0860d4a8
	.word	gUnknown_0860dc84
	.word	gUnknown_0860dc94
	.word	gUnknown_0860dcb0
	.word	gUnknown_0860dcdc
	.word	gUnknown_0860d8b0
	.word	gUnknown_0860d8c0
	.word	gUnknown_0860d8dc
	.word	gUnknown_0860d908
	.word	gUnknown_0860d824
	.word	gUnknown_0860d834
	.word	gUnknown_0860d850
	.word	gUnknown_0860d87c
	.word	gUnknown_0860d5f4
	.word	gUnknown_0860d604
	.word	gUnknown_0860d620
	.word	gUnknown_0860d64c
	.word	gUnknown_0860dae0
	.word	gUnknown_0860daf0
	.word	gUnknown_0860db0c
	.word	gUnknown_0860db38
	.word	gUnknown_0860da54
	.word	gUnknown_0860da64
	.word	gUnknown_0860da80
	.word	gUnknown_0860daac
	.word	gUnknown_0860d680
	.word	gUnknown_0860d690
	.word	gUnknown_0860d6ac
	.word	gUnknown_0860d6d8
	.word	gUnknown_0860d4dc
	.word	gUnknown_0860d4ec
	.word	gUnknown_0860d508
	.word	gUnknown_0860d534
	.word	gUnknown_0860dbf8
	.word	gUnknown_0860dc08
	.word	gUnknown_0860dc24
	.word	gUnknown_0860dc50
	.word	gUnknown_0860d93c
	.word	gUnknown_0860d94c
	.word	gUnknown_0860d968
	.word	gUnknown_0860d994
	.word	gUnknown_0860d798
	.word	gUnknown_0860d7a8
	.word	gUnknown_0860d7c4
	.word	gUnknown_0860d7f0
	.word	gUnknown_0860d568
	.word	gUnknown_0860d578
	.word	gUnknown_0860d594
	.word	gUnknown_0860d5c0
	.word	gUnknown_0860db6c
	.word	gUnknown_0860db7c
	.word	gUnknown_0860db98
	.word	gUnknown_0860dbc4
	.word	gUnknown_0860d9c8
	.word	gUnknown_0860d9d8
	.word	gUnknown_0860d9f4
	.word	gUnknown_0860da20
	.word	gUnknown_0860d70c
	.word	gUnknown_0860d71c
	.word	gUnknown_0860d738
	.word	gUnknown_0860d764
	.type	 gUnknown_0860DE10,object
	.size	 gUnknown_0860DE10,64
gUnknown_0860DE10:
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
.text
	.align	2, 0
	.globl	CallBattleDomeFunction
	.type	 CallBattleDomeFunction,function
	.thumb_func
CallBattleDomeFunction:
	push	{lr}
	ldr	r1, .L3
	ldr	r0, .L3+0x4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	sBattleDomeFunctions
	.word	gSpecialVar_0x8004
.Lfe1:
	.size	 CallBattleDomeFunction,.Lfe1-CallBattleDomeFunction
	.align	2, 0
	.type	 InitDomeChallenge,function
	.thumb_func
InitDomeChallenge:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L7
	ldr	r0, [r4]
	ldr	r1, .L7+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r5, r0, #0x1e
	ldr	r0, .L7+0x8
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldr	r0, [r4]
	ldr	r2, .L7+0xc
	add	r0, r0, r2
	mov	r6, #0x0
	strb	r6, [r0]
	ldr	r1, [r4]
	add	r2, r2, #0xa
	add	r0, r1, r2
	strh	r6, [r0]
	ldr	r0, .L7+0x4
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, [r4]
	ldr	r2, .L7+0x4
	add	r1, r1, r2
	ldrb	r2, [r1]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r4, [r4]
	ldr	r0, .L7+0x10
	add	r3, r4, r0
	ldr	r2, .L7+0x14
	lsl	r1, r5, #0x2
	lsl	r0, r7, #0x3
	add	r1, r1, r0
	add	r1, r1, r2
	ldr	r0, [r3]
	ldr	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L6	@cond_branch
	lsl	r0, r5, #0x1
	lsl	r1, r7, #0x2
	add	r0, r0, r1
	ldr	r2, .L7+0x18
	add	r1, r4, r2
	add	r1, r1, r0
	strh	r6, [r1]
.L6:
	ldr	r0, .L7+0x1c
	ldr	r0, [r0]
	mov	r1, #0x4
	ldrsb	r1, [r0, r1]
	mov	r2, #0x5
	ldrsb	r2, [r0, r2]
	mov	r3, #0x1
	neg	r3, r3
	mov	r0, #0x0
	bl	SetDynamicWarp
	ldr	r0, .L7+0x20
	strh	r6, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L8:
	.align	2, 0
.L7:
	.word	gSaveBlock2Ptr
	.word	0xca9
	.word	0x40ce
	.word	0xca8
	.word	0xcdc
	.word	gUnknown_0860D0EC
	.word	0xd0c
	.word	gSaveBlock1Ptr
	.word	gTrainerBattleOpponent_A
.Lfe2:
	.size	 InitDomeChallenge,.Lfe2-InitDomeChallenge
	.align	2, 0
	.type	 GetDomeData,function
	.thumb_func
GetDomeData:
	push	{r4, r5, r6, lr}
	ldr	r0, .L38
	ldr	r0, [r0]
	ldr	r1, .L38+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r5, r0, #0x1e
	ldr	r0, .L38+0x8
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, .L38+0xc
	ldrh	r0, [r0]
	cmp	r0, #0x9
	bls	.LCB153
	b	.L10	@long jump
.LCB153:
	lsl	r0, r0, #0x2
	ldr	r1, .L38+0x10
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L39:
	.align	2, 0
.L38:
	.word	gSaveBlock2Ptr
	.word	0xca9
	.word	0x40ce
	.word	gSpecialVar_0x8005
	.word	.L34
	.align	2, 0
	.align	2, 0
.L34:
	.word	.L11
	.word	.L12
	.word	.L14
	.word	.L15
	.word	.L16
	.word	.L17
	.word	.L18
	.word	.L25
	.word	.L32
	.word	.L33
.L11:
	ldr	r3, .L40
	ldr	r0, .L40+0x4
	ldr	r0, [r0]
	lsl	r1, r5, #0x1
	lsl	r2, r6, #0x2
	add	r1, r1, r2
	ldr	r2, .L40+0x8
	add	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r3]
	b	.L10
.L41:
	.align	2, 0
.L40:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd0c
.L12:
	ldr	r4, .L42
	ldr	r0, .L42+0x4
	ldr	r2, [r0]
	ldr	r3, .L42+0x8
	add	r2, r2, r3
	ldr	r3, .L42+0xc
	lsl	r0, r5, #0x2
	lsl	r1, r6, #0x3
	add	r0, r0, r1
	add	r0, r0, r3
	ldr	r1, [r2]
	ldr	r0, [r0]
	and	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
	strh	r0, [r4]
	b	.L10
.L43:
	.align	2, 0
.L42:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xcdc
	.word	gUnknown_0860D0EC
.L14:
	ldr	r1, .L44
	ldr	r0, .L44+0x4
	ldr	r0, [r0]
	ldr	r2, .L44+0x8
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	b	.L36
.L45:
	.align	2, 0
.L44:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd08
.L15:
	ldr	r1, .L46
	ldr	r0, .L46+0x4
	ldr	r0, [r0]
	ldr	r3, .L46+0x8
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	b	.L36
.L47:
	.align	2, 0
.L46:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd08
.L16:
	ldr	r1, .L48
	ldr	r0, .L48+0x4
	ldr	r0, [r0]
	ldr	r2, .L48+0x8
	add	r0, r0, r2
	b	.L37
.L49:
	.align	2, 0
.L48:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd08
.L17:
	ldr	r1, .L50
	ldr	r0, .L50+0x4
	ldr	r0, [r0]
	ldr	r3, .L50+0x8
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	b	.L36
.L51:
	.align	2, 0
.L50:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd08
.L18:
	ldr	r0, .L52
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L19	@cond_branch
	cmp	r5, #0
	beq	.L20	@cond_branch
	ldr	r1, .L52+0x4
	ldr	r0, .L52+0x8
	ldr	r0, [r0]
	ldr	r2, .L52+0xc
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	b	.L36
.L53:
	.align	2, 0
.L52:
	.word	0x40ce
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd08
.L20:
	ldr	r1, .L54
	ldr	r0, .L54+0x4
	ldr	r0, [r0]
	ldr	r3, .L54+0x8
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	b	.L36
.L55:
	.align	2, 0
.L54:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd08
.L19:
	cmp	r5, #0
	beq	.L23	@cond_branch
	ldr	r1, .L56
	ldr	r0, .L56+0x4
	ldr	r0, [r0]
	ldr	r2, .L56+0x8
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	b	.L36
.L57:
	.align	2, 0
.L56:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd08
.L23:
	ldr	r1, .L58
	ldr	r0, .L58+0x4
	ldr	r0, [r0]
	ldr	r3, .L58+0x8
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	b	.L36
.L59:
	.align	2, 0
.L58:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd08
.L25:
	ldr	r0, .L60
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L26	@cond_branch
	cmp	r5, #0
	beq	.L27	@cond_branch
	ldr	r1, .L60+0x4
	ldr	r0, .L60+0x8
	ldr	r0, [r0]
	ldr	r2, .L60+0xc
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsr	r0, r0, #0x7
	strh	r0, [r1]
	b	.L10
.L61:
	.align	2, 0
.L60:
	.word	0x40ce
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd08
.L27:
	ldr	r1, .L62
	ldr	r0, .L62+0x4
	ldr	r0, [r0]
	ldr	r3, .L62+0x8
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x19
	b	.L36
.L63:
	.align	2, 0
.L62:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd08
.L26:
	cmp	r5, #0
	beq	.L30	@cond_branch
	ldr	r1, .L64
	ldr	r0, .L64+0x4
	ldr	r0, [r0]
	ldr	r2, .L64+0x8
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	b	.L36
.L65:
	.align	2, 0
.L64:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd08
.L30:
	ldr	r1, .L66
	ldr	r0, .L66+0x4
	ldr	r0, [r0]
	ldr	r3, .L66+0x8
	add	r0, r0, r3
.L37:
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
.L36:
	lsr	r0, r0, #0x1f
	strh	r0, [r1]
	b	.L10
.L67:
	.align	2, 0
.L66:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd08
.L32:
	bl	sub_81B8558
	ldr	r2, .L68
	ldr	r0, .L68+0x4
	ldr	r0, [r0]
	mov	r1, #0xcb
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldrh	r1, [r0]
	strb	r1, [r2]
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r2, #0x1]
	b	.L10
.L69:
	.align	2, 0
.L68:
	.word	gSelectedOrderFromParty
	.word	gSaveBlock2Ptr
.L33:
	ldr	r2, .L70
	ldr	r0, .L70+0x4
	ldr	r1, [r0]
	ldr	r3, .L70+0x8
	add	r0, r1, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r3, r3, #0x1
	add	r1, r1, r3
	ldr	r3, .L70+0xc
	add	r0, r0, r3
	ldrb	r1, [r1]
	add	r0, r0, r1
	strh	r0, [r2]
.L10:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L71:
	.align	2, 0
.L70:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd0a
	.word	0xfffd
.Lfe3:
	.size	 GetDomeData,.Lfe3-GetDomeData
	.align	2, 0
	.type	 SetDomeData,function
	.thumb_func
SetDomeData:
	push	{r4, r5, lr}
	ldr	r0, .L102
	ldr	r0, [r0]
	ldr	r1, .L102+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r4, r0, #0x1e
	ldr	r0, .L102+0x8
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, .L102+0xc
	ldrh	r0, [r0]
	cmp	r0, #0x8
	bls	.LCB597
	b	.L73	@long jump
.LCB597:
	lsl	r0, r0, #0x2
	ldr	r1, .L102+0x10
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L103:
	.align	2, 0
.L102:
	.word	gSaveBlock2Ptr
	.word	0xca9
	.word	0x40ce
	.word	gSpecialVar_0x8005
	.word	.L97
	.align	2, 0
	.align	2, 0
.L97:
	.word	.L74
	.word	.L75
	.word	.L78
	.word	.L79
	.word	.L80
	.word	.L81
	.word	.L82
	.word	.L89
	.word	.L96
.L74:
	ldr	r0, .L104
	ldr	r2, [r0]
	lsl	r0, r4, #0x1
	lsl	r1, r5, #0x2
	add	r0, r0, r1
	ldr	r1, .L104+0x4
	add	r2, r2, r1
	add	r2, r2, r0
	ldr	r0, .L104+0x8
	ldrh	r0, [r0]
	strh	r0, [r2]
	b	.L73
.L105:
	.align	2, 0
.L104:
	.word	gSaveBlock2Ptr
	.word	0xd0c
	.word	gSpecialVar_0x8006
.L75:
	ldr	r0, .L106
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L76	@cond_branch
	ldr	r0, .L106+0x4
	ldr	r2, [r0]
	ldr	r0, .L106+0x8
	add	r2, r2, r0
	ldr	r3, .L106+0xc
	lsl	r1, r4, #0x2
	lsl	r0, r5, #0x3
	add	r1, r1, r0
	add	r1, r1, r3
	ldr	r0, [r2]
	ldr	r1, [r1]
	orr	r0, r0, r1
	str	r0, [r2]
	b	.L73
.L107:
	.align	2, 0
.L106:
	.word	gSpecialVar_0x8006
	.word	gSaveBlock2Ptr
	.word	0xcdc
	.word	gUnknown_0860D0EC
.L76:
	ldr	r0, .L108
	ldr	r2, [r0]
	ldr	r1, .L108+0x4
	add	r2, r2, r1
	ldr	r3, .L108+0x8
	lsl	r1, r4, #0x2
	lsl	r0, r5, #0x3
	add	r1, r1, r0
	add	r1, r1, r3
	ldr	r0, [r2]
	ldr	r1, [r1]
	and	r0, r0, r1
	str	r0, [r2]
	b	.L73
.L109:
	.align	2, 0
.L108:
	.word	gSaveBlock2Ptr
	.word	0xcdc
	.word	gUnknown_0860D0FC
.L78:
	ldr	r0, .L110
	ldr	r2, [r0]
	ldr	r0, .L110+0x4
	ldrb	r0, [r0]
	ldr	r1, .L110+0x8
	add	r2, r2, r1
	mov	r1, #0x1
	and	r1, r1, r0
	ldrb	r3, [r2]
	mov	r0, #0x2
	neg	r0, r0
	b	.L99
.L111:
	.align	2, 0
.L110:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xd08
.L79:
	ldr	r0, .L112
	ldr	r3, [r0]
	ldr	r0, .L112+0x4
	ldrb	r0, [r0]
	ldr	r2, .L112+0x8
	add	r3, r3, r2
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrb	r2, [r3]
	mov	r0, #0x3
	neg	r0, r0
	b	.L100
.L113:
	.align	2, 0
.L112:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xd08
.L80:
	ldr	r0, .L114
	ldr	r3, [r0]
	ldr	r0, .L114+0x4
	ldrb	r0, [r0]
	ldr	r1, .L114+0x8
	add	r3, r3, r1
	b	.L101
.L115:
	.align	2, 0
.L114:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xd08
.L81:
	ldr	r0, .L116
	ldr	r3, [r0]
	ldr	r0, .L116+0x4
	ldrb	r0, [r0]
	ldr	r2, .L116+0x8
	add	r3, r3, r2
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x3
	ldrb	r2, [r3]
	mov	r0, #0x9
	neg	r0, r0
	b	.L100
.L117:
	.align	2, 0
.L116:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xd08
.L82:
	ldr	r0, .L118
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x1
	bne	.L83	@cond_branch
	cmp	r4, #0
	beq	.L84	@cond_branch
	ldr	r0, .L118+0x4
	ldr	r3, [r0]
	ldr	r0, .L118+0x8
	ldrb	r0, [r0]
	ldr	r2, .L118+0xc
	add	r3, r3, r2
	and	r1, r1, r0
	lsl	r1, r1, #0x5
	ldrb	r2, [r3]
	mov	r0, #0x21
	neg	r0, r0
	b	.L100
.L119:
	.align	2, 0
.L118:
	.word	0x40ce
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xd08
.L84:
	ldr	r0, .L120
	ldr	r3, [r0]
	ldr	r0, .L120+0x4
	ldrb	r0, [r0]
	ldr	r2, .L120+0x8
	add	r3, r3, r2
	and	r1, r1, r0
	lsl	r1, r1, #0x4
	ldrb	r2, [r3]
	mov	r0, #0x11
	neg	r0, r0
	b	.L100
.L121:
	.align	2, 0
.L120:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xd08
.L83:
	cmp	r4, #0
	beq	.L87	@cond_branch
	ldr	r0, .L122
	ldr	r3, [r0]
	ldr	r0, .L122+0x4
	ldrb	r0, [r0]
	ldr	r1, .L122+0x8
	add	r3, r3, r1
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrb	r2, [r3]
	mov	r0, #0x3
	neg	r0, r0
	b	.L100
.L123:
	.align	2, 0
.L122:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xd08
.L87:
	ldr	r0, .L124
	ldr	r2, [r0]
	ldr	r0, .L124+0x4
	ldrb	r0, [r0]
	ldr	r1, .L124+0x8
	add	r2, r2, r1
	mov	r1, #0x1
	and	r1, r1, r0
	ldrb	r3, [r2]
	mov	r0, #0x2
	neg	r0, r0
	b	.L99
.L125:
	.align	2, 0
.L124:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xd08
.L89:
	ldr	r0, .L126
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x1
	bne	.L90	@cond_branch
	cmp	r4, #0
	beq	.L91	@cond_branch
	ldr	r0, .L126+0x4
	ldr	r2, [r0]
	ldr	r0, .L126+0x8
	ldrb	r1, [r0]
	ldr	r0, .L126+0xc
	add	r2, r2, r0
	lsl	r1, r1, #0x7
	ldrb	r3, [r2]
	mov	r0, #0x7f
.L99:
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	b	.L73
.L127:
	.align	2, 0
.L126:
	.word	0x40ce
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xd08
.L91:
	ldr	r0, .L128
	ldr	r3, [r0]
	ldr	r0, .L128+0x4
	ldrb	r0, [r0]
	ldr	r2, .L128+0x8
	add	r3, r3, r2
	and	r1, r1, r0
	lsl	r1, r1, #0x6
	ldrb	r2, [r3]
	mov	r0, #0x41
	neg	r0, r0
	b	.L100
.L129:
	.align	2, 0
.L128:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xd08
.L90:
	cmp	r4, #0
	beq	.L94	@cond_branch
	ldr	r0, .L130
	ldr	r3, [r0]
	ldr	r0, .L130+0x4
	ldrb	r0, [r0]
	ldr	r1, .L130+0x8
	add	r3, r3, r1
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x3
	ldrb	r2, [r3]
	mov	r0, #0x9
	neg	r0, r0
	b	.L100
.L131:
	.align	2, 0
.L130:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xd08
.L94:
	ldr	r0, .L132
	ldr	r3, [r0]
	ldr	r0, .L132+0x4
	ldrb	r0, [r0]
	ldr	r2, .L132+0x8
	add	r3, r3, r2
.L101:
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
.L100:
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	b	.L73
.L133:
	.align	2, 0
.L132:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xd08
.L96:
	ldr	r0, .L134
	ldr	r2, [r0]
	ldr	r0, .L134+0x4
	ldrb	r1, [r0]
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	mov	r0, #0xcb
	lsl	r0, r0, #0x4
	add	r2, r2, r0
	strh	r1, [r2]
.L73:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L135:
	.align	2, 0
.L134:
	.word	gSaveBlock2Ptr
	.word	gSelectedOrderFromParty
.Lfe4:
	.size	 SetDomeData,.Lfe4-SetDomeData
	.align	2, 0
	.type	 InitDomeTrainers,function
	.thumb_func
InitDomeTrainers:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x3c
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, #0x20
	bl	AllocZeroed
	str	r0, [sp, #0x18]
	mov	r0, #0x18
	bl	AllocZeroed
	str	r0, [sp, #0x1c]
	ldr	r4, .L258
	ldr	r1, [r4]
	ldr	r2, .L258+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	add	r0, r0, #0x1
	ldr	r3, .L258+0x8
	add	r1, r1, r3
	strb	r0, [r1]
	ldr	r0, .L258+0xc
	bl	VarGet
	ldr	r1, [r4]
	add	r0, r0, #0x1
	ldr	r5, .L258+0x10
	add	r1, r1, r5
	strb	r0, [r1]
	ldr	r2, [r4]
	ldr	r7, .L258+0x14
	add	r3, r2, r7
	ldrh	r0, [r3]
	ldr	r5, .L258+0x18
	add	r1, r5, #0
	orr	r0, r0, r1
	strh	r0, [r3]
	ldr	r3, .L258+0x1c
	add	r2, r2, r3
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, [r4]
	add	r1, r1, r3
	ldrb	r2, [r1]
	mov	r0, #0x19
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, [r4]
	add	r1, r1, r3
	ldrb	r2, [r1]
	mov	r0, #0x1f
	and	r0, r0, r2
	strb	r0, [r1]
	mov	r7, #0x0
	mov	sl, r7
	mov	r8, r4
	ldr	r0, .L258+0x20
	mov	r9, r0
	mov	r4, #0x0
.L140:
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r2, .L258+0x24
	add	r0, r0, r2
	add	r0, r0, r4
	ldrh	r0, [r0]
	mov	r3, #0x64
	mul	r0, r0, r3
	add	r0, r0, r9
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	mov	r5, r8
	ldr	r1, [r5]
	ldr	r7, .L258+0x28
	add	r1, r1, r7
	add	r1, r1, r4
	strh	r0, [r1]
	mov	r5, #0x0
	mov	r0, sl
	lsl	r7, r0, #0x4
	add	r6, r7, #0
.L144:
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r2, .L258+0x24
	add	r0, r0, r2
	add	r0, r0, r4
	ldrh	r0, [r0]
	mov	r3, #0x64
	mul	r0, r0, r3
	add	r0, r0, r9
	add	r1, r5, #0
	add	r1, r1, #0xd
	mov	r2, #0x0
	bl	GetMonData
	mov	r2, r8
	ldr	r1, [r2]
	ldr	r3, .L258+0x2c
	add	r1, r1, r3
	add	r1, r1, r6
	strh	r0, [r1]
	add	r6, r6, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L144	@cond_branch
	mov	r5, #0x0
	ldr	r6, .L258
.L149:
	ldr	r0, [r6]
	ldr	r1, .L258+0x24
	add	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0]
	mov	r2, #0x64
	mul	r0, r0, r2
	add	r0, r0, r9
	add	r1, r5, #0
	add	r1, r1, #0x1a
	mov	r2, #0x0
	bl	GetMonData
	ldr	r1, [r6]
	add	r2, r5, r7
	ldr	r3, .L258+0x30
	add	r1, r1, r3
	add	r1, r1, r2
	strb	r0, [r1]
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L149	@cond_branch
	mov	r5, r8
	ldr	r0, [r5]
	ldr	r1, .L258+0x24
	add	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0]
	mov	r2, #0x64
	mul	r0, r0, r2
	add	r0, r0, r9
	bl	GetNature
	ldr	r1, [r5]
	add	r1, r1, r7
	ldr	r3, .L258+0x34
	add	r1, r1, r3
	strb	r0, [r1]
	add	r4, r4, #0x2
	mov	r5, #0x1
	add	sl, sl, r5
	mov	r7, sl
	cmp	r7, #0x2
	ble	.L140	@cond_branch
	mov	sl, r5
	mov	r0, #0x4
	str	r0, [sp, #0x34]
	mov	r1, #0x6
	str	r1, [sp, #0x38]
.L155:
	mov	r2, sl
	cmp	r2, #0x5
	ble	.L169	@cond_branch
.L157:
	bl	GetCurrentFacilityWinStreak
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	sub_8162548
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r5, #0x1
	cmp	r5, sl
	bge	.L159	@cond_branch
	ldr	r3, .L258
	ldr	r0, [r3]
	ldr	r7, .L258+0x38
	add	r0, r0, r7
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	add	r2, r3, #0
	cmp	r0, r4
	beq	.L159	@cond_branch
	ldr	r3, .L258+0x14
.L162:
	add	r5, r5, #0x1
	cmp	r5, sl
	bge	.L159	@cond_branch
	ldr	r0, [r2]
	lsl	r1, r5, #0x2
	add	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	cmp	r0, r4
	bne	.L162	@cond_branch
.L159:
	cmp	r5, sl
	bne	.L157	@cond_branch
	ldr	r0, .L258
	ldr	r3, [r0]
	ldr	r1, [sp, #0x34]
	add	r3, r3, r1
	ldr	r2, .L258+0x14
	add	r3, r3, r2
	ldr	r5, .L258+0x18
	add	r0, r5, #0
	add	r2, r4, #0
	and	r2, r2, r0
	ldrh	r0, [r3]
	ldr	r7, .L258+0x3c
	add	r1, r7, #0
	b	.L255
.L259:
	.align	2, 0
.L258:
	.word	gSaveBlock2Ptr
	.word	0xca9
	.word	0xd0a
	.word	0x40ce
	.word	0xd0b
	.word	0xd24
	.word	0x3ff
	.word	0xd25
	.word	gPlayerParty+-0x64
	.word	0xcaa
	.word	0xd64
	.word	0xefc
	.word	0xf04
	.word	0xf0a
	.word	0xd28
	.word	-0x400
.L169:
	bl	GetCurrentFacilityWinStreak
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	sub_8162548
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r5, #0x1
	cmp	r5, sl
	bge	.L171	@cond_branch
	ldr	r1, .L261
	ldr	r0, [r1]
	ldr	r2, .L261+0x4
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	add	r2, r1, #0
	cmp	r0, r4
	beq	.L171	@cond_branch
	ldr	r3, .L261+0x8
.L174:
	add	r5, r5, #0x1
	cmp	r5, sl
	bge	.L171	@cond_branch
	ldr	r0, [r2]
	lsl	r1, r5, #0x2
	add	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	cmp	r0, r4
	bne	.L174	@cond_branch
.L171:
	cmp	r5, sl
	bne	.L169	@cond_branch
	ldr	r5, .L261
	ldr	r3, [r5]
	ldr	r7, [sp, #0x34]
	add	r3, r3, r7
	ldr	r0, .L261+0x8
	add	r3, r3, r0
	ldr	r1, .L261+0xc
	add	r0, r1, #0
	add	r2, r4, #0
	and	r2, r2, r0
	ldrh	r0, [r3]
	ldr	r5, .L261+0x10
	add	r1, r5, #0
.L255:
	and	r0, r0, r1
	orr	r0, r0, r2
	strh	r0, [r3]
	mov	r5, #0x0
	lsl	r4, r4, #0x10
	str	r4, [sp, #0x2c]
	ldr	r7, [sp, #0x38]
	str	r7, [sp, #0x20]
.L183:
	lsl	r0, r5, #0x1
	mov	r9, r0
	add	r1, r5, #0x1
	str	r1, [sp, #0x24]
	lsl	r2, r5, #0x2
	str	r2, [sp, #0x28]
.L184:
	ldr	r3, [sp, #0x2c]
	lsr	r0, r3, #0x10
	bl	RandomizeFacilityTrainerMonSet
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r7, #0x0
	cmp	r7, r5
	bge	.L186	@cond_branch
	ldr	r0, .L261
	ldr	r0, [r0]
	ldr	r1, [sp, #0x8]
	mov	r8, r1
	ldr	r2, [sp, #0xc]
	mov	ip, r2
	ldr	r3, .L261+0x14
	add	r0, r0, r3
	ldr	r1, [sp, #0x20]
	add	r4, r1, r0
.L190:
	ldrh	r3, [r4]
	cmp	r3, r6
	beq	.L186	@cond_branch
	ldr	r2, .L261+0x18
	ldr	r1, [r2]
	lsl	r0, r6, #0x4
	add	r2, r0, r1
	ldrh	r0, [r2]
	cmp	r8, r0
	beq	.L186	@cond_branch
	cmp	ip, r0
	beq	.L186	@cond_branch
	lsl	r0, r3, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0xa]
	ldrb	r2, [r2, #0xa]
	cmp	r0, r2
	beq	.L186	@cond_branch
	add	r4, r4, #0x2
	add	r7, r7, #0x1
	cmp	r7, r5
	blt	.L190	@cond_branch
.L186:
	cmp	r7, r5
	bne	.L184	@cond_branch
	ldr	r3, .L261
	ldr	r0, [r3]
	ldr	r1, [sp, #0x38]
	add	r1, r1, r9
	ldr	r5, .L261+0x14
	add	r0, r0, r5
	add	r0, r0, r1
	strh	r6, [r0]
	ldr	r2, [sp, #0x28]
	add	r2, r2, sp
	add	r2, r2, #0x8
	ldr	r0, .L261+0x18
	ldr	r1, [r0]
	lsl	r0, r6, #0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	str	r0, [r2]
	ldr	r5, [sp, #0x24]
	cmp	r5, #0x2
	ble	.L183	@cond_branch
	ldr	r2, [r3]
	ldr	r7, [sp, #0x34]
	add	r2, r2, r7
	ldr	r0, .L261+0x1c
	add	r2, r2, r0
	ldrb	r0, [r2]
	mov	r3, #0x5
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r5, .L261
	ldr	r2, [r5]
	add	r2, r2, r7
	ldr	r7, .L261+0x1c
	add	r2, r2, r7
	ldrb	r0, [r2]
	sub	r3, r3, #0x14
	add	r1, r3, #0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, [r5]
	ldr	r5, [sp, #0x34]
	add	r1, r1, r5
	add	r1, r1, r7
	ldrb	r2, [r1]
	mov	r0, #0x1f
	and	r0, r0, r2
	strb	r0, [r1]
	add	r5, r5, #0x4
	str	r5, [sp, #0x34]
	ldr	r7, [sp, #0x38]
	add	r7, r7, #0x6
	str	r7, [sp, #0x38]
	mov	r0, #0x1
	add	sl, sl, r0
	mov	r1, sl
	cmp	r1, #0xf
	bgt	.LCB1629
	b	.L155	@long jump
.LCB1629:
	mov	r7, #0x0
	ldr	r2, [sp, #0x18]
	strh	r7, [r2]
	mov	r3, #0x0
	mov	sl, r3
	ldr	r6, .L261+0x20
	ldr	r5, .L261+0x24
.L201:
	ldr	r0, .L261
	ldr	r0, [r0]
	mov	r2, sl
	lsl	r1, r2, #0x1
	ldr	r3, .L261+0x28
	add	r0, r0, r3
	add	r0, r0, r1
	ldrh	r0, [r0]
	sub	r4, r0, #0x1
	mov	r0, #0x64
	mul	r4, r4, r0
	ldr	r0, .L261+0x2c
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x3b
	mov	r2, #0x0
	bl	GetMonData
	ldr	r2, [sp, #0x18]
	ldrh	r1, [r2]
	add	r1, r1, r0
	strh	r1, [r2]
	add	r0, r4, #0
	mov	r1, #0x3c
	mov	r2, #0x0
	bl	GetMonData
	ldr	r3, [sp, #0x18]
	ldrh	r1, [r3]
	add	r1, r1, r0
	strh	r1, [r3]
	add	r0, r4, #0
	mov	r1, #0x3e
	mov	r2, #0x0
	bl	GetMonData
	ldr	r2, [sp, #0x18]
	ldrh	r1, [r2]
	add	r1, r1, r0
	strh	r1, [r2]
	add	r0, r4, #0
	mov	r1, #0x3f
	mov	r2, #0x0
	bl	GetMonData
	ldr	r3, [sp, #0x18]
	ldrh	r1, [r3]
	add	r1, r1, r0
	strh	r1, [r3]
	add	r0, r4, #0
	mov	r1, #0x3d
	mov	r2, #0x0
	bl	GetMonData
	ldr	r2, [sp, #0x18]
	ldrh	r1, [r2]
	add	r1, r1, r0
	strh	r1, [r2]
	add	r0, r4, #0
	mov	r1, #0x3a
	mov	r2, #0x0
	bl	GetMonData
	ldr	r3, [sp, #0x18]
	ldrh	r1, [r3]
	add	r1, r1, r0
	strh	r1, [r3]
	add	r0, r4, #0
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x6]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	orr	r7, r7, r0
	add	r0, r4, #0
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	orr	r7, r7, r0
	mov	r0, #0x1
	add	sl, sl, r0
	mov	r1, sl
	cmp	r1, #0x2
	ble	.L201	@cond_branch
	mov	r4, #0x0
	mov	r1, #0x1
	mov	r5, #0x1f
.L206:
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L207	@cond_branch
	add	r4, r4, #0x1
.L207:
	asr	r7, r7, #0x1
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L206	@cond_branch
	bl	SetFacilityPtrsGetLevel
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x14]
	add	r2, r0, #0
	mov	r0, r4
	mul	r0, r0, r2
	mov	r1, #0x14
	bl	__divsi3
	ldr	r3, [sp, #0x18]
	ldrh	r1, [r3]
	add	r1, r1, r0
	strh	r1, [r3]
	mov	r5, #0x1
	mov	sl, r5
	add	r6, r3, #0
	add	r6, r6, #0x2
	mov	r7, #0x2
	str	r7, [sp, #0x30]
.L212:
	mov	r7, #0x0
	strh	r7, [r6]
	ldr	r1, .L261
	ldr	r0, [r1]
	mov	r2, sl
	lsl	r1, r2, #0x2
	add	r0, r0, r1
	ldr	r3, .L261+0x8
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	bl	GetDomeTrainerMonIvs
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r5, #0x0
	ldr	r0, [sp, #0x30]
	mov	r9, r0
.L216:
	ldr	r1, .L261
	ldr	r0, [r1]
	mov	r4, r9
	add	r4, r4, sl
	add	r4, r4, r5
	lsl	r4, r4, #0x1
	ldr	r2, .L261+0x14
	add	r0, r0, r2
	add	r0, r0, r4
	ldrh	r1, [r0]
	ldr	r3, .L261+0x18
	ldr	r0, [r3]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldrb	r3, [r1, #0xb]
	ldrb	r1, [r1, #0xc]
	str	r1, [sp]
	ldr	r1, [sp, #0x1c]
	str	r1, [sp, #0x4]
	ldr	r1, [sp, #0x14]
	mov	r2, r8
	bl	CalcDomeMonStats
	ldr	r2, [sp, #0x1c]
	ldr	r1, [r2, #0x4]
	ldrh	r0, [r6]
	add	r0, r0, r1
	ldr	r1, [r2, #0x8]
	add	r0, r0, r1
	ldr	r1, [r2, #0x10]
	add	r0, r0, r1
	ldr	r1, [r2, #0x14]
	add	r0, r0, r1
	ldr	r1, [r2, #0xc]
	add	r0, r0, r1
	ldr	r1, [r2]
	add	r0, r0, r1
	strh	r0, [r6]
	ldr	r3, .L261
	ldr	r0, [r3]
	ldr	r1, .L261+0x14
	add	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0]
	ldr	r2, .L261+0x18
	ldr	r1, [r2]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r3, .L261+0x24
	add	r1, r1, r3
	ldrb	r0, [r1, #0x6]
	lsl	r0, r0, #0x2
	ldr	r2, .L261+0x20
	add	r0, r0, r2
	ldr	r0, [r0]
	orr	r7, r7, r0
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	orr	r7, r7, r0
	add	r5, r5, #0x1
	cmp	r5, #0x2
	ble	.L216	@cond_branch
	mov	r4, #0x0
	mov	r1, #0x1
	mov	r5, #0x1f
.L221:
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L222	@cond_branch
	add	r4, r4, #0x1
.L222:
	asr	r7, r7, #0x1
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L221	@cond_branch
	ldr	r3, [sp, #0x14]
	mov	r0, r4
	mul	r0, r0, r3
	mov	r1, #0x14
	bl	__divsi3
	ldrh	r1, [r6]
	add	r1, r1, r0
	strh	r1, [r6]
	add	r6, r6, #0x2
	ldr	r5, [sp, #0x30]
	add	r5, r5, #0x2
	str	r5, [sp, #0x30]
	mov	r7, #0x1
	add	sl, sl, r7
	mov	r0, sl
	cmp	r0, #0xf
	ble	.L212	@cond_branch
	mov	r1, #0x0
	mov	sl, r1
	ldr	r2, .L261+0xc
	mov	r8, r2
.L228:
	mov	r5, sl
	add	r5, r5, #0x1
	add	r7, r5, #0
	cmp	r5, #0xf
	bgt	.L227	@cond_branch
	mov	r3, sl
	lsl	r0, r3, #0x1
	ldr	r1, [sp, #0x18]
	add	r6, r0, r1
	lsl	r0, r5, #0x1
	add	r4, r0, r1
.L232:
	ldrh	r1, [r6]
	ldrh	r0, [r4]
	cmp	r1, r0
	bcc	.L256	@cond_branch
	cmp	r1, r0
	bne	.L231	@cond_branch
	ldr	r0, .L261
	ldr	r1, [r0]
	lsl	r0, r5, #0x2
	add	r0, r1, r0
	ldr	r2, .L261+0x8
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r2, r0, #0x16
	lsr	r0, r2, #0x16
	cmp	r0, r8
	bne	.L236	@cond_branch
.L256:
	mov	r0, sl
	add	r1, r5, #0
	ldr	r2, [sp, #0x18]
	bl	SwapDomeTrainers
	b	.L260
.L262:
	.align	2, 0
.L261:
	.word	gSaveBlock2Ptr
	.word	0xd28
	.word	0xd24
	.word	0x3ff
	.word	-0x400
	.word	0xd64
	.word	gFacilityTrainerMons
	.word	0xd25
	.word	gBitTable
	.word	gBaseStats
	.word	0xcaa
	.word	gPlayerParty
.L260:
	b	.L231
.L236:
	mov	r3, sl
	lsl	r0, r3, #0x2
	add	r0, r1, r0
	ldr	r1, .L263
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	cmp	r0, r2
	bls	.L231	@cond_branch
	mov	r0, sl
	add	r1, r5, #0
	ldr	r2, [sp, #0x18]
	bl	SwapDomeTrainers
.L231:
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0xf
	ble	.L232	@cond_branch
.L227:
	mov	sl, r7
	mov	r2, sl
	cmp	r2, #0xe
	ble	.L228	@cond_branch
	bl	sub_81A3610
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L241	@cond_branch
	mov	r3, #0x0
	mov	sl, r3
	ldr	r0, .L263+0x4
	ldr	r1, [r0]
	ldr	r4, .L263
	add	r1, r1, r4
	ldrh	r1, [r1]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	ldr	r3, .L263+0x8
	add	r2, r0, #0
	ldr	r6, .L263+0xc
	cmp	r1, r3
	beq	.L243	@cond_branch
	add	r5, r2, #0
.L244:
	mov	r7, #0x1
	add	sl, sl, r7
	mov	r0, sl
	cmp	r0, #0xf
	bgt	.L243	@cond_branch
	ldr	r0, [r5]
	mov	r7, sl
	lsl	r1, r7, #0x2
	add	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	cmp	r0, r3
	bne	.L244	@cond_branch
.L243:
	mov	r1, sl
	lsl	r0, r1, #0x1
	add	r0, r0, r6
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L248	@cond_branch
	mov	r5, #0x0
	ldr	r2, [r2]
	ldr	r3, .L263
	add	r2, r2, r3
	ldrh	r1, [r2]
	ldr	r0, .L263+0x10
	and	r0, r0, r1
	ldr	r7, .L263+0x14
	add	r1, r7, #0
	b	.L257
.L264:
	.align	2, 0
.L263:
	.word	0xd24
	.word	gSaveBlock2Ptr
	.word	0x3ff
	.word	gUnknown_0860D3F1
	.word	-0x400
	.word	0x3fe
.L248:
	mov	r5, #0x1
	ldr	r2, [r2]
	ldr	r0, .L265
	add	r2, r2, r0
	ldrh	r1, [r2]
	ldr	r0, .L265+0x4
	and	r0, r0, r1
	ldr	r3, .L265+0x8
	add	r1, r3, #0
.L257:
	orr	r0, r0, r1
	strh	r0, [r2]
	mov	r7, #0x0
	mov	sl, r7
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r4, r0, #0x1
.L253:
	mov	r1, sl
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	bl	GetFrontierBrainMonSpecies
	ldr	r1, .L265+0xc
	ldr	r1, [r1]
	ldr	r2, .L265+0x10
	add	r1, r1, r2
	add	r1, r1, r4
	strh	r0, [r1]
	add	r4, r4, #0x2
	mov	r3, #0x1
	add	sl, sl, r3
	mov	r5, sl
	cmp	r5, #0x2
	ble	.L253	@cond_branch
.L241:
	ldr	r0, [sp, #0x18]
	bl	Free
	ldr	r0, [sp, #0x1c]
	bl	Free
	add	sp, sp, #0x3c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L266:
	.align	2, 0
.L265:
	.word	0xd28
	.word	-0x400
	.word	0x3fe
	.word	gSaveBlock2Ptr
	.word	0xd64
.Lfe5:
	.size	 InitDomeTrainers,.Lfe5-InitDomeTrainers
	.align	2, 0
	.type	 CalcDomeMonStats,function
	.thumb_func
CalcDomeMonStats:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	add	r7, r1, #0
	mov	r9, r2
	ldr	r1, [sp, #0x3c]
	ldr	r2, [sp, #0x40]
	mov	r8, r2
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r3, r3, #0x18
	lsr	r5, r3, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x18]
	mov	r1, #0x0
	add	r4, r5, #0
	mov	r3, #0x1
	mov	r2, #0x5
.L271:
	add	r0, r4, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L270	@cond_branch
	add	r1, r1, #0x1
.L270:
	lsr	r4, r4, #0x1
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L271	@cond_branch
	mov	r0, #0xff
	lsl	r0, r0, #0x1
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	lsl	r0, r6, #0x3
	mov	sl, r0
	mov	r1, #0x0
	mov	ip, r1
	mov	r1, sp
	mov	r2, #0x5
.L277:
	mov	r0, ip
	str	r0, [r1]
	add	r0, r5, #0
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L276	@cond_branch
	str	r3, [r1]
.L276:
	lsl	r0, r4, #0x19
	lsr	r4, r0, #0x18
	add	r1, r1, #0x4
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L277	@cond_branch
	ldr	r0, .L289
	cmp	r6, r0
	bne	.L280	@cond_branch
	mov	r0, #0x1
	b	.L288
.L290:
	.align	2, 0
.L289:
	.word	0x12f
.L280:
	mov	r2, sl
	sub	r0, r2, r6
	lsl	r0, r0, #0x2
	ldr	r1, .L291
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r2, r9
	add	r1, r0, r2
	ldr	r0, [sp]
	cmp	r0, #0
	bge	.L282	@cond_branch
	add	r0, r0, #0x3
.L282:
	asr	r0, r0, #0x2
	add	r0, r1, r0
	mul	r0, r0, r7
	mov	r1, #0x64
	bl	__divsi3
	add	r0, r0, r7
	add	r0, r0, #0xa
.L288:
	mov	r1, r8
	str	r0, [r1]
	mov	r2, sl
	sub	r0, r2, r6
	lsl	r0, r0, #0x2
	ldr	r1, .L291
	add	r4, r0, r1
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x1
	mov	r2, r9
	add	r1, r0, r2
	ldr	r0, [sp, #0x4]
	cmp	r0, #0
	bge	.L283	@cond_branch
	add	r0, r0, #0x3
.L283:
	asr	r0, r0, #0x2
	add	r0, r1, r0
	mul	r0, r0, r7
	mov	r1, #0x64
	bl	__divsi3
	add	r1, r0, #0
	add	r1, r1, #0x5
	mov	r0, r8
	str	r1, [r0, #0x4]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, [sp, #0x18]
	mov	r2, #0x1
	bl	ModifyStatByNature
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r8
	str	r0, [r1, #0x4]
	ldrb	r0, [r4, #0x2]
	lsl	r0, r0, #0x1
	mov	r2, r9
	add	r1, r0, r2
	ldr	r0, [sp, #0x8]
	cmp	r0, #0
	bge	.L284	@cond_branch
	add	r0, r0, #0x3
.L284:
	asr	r0, r0, #0x2
	add	r0, r1, r0
	mul	r0, r0, r7
	mov	r1, #0x64
	bl	__divsi3
	add	r1, r0, #0
	add	r1, r1, #0x5
	mov	r0, r8
	str	r1, [r0, #0x8]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, [sp, #0x18]
	mov	r2, #0x2
	bl	ModifyStatByNature
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r8
	str	r0, [r1, #0x8]
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x1
	mov	r2, r9
	add	r1, r0, r2
	ldr	r0, [sp, #0xc]
	cmp	r0, #0
	bge	.L285	@cond_branch
	add	r0, r0, #0x3
.L285:
	asr	r0, r0, #0x2
	add	r0, r1, r0
	mul	r0, r0, r7
	mov	r1, #0x64
	bl	__divsi3
	add	r1, r0, #0
	add	r1, r1, #0x5
	mov	r0, r8
	str	r1, [r0, #0xc]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, [sp, #0x18]
	mov	r2, #0x3
	bl	ModifyStatByNature
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r8
	str	r0, [r1, #0xc]
	ldrb	r0, [r4, #0x4]
	lsl	r0, r0, #0x1
	mov	r2, r9
	add	r1, r0, r2
	ldr	r0, [sp, #0x10]
	cmp	r0, #0
	bge	.L286	@cond_branch
	add	r0, r0, #0x3
.L286:
	asr	r0, r0, #0x2
	add	r0, r1, r0
	mul	r0, r0, r7
	mov	r1, #0x64
	bl	__divsi3
	add	r1, r0, #0
	add	r1, r1, #0x5
	mov	r0, r8
	str	r1, [r0, #0x10]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, [sp, #0x18]
	mov	r2, #0x4
	bl	ModifyStatByNature
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r8
	str	r0, [r1, #0x10]
	ldrb	r0, [r4, #0x5]
	lsl	r0, r0, #0x1
	mov	r1, r9
	add	r2, r0, r1
	ldr	r0, [sp, #0x14]
	cmp	r0, #0
	bge	.L287	@cond_branch
	add	r0, r0, #0x3
.L287:
	asr	r0, r0, #0x2
	add	r0, r2, r0
	mul	r0, r0, r7
	mov	r1, #0x64
	bl	__divsi3
	add	r1, r0, #0
	add	r1, r1, #0x5
	mov	r2, r8
	str	r1, [r2, #0x14]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, [sp, #0x18]
	mov	r2, #0x5
	bl	ModifyStatByNature
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r8
	str	r0, [r1, #0x14]
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L292:
	.align	2, 0
.L291:
	.word	gBaseStats
.Lfe6:
	.size	 CalcDomeMonStats,.Lfe6-CalcDomeMonStats
	.align	2, 0
	.type	 SwapDomeTrainers,function
	.thumb_func
SwapDomeTrainers:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r3, r0, #0x1
	mov	ip, r3
	add	r4, r3, r2
	ldrh	r5, [r4]
	lsl	r7, r1, #0x1
	mov	r9, r7
	add	r2, r2, r9
	ldrh	r3, [r2]
	strh	r3, [r4]
	strh	r5, [r2]
	ldr	r2, .L299
	ldr	r5, [r2]
	lsl	r6, r0, #0x2
	add	r6, r5, r6
	ldr	r3, .L299+0x4
	add	r6, r6, r3
	ldrh	r7, [r6]
	mov	sl, r7
	mov	r2, sl
	lsl	r2, r2, #0x16
	mov	r8, r2
	lsl	r2, r1, #0x2
	add	r5, r5, r2
	add	r5, r5, r3
	ldrh	r4, [r5]
	lsl	r4, r4, #0x16
	lsr	r4, r4, #0x16
	ldr	r3, .L299+0x8
	add	r2, r3, #0
	mov	r7, sl
	and	r2, r2, r7
	orr	r2, r2, r4
	strh	r2, [r6]
	mov	r2, r8
	lsr	r2, r2, #0x16
	mov	r8, r2
	ldrh	r2, [r5]
	and	r3, r3, r2
	mov	r7, r8
	orr	r3, r3, r7
	strh	r3, [r5]
	ldr	r2, .L299
	mov	r8, r2
	add	ip, ip, r0
	add	r9, r9, r1
	mov	r3, r9
	lsl	r4, r3, #0x1
	mov	r7, ip
	lsl	r3, r7, #0x1
	ldr	r7, .L299+0xc
	mov	r6, #0x2
.L297:
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r7
	add	r2, r0, r3
	ldrh	r5, [r2]
	add	r0, r0, r4
	ldrh	r1, [r0]
	strh	r1, [r2]
	strh	r5, [r0]
	add	r4, r4, #0x2
	add	r3, r3, #0x2
	sub	r6, r6, #0x1
	cmp	r6, #0
	bge	.L297	@cond_branch
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L300:
	.align	2, 0
.L299:
	.word	gSaveBlock2Ptr
	.word	0xd24
	.word	-0x400
	.word	0xd64
.Lfe7:
	.size	 SwapDomeTrainers,.Lfe7-SwapDomeTrainers
	.align	2, 0
	.type	 BufferDomeRoundText,function
	.thumb_func
BufferDomeRoundText:
	push	{lr}
	ldr	r0, .L302
	ldr	r2, .L302+0x4
	ldr	r1, .L302+0x8
	ldr	r1, [r1]
	ldr	r3, .L302+0xc
	add	r1, r1, r3
	ldrh	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	StringCopy
	pop	{r0}
	bx	r0
.L303:
	.align	2, 0
.L302:
	.word	gStringVar1
	.word	gRoundsStringTable
	.word	gSaveBlock2Ptr
	.word	0xcb2
.Lfe8:
	.size	 BufferDomeRoundText,.Lfe8-BufferDomeRoundText
	.align	2, 0
	.type	 BufferDomeOpponentName,function
	.thumb_func
BufferDomeOpponentName:
	push	{lr}
	ldr	r0, .L305
	ldr	r2, .L305+0x4
	ldr	r1, .L305+0x8
	ldr	r1, [r1]
	ldr	r3, .L305+0xc
	add	r1, r1, r3
	ldrh	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	StringCopy
	ldr	r0, .L305+0x10
	ldr	r1, .L305+0x14
	ldrh	r1, [r1]
	bl	CopyDomeTrainerName
	pop	{r0}
	bx	r0
.L306:
	.align	2, 0
.L305:
	.word	gStringVar1
	.word	gRoundsStringTable
	.word	gSaveBlock2Ptr
	.word	0xcb2
	.word	gStringVar2
	.word	gTrainerBattleOpponent_A
.Lfe9:
	.size	 BufferDomeOpponentName,.Lfe9-BufferDomeOpponentName
	.align	2, 0
	.type	 InitDomeOpponentParty,function
	.thumb_func
InitDomeOpponentParty:
	push	{r4, r5, lr}
	ldr	r1, .L308
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r4, .L308+0x4
	add	r0, r4, #0
	mov	r1, #0x3a
	mov	r2, #0x0
	bl	GetMonData
	ldr	r5, .L308+0x8
	str	r0, [r5]
	add	r4, r4, #0x64
	add	r0, r4, #0
	mov	r1, #0x3a
	mov	r2, #0x0
	bl	GetMonData
	ldr	r1, [r5]
	add	r1, r1, r0
	str	r1, [r5]
	bl	CalculatePlayerPartyCount
	ldr	r0, .L308+0xc
	ldrh	r0, [r0]
	bl	TrainerIdToTournamentId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	CreateDomeOpponentMons
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L309:
	.align	2, 0
.L308:
	.word	gUnknown_0203CD70
	.word	gPlayerParty
	.word	gUnknown_0203CD74
	.word	gTrainerBattleOpponent_A
.Lfe10:
	.size	 InitDomeOpponentParty,.Lfe10-InitDomeOpponentParty
	.align	2, 0
	.type	 CreateDomeOpponentMon,function
	.thumb_func
CreateDomeOpponentMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x30
	add	r5, r2, #0
	str	r3, [sp, #0x14]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x10]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r1, [sp, #0x28]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, sp, #0xc
	mov	r1, #0x1
	neg	r1, r1
	strb	r1, [r0]
	ldr	r0, [sp, #0x28]
	bl	GetDomeTrainerMonIvs
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	str	r6, [sp, #0x2c]
	bl	SetFacilityPtrsGetLevel
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, #0x64
	ldr	r4, [sp, #0x10]
	mov	r3, r4
	mul	r3, r3, r0
	str	r3, [sp, #0x18]
	ldr	r6, .L317
	add	r0, r3, r6
	ldr	r7, .L317+0x4
	ldr	r4, [r7]
	lsl	r5, r5, #0x1
	ldr	r3, [sp, #0x28]
	lsl	r1, r3, #0x1
	add	r1, r1, r3
	lsl	r1, r1, #0x1
	add	r1, r5, r1
	ldr	r6, .L317+0x8
	add	r4, r4, r6
	add	r4, r4, r1
	ldrh	r3, [r4]
	ldr	r7, .L317+0xc
	ldr	r7, [r7]
	mov	r8, r7
	lsl	r3, r3, #0x4
	add	r3, r3, r8
	ldrh	r1, [r3]
	ldrb	r3, [r3, #0xc]
	ldr	r6, [sp, #0x2c]
	str	r6, [sp]
	ldrh	r4, [r4]
	lsl	r4, r4, #0x4
	add	r4, r4, r8
	ldrb	r4, [r4, #0xb]
	str	r4, [sp, #0x4]
	ldr	r7, [sp, #0x14]
	str	r7, [sp, #0x8]
	bl	CreateMonWithEVSpreadNatureOTID
	add	r0, sp, #0xc
	mov	r1, #0x1
	neg	r1, r1
	strb	r1, [r0]
	mov	r6, #0x0
	ldr	r2, [sp, #0x18]
	str	r2, [sp, #0x1c]
	mov	sl, r5
	ldr	r3, .L317+0x8
	mov	r9, r3
	ldr	r3, .L317+0xc
	mov	r4, sl
	str	r4, [sp, #0x20]
.L314:
	ldr	r7, .L317+0x4
	ldr	r1, [r7]
	ldr	r2, [sp, #0x28]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x1
	mov	r8, r0
	mov	r5, sl
	add	r5, r5, r8
	add	r1, r1, r9
	add	r1, r1, r5
	ldrh	r0, [r1]
	ldr	r1, [r3]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	lsl	r4, r6, #0x1
	add	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r0]
	lsl	r2, r6, #0x18
	lsr	r2, r2, #0x18
	mov	ip, r2
	ldr	r7, [sp, #0x1c]
	ldr	r2, .L317
	add	r0, r7, r2
	mov	r2, ip
	str	r3, [sp, #0x24]
	bl	SetMonMoveSlot
	ldr	r7, .L317+0x4
	ldr	r0, [r7]
	add	r0, r0, r9
	add	r0, r0, r5
	ldrh	r0, [r0]
	ldr	r3, [sp, #0x24]
	ldr	r1, [r3]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	add	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r0, [r0]
	cmp	r0, #0xda
	bne	.L313	@cond_branch
	mov	r1, #0x0
	add	r0, sp, #0xc
	strb	r1, [r0]
.L313:
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L314	@cond_branch
	mov	r0, #0x64
	ldr	r1, [sp, #0x10]
	mov	r4, r1
	mul	r4, r4, r0
	ldr	r0, .L317
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x20
	add	r2, sp, #0xc
	bl	SetMonData
	ldr	r0, .L317+0x4
	ldr	r0, [r0]
	ldr	r1, [sp, #0x20]
	add	r1, r1, r8
	ldr	r2, .L317+0x8
	add	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0]
	ldr	r1, .L317+0xc
	ldr	r1, [r1]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r2, [r0, #0xa]
	lsl	r2, r2, #0x1
	ldr	r0, .L317+0x10
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0xc
	bl	SetMonData
	add	sp, sp, #0x30
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L318:
	.align	2, 0
.L317:
	.word	gEnemyParty
	.word	gSaveBlock2Ptr
	.word	0xd64
	.word	gFacilityTrainerMons
	.word	gBattleFrontierHeldItems
.Lfe11:
	.size	 CreateDomeOpponentMon,.Lfe11-CreateDomeOpponentMon
	.align	2, 0
	.type	 CreateDomeOpponentMons,function
	.thumb_func
CreateDomeOpponentMons:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	mov	r6, #0x0
	bl	ZeroEnemyPartyMons
	mov	r0, r8
	bl	GetDomeTrainerMonCountInBits
	add	r5, r0, #0
	bl	Random
	add	r4, r0, #0
	bl	Random
	lsl	r4, r4, #0x10
	lsr	r7, r4, #0x10
	lsl	r0, r0, #0x10
	orr	r7, r7, r0
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x5
	bls	.L320	@cond_branch
	mov	r4, #0x0
.L324:
	mov	r0, #0x1
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L325	@cond_branch
	lsl	r2, r4, #0x18
	lsr	r2, r2, #0x18
	add	r0, r6, #0
	mov	r1, r8
	add	r3, r7, #0
	bl	CreateDomeOpponentMon
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L325:
	asr	r5, r5, #0x1
	add	r4, r4, #0x1
	cmp	r4, #0x2
	ble	.L324	@cond_branch
	b	.L327
.L320:
	mov	r4, #0x2
.L331:
	mov	r0, #0x4
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L332	@cond_branch
	lsl	r2, r4, #0x18
	lsr	r2, r2, #0x18
	add	r0, r6, #0
	mov	r1, r8
	add	r3, r7, #0
	bl	CreateDomeOpponentMon
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L332:
	lsl	r5, r5, #0x1
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L331	@cond_branch
.L327:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 CreateDomeOpponentMons,.Lfe12-CreateDomeOpponentMons
	.align	2, 0
	.globl	GetDomeTrainerMonCountInBits
	.type	 GetDomeTrainerMonCountInBits,function
	.thumb_func
GetDomeTrainerMonCountInBits:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r5, r4, #0
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L335	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	sub_818FCBC
	cmp	r0, #0
	bne	.L337	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_818FDB8
	b	.L337
.L335:
	add	r0, r5, #0
	mov	r1, #0x0
	bl	sub_818FDB8
	cmp	r0, #0
	bne	.L337	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	sub_818FCBC
.L337:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 GetDomeTrainerMonCountInBits,.Lfe13-GetDomeTrainerMonCountInBits
	.align	2, 0
	.type	 sub_818FCBC,function
	.thumb_func
sub_818FCBC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0xc]
	mov	r0, #0x0
	mov	r9, r0
	mov	r1, r8
	lsl	r1, r1, #0x2
	str	r1, [sp, #0x18]
.L343:
	mov	r2, r9
	lsl	r0, r2, #0x2
	mov	r2, sp
	add	r1, r2, r0
	mov	r0, #0x0
	str	r0, [r1]
	mov	r7, #0x0
	mov	r0, r9
	add	r0, r0, #0x1
	str	r0, [sp, #0x14]
	add	r5, r1, #0
	mov	r1, r9
	lsl	r1, r1, #0x1
	str	r1, [sp, #0x10]
.L347:
	mov	r6, #0x0
	add	r2, r7, #0x1
	mov	sl, r2
.L351:
	ldr	r0, .L358
	ldr	r1, [r0]
	ldr	r2, [sp, #0x18]
	add	r0, r1, r2
	ldr	r2, .L358+0x4
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	ldr	r2, .L358+0x8
	cmp	r0, r2
	bne	.L352	@cond_branch
	mov	r1, r9
	lsl	r0, r1, #0x18
	lsl	r1, r7, #0x18
	lsr	r0, r0, #0x18
	lsr	r1, r1, #0x18
	bl	GetFrontierBrainMonMove
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	b	.L357
.L359:
	.align	2, 0
.L358:
	.word	gSaveBlock2Ptr
	.word	0xd24
	.word	0x3fe
.L352:
	mov	r2, r8
	lsl	r0, r2, #0x1
	add	r0, r0, r8
	lsl	r0, r0, #0x1
	ldr	r2, [sp, #0x10]
	add	r0, r2, r0
	ldr	r2, .L360
	add	r1, r1, r2
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldr	r1, .L360+0x4
	ldr	r1, [r1]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	lsl	r1, r7, #0x1
	add	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r4, [r0]
.L357:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L360+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	add	r1, r0, #0
	add	r0, r4, #0
	mov	r2, #0x0
	bl	GetTypeEffectivenessPoints
	ldr	r1, [r5]
	add	r1, r1, r0
	str	r1, [r5]
	add	r6, r6, #0x1
	cmp	r6, #0x2
	ble	.L351	@cond_branch
	mov	r7, sl
	cmp	r7, #0x3
	ble	.L347	@cond_branch
	ldr	r0, [sp, #0x14]
	mov	r9, r0
	cmp	r0, #0x2
	ble	.L343	@cond_branch
	mov	r0, sp
	ldr	r1, [sp, #0xc]
	bl	sub_818FEB4
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L361:
	.align	2, 0
.L360:
	.word	0xd64
	.word	gFacilityTrainerMons
	.word	gPlayerParty
.Lfe14:
	.size	 sub_818FCBC,.Lfe14-sub_818FCBC
	.align	2, 0
	.type	 sub_818FDB8,function
	.thumb_func
sub_818FDB8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0xc]
	mov	r0, #0x0
	mov	r9, r0
	mov	r1, r8
	lsl	r1, r1, #0x2
	str	r1, [sp, #0x18]
.L366:
	mov	r2, r9
	lsl	r0, r2, #0x2
	mov	r2, sp
	add	r1, r2, r0
	mov	r0, #0x0
	str	r0, [r1]
	mov	r7, #0x0
	mov	r0, r9
	add	r0, r0, #0x1
	str	r0, [sp, #0x14]
	add	r5, r1, #0
	mov	r1, r9
	lsl	r1, r1, #0x1
	str	r1, [sp, #0x10]
.L370:
	mov	r6, #0x0
	add	r2, r7, #0x1
	mov	sl, r2
.L374:
	ldr	r0, .L381
	ldr	r1, [r0]
	ldr	r2, [sp, #0x18]
	add	r0, r1, r2
	ldr	r2, .L381+0x4
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	ldr	r2, .L381+0x8
	cmp	r0, r2
	bne	.L375	@cond_branch
	mov	r1, r9
	lsl	r0, r1, #0x18
	lsl	r1, r7, #0x18
	lsr	r0, r0, #0x18
	lsr	r1, r1, #0x18
	bl	GetFrontierBrainMonMove
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	b	.L380
.L382:
	.align	2, 0
.L381:
	.word	gSaveBlock2Ptr
	.word	0xd24
	.word	0x3fe
.L375:
	mov	r2, r8
	lsl	r0, r2, #0x1
	add	r0, r0, r8
	lsl	r0, r0, #0x1
	ldr	r2, [sp, #0x10]
	add	r0, r2, r0
	ldr	r2, .L383
	add	r1, r1, r2
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldr	r1, .L383+0x4
	ldr	r1, [r1]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	lsl	r1, r7, #0x1
	add	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r4, [r0]
.L380:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L383+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	add	r1, r0, #0
	add	r0, r4, #0
	mov	r2, #0x1
	bl	GetTypeEffectivenessPoints
	ldr	r1, [r5]
	add	r1, r1, r0
	str	r1, [r5]
	add	r6, r6, #0x1
	cmp	r6, #0x2
	ble	.L374	@cond_branch
	mov	r7, sl
	cmp	r7, #0x3
	ble	.L370	@cond_branch
	ldr	r0, [sp, #0x14]
	mov	r9, r0
	cmp	r0, #0x2
	ble	.L366	@cond_branch
	mov	r0, sp
	ldr	r1, [sp, #0xc]
	bl	sub_818FEB4
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L384:
	.align	2, 0
.L383:
	.word	0xd64
	.word	gFacilityTrainerMons
	.word	gPlayerParty
.Lfe15:
	.size	 sub_818FDB8,.Lfe15-sub_818FDB8
	.align	2, 0
	.type	 sub_818FEB4,function
	.thumb_func
sub_818FEB4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	mov	sl, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x0
	str	r0, [sp, #0xc]
	mov	r3, #0x2
	add	r0, sp, #0x8
.L389:
	str	r3, [r0]
	sub	r0, r0, #0x4
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L389	@cond_branch
	mov	r3, sl
	ldr	r2, [r3]
	ldr	r0, [r3, #0x4]
	cmp	r2, r0
	bne	.L391	@cond_branch
	ldr	r0, [r3, #0x8]
	cmp	r2, r0
	bne	.L391	@cond_branch
	cmp	r1, #0
	beq	.L398	@cond_branch
	mov	r3, #0x0
	ldr	r4, .L416
.L395:
	str	r3, [sp, #0x14]
	bl	Random
	mov	r1, #0x3
	and	r1, r1, r0
	ldr	r3, [sp, #0x14]
	cmp	r1, #0x3
	beq	.L393	@cond_branch
	lsl	r0, r1, #0x2
	add	r0, r0, r4
	ldr	r1, [r0]
	ldr	r0, [sp, #0xc]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L393	@cond_branch
	ldr	r0, [sp, #0xc]
	orr	r0, r0, r1
	str	r0, [sp, #0xc]
	add	r3, r3, #0x1
.L393:
	cmp	r3, #0x2
	bne	.L395	@cond_branch
	b	.L398
.L417:
	.align	2, 0
.L416:
	.word	gBitTable
.L391:
	mov	r3, #0x0
	mov	r9, sp
	mov	r8, sl
.L402:
	add	r2, r3, #0x1
	cmp	r2, #0x2
	bgt	.L401	@cond_branch
	mov	r6, r8
	mov	r7, r9
	lsl	r0, r2, #0x2
	mov	r1, sp
	add	r5, r0, r1
	mov	r1, sl
	add	r4, r0, r1
.L406:
	ldr	r0, [r6]
	ldr	r1, [r4]
	cmp	r0, r1
	bge	.L407	@cond_branch
	str	r1, [r6]
	str	r0, [r4]
	ldr	r1, [r7]
	ldr	r0, [r5]
	str	r0, [r7]
	str	r1, [r5]
.L407:
	ldr	r1, [r6]
	ldr	r0, [r4]
	cmp	r1, r0
	bne	.L405	@cond_branch
	str	r2, [sp, #0x10]
	str	r3, [sp, #0x14]
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	ldr	r2, [sp, #0x10]
	ldr	r3, [sp, #0x14]
	cmp	r1, #0
	beq	.L405	@cond_branch
	ldr	r1, [r6]
	ldr	r0, [r4]
	str	r0, [r6]
	str	r1, [r4]
	ldr	r1, [r7]
	ldr	r0, [r5]
	str	r0, [r7]
	str	r1, [r5]
.L405:
	add	r5, r5, #0x4
	add	r4, r4, #0x4
	add	r2, r2, #0x1
	cmp	r2, #0x2
	ble	.L406	@cond_branch
.L401:
	mov	r4, #0x4
	add	r9, r9, r4
	add	r8, r8, r4
	add	r3, r3, #0x1
	cmp	r3, #0x1
	ble	.L402	@cond_branch
	ldr	r2, .L418
	mov	r1, sp
	mov	r3, #0x1
.L414:
	ldmia	r1!, {r0}
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	ldr	r4, [sp, #0xc]
	orr	r4, r4, r0
	str	r4, [sp, #0xc]
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L414	@cond_branch
.L398:
	ldr	r0, [sp, #0xc]
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L419:
	.align	2, 0
.L418:
	.word	gBitTable
.Lfe16:
	.size	 sub_818FEB4,.Lfe16-sub_818FEB4
	.align	2, 0
	.type	 GetTypeEffectivenessPoints,function
	.thumb_func
GetTypeEffectivenessPoints:
	.syntax unified

    push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    sub sp, 0x8
    adds r3, r0, 0
    adds r4, r1, 0
    str r2, [sp]
    movs r6, 0
    movs r2, 0x14
    cmp r3, 0
    beq _0818FFF0
    ldr r0, =0x0000ffff
    cmp r3, r0
    beq _0818FFF0
    ldr r0, =gBattleMoves
    lsls r1, r3, 1
    adds r1, r3
    lsls r1, 2
    adds r3, r1, r0
    ldrb r0, [r3, 0x1]
    cmp r0, 0
    bne _0818FFFC
_0818FFF0:
    movs r0, 0
    b _08190156
    .pool
_0818FFFC:
    ldr r1, =gBaseStats
    lsls r0, r4, 3
    subs r0, r4
    lsls r0, 2
    adds r0, r1
    ldrb r1, [r0, 0x6]
    mov r10, r1
    ldrb r1, [r0, 0x7]
    mov r9, r1
    ldrb r0, [r0, 0x16]
    mov r8, r0
    ldrb r3, [r3, 0x2]
    str r3, [sp, 0x4]
    cmp r0, 0x1A
    bne _0819002C
    cmp r3, 0x4
    bne _0819002C
    ldr r0, [sp]
    cmp r0, 0x1
    bne _081900AA
    movs r2, 0x8
    b _081900A4
    .pool
_0819002C:
    ldr r0, =gTypeEffectiveness
    adds r1, r6, r0
    ldrb r0, [r1]
    ldr r7, =gTypeEffectiveness
    cmp r0, 0xFF
    beq _081900A4
    adds r4, r1, 0
_0819003A:
    ldrb r0, [r4]
    cmp r0, 0xFE
    beq _08190096
    ldrb r0, [r4]
    ldr r1, [sp, 0x4]
    cmp r0, r1
    bne _08190096
    ldrb r0, [r4, 0x1]
    adds r5, r6, 0x1
    cmp r0, r10
    bne _0819006C
    adds r1, r6, 0x2
    mov r0, r8
    cmp r0, 0x19
    bne _0819005E
    ldrb r0, [r4, 0x2]
    cmp r0, 0x28
    bne _0819006C
_0819005E:
    adds r0, r1, r7
    ldrb r0, [r0]
    muls r0, r2
    movs r1, 0xA
    bl __divsi3
    adds r2, r0, 0
_0819006C:
    adds r0, r5, r7
    ldrb r0, [r0]
    cmp r0, r9
    bne _08190096
    cmp r10, r9
    beq _08190096
    adds r1, r6, 0x2
    mov r0, r8
    cmp r0, 0x19
    bne _08190088
    adds r0, r1, r7
    ldrb r0, [r0]
    cmp r0, 0x28
    bne _08190096
_08190088:
    adds r0, r1, r7
    ldrb r0, [r0]
    muls r0, r2
    movs r1, 0xA
    bl __divsi3
    adds r2, r0, 0
_08190096:
    adds r4, 0x3
    adds r6, 0x3
    ldr r1, =gTypeEffectiveness
    adds r0, r6, r1
    ldrb r0, [r0]
    cmp r0, 0xFF
    bne _0819003A
_081900A4:
    ldr r0, [sp]
    cmp r0, 0x1
    beq _081900E0
_081900AA:
    ldr r1, [sp]
    cmp r1, 0x1
    bgt _081900BC
    cmp r1, 0
    beq _081900C4
    b _08190154
    .pool
_081900BC:
    ldr r0, [sp]
    cmp r0, 0x2
    beq _08190114
    b _08190154
_081900C4:
    cmp r2, 0xA
    beq _08190146
    cmp r2, 0xA
    ble _08190146
    cmp r2, 0x28
    beq _0819014A
    cmp r2, 0x28
    bgt _081900DA
    cmp r2, 0x14
    beq _08190104
    b _08190146
_081900DA:
    cmp r2, 0x50
    bne _08190146
    b _08190100
_081900E0:
    cmp r2, 0xA
    beq _08190104
    cmp r2, 0xA
    bgt _081900F2
    cmp r2, 0
    beq _08190100
    cmp r2, 0x5
    beq _0819014A
    b _08190146
_081900F2:
    cmp r2, 0x28
    beq _08190108
    cmp r2, 0x28
    ble _08190146
    cmp r2, 0x50
    beq _0819010E
    b _08190146
_08190100:
    movs r2, 0x8
    b _08190154
_08190104:
    movs r2, 0x2
    b _08190154
_08190108:
    movs r2, 0x2
    negs r2, r2
    b _08190154
_0819010E:
    movs r2, 0x4
    negs r2, r2
    b _08190154
_08190114:
    cmp r2, 0xA
    beq _08190146
    cmp r2, 0xA
    bgt _08190126
    cmp r2, 0
    beq _0819013A
    cmp r2, 0x5
    beq _08190140
    b _08190146
_08190126:
    cmp r2, 0x28
    beq _0819014E
    cmp r2, 0x28
    bgt _08190134
    cmp r2, 0x14
    beq _0819014A
    b _08190146
_08190134:
    cmp r2, 0x50
    beq _08190152
    b _08190146
_0819013A:
    movs r2, 0x10
    negs r2, r2
    b _08190154
_08190140:
    movs r2, 0x8
    negs r2, r2
    b _08190154
_08190146:
    movs r2, 0
    b _08190154
_0819014A:
    movs r2, 0x4
    b _08190154
_0819014E:
    movs r2, 0xC
    b _08190154
_08190152:
    movs r2, 0x14
_08190154:
    adds r0, r2, 0
_08190156:
    add sp, 0x8
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r1}
    bx r1
                
.syntax divided
	.code	16
.Lfe17:
	.size	 GetTypeEffectivenessPoints,.Lfe17-GetTypeEffectivenessPoints
	.align	2, 0
	.type	 GetDomeTrainerMonIvs,function
	.thumb_func
GetDomeTrainerMonIvs:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	cmp	r0, #0x63
	bls	.L423	@cond_branch
	mov	r1, #0x6
	cmp	r0, #0x77
	bls	.L423	@cond_branch
	mov	r1, #0x9
	cmp	r0, #0x8b
	bls	.L423	@cond_branch
	mov	r1, #0xc
	cmp	r0, #0x9f
	bls	.L423	@cond_branch
	mov	r1, #0xf
	cmp	r0, #0xb3
	bls	.L423	@cond_branch
	mov	r1, #0x12
	cmp	r0, #0xc7
	bls	.L423	@cond_branch
	mov	r1, #0x1f
	cmp	r0, #0xdb
	bhi	.L423	@cond_branch
	mov	r1, #0x15
.L423:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 GetDomeTrainerMonIvs,.Lfe18-GetDomeTrainerMonIvs
	.align	2, 0
	.type	 TournamentIdOfOpponent,function
	.thumb_func
TournamentIdOfOpponent:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	add	r2, r1, #0
	mov	r5, #0x0
	ldr	r0, .L460
	ldr	r1, [r0]
	ldr	r4, .L460+0x4
	add	r1, r1, r4
	ldrh	r1, [r1]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	mov	ip, r0
	ldr	r6, .L460+0x8
	cmp	r1, r2
	beq	.L438	@cond_branch
	mov	r7, ip
.L439:
	add	r5, r5, #0x1
	cmp	r5, #0xf
	bgt	.L438	@cond_branch
	ldr	r0, [r7]
	lsl	r1, r5, #0x2
	add	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	cmp	r0, r2
	bne	.L439	@cond_branch
.L438:
	cmp	r3, #0
	beq	.L443	@cond_branch
	cmp	r3, #0x3
	bne	.L444	@cond_branch
	lsl	r0, r5, #0x2
	add	r1, r0, #0x3
	add	r1, r1, r6
	ldrb	r1, [r1]
	add	r4, r1, #0
	add	r4, r4, #0x8
	b	.L445
.L461:
	.align	2, 0
.L460:
	.word	gSaveBlock2Ptr
	.word	0xd24
	.word	sIdToOpponentId
.L444:
	lsl	r0, r5, #0x2
	add	r1, r3, r0
	add	r1, r1, r6
	ldrb	r1, [r1]
	add	r4, r1, #0x4
.L445:
	add	r0, r3, r0
	add	r0, r0, r6
	ldrb	r2, [r0]
	cmp	r2, r4
	bge	.L447	@cond_branch
	ldr	r1, .L462
	add	r0, r2, r1
	ldrb	r3, [r0]
	add	r6, r1, #0
	cmp	r3, r5
	beq	.L448	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	lsl	r1, r3, #0x2
	add	r0, r0, r1
	ldr	r3, .L462+0x4
	add	r0, r0, r3
	b	.L458
.L463:
	.align	2, 0
.L462:
	.word	gUnknown_0860D14C
	.word	0xd25
.L448:
	add	r2, r2, #0x1
	cmp	r2, r4
	bge	.L447	@cond_branch
	add	r0, r2, r6
	ldrb	r1, [r0]
	cmp	r1, r5
	beq	.L448	@cond_branch
	mov	r3, ip
	ldr	r0, [r3]
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldr	r1, .L464
	add	r0, r0, r1
.L458:
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.L448	@cond_branch
.L447:
	cmp	r2, r4
	beq	.L459	@cond_branch
	ldr	r0, .L464+0x4
	add	r0, r2, r0
	ldrb	r0, [r0]
	b	.L457
.L465:
	.align	2, 0
.L464:
	.word	0xd25
	.word	gUnknown_0860D14C
.L443:
	mov	r3, ip
	ldr	r1, [r3]
	lsl	r0, r5, #0x2
	add	r0, r0, r6
	ldrb	r2, [r0]
	lsl	r0, r2, #0x2
	add	r1, r1, r0
	ldr	r0, .L466
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L455	@cond_branch
.L459:
	mov	r0, #0xff
	b	.L457
.L467:
	.align	2, 0
.L466:
	.word	0xd25
.L455:
	add	r0, r2, #0
.L457:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 TournamentIdOfOpponent,.Lfe19-TournamentIdOfOpponent
	.align	2, 0
	.type	 SetDomeOpponentId,function
	.thumb_func
SetDomeOpponentId:
	push	{lr}
	bl	TrainerIdOfPlayerOpponent
	ldr	r1, .L469
	strh	r0, [r1]
	pop	{r0}
	bx	r0
.L470:
	.align	2, 0
.L469:
	.word	gTrainerBattleOpponent_A
.Lfe20:
	.size	 SetDomeOpponentId,.Lfe20-SetDomeOpponentId
	.align	2, 0
	.type	 TrainerIdOfPlayerOpponent,function
	.thumb_func
TrainerIdOfPlayerOpponent:
	push	{r4, lr}
	ldr	r0, .L472
	ldr	r4, [r0]
	ldr	r1, .L472+0x4
	add	r0, r4, r1
	ldrh	r0, [r0]
	ldr	r1, .L472+0x8
	bl	TournamentIdOfOpponent
	lsl	r0, r0, #0x2
	add	r4, r4, r0
	ldr	r0, .L472+0xc
	add	r4, r4, r0
	ldrh	r0, [r4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	pop	{r4}
	pop	{r1}
	bx	r1
.L473:
	.align	2, 0
.L472:
	.word	gSaveBlock2Ptr
	.word	0xcb2
	.word	0x3ff
	.word	0xd24
.Lfe21:
	.size	 TrainerIdOfPlayerOpponent,.Lfe21-TrainerIdOfPlayerOpponent
	.align	2, 0
	.type	 SetDomeOpponentGraphicsId,function
	.thumb_func
SetDomeOpponentGraphicsId:
	push	{lr}
	ldr	r0, .L475
	ldrh	r0, [r0]
	mov	r1, #0x0
	bl	SetBattleFacilityTrainerGfxId
	pop	{r0}
	bx	r0
.L476:
	.align	2, 0
.L475:
	.word	gTrainerBattleOpponent_A
.Lfe22:
	.size	 SetDomeOpponentGraphicsId,.Lfe22-SetDomeOpponentGraphicsId
	.align	2, 0
	.type	 sub_81902F8,function
	.thumb_func
sub_81902F8:
	push	{r4, lr}
	ldr	r4, .L478
	ldr	r0, [r4]
	ldr	r1, .L478+0x4
	ldrh	r1, [r1]
	ldr	r2, .L478+0x8
	add	r0, r0, r2
	strb	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	mov	r1, #0x0
	bl	VarSet
	ldr	r1, [r4]
	ldr	r0, .L478+0xc
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	bl	sub_81A4C30
	pop	{r4}
	pop	{r0}
	bx	r0
.L479:
	.align	2, 0
.L478:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8005
	.word	0xca8
	.word	0xca9
.Lfe23:
	.size	 sub_81902F8,.Lfe23-sub_81902F8
	.align	2, 0
	.type	 UpdateDomeStreaks,function
	.thumb_func
UpdateDomeStreaks:
	push	{r4, r5, lr}
	ldr	r5, .L484
	ldr	r0, [r5]
	ldr	r1, .L484+0x4
	add	r0, r0, r1
	ldrb	r4, [r0]
	lsl	r4, r4, #0x1e
	lsr	r4, r4, #0x1e
	ldr	r0, .L484+0x8
	bl	VarGet
	lsl	r0, r0, #0x18
	ldr	r1, [r5]
	lsl	r4, r4, #0x1
	lsr	r0, r0, #0x16
	add	r4, r4, r0
	ldr	r3, .L484+0xc
	add	r1, r1, r3
	add	r1, r1, r4
	ldrh	r0, [r1]
	ldr	r2, .L484+0x10
	cmp	r0, r2
	bhi	.L481	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r1]
.L481:
	ldr	r0, [r5]
	ldr	r1, .L484+0x14
	add	r0, r0, r1
	add	r1, r0, r4
	ldrh	r0, [r1]
	cmp	r0, r2
	bhi	.L482	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r1]
.L482:
	ldr	r0, [r5]
	add	r1, r0, r3
	add	r1, r1, r4
	ldr	r2, .L484+0x18
	add	r0, r0, r2
	add	r0, r0, r4
	ldrh	r1, [r1]
	ldrh	r2, [r0]
	cmp	r1, r2
	bls	.L483	@cond_branch
	strh	r1, [r0]
.L483:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L485:
	.align	2, 0
.L484:
	.word	gSaveBlock2Ptr
	.word	0xca9
	.word	0x40ce
	.word	0xd0c
	.word	0x3e6
	.word	0xd1c
	.word	0xd14
.Lfe24:
	.size	 UpdateDomeStreaks,.Lfe24-UpdateDomeStreaks
	.align	2, 0
	.type	 ShowDomeOpponentInfo,function
	.thumb_func
ShowDomeOpponentInfo:
	push	{r4, r5, lr}
	ldr	r0, .L487
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L487+0x4
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	mov	r5, #0x0
	strh	r5, [r4, #0x8]
	bl	TrainerIdOfPlayerOpponent
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	TrainerIdToTournamentId
	strh	r0, [r4, #0xa]
	strh	r5, [r4, #0xc]
	strh	r5, [r4, #0xe]
	ldr	r0, .L487+0x8
	bl	SetMainCallback2
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L488:
	.align	2, 0
.L487:
	.word	Task_ShowOpponentInfo
	.word	gTasks
	.word	CB2_BattleDome
.Lfe25:
	.size	 ShowDomeOpponentInfo,.Lfe25-ShowDomeOpponentInfo
	.align	2, 0
	.type	 Task_ShowOpponentInfo,function
	.thumb_func
Task_ShowOpponentInfo:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r1, .L511
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	lsl	r0, r0, #0x3
	add	r6, r0, r1
	mov	r0, #0xa
	ldrsh	r5, [r6, r0]
	mov	r2, #0xc
	ldrsh	r1, [r6, r2]
	mov	r9, r1
	mov	r0, #0xe
	ldrsh	r7, [r6, r0]
	mov	r1, #0x8
	ldrsh	r4, [r6, r1]
	cmp	r4, #0x1
	beq	.L494	@cond_branch
	cmp	r4, #0x1
	bgt	.L509	@cond_branch
	cmp	r4, #0
	beq	.L491	@cond_branch
	b	.L490
.L512:
	.align	2, 0
.L511:
	.word	gTasks
.L509:
	cmp	r4, #0x2
	bne	.LCB4277
	b	.L495	@long jump
.LCB4277:
	cmp	r4, #0x3
	bne	.LCB4279
	b	.L497	@long jump
.LCB4279:
	b	.L490
.L491:
	mov	r0, #0x0
	bl	SetHBlankCallback
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x1
	bl	EnableInterrupts
	str	r4, [sp, #0x4]
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	ldr	r2, .L513
	add	r0, sp, #0x4
	bl	CpuSet
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L513+0x4
	mov	r0, #0x0
	mov	r2, #0x4
	bl	InitBgsFromTemplates
	ldr	r0, .L513+0x8
	bl	InitWindows
	bl	DeactivateAllTextPrinters
	ldr	r0, .L513+0xc
	strh	r4, [r0]
	ldr	r0, .L513+0x10
	strh	r4, [r0]
	ldr	r0, .L513+0x14
	strh	r4, [r0]
	ldr	r0, .L513+0x18
	strh	r4, [r0]
	ldr	r0, .L513+0x1c
	strh	r4, [r0]
	ldr	r0, .L513+0x20
	strh	r4, [r0]
	mov	r2, r9
	cmp	r2, #0x2
	bne	.L492	@cond_branch
	ldr	r0, .L513+0x24
	strh	r4, [r0]
	ldr	r0, .L513+0x28
	strh	r4, [r0]
	b	.L493
.L514:
	.align	2, 0
.L513:
	.word	0x5006000
	.word	gUnknown_0860CE84
	.word	gUnknown_0860CEB4
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gBattle_BG3_X
	.word	gBattle_BG3_Y
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
.L492:
	ldr	r0, .L515
	strh	r4, [r0]
	ldr	r1, .L515+0x4
	mov	r0, #0xa0
	strh	r0, [r1]
.L493:
	ldr	r0, .L515+0x8
	mov	r2, sl
	lsl	r1, r2, #0x2
	add	r1, r1, sl
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L490
.L516:
	.align	2, 0
.L515:
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gTasks
.L494:
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x4c
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x40
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x44
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x42
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x46
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x48
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x4a
	mov	r1, #0x3f
	bl	SetGpuReg
	bl	ResetPaletteFade
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	ldr	r1, .L517
	mov	r0, #0x4
	strb	r0, [r1]
	b	.L510
.L518:
	.align	2, 0
.L517:
	.word	gReservedSpritePaletteCount
.L495:
	ldr	r1, .L519
	mov	r5, #0x80
	lsl	r5, r5, #0x6
	mov	r7, #0x0
	str	r7, [sp]
	mov	r0, #0x2
	add	r2, r5, #0
	mov	r3, #0x0
	bl	DecompressAndLoadBgGfxUsingHeap
	ldr	r1, .L519+0x4
	mov	r4, #0x1
	str	r4, [sp]
	mov	r0, #0x2
	add	r2, r5, #0
	mov	r3, #0x0
	bl	DecompressAndLoadBgGfxUsingHeap
	ldr	r1, .L519+0x8
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	str	r4, [sp]
	mov	r0, #0x3
	mov	r3, #0x0
	bl	DecompressAndLoadBgGfxUsingHeap
	ldr	r0, .L519+0xc
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L519+0x10
	mov	r4, #0x80
	lsl	r4, r4, #0x2
	mov	r1, #0x0
	add	r2, r4, #0
	bl	LoadCompressedPalette
	ldr	r0, .L519+0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r2, r4, #0
	bl	LoadCompressedPalette
	ldr	r0, .L519+0x18
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadCompressedPalette
	mov	r0, r9
	cmp	r0, #0x2
	bne	.L496	@cond_branch
	ldr	r0, .L519+0x1c
	mov	r1, #0x50
	mov	r2, #0x20
	bl	LoadCompressedPalette
.L496:
	str	r7, [sp, #0x8]
	add	r0, sp, #0x8
	ldr	r1, .L519+0x20
	ldr	r2, .L519+0x24
	bl	CpuSet
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
.L510:
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x8]
	b	.L490
.L520:
	.align	2, 0
.L519:
	.word	gUnknown_08D83D50
	.word	gUnknown_08D84970
	.word	gUnknown_08D84F00
	.word	sDomeOptionsSpriteSheet
	.word	gUnknown_08D85358
	.word	gUnknown_08D85444
	.word	gUnknown_08D85600
	.word	gUnknown_08D854C8
	.word	gPlttBufferFaded
	.word	0x5000100
.L497:
	ldr	r0, .L521
	bl	SetVBlankCallback
	ldr	r4, .L521+0x4
	mov	r0, #0x14
	bl	AllocZeroed
	str	r0, [r4]
	mov	r6, #0x0
	lsl	r5, r5, #0x18
	mov	r2, #0xff
.L501:
	ldr	r1, [r4]
	add	r1, r1, r6
	ldrb	r0, [r1]
	orr	r0, r0, r2
	strb	r0, [r1]
	add	r6, r6, #0x1
	cmp	r6, #0xf
	ble	.L501	@cond_branch
	bl	LoadMonIconPalettes
	ldr	r0, .L521+0x8
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L521+0xc
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x8]
	strh	r1, [r0, #0xc]
	mov	r1, r9
	strh	r1, [r0, #0xe]
	strh	r7, [r0, #0x10]
	mov	r2, r9
	cmp	r2, #0x2
	bne	.L503	@cond_branch
	lsr	r1, r5, #0x18
	mov	r0, #0x0
	bl	DisplayMatchInfoOnCard
	ldr	r0, .L521+0x4
	ldr	r1, [r0]
	mov	r0, #0x1
	strb	r0, [r1, #0x10]
	b	.L504
.L522:
	.align	2, 0
.L521:
	.word	VblankCb0_BattleDome
	.word	sBattleDomeStruct
	.word	sub_8190CD4
	.word	gTasks
.L503:
	lsr	r1, r5, #0x18
	mov	r0, #0x0
	bl	DisplayTrainerInfoOnCard
.L504:
	mov	r1, #0xfa
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, r9
	cmp	r0, #0
	beq	.L505	@cond_branch
	ldr	r5, .L523
	add	r0, r5, #0
	mov	r1, #0x78
	mov	r2, #0x4
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r4, r7, #0x4
	add	r4, r4, r7
	lsl	r4, r4, #0x2
	ldr	r1, .L523+0x4
	mov	r8, r1
	add	r4, r4, r8
	add	r0, r4, #0
	mov	r1, #0x0
	bl	StartSpriteAnim
	strh	r6, [r4, #0x2e]
	add	r0, r5, #0
	mov	r1, #0x78
	mov	r2, #0x9c
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r4, r7, #0x4
	add	r4, r4, r7
	lsl	r4, r4, #0x2
	add	r4, r4, r8
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	strh	r6, [r4, #0x2e]
	ldr	r5, .L523+0x8
	add	r0, r5, #0
	mov	r1, #0x6
	mov	r2, #0x50
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	mov	r2, r8
	add	r4, r0, r2
	add	r0, r4, #0
	mov	r1, #0x0
	bl	StartSpriteAnim
	strh	r6, [r4, #0x2e]
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	mov	r1, r9
	cmp	r1, #0x1
	bne	.L506	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L506:
	add	r0, r5, #0
	mov	r1, #0xea
	mov	r2, #0x50
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r4, r7, #0x4
	add	r4, r4, r7
	lsl	r4, r4, #0x2
	add	r4, r4, r8
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	strh	r6, [r4, #0x2e]
	mov	r0, #0x1
	strh	r0, [r4, #0x30]
.L505:
	mov	r0, sl
	bl	DestroyTask
.L490:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L524:
	.align	2, 0
.L523:
	.word	gUnknown_0860D068
	.word	gSprites
	.word	gUnknown_0860D050
.Lfe26:
	.size	 Task_ShowOpponentInfo,.Lfe26-Task_ShowOpponentInfo
	.align	2, 0
	.type	 SpriteCb_TrainerIconCardScrollUp,function
	.thumb_func
SpriteCb_TrainerIconCardScrollUp:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x22]
	add	r1, r0, #0x4
	strh	r1, [r2, #0x22]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	beq	.L526	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	blt	.L527	@cond_branch
	add	r3, r2, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
.L527:
	ldrh	r0, [r2, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x28
	bne	.L529	@cond_branch
	ldr	r0, .L531
	str	r0, [r2, #0x1c]
	b	.L529
.L532:
	.align	2, 0
.L531:
	.word	SpriteCallbackDummy
.L526:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xbf
	ble	.L529	@cond_branch
	ldr	r0, .L533
	ldr	r0, [r0]
	mov	r3, #0x32
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	ldrh	r0, [r2, #0x34]
	bl	FreeAndDestroyTrainerPicSprite
.L529:
	pop	{r0}
	bx	r0
.L534:
	.align	2, 0
.L533:
	.word	sBattleDomeStruct
.Lfe27:
	.size	 SpriteCb_TrainerIconCardScrollUp,.Lfe27-SpriteCb_TrainerIconCardScrollUp
	.align	2, 0
	.type	 SpriteCb_TrainerIconCardScrollDown,function
	.thumb_func
SpriteCb_TrainerIconCardScrollDown:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x22]
	sub	r1, r0, #0x4
	strh	r1, [r2, #0x22]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	beq	.L536	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xc0
	bgt	.L537	@cond_branch
	add	r3, r2, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
.L537:
	ldrh	r0, [r2, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x28
	bne	.L539	@cond_branch
	ldr	r0, .L541
	str	r0, [r2, #0x1c]
	b	.L539
.L542:
	.align	2, 0
.L541:
	.word	SpriteCallbackDummy
.L536:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	bgt	.L539	@cond_branch
	ldr	r0, .L543
	ldr	r0, [r0]
	mov	r3, #0x32
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	ldrh	r0, [r2, #0x34]
	bl	FreeAndDestroyTrainerPicSprite
.L539:
	pop	{r0}
	bx	r0
.L544:
	.align	2, 0
.L543:
	.word	sBattleDomeStruct
.Lfe28:
	.size	 SpriteCb_TrainerIconCardScrollDown,.Lfe28-SpriteCb_TrainerIconCardScrollDown
	.align	2, 0
	.type	 SpriteCb_TrainerIconCardScrollLeft,function
	.thumb_func
SpriteCb_TrainerIconCardScrollLeft:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x20]
	add	r1, r0, #0x4
	strh	r1, [r2, #0x20]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	beq	.L546	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	blt	.L547	@cond_branch
	add	r3, r2, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
.L547:
	ldrh	r0, [r2, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x40
	bne	.L549	@cond_branch
	ldr	r0, .L551
	str	r0, [r2, #0x1c]
	b	.L549
.L552:
	.align	2, 0
.L551:
	.word	SpriteCallbackDummy
.L546:
	lsl	r1, r1, #0x10
	ldr	r0, .L553
	cmp	r1, r0
	ble	.L549	@cond_branch
	ldr	r0, .L553+0x4
	ldr	r0, [r0]
	mov	r3, #0x32
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	ldrh	r0, [r2, #0x34]
	bl	FreeAndDestroyTrainerPicSprite
.L549:
	pop	{r0}
	bx	r0
.L554:
	.align	2, 0
.L553:
	.word	0x10f0000
	.word	sBattleDomeStruct
.Lfe29:
	.size	 SpriteCb_TrainerIconCardScrollLeft,.Lfe29-SpriteCb_TrainerIconCardScrollLeft
	.align	2, 0
	.type	 SpriteCb_TrainerIconCardScrollRight,function
	.thumb_func
SpriteCb_TrainerIconCardScrollRight:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x20]
	sub	r1, r0, #0x4
	strh	r1, [r2, #0x20]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	beq	.L556	@cond_branch
	lsl	r1, r1, #0x10
	mov	r0, #0x88
	lsl	r0, r0, #0x11
	cmp	r1, r0
	bgt	.L557	@cond_branch
	add	r3, r2, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
.L557:
	ldrh	r0, [r2, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x40
	bne	.L559	@cond_branch
	ldr	r0, .L561
	str	r0, [r2, #0x1c]
	b	.L559
.L562:
	.align	2, 0
.L561:
	.word	SpriteCallbackDummy
.L556:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	bgt	.L559	@cond_branch
	ldr	r0, .L563
	ldr	r0, [r0]
	mov	r3, #0x32
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	ldrh	r0, [r2, #0x34]
	bl	FreeAndDestroyTrainerPicSprite
.L559:
	pop	{r0}
	bx	r0
.L564:
	.align	2, 0
.L563:
	.word	sBattleDomeStruct
.Lfe30:
	.size	 SpriteCb_TrainerIconCardScrollRight,.Lfe30-SpriteCb_TrainerIconCardScrollRight
	.align	2, 0
	.type	 SpriteCb_MonIcon,function
	.thumb_func
SpriteCb_MonIcon:
	push	{lr}
	add	r1, r0, #0
	mov	r2, #0x34
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L566	@cond_branch
	add	r0, r1, #0
	bl	UpdateMonIconFrame
.L566:
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 SpriteCb_MonIcon,.Lfe31-SpriteCb_MonIcon
	.align	2, 0
	.type	 SpriteCb_MonIconCardScrollUp,function
	.thumb_func
SpriteCb_MonIconCardScrollUp:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L568	@cond_branch
	add	r0, r4, #0
	bl	UpdateMonIconFrame
.L568:
	ldrh	r0, [r4, #0x22]
	add	r1, r0, #0x4
	strh	r1, [r4, #0x22]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L569	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x10
	neg	r1, r1
	cmp	r0, r1
	blt	.L570	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L570:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x28
	bne	.L572	@cond_branch
	ldr	r0, .L574
	str	r0, [r4, #0x1c]
	b	.L572
.L575:
	.align	2, 0
.L574:
	.word	SpriteCb_MonIcon
.L569:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xaf
	ble	.L572	@cond_branch
	ldr	r0, .L576
	ldr	r0, [r0]
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	add	r0, r4, #0
	bl	sub_80D2EF8
.L572:
	pop	{r4}
	pop	{r0}
	bx	r0
.L577:
	.align	2, 0
.L576:
	.word	sBattleDomeStruct
.Lfe32:
	.size	 SpriteCb_MonIconCardScrollUp,.Lfe32-SpriteCb_MonIconCardScrollUp
	.align	2, 0
	.type	 SpriteCb_MonIconCardScrollDown,function
	.thumb_func
SpriteCb_MonIconCardScrollDown:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L579	@cond_branch
	add	r0, r4, #0
	bl	UpdateMonIconFrame
.L579:
	ldrh	r0, [r4, #0x22]
	sub	r1, r0, #0x4
	strh	r1, [r4, #0x22]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L580	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xb0
	bgt	.L581	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L581:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x28
	bne	.L583	@cond_branch
	ldr	r0, .L585
	str	r0, [r4, #0x1c]
	b	.L583
.L586:
	.align	2, 0
.L585:
	.word	SpriteCb_MonIcon
.L580:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x10
	neg	r1, r1
	cmp	r0, r1
	bgt	.L583	@cond_branch
	ldr	r0, .L587
	ldr	r0, [r0]
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	add	r0, r4, #0
	bl	sub_80D2EF8
.L583:
	pop	{r4}
	pop	{r0}
	bx	r0
.L588:
	.align	2, 0
.L587:
	.word	sBattleDomeStruct
.Lfe33:
	.size	 SpriteCb_MonIconCardScrollDown,.Lfe33-SpriteCb_MonIconCardScrollDown
	.align	2, 0
	.type	 SpriteCb_MonIconCardScrollLeft,function
	.thumb_func
SpriteCb_MonIconCardScrollLeft:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L590	@cond_branch
	add	r0, r4, #0
	bl	UpdateMonIconFrame
.L590:
	ldrh	r0, [r4, #0x20]
	add	r1, r0, #0x4
	strh	r1, [r4, #0x20]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L591	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x10
	neg	r1, r1
	cmp	r0, r1
	blt	.L592	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L592:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x40
	bne	.L594	@cond_branch
	ldr	r0, .L596
	str	r0, [r4, #0x1c]
	b	.L594
.L597:
	.align	2, 0
.L596:
	.word	SpriteCb_MonIcon
.L591:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L594	@cond_branch
	ldr	r0, .L598
	ldr	r0, [r0]
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	add	r0, r4, #0
	bl	sub_80D2EF8
.L594:
	pop	{r4}
	pop	{r0}
	bx	r0
.L599:
	.align	2, 0
.L598:
	.word	sBattleDomeStruct
.Lfe34:
	.size	 SpriteCb_MonIconCardScrollLeft,.Lfe34-SpriteCb_MonIconCardScrollLeft
	.align	2, 0
	.type	 SpriteCb_MonIconCardScrollRight,function
	.thumb_func
SpriteCb_MonIconCardScrollRight:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L601	@cond_branch
	add	r0, r4, #0
	bl	UpdateMonIconFrame
.L601:
	ldrh	r0, [r4, #0x20]
	sub	r1, r0, #0x4
	strh	r1, [r4, #0x20]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L602	@cond_branch
	lsl	r1, r1, #0x10
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	cmp	r1, r0
	bgt	.L603	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L603:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x40
	bne	.L605	@cond_branch
	ldr	r0, .L607
	str	r0, [r4, #0x1c]
	b	.L605
.L608:
	.align	2, 0
.L607:
	.word	SpriteCb_MonIcon
.L602:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x10
	neg	r1, r1
	cmp	r0, r1
	bgt	.L605	@cond_branch
	ldr	r0, .L609
	ldr	r0, [r0]
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	add	r0, r4, #0
	bl	sub_80D2EF8
.L605:
	pop	{r4}
	pop	{r0}
	bx	r0
.L610:
	.align	2, 0
.L609:
	.word	sBattleDomeStruct
.Lfe35:
	.size	 SpriteCb_MonIconCardScrollRight,.Lfe35-SpriteCb_MonIconCardScrollRight
	.align	2, 0
	.type	 sub_8190B40,function
	.thumb_func
sub_8190B40:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r3, r0, #0
	mov	r0, #0x2e
	ldrsh	r6, [r3, r0]
	ldr	r2, .L634
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	mov	r7, #0x10
	ldrsh	r1, [r4, r7]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0xa
	ldrsh	r0, [r0, r1]
	ldr	r1, .L634+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	sl, r0
	ldr	r1, .L634+0x8
	ldr	r5, [r1]
	ldr	r7, .L634+0xc
	add	r0, r5, r7
	ldrh	r0, [r0]
	mov	ip, r0
	mov	r7, #0xe
	ldrsh	r0, [r4, r7]
	mov	r9, r2
	mov	r8, r1
	cmp	r0, #0x1
	bne	.L612	@cond_branch
	mov	r1, #0x30
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	beq	.L613	@cond_branch
	mov	r2, sl
	lsl	r0, r2, #0x2
	add	r1, r5, r0
	ldr	r7, .L634+0x10
	add	r1, r1, r7
	ldrb	r2, [r1]
	lsl	r1, r2, #0x1d
	add	r4, r0, #0
	cmp	r1, #0
	bge	.L614	@cond_branch
	ldr	r0, .L634+0x14
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x10]
	sub	r1, r1, #0x1
	lsl	r0, r2, #0x1b
	lsr	r0, r0, #0x1e
	cmp	r1, r0
	blt	.L632	@cond_branch
.L614:
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r4
	ldr	r2, .L634+0x10
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.L616	@cond_branch
	ldr	r0, .L634+0x14
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	sub	r0, r0, #0x1
	cmp	r0, ip
	blt	.L632	@cond_branch
.L616:
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r9
	mov	r7, #0x8
	ldrsh	r0, [r0, r7]
	b	.L633
.L635:
	.align	2, 0
.L634:
	.word	gTasks
	.word	sTourneyTreeTrainerIds
	.word	gSaveBlock2Ptr
	.word	0xcb2
	.word	0xd25
	.word	sBattleDomeStruct
.L613:
	ldr	r0, .L636
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0
	bne	.L632	@cond_branch
	b	.L629
.L637:
	.align	2, 0
.L636:
	.word	sBattleDomeStruct
.L612:
	mov	r2, #0x30
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	beq	.L624	@cond_branch
	ldr	r0, .L638
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0x1
	bls	.L632	@cond_branch
	mov	r7, #0x8
	ldrsh	r0, [r4, r7]
	b	.L633
.L639:
	.align	2, 0
.L638:
	.word	sBattleDomeStruct
.L624:
	ldr	r0, .L640
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0
	beq	.L629	@cond_branch
.L632:
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	b	.L623
.L641:
	.align	2, 0
.L640:
	.word	sBattleDomeStruct
.L629:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
.L633:
	cmp	r0, #0x2
	bne	.L623	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L623:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 sub_8190B40,.Lfe36-sub_8190B40
	.align	2, 0
	.type	 sub_8190C6C,function
	.thumb_func
sub_8190C6C:
	push	{lr}
	add	r3, r0, #0
	mov	r0, #0x2e
	ldrsh	r1, [r3, r0]
	ldr	r2, .L652
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	mov	r2, #0xe
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x1
	bne	.L643	@cond_branch
	ldr	r0, .L652+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0
	bne	.L651	@cond_branch
	b	.L648
.L653:
	.align	2, 0
.L652:
	.word	gTasks
	.word	sBattleDomeStruct
.L643:
	ldr	r0, .L654
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0x1
	beq	.L648	@cond_branch
.L651:
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x2
	bne	.L647	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L647
.L655:
	.align	2, 0
.L654:
	.word	sBattleDomeStruct
.L648:
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L647:
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 sub_8190C6C,.Lfe37-sub_8190C6C
	.align	2, 0
	.type	 sub_8190CD4,function
	.thumb_func
sub_8190CD4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L873
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r3, #0xe
	ldrsh	r2, [r0, r3]
	mov	r9, r2
	mov	r4, #0x10
	ldrsh	r7, [r0, r4]
	mov	r5, #0x8
	ldrsh	r0, [r0, r5]
	cmp	r0, #0x8
	bls	.LCB5747
	bl	.L657	@far jump
.LCB5747:
	lsl	r0, r0, #0x2
	ldr	r1, .L873+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L874:
	.align	2, 0
.L873:
	.word	gTasks
	.word	.L867
	.align	2, 0
	.align	2, 0
.L867:
	.word	.L658
	.word	.L660
	.word	.L662
	.word	.L677
	.word	.L833
	.word	.L836
	.word	.L839
	.word	.L842
	.word	.L845
.L658:
	ldr	r0, .L875
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	beq	.LCB5774
	bl	.L657	@far jump
.LCB5774:
	mov	r0, #0x1
	neg	r0, r0
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r1, .L875+0x4
	mov	r6, r8
	lsl	r0, r6, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x1
	strh	r1, [r0, #0x8]
	bl	.L657	@ far jump
.L876:
	.align	2, 0
.L875:
	.word	gPaletteFade
	.word	gTasks
.L660:
	ldr	r0, .L877
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB5809
	bl	.L657	@far jump
.LCB5809:
	mov	r1, r8
	lsl	r0, r1, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r2, .L877+0x4
	add	r0, r0, r2
	mov	r1, #0x2
	strh	r1, [r0, #0x8]
	bl	.L657	@ far jump
.L878:
	.align	2, 0
.L877:
	.word	gPaletteFade
	.word	gTasks
.L662:
	mov	r0, r8
	bl	sub_819221C
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x8
	bgt	.L676	@cond_branch
	cmp	r6, #0x1
	bge	.L665	@cond_branch
	bl	.L657	@ far jump
.L676:
	cmp	r6, #0x9
	beq	.LCB5843
	bl	.L657	@far jump
.LCB5843:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L879
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	strh	r1, [r0, #0x8]
	bl	.L657	@ far jump
.L880:
	.align	2, 0
.L879:
	.word	gTasks
.L665:
	ldr	r1, .L881
	mov	r4, r8
	lsl	r2, r4, #0x2
	add	r0, r2, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r6, [r0, #0x12]
	mov	r5, #0xc
	ldrsh	r0, [r0, r5]
	mov	r1, #0x0
	mov	r9, r2
	cmp	r0, #0
	beq	.L666	@cond_branch
	mov	r1, #0x9
.L666:
	add	r6, r1, #0
	add	r0, r6, #0
	add	r0, r0, #0x9
	cmp	r6, r0
	bge	.L669	@cond_branch
	add	r5, r0, #0
.L671:
	lsl	r4, r6, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	r0, r4, #0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	add	r6, r6, #0x1
	cmp	r6, r5
	blt	.L671	@cond_branch
.L669:
	ldr	r0, .L881
	mov	r1, r9
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x3
	strh	r0, [r1, #0x8]
	bl	.L657	@ far jump
.L882:
	.align	2, 0
.L881:
	.word	gTasks
.L677:
	mov	r6, r8
	lsl	r1, r6, #0x2
	add	r0, r1, r6
	lsl	r0, r0, #0x3
	ldr	r2, .L883
	add	r0, r0, r2
	mov	r3, #0x12
	ldrsh	r6, [r0, r3]
	sub	r0, r6, #0x1
	mov	r9, r1
	cmp	r0, #0x7
	bls	.LCB5941
	bl	.L657	@far jump
.LCB5941:
	lsl	r0, r0, #0x2
	ldr	r1, .L883+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L884:
	.align	2, 0
.L883:
	.word	gTasks
	.word	.L831
	.align	2, 0
	.align	2, 0
.L831:
	.word	.L680
	.word	.L710
	.word	.L739
	.word	.L785
	.word	.L680
	.word	.L710
	.word	.L762
	.word	.L808
.L680:
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r4, .L885
	add	r0, r0, r4
	mov	r5, #0xc
	ldrsh	r2, [r0, r5]
	cmp	r2, #0
	beq	.L681	@cond_branch
	ldr	r0, .L885+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L885+0x8
	strh	r1, [r0]
	ldr	r0, .L885+0xc
	strh	r1, [r0]
	ldr	r1, .L885+0x10
	mov	r0, #0xa0
	strh	r0, [r1]
	b	.L682
.L886:
	.align	2, 0
.L885:
	.word	gTasks
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
.L681:
	ldr	r0, .L887
	strh	r2, [r0]
	ldr	r1, .L887+0x4
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r0, .L887+0x8
	strh	r2, [r0]
	ldr	r0, .L887+0xc
	strh	r2, [r0]
.L682:
	cmp	r6, #0x1
	bne	.L683	@cond_branch
	ldr	r5, .L887+0x10
	ldr	r0, [r5]
	ldrb	r1, [r0, #0x10]
	cmp	r1, #0
	bne	.L684	@cond_branch
	ldr	r0, .L887+0x14
	strh	r1, [r0]
	ldr	r1, .L887+0x18
	mov	r6, #0xa0
	lsl	r6, r6, #0x1
	add	r0, r6, #0
	strh	r0, [r1]
	ldr	r3, .L887+0x1c
	ldr	r2, .L887+0x20
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r4, #0xa
	ldrsh	r1, [r0, r4]
	add	r1, r1, r3
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r2, [r0, #0xc]
	mov	r0, #0x10
	orr	r0, r0, r2
	ldrb	r1, [r1]
	bl	DisplayTrainerInfoOnCard
	b	.L686
.L888:
	.align	2, 0
.L887:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	sBattleDomeStruct
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	sTourneyTreeTrainerIds
	.word	gTasks
.L684:
	ldr	r1, .L889
	mov	r6, #0x80
	lsl	r6, r6, #0x1
	add	r0, r6, #0
	strh	r0, [r1]
	ldr	r0, .L889+0x4
	mov	r4, #0x0
	strh	r4, [r0]
	ldr	r3, .L889+0x8
	ldr	r2, .L889+0xc
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r6, #0xa
	ldrsh	r1, [r0, r6]
	add	r1, r1, r3
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r2, [r0, #0xc]
	mov	r0, #0x10
	orr	r0, r0, r2
	ldrb	r1, [r1]
	bl	DisplayTrainerInfoOnCard
	ldr	r0, [r5]
	strb	r4, [r0, #0x10]
	b	.L686
.L890:
	.align	2, 0
.L889:
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	sTourneyTreeTrainerIds
	.word	gTasks
.L683:
	ldr	r6, .L891
	ldr	r1, [r6]
	ldrb	r5, [r1, #0x10]
	cmp	r5, #0
	bne	.L687	@cond_branch
	ldr	r4, .L891+0x4
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r2, #0xa
	ldrsh	r0, [r0, r2]
	add	r2, r0, #0
	sub	r2, r2, #0x10
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	add	r1, r1, #0x11
	bl	sub_8192F08
	ldr	r0, .L891+0x8
	strh	r5, [r0]
	ldr	r1, .L891+0xc
	mov	r3, #0xa0
	lsl	r3, r3, #0x1
	add	r0, r3, #0
	strh	r0, [r1]
	ldr	r2, [r6]
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldrb	r1, [r0, #0xc]
	mov	r0, #0x10
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x11]
	bl	DisplayTrainerInfoOnCard
	b	.L686
.L892:
	.align	2, 0
.L891:
	.word	sBattleDomeStruct
	.word	gTasks
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
.L687:
	cmp	r5, #0x2
	bne	.L689	@cond_branch
	ldr	r4, .L893
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r5, #0xa
	ldrsh	r0, [r0, r5]
	add	r2, r0, #0
	sub	r2, r2, #0x10
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	add	r1, r1, #0x11
	bl	sub_8192F08
	ldr	r1, .L893+0x4
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L893+0x8
	mov	r2, #0xa0
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r2, [r6]
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldrb	r1, [r0, #0xc]
	mov	r0, #0x10
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x12]
	bl	DisplayTrainerInfoOnCard
	b	.L686
.L894:
	.align	2, 0
.L893:
	.word	gTasks
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
.L689:
	ldr	r1, .L895
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r0, r3, #0
	strh	r0, [r1]
	ldr	r1, .L895+0x4
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r1, .L895+0x8
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r4, #0xa
	ldrsh	r0, [r0, r4]
	add	r2, r0, #0
	sub	r2, r2, #0x10
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0xc]
	mov	r0, #0x10
	orr	r0, r0, r1
	lsl	r1, r2, #0x18
	lsr	r1, r1, #0x18
	bl	DisplayMatchInfoOnCard
.L686:
	mov	r6, #0x0
	ldr	r5, .L895+0xc
	mov	sl, r5
	ldr	r3, .L895+0x10
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r1, .L895+0x8
	add	r5, r0, r1
	mov	ip, r6
	add	r4, r3, #0
	add	r4, r4, #0x1c
	mov	r7, #0x1
.L694:
	cmp	r6, #0x1
	bgt	.L695	@cond_branch
	mov	r2, sl
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L693	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L895+0x14
	str	r1, [r0]
	ldrb	r0, [r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r5, #0xc]
	eor	r0, r0, r7
	strh	r0, [r1, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, ip
	strh	r1, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r1, [r0, #0x34]
	b	.L693
.L896:
	.align	2, 0
.L895:
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gTasks
	.word	sBattleDomeStruct
	.word	gSprites
	.word	SpriteCb_TrainerIconCardScrollUp
.L695:
	mov	r2, sl
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L693	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L897
	str	r1, [r0]
	ldrb	r0, [r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r5, #0xc]
	eor	r0, r0, r7
	strh	r0, [r1, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, ip
	strh	r1, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
.L693:
	add	r6, r6, #0x1
	cmp	r6, #0x7
	ble	.L694	@cond_branch
	mov	r6, #0x8
	ldr	r2, .L897+0x4
	mov	ip, r2
	ldr	r3, .L897+0x8
	ldr	r1, .L897+0xc
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r4, #0x0
	add	r7, r3, #0
	add	r7, r7, #0x1c
.L703:
	cmp	r6, #0x9
	bgt	.L704	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L702	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, .L897+0x10
	str	r1, [r0]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r5, #0xc]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r1, [r0, #0x34]
	b	.L702
.L898:
	.align	2, 0
.L897:
	.word	SpriteCb_MonIconCardScrollUp
	.word	sBattleDomeStruct
	.word	gSprites
	.word	gTasks
	.word	SpriteCb_TrainerIconCardScrollUp
.L704:
	mov	r2, ip
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L702	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, .L899
	str	r1, [r0]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r5, #0xc]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
.L702:
	add	r6, r6, #0x1
	cmp	r6, #0xf
	ble	.L703	@cond_branch
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r3, .L899+0x4
	add	r0, r0, r3
	mov	r2, #0x0
	mov	r1, #0x4
	bl	.L869	@ far jump
.L900:
	.align	2, 0
.L899:
	.word	SpriteCb_MonIconCardScrollUp
	.word	gTasks
.L710:
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r4, .L901
	add	r0, r0, r4
	mov	r5, #0xc
	ldrsh	r2, [r0, r5]
	cmp	r2, #0
	beq	.L711	@cond_branch
	ldr	r0, .L901+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L901+0x8
	strh	r1, [r0]
	ldr	r0, .L901+0xc
	strh	r1, [r0]
	ldr	r1, .L901+0x10
	ldr	r2, .L901+0x14
	add	r0, r2, #0
	strh	r0, [r1]
	b	.L712
.L902:
	.align	2, 0
.L901:
	.word	gTasks
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	0xff60
.L711:
	ldr	r0, .L903
	strh	r2, [r0]
	ldr	r1, .L903+0x4
	ldr	r3, .L903+0x8
	add	r0, r3, #0
	strh	r0, [r1]
	ldr	r0, .L903+0xc
	strh	r2, [r0]
	ldr	r0, .L903+0x10
	strh	r2, [r0]
.L712:
	cmp	r6, #0x2
	bne	.L713	@cond_branch
	ldr	r5, .L903+0x14
	ldr	r0, [r5]
	ldrb	r1, [r0, #0x10]
	cmp	r1, #0
	bne	.L714	@cond_branch
	ldr	r0, .L903+0x18
	strh	r1, [r0]
	ldr	r1, .L903+0x1c
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r3, .L903+0x20
	ldr	r2, .L903+0x24
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r4, #0xa
	ldrsh	r1, [r0, r4]
	add	r1, r1, r3
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r2, [r0, #0xc]
	mov	r0, #0x4
	orr	r0, r0, r2
	ldrb	r1, [r1]
	bl	DisplayTrainerInfoOnCard
	b	.L716
.L904:
	.align	2, 0
.L903:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	0xff60
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	sBattleDomeStruct
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	sTourneyTreeTrainerIds
	.word	gTasks
.L714:
	ldr	r0, .L905
	mov	r4, #0x0
	strh	r4, [r0]
	ldr	r0, .L905+0x4
	strh	r4, [r0]
	ldr	r3, .L905+0x8
	ldr	r2, .L905+0xc
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r6, #0xa
	ldrsh	r1, [r0, r6]
	add	r1, r1, r3
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r2, [r0, #0xc]
	mov	r0, #0x4
	orr	r0, r0, r2
	ldrb	r1, [r1]
	bl	DisplayTrainerInfoOnCard
	ldr	r0, [r5]
	strb	r4, [r0, #0x10]
	b	.L716
.L906:
	.align	2, 0
.L905:
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	sTourneyTreeTrainerIds
	.word	gTasks
.L713:
	ldr	r6, .L907
	ldr	r1, [r6]
	ldrb	r5, [r1, #0x10]
	cmp	r5, #0
	bne	.L717	@cond_branch
	ldr	r4, .L907+0x4
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r2, #0xa
	ldrsh	r0, [r0, r2]
	add	r2, r0, #0
	sub	r2, r2, #0x10
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	add	r1, r1, #0x11
	bl	sub_8192F08
	ldr	r0, .L907+0x8
	strh	r5, [r0]
	ldr	r1, .L907+0xc
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r2, [r6]
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldrb	r1, [r0, #0xc]
	mov	r0, #0x4
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x11]
	bl	DisplayTrainerInfoOnCard
	b	.L716
.L908:
	.align	2, 0
.L907:
	.word	sBattleDomeStruct
	.word	gTasks
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
.L717:
	cmp	r5, #0x2
	bne	.L719	@cond_branch
	ldr	r4, .L909
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r3, #0xa
	ldrsh	r0, [r0, r3]
	add	r2, r0, #0
	sub	r2, r2, #0x10
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	add	r1, r1, #0x11
	bl	sub_8192F08
	ldr	r1, .L909+0x4
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L909+0x8
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r2, [r6]
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldrb	r1, [r0, #0xc]
	mov	r0, #0x4
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x12]
	bl	DisplayTrainerInfoOnCard
	b	.L716
.L910:
	.align	2, 0
.L909:
	.word	gTasks
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
.L719:
	ldr	r1, .L911
	mov	r4, #0x80
	lsl	r4, r4, #0x1
	add	r0, r4, #0
	strh	r0, [r1]
	ldr	r1, .L911+0x4
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L911+0x8
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r5, #0xa
	ldrsh	r0, [r0, r5]
	add	r2, r0, #0
	sub	r2, r2, #0x10
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0xc]
	mov	r0, #0x4
	orr	r0, r0, r1
	lsl	r1, r2, #0x18
	lsr	r1, r1, #0x18
	bl	DisplayMatchInfoOnCard
.L716:
	mov	r6, #0x0
	ldr	r0, .L911+0xc
	mov	sl, r0
	ldr	r3, .L911+0x10
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r1, .L911+0x8
	add	r5, r0, r1
	mov	ip, r6
	add	r4, r3, #0
	add	r4, r4, #0x1c
	mov	r7, #0x1
.L724:
	cmp	r6, #0x1
	bgt	.L725	@cond_branch
	mov	r2, sl
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L723	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L911+0x14
	str	r1, [r0]
	ldrb	r0, [r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r5, #0xc]
	eor	r0, r0, r7
	strh	r0, [r1, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, ip
	strh	r1, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r1, [r0, #0x34]
	b	.L723
.L912:
	.align	2, 0
.L911:
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gTasks
	.word	sBattleDomeStruct
	.word	gSprites
	.word	SpriteCb_TrainerIconCardScrollDown
.L725:
	mov	r2, sl
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L723	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L913
	str	r1, [r0]
	ldrb	r0, [r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r5, #0xc]
	eor	r0, r0, r7
	strh	r0, [r1, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, ip
	strh	r1, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
.L723:
	add	r6, r6, #0x1
	cmp	r6, #0x7
	ble	.L724	@cond_branch
	mov	r6, #0x8
	ldr	r2, .L913+0x4
	mov	ip, r2
	ldr	r3, .L913+0x8
	ldr	r1, .L913+0xc
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r4, #0x0
	add	r7, r3, #0
	add	r7, r7, #0x1c
.L733:
	cmp	r6, #0x9
	bgt	.L734	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L732	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, .L913+0x10
	str	r1, [r0]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r5, #0xc]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r1, [r0, #0x34]
	b	.L732
.L914:
	.align	2, 0
.L913:
	.word	SpriteCb_MonIconCardScrollDown
	.word	sBattleDomeStruct
	.word	gSprites
	.word	gTasks
	.word	SpriteCb_TrainerIconCardScrollDown
.L734:
	mov	r2, ip
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L732	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, .L915
	str	r1, [r0]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r5, #0xc]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
.L732:
	add	r6, r6, #0x1
	cmp	r6, #0xf
	ble	.L733	@cond_branch
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r3, .L915+0x4
	add	r0, r0, r3
	mov	r2, #0x0
	mov	r1, #0x5
	bl	.L869	@ far jump
.L916:
	.align	2, 0
.L915:
	.word	SpriteCb_MonIconCardScrollDown
	.word	gTasks
.L739:
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r4, .L917
	add	r0, r0, r4
	mov	r5, #0xc
	ldrsh	r2, [r0, r5]
	cmp	r2, #0
	beq	.L740	@cond_branch
	ldr	r0, .L917+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L917+0x8
	strh	r1, [r0]
	ldr	r2, .L917+0xc
	mov	r6, #0x80
	lsl	r6, r6, #0x1
	add	r0, r6, #0
	strh	r0, [r2]
	ldr	r0, .L917+0x10
	strh	r1, [r0]
	b	.L741
.L918:
	.align	2, 0
.L917:
	.word	gTasks
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
.L740:
	ldr	r1, .L919
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r0, r3, #0
	strh	r0, [r1]
	ldr	r0, .L919+0x4
	strh	r2, [r0]
	ldr	r0, .L919+0x8
	strh	r2, [r0]
	ldr	r0, .L919+0xc
	strh	r2, [r0]
.L741:
	ldr	r0, .L919+0x10
	ldr	r4, [r0]
	ldrb	r0, [r4, #0x10]
	cmp	r0, #0
	bne	.L742	@cond_branch
	ldr	r1, .L919+0x14
	mov	r4, #0x80
	lsl	r4, r4, #0x1
	add	r0, r4, #0
	strh	r0, [r1]
	ldr	r1, .L919+0x18
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r3, .L919+0x1c
	ldr	r2, .L919+0x20
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r5, #0xa
	ldrsh	r1, [r0, r5]
	add	r1, r1, r3
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r2, [r0, #0xc]
	mov	r0, #0x8
	orr	r0, r0, r2
	ldrb	r1, [r1]
	bl	DisplayTrainerInfoOnCard
	b	.L743
.L920:
	.align	2, 0
.L919:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	sBattleDomeStruct
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	sTourneyTreeTrainerIds
	.word	gTasks
.L742:
	ldr	r1, .L921
	mov	r6, #0x80
	lsl	r6, r6, #0x1
	add	r0, r6, #0
	strh	r0, [r1]
	ldr	r1, .L921+0x4
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r3, .L921+0x8
	ldr	r2, .L921+0xc
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r5, #0xa
	ldrsh	r1, [r0, r5]
	lsl	r1, r1, #0x2
	sub	r1, r1, #0x1
	ldrb	r4, [r4, #0x10]
	add	r1, r1, r4
	add	r1, r1, r3
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r2, [r0, #0xc]
	mov	r0, #0x8
	orr	r0, r0, r2
	ldrb	r1, [r1]
	bl	DisplayMatchInfoOnCard
.L743:
	mov	r6, #0x0
	ldr	r0, .L921+0x10
	mov	sl, r0
	ldr	r3, .L921+0x14
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r1, .L921+0xc
	add	r5, r0, r1
	mov	ip, r6
	add	r4, r3, #0
	add	r4, r4, #0x1c
	mov	r7, #0x1
.L747:
	cmp	r6, #0x1
	bgt	.L748	@cond_branch
	mov	r2, sl
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L746	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L921+0x18
	str	r1, [r0]
	ldrb	r0, [r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r5, #0xc]
	eor	r0, r0, r7
	strh	r0, [r1, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, ip
	strh	r1, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r1, [r0, #0x34]
	b	.L746
.L922:
	.align	2, 0
.L921:
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gUnknown_0860D15C
	.word	gTasks
	.word	sBattleDomeStruct
	.word	gSprites
	.word	SpriteCb_TrainerIconCardScrollLeft
.L748:
	mov	r2, sl
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L746	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L923
	str	r1, [r0]
	ldrb	r0, [r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r5, #0xc]
	eor	r0, r0, r7
	strh	r0, [r1, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, ip
	strh	r1, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
.L746:
	add	r6, r6, #0x1
	cmp	r6, #0x7
	ble	.L747	@cond_branch
	mov	r6, #0x8
	ldr	r2, .L923+0x4
	mov	ip, r2
	ldr	r3, .L923+0x8
	ldr	r1, .L923+0xc
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r4, #0x0
	add	r7, r3, #0
	add	r7, r7, #0x1c
.L756:
	cmp	r6, #0x9
	bgt	.L757	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L755	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, .L923+0x10
	str	r1, [r0]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r5, #0xc]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r1, [r0, #0x34]
	b	.L755
.L924:
	.align	2, 0
.L923:
	.word	SpriteCb_MonIconCardScrollLeft
	.word	sBattleDomeStruct
	.word	gSprites
	.word	gTasks
	.word	SpriteCb_TrainerIconCardScrollLeft
.L757:
	mov	r2, ip
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L755	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, .L925
	str	r1, [r0]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r5, #0xc]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
.L755:
	add	r6, r6, #0x1
	cmp	r6, #0xf
	ble	.L756	@cond_branch
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r3, .L925+0x4
	add	r0, r0, r3
	mov	r2, #0x0
	mov	r1, #0x6
	b	.L869
.L926:
	.align	2, 0
.L925:
	.word	SpriteCb_MonIconCardScrollLeft
	.word	gTasks
.L762:
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r4, .L927
	add	r0, r0, r4
	mov	r5, #0xc
	ldrsh	r2, [r0, r5]
	cmp	r2, #0
	beq	.L763	@cond_branch
	ldr	r0, .L927+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L927+0x8
	strh	r1, [r0]
	ldr	r2, .L927+0xc
	mov	r6, #0x80
	lsl	r6, r6, #0x1
	add	r0, r6, #0
	strh	r0, [r2]
	ldr	r0, .L927+0x10
	strh	r1, [r0]
	b	.L764
.L928:
	.align	2, 0
.L927:
	.word	gTasks
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
.L763:
	ldr	r1, .L929
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r0, r3, #0
	strh	r0, [r1]
	ldr	r0, .L929+0x4
	strh	r2, [r0]
	ldr	r0, .L929+0x8
	strh	r2, [r0]
	ldr	r0, .L929+0xc
	strh	r2, [r0]
.L764:
	ldr	r0, .L929+0x10
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x10]
	cmp	r0, #0
	bne	.L765	@cond_branch
	ldr	r1, .L929+0x14
	mov	r4, #0x80
	lsl	r4, r4, #0x1
	add	r0, r4, #0
	strh	r0, [r1]
	ldr	r1, .L929+0x18
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r1, .L929+0x1c
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0xc]
	mov	r0, #0x8
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x11]
	bl	DisplayTrainerInfoOnCard
	b	.L766
.L930:
	.align	2, 0
.L929:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	sBattleDomeStruct
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gTasks
.L765:
	ldr	r1, .L931
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L931+0x4
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r1, .L931+0x8
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r5, #0xa
	ldrsh	r0, [r0, r5]
	add	r2, r0, #0
	sub	r2, r2, #0x10
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0xc]
	mov	r0, #0x8
	orr	r0, r0, r1
	lsl	r1, r2, #0x18
	lsr	r1, r1, #0x18
	bl	DisplayMatchInfoOnCard
.L766:
	mov	r6, #0x0
	ldr	r0, .L931+0xc
	mov	sl, r0
	ldr	r3, .L931+0x10
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r1, .L931+0x8
	add	r5, r0, r1
	mov	ip, r6
	add	r4, r3, #0
	add	r4, r4, #0x1c
	mov	r7, #0x1
.L770:
	cmp	r6, #0x1
	bgt	.L771	@cond_branch
	mov	r2, sl
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L769	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L931+0x14
	str	r1, [r0]
	ldrb	r0, [r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r5, #0xc]
	eor	r0, r0, r7
	strh	r0, [r1, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, ip
	strh	r1, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r1, [r0, #0x34]
	b	.L769
.L932:
	.align	2, 0
.L931:
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gTasks
	.word	sBattleDomeStruct
	.word	gSprites
	.word	SpriteCb_TrainerIconCardScrollLeft
.L771:
	mov	r2, sl
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L769	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L933
	str	r1, [r0]
	ldrb	r0, [r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r5, #0xc]
	eor	r0, r0, r7
	strh	r0, [r1, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, ip
	strh	r1, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
.L769:
	add	r6, r6, #0x1
	cmp	r6, #0x7
	ble	.L770	@cond_branch
	mov	r6, #0x8
	ldr	r2, .L933+0x4
	mov	ip, r2
	ldr	r3, .L933+0x8
	ldr	r1, .L933+0xc
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r4, #0x0
	add	r7, r3, #0
	add	r7, r7, #0x1c
.L779:
	cmp	r6, #0x9
	bgt	.L780	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L778	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, .L933+0x10
	str	r1, [r0]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r5, #0xc]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r1, [r0, #0x34]
	b	.L778
.L934:
	.align	2, 0
.L933:
	.word	SpriteCb_MonIconCardScrollLeft
	.word	sBattleDomeStruct
	.word	gSprites
	.word	gTasks
	.word	SpriteCb_TrainerIconCardScrollLeft
.L780:
	mov	r2, ip
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L778	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, .L935
	str	r1, [r0]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r5, #0xc]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
.L778:
	add	r6, r6, #0x1
	cmp	r6, #0xf
	ble	.L779	@cond_branch
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r3, .L935+0x4
	add	r0, r0, r3
	mov	r2, #0x0
	mov	r1, #0x6
	b	.L869
.L936:
	.align	2, 0
.L935:
	.word	SpriteCb_MonIconCardScrollLeft
	.word	gTasks
.L785:
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r4, .L937
	add	r0, r0, r4
	mov	r5, #0xc
	ldrsh	r2, [r0, r5]
	cmp	r2, #0
	beq	.L786	@cond_branch
	ldr	r0, .L937+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L937+0x8
	strh	r1, [r0]
	ldr	r2, .L937+0xc
	mov	r6, #0xff
	lsl	r6, r6, #0x8
	add	r0, r6, #0
	strh	r0, [r2]
	ldr	r0, .L937+0x10
	strh	r1, [r0]
	b	.L787
.L938:
	.align	2, 0
.L937:
	.word	gTasks
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
.L786:
	ldr	r1, .L939
	mov	r3, #0xff
	lsl	r3, r3, #0x8
	add	r0, r3, #0
	strh	r0, [r1]
	ldr	r0, .L939+0x4
	strh	r2, [r0]
	ldr	r0, .L939+0x8
	strh	r2, [r0]
	ldr	r0, .L939+0xc
	strh	r2, [r0]
.L787:
	ldr	r0, .L939+0x10
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0x1
	bne	.L788	@cond_branch
	ldr	r1, .L939+0x14
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L939+0x18
	mov	r0, #0xa0
	strh	r0, [r1]
	b	.L789
.L940:
	.align	2, 0
.L939:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	sBattleDomeStruct
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
.L788:
	ldr	r0, .L941
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L941+0x4
	strh	r1, [r0]
.L789:
	ldr	r4, .L941+0x8
	ldr	r5, .L941+0xc
	ldr	r3, [r5]
	ldr	r2, .L941+0x10
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r6, #0xa
	ldrsh	r1, [r0, r6]
	lsl	r1, r1, #0x2
	sub	r1, r1, #0x1
	ldrb	r3, [r3, #0x10]
	add	r1, r1, r3
	add	r1, r1, r4
	mov	r4, r9
	add	r4, r4, r8
	lsl	r4, r4, #0x3
	add	r4, r4, r2
	ldrb	r2, [r4, #0xc]
	mov	r0, #0x2
	orr	r0, r0, r2
	ldrb	r1, [r1]
	bl	DisplayMatchInfoOnCard
	mov	r6, #0x0
	ldr	r7, .L941+0x14
	mov	ip, r6
	mov	sl, r5
	add	r5, r7, #0
	add	r5, r5, #0x1c
.L793:
	cmp	r6, #0x1
	bgt	.L794	@cond_branch
	mov	r1, sl
	ldr	r0, [r1]
	add	r3, r0, r6
	ldrb	r0, [r3]
	cmp	r0, #0xff
	beq	.L792	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L941+0x18
	str	r1, [r0]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r4, #0xc]
	mov	r2, #0x1
	eor	r1, r1, r2
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	mov	r2, ip
	strh	r2, [r0, #0x30]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r6, [r0, #0x32]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r1, [r0, #0x34]
	b	.L792
.L942:
	.align	2, 0
.L941:
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gUnknown_0860D15C
	.word	sBattleDomeStruct
	.word	gTasks
	.word	gSprites
	.word	SpriteCb_TrainerIconCardScrollRight
.L794:
	mov	r3, sl
	ldr	r0, [r3]
	add	r3, r0, r6
	ldrb	r0, [r3]
	cmp	r0, #0xff
	beq	.L792	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L943
	str	r1, [r0]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r4, #0xc]
	mov	r2, #0x1
	eor	r1, r1, r2
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	mov	r1, ip
	strh	r1, [r0, #0x30]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r6, [r0, #0x32]
.L792:
	add	r6, r6, #0x1
	cmp	r6, #0x7
	ble	.L793	@cond_branch
	mov	r6, #0x8
	ldr	r2, .L943+0x4
	mov	ip, r2
	ldr	r3, .L943+0x8
	ldr	r1, .L943+0xc
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r4, #0x0
	add	r7, r3, #0
	add	r7, r7, #0x1c
.L802:
	cmp	r6, #0x9
	bgt	.L803	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L801	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, .L943+0x10
	str	r1, [r0]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r5, #0xc]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r1, [r0, #0x34]
	b	.L801
.L944:
	.align	2, 0
.L943:
	.word	SpriteCb_MonIconCardScrollRight
	.word	sBattleDomeStruct
	.word	gSprites
	.word	gTasks
	.word	SpriteCb_TrainerIconCardScrollRight
.L803:
	mov	r2, ip
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L801	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, .L945
	str	r1, [r0]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r5, #0xc]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
.L801:
	add	r6, r6, #0x1
	cmp	r6, #0xf
	ble	.L802	@cond_branch
	b	.L870
.L946:
	.align	2, 0
.L945:
	.word	SpriteCb_MonIconCardScrollRight
.L808:
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r4, .L947
	add	r0, r0, r4
	mov	r5, #0xc
	ldrsh	r2, [r0, r5]
	cmp	r2, #0
	beq	.L809	@cond_branch
	ldr	r0, .L947+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L947+0x8
	strh	r1, [r0]
	ldr	r2, .L947+0xc
	mov	r6, #0xff
	lsl	r6, r6, #0x8
	add	r0, r6, #0
	strh	r0, [r2]
	ldr	r0, .L947+0x10
	strh	r1, [r0]
	b	.L810
.L948:
	.align	2, 0
.L947:
	.word	gTasks
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
.L809:
	ldr	r1, .L949
	mov	r3, #0xff
	lsl	r3, r3, #0x8
	add	r0, r3, #0
	strh	r0, [r1]
	ldr	r0, .L949+0x4
	strh	r2, [r0]
	ldr	r0, .L949+0x8
	strh	r2, [r0]
	ldr	r0, .L949+0xc
	strh	r2, [r0]
.L810:
	ldr	r0, .L949+0x10
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x10]
	cmp	r0, #0x2
	bne	.L811	@cond_branch
	ldr	r1, .L949+0x14
	mov	r4, #0x80
	lsl	r4, r4, #0x1
	add	r0, r4, #0
	strh	r0, [r1]
	ldr	r1, .L949+0x18
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r1, .L949+0x1c
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0xc]
	mov	r0, #0x2
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x12]
	bl	DisplayTrainerInfoOnCard
	b	.L812
.L950:
	.align	2, 0
.L949:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	sBattleDomeStruct
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gTasks
.L811:
	ldr	r1, .L951
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L951+0x4
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r1, .L951+0x8
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r5, #0xa
	ldrsh	r0, [r0, r5]
	add	r2, r0, #0
	sub	r2, r2, #0x10
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0xc]
	mov	r0, #0x2
	orr	r0, r0, r1
	lsl	r1, r2, #0x18
	lsr	r1, r1, #0x18
	bl	DisplayMatchInfoOnCard
.L812:
	mov	r6, #0x0
	ldr	r0, .L951+0xc
	mov	sl, r0
	ldr	r3, .L951+0x10
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r1, .L951+0x8
	add	r5, r0, r1
	mov	ip, r6
	add	r4, r3, #0
	add	r4, r4, #0x1c
	mov	r7, #0x1
.L816:
	cmp	r6, #0x1
	bgt	.L817	@cond_branch
	mov	r2, sl
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L815	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L951+0x14
	str	r1, [r0]
	ldrb	r0, [r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r5, #0xc]
	eor	r0, r0, r7
	strh	r0, [r1, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, ip
	strh	r1, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r1, [r0, #0x34]
	b	.L815
.L952:
	.align	2, 0
.L951:
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gTasks
	.word	sBattleDomeStruct
	.word	gSprites
	.word	SpriteCb_TrainerIconCardScrollRight
.L817:
	mov	r2, sl
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L815	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L953
	str	r1, [r0]
	ldrb	r0, [r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r5, #0xc]
	eor	r0, r0, r7
	strh	r0, [r1, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, ip
	strh	r1, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
.L815:
	add	r6, r6, #0x1
	cmp	r6, #0x7
	ble	.L816	@cond_branch
	mov	r6, #0x8
	ldr	r2, .L953+0x4
	mov	ip, r2
	ldr	r3, .L953+0x8
	ldr	r1, .L953+0xc
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r4, #0x0
	add	r7, r3, #0
	add	r7, r7, #0x1c
.L825:
	cmp	r6, #0x9
	bgt	.L826	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L824	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, .L953+0x10
	str	r1, [r0]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r5, #0xc]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r1, [r0, #0x34]
	b	.L824
.L954:
	.align	2, 0
.L953:
	.word	SpriteCb_MonIconCardScrollRight
	.word	sBattleDomeStruct
	.word	gSprites
	.word	gTasks
	.word	SpriteCb_TrainerIconCardScrollRight
.L826:
	mov	r2, ip
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L824	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, .L955
	str	r1, [r0]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r5, #0xc]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
.L824:
	add	r6, r6, #0x1
	cmp	r6, #0xf
	ble	.L825	@cond_branch
.L870:
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r3, .L955+0x4
	add	r0, r0, r3
	mov	r2, #0x0
	mov	r1, #0x7
.L869:
	strh	r1, [r0, #0x8]
	strh	r2, [r0, #0x12]
	b	.L657
.L956:
	.align	2, 0
.L955:
	.word	SpriteCb_MonIconCardScrollRight
	.word	gTasks
.L833:
	mov	r4, r8
	lsl	r0, r4, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r5, .L957
	add	r1, r0, r5
	ldrh	r0, [r1, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x29
	beq	.L843	@cond_branch
	ldr	r1, .L957+0x4
	ldrh	r0, [r1]
	sub	r0, r0, #0x4
	strh	r0, [r1]
	ldr	r1, .L957+0x8
	ldrh	r0, [r1]
	sub	r0, r0, #0x4
	strh	r0, [r1]
	ldr	r1, .L957+0xc
	b	.L871
.L958:
	.align	2, 0
.L957:
	.word	gTasks
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_Y
	.word	gBattle_BG2_Y
.L836:
	mov	r6, r8
	lsl	r0, r6, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r2, .L959
	add	r1, r0, r2
	ldrh	r0, [r1, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x29
	beq	.L843	@cond_branch
	ldr	r1, .L959+0x4
	ldrh	r0, [r1]
	add	r0, r0, #0x4
	strh	r0, [r1]
	ldr	r1, .L959+0x8
	ldrh	r0, [r1]
	add	r0, r0, #0x4
	strh	r0, [r1]
	ldr	r1, .L959+0xc
	b	.L872
.L960:
	.align	2, 0
.L959:
	.word	gTasks
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_Y
	.word	gBattle_BG2_Y
.L839:
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r4, .L961
	add	r1, r0, r4
	ldrh	r0, [r1, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x41
	beq	.L843	@cond_branch
	ldr	r1, .L961+0x4
	ldrh	r0, [r1]
	sub	r0, r0, #0x4
	strh	r0, [r1]
	ldr	r1, .L961+0x8
	ldrh	r0, [r1]
	sub	r0, r0, #0x4
	strh	r0, [r1]
	ldr	r1, .L961+0xc
.L871:
	ldrh	r0, [r1]
	sub	r0, r0, #0x4
	strh	r0, [r1]
	b	.L657
.L962:
	.align	2, 0
.L961:
	.word	gTasks
	.word	gBattle_BG0_X
	.word	gBattle_BG1_X
	.word	gBattle_BG2_X
.L842:
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r6, .L963
	add	r1, r0, r6
	ldrh	r0, [r1, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x41
	beq	.L843	@cond_branch
	ldr	r1, .L963+0x4
	ldrh	r0, [r1]
	add	r0, r0, #0x4
	strh	r0, [r1]
	ldr	r1, .L963+0x8
	ldrh	r0, [r1]
	add	r0, r0, #0x4
	strh	r0, [r1]
	ldr	r1, .L963+0xc
.L872:
	ldrh	r0, [r1]
	add	r0, r0, #0x4
	strh	r0, [r1]
	b	.L657
.L964:
	.align	2, 0
.L963:
	.word	gTasks
	.word	gBattle_BG0_X
	.word	gBattle_BG1_X
	.word	gBattle_BG2_X
.L843:
	mov	r0, #0x2
	strh	r0, [r1, #0x8]
	b	.L657
.L845:
	ldr	r0, .L965
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L657	@cond_branch
	mov	r6, #0x0
	ldr	r4, .L965+0x4
.L850:
	cmp	r6, #0x1
	bgt	.L851	@cond_branch
	ldr	r0, [r4]
	add	r1, r0, r6
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L849	@cond_branch
	bl	FreeAndDestroyTrainerPicSprite
	b	.L849
.L966:
	.align	2, 0
.L965:
	.word	gPaletteFade
	.word	sBattleDomeStruct
.L851:
	ldr	r0, [r4]
	add	r1, r0, r6
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L849	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L967
	add	r0, r0, r1
	bl	sub_80D2EF8
.L849:
	add	r6, r6, #0x1
	cmp	r6, #0x7
	ble	.L850	@cond_branch
	mov	r6, #0x8
	ldr	r4, .L967+0x4
.L859:
	cmp	r6, #0x9
	bgt	.L860	@cond_branch
	ldr	r0, [r4]
	add	r1, r0, r6
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L858	@cond_branch
	bl	FreeAndDestroyTrainerPicSprite
	b	.L858
.L968:
	.align	2, 0
.L967:
	.word	gSprites
	.word	sBattleDomeStruct
.L860:
	ldr	r0, [r4]
	add	r1, r0, r6
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L858	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L969
	add	r0, r0, r1
	bl	sub_80D2EF8
.L858:
	add	r6, r6, #0x1
	cmp	r6, #0xf
	ble	.L859	@cond_branch
	bl	FreeMonIconPalettes
	ldr	r4, .L969+0x4
	ldr	r0, [r4]
	bl	Free
	mov	r5, #0x0
	str	r5, [r4]
	bl	FreeAllWindowBuffers
	mov	r0, r9
	cmp	r0, #0
	bne	.L865	@cond_branch
	ldr	r0, .L969+0x8
	bl	SetMainCallback2
	b	.L866
.L970:
	.align	2, 0
.L969:
	.word	gSprites
	.word	sBattleDomeStruct
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.L865:
	ldr	r0, .L971
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r2, .L971+0x4
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r5, [r1, #0x8]
	strh	r5, [r1, #0xa]
	mov	r0, #0x3
	strh	r0, [r1, #0xc]
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r0, [r0, #0x10]
	strh	r0, [r1, #0xe]
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r0, [r0, #0x14]
	strh	r0, [r1, #0x10]
.L866:
	mov	r0, r8
	bl	DestroyTask
.L657:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L972:
	.align	2, 0
.L971:
	.word	Task_ShowTourneyTree
	.word	gTasks
.Lfe38:
	.size	 sub_8190CD4,.Lfe38-sub_8190CD4
	.align	2, 0
	.type	 sub_819221C,function
	.thumb_func
sub_819221C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r7, #0x0
	ldr	r2, .L1015
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	ip, r0
	mov	r1, #0x10
	ldrsh	r6, [r0, r1]
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r3, #0xa
	ldrsh	r5, [r0, r3]
	ldr	r0, .L1015+0x4
	add	r0, r5, r0
	ldrb	r0, [r0]
	mov	sl, r0
	ldr	r3, .L1015+0x8
	ldr	r0, [r3]
	ldr	r1, .L1015+0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r8, r0
	ldr	r1, .L1015+0x10
	ldrh	r4, [r1, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r4
	add	r2, r1, #0
	cmp	r0, #0
	beq	.L974	@cond_branch
	mov	r7, #0x9
.L974:
	mov	r3, ip
	mov	r1, #0xe
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bne	.LCB9083
	b	.L1010	@long jump
.LCB9083:
	cmp	r0, #0x1
	beq	.LCB9085
	b	.L976	@long jump
.LCB9085:
	mov	r0, #0x40
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L977	@cond_branch
	ldr	r0, .L1015+0x14
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0
	bne	.L977	@cond_branch
	cmp	r5, #0
	bne	.L978	@cond_branch
	mov	r5, #0xf
	b	.L979
.L1016:
	.align	2, 0
.L1015:
	.word	gTasks
	.word	sTourneyTreeTrainerIds
	.word	gSaveBlock2Ptr
	.word	0xcb2
	.word	gMain
	.word	sBattleDomeStruct
.L978:
	sub	r5, r5, #0x1
.L979:
	mov	r7, #0x1
	b	.L980
.L977:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L981	@cond_branch
	ldr	r0, .L1017
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0
	bne	.L981	@cond_branch
	cmp	r5, #0xf
	bne	.L982	@cond_branch
	mov	r5, #0x0
	b	.L983
.L1018:
	.align	2, 0
.L1017:
	.word	sBattleDomeStruct
.L982:
	add	r5, r5, #0x1
.L983:
	mov	r7, #0x2
	b	.L980
.L981:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L985	@cond_branch
	ldr	r0, .L1019
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x10]
	cmp	r0, #0
	beq	.L985	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x10]
	mov	r7, #0x3
	b	.L980
.L1020:
	.align	2, 0
.L1019:
	.word	sBattleDomeStruct
.L985:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L980	@cond_branch
	ldr	r2, .L1021
	ldr	r0, [r2]
	mov	r3, sl
	lsl	r1, r3, #0x2
	add	r0, r0, r1
	ldr	r2, .L1021+0x4
	add	r0, r0, r2
	ldrb	r3, [r0]
	lsl	r0, r3, #0x1d
	mov	ip, r1
	cmp	r0, #0
	bge	.L988	@cond_branch
	ldr	r0, .L1021+0x8
	ldr	r2, [r0]
	ldrb	r4, [r2, #0x10]
	sub	r1, r4, #0x1
	lsl	r0, r3, #0x1b
	lsr	r0, r0, #0x1e
	cmp	r1, r0
	bge	.L988	@cond_branch
	add	r0, r4, #0x1
	strb	r0, [r2, #0x10]
	mov	r7, #0x4
.L988:
	ldr	r3, .L1021
	ldr	r0, [r3]
	add	r0, r0, ip
	ldr	r1, .L1021+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.L980	@cond_branch
	ldr	r0, .L1021+0x8
	ldr	r3, [r0]
	ldrb	r1, [r3, #0x10]
	sub	r0, r1, #0x1
	cmp	r0, r8
	bge	.L980	@cond_branch
	add	r0, r1, #0x1
	strb	r0, [r3, #0x10]
	mov	r7, #0x4
.L980:
	cmp	r7, #0x9
	beq	.LCB9254
	b	.L993	@long jump
.LCB9254:
	ldr	r0, .L1021+0x8
	ldr	r3, [r0]
	ldrb	r0, [r3, #0x10]
	cmp	r0, #0
	beq	.L991	@cond_branch
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	ldr	r2, .L1021+0xc
	add	r1, r1, r2
	ldr	r2, .L1021+0x10
	lsr	r0, r5, #0x1f
	add	r0, r5, r0
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x2
	sub	r0, r0, #0x1
	ldrb	r3, [r3, #0x10]
	add	r0, r0, r3
	b	.L1012
.L1022:
	.align	2, 0
.L1021:
	.word	gSaveBlock2Ptr
	.word	0xd25
	.word	sBattleDomeStruct
	.word	gTasks
	.word	gUnknown_0860D1A0
.L991:
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r3, .L1023
	add	r0, r0, r3
	b	.L1013
.L1024:
	.align	2, 0
.L1023:
	.word	gTasks
.L976:
	mov	r0, #0x40
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L994	@cond_branch
	ldr	r0, .L1025
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0x1
	bne	.L994	@cond_branch
	cmp	r5, #0x10
	bne	.L995	@cond_branch
	ldr	r0, .L1025+0x4
	add	r0, r0, r8
	ldrb	r5, [r0]
	b	.L996
.L1026:
	.align	2, 0
.L1025:
	.word	sBattleDomeStruct
	.word	gUnknown_0860D19C
.L995:
	sub	r5, r5, #0x1
.L996:
	mov	r7, #0x5
	b	.L997
.L994:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L998	@cond_branch
	ldr	r0, .L1027
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0x1
	bne	.L998	@cond_branch
	ldr	r0, .L1027+0x4
	add	r0, r0, r8
	ldrb	r0, [r0]
	cmp	r5, r0
	bne	.L999	@cond_branch
	mov	r5, #0x10
	b	.L1000
.L1028:
	.align	2, 0
.L1027:
	.word	sBattleDomeStruct
	.word	gUnknown_0860D19C
.L999:
	add	r5, r5, #0x1
.L1000:
	mov	r7, #0x6
	b	.L997
.L998:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1002	@cond_branch
	ldr	r0, .L1029
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x10]
	cmp	r0, #0
	beq	.L1002	@cond_branch
	mov	r7, #0x7
	sub	r0, r0, #0x1
	b	.L1014
.L1030:
	.align	2, 0
.L1029:
	.word	sBattleDomeStruct
.L1002:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L997	@cond_branch
	ldr	r0, .L1031
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x10]
	cmp	r0, #0x1
	bhi	.L997	@cond_branch
	mov	r7, #0x8
	add	r0, r0, #0x1
.L1014:
	strb	r0, [r1, #0x10]
.L997:
	cmp	r7, #0x9
	bne	.L993	@cond_branch
	ldr	r0, .L1031
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x10]
	cmp	r1, #0
	bne	.L1006	@cond_branch
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	ldr	r2, .L1031+0x4
	add	r1, r1, r2
	ldr	r2, .L1031+0x8
	ldrb	r0, [r0, #0x11]
	b	.L1012
.L1032:
	.align	2, 0
.L1031:
	.word	sBattleDomeStruct
	.word	gTasks
	.word	gUnknown_0860D1C0
.L1006:
	cmp	r1, #0x2
	bne	.L1008	@cond_branch
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	ldr	r3, .L1033
	add	r1, r1, r3
	ldr	r2, .L1033+0x4
	ldrb	r0, [r0, #0x12]
.L1012:
	add	r0, r0, r2
	ldrb	r0, [r0]
	strh	r0, [r1, #0xa]
	b	.L993
.L1034:
	.align	2, 0
.L1033:
	.word	gTasks
	.word	gUnknown_0860D1C0
.L1008:
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L1035
	add	r0, r0, r1
.L1013:
	strh	r5, [r0, #0xa]
.L993:
	cmp	r7, #0
	beq	.L1010	@cond_branch
	cmp	r7, #0x9
	beq	.L1010	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L1035
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r5, [r0, #0xa]
	mov	r2, r9
	lsl	r0, r2, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0xc]
	mov	r2, #0x1
	eor	r1, r1, r2
	strh	r1, [r0, #0xc]
.L1010:
	add	r0, r7, #0
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1036:
	.align	2, 0
.L1035:
	.word	gTasks
.Lfe39:
	.size	 sub_819221C,.Lfe39-sub_819221C
	.align	2, 0
	.type	 DisplayTrainerInfoOnCard,function
	.thumb_func
DisplayTrainerInfoOnCard:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x58
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x1c]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x20]
	mov	r5, #0x0
	mov	r0, #0x0
	str	r0, [sp, #0x28]
	mov	r1, #0x0
	str	r1, [sp, #0x2c]
	mov	r2, #0x0
	str	r2, [sp, #0x30]
	mov	r4, #0x0
	mov	r0, #0x24
	bl	AllocZeroed
	mov	r8, r0
	ldr	r0, .L1232
	ldr	r1, [r0]
	ldr	r3, [sp, #0x20]
	lsl	r0, r3, #0x2
	add	r0, r1, r0
	ldr	r2, .L1232+0x4
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	str	r0, [sp, #0x24]
	mov	r0, #0x1
	ldr	r3, [sp, #0x1c]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1038	@cond_branch
	mov	r5, #0x8
	mov	r4, #0x9
	str	r4, [sp, #0x28]
	mov	r4, #0x2
.L1038:
	mov	r0, #0x2
	ldr	r2, [sp, #0x1c]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1039	@cond_branch
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	str	r3, [sp, #0x2c]
.L1039:
	mov	r0, #0x4
	ldr	r2, [sp, #0x1c]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1040	@cond_branch
	mov	r3, #0xa0
	str	r3, [sp, #0x30]
.L1040:
	mov	r0, #0x8
	ldr	r2, [sp, #0x1c]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1041	@cond_branch
	ldr	r3, .L1232+0x8
	str	r3, [sp, #0x2c]
.L1041:
	mov	r0, #0x10
	ldr	r2, [sp, #0x1c]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1042	@cond_branch
	mov	r3, #0xa0
	neg	r3, r3
	str	r3, [sp, #0x30]
.L1042:
	ldr	r0, .L1232+0xc
	ldr	r2, [sp, #0x24]
	cmp	r2, r0
	bne	.L1043	@cond_branch
	ldrb	r0, [r1, #0x8]
	bl	PlayerGenderToFrontTrainerPicId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	b	.L1224
.L1233:
	.align	2, 0
.L1232:
	.word	gSaveBlock2Ptr
	.word	0xd24
	.word	-0x100
	.word	0x3ff
.L1043:
	ldr	r0, .L1234
	ldr	r3, [sp, #0x24]
	cmp	r3, r0
	bne	.L1045	@cond_branch
	bl	GetDomeBrainTrainerPicId
	b	.L1225
.L1235:
	.align	2, 0
.L1234:
	.word	0x3fe
.L1045:
	ldr	r0, [sp, #0x24]
	bl	GetFrontierTrainerFrontSpriteId
.L1225:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L1224:
	ldr	r2, [sp, #0x2c]
	add	r2, r2, #0x30
	ldr	r3, [sp, #0x30]
	add	r3, r3, #0x40
	add	r1, r4, #0
	add	r1, r1, #0xc
	str	r1, [sp]
	ldr	r1, .L1236
	str	r1, [sp, #0x4]
	mov	r1, #0x1
	bl	CreateTrainerPicSprite
	ldr	r1, .L1236+0x4
	ldr	r1, [r1]
	add	r1, r1, r5
	strb	r0, [r1]
	mov	r0, #0x1e
	ldr	r4, [sp, #0x1c]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L1047	@cond_branch
	ldr	r2, .L1236+0x8
	ldr	r0, .L1236+0x4
	ldr	r0, [r0]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L1047:
	mov	r7, #0x0
	ldr	r0, [sp, #0x20]
	lsl	r0, r0, #0x1
	str	r0, [sp, #0x3c]
	add	r1, r5, #0x2
	ldr	r2, [sp, #0x28]
	lsl	r2, r2, #0x18
	str	r2, [sp, #0x44]
	ldr	r3, [sp, #0x28]
	add	r3, r3, #0x4
	str	r3, [sp, #0x40]
	ldr	r4, [sp, #0x20]
	add	r0, r0, r4
	ldr	r6, .L1236+0x4
	ldr	r2, .L1236+0x8
	mov	sl, r2
	add	r4, r1, #0
	lsl	r5, r0, #0x1
	mov	r3, #0x0
	mov	r9, r3
.L1051:
	ldr	r0, .L1236+0xc
	ldr	r1, [sp, #0x24]
	cmp	r1, r0
	bne	.L1052	@cond_branch
	ldr	r0, .L1236+0x10
	ldr	r0, [r0]
	ldr	r2, .L1236+0x14
	add	r0, r0, r2
	add	r0, r0, r5
	ldrh	r0, [r0]
	ldr	r1, .L1236+0x18
	add	r1, r7, r1
	ldrb	r2, [r1]
	ldr	r3, [sp, #0x2c]
	orr	r2, r2, r3
	b	.L1226
.L1237:
	.align	2, 0
.L1236:
	.word	0xffff
	.word	sBattleDomeStruct
	.word	gSprites
	.word	0x3ff
	.word	gSaveBlock2Ptr
	.word	0xd64
	.word	sInfoTrainerMonX
.L1052:
	ldr	r0, .L1238
	ldr	r3, [sp, #0x24]
	cmp	r3, r0
	bne	.L1054	@cond_branch
	ldr	r0, .L1238+0x4
	ldr	r0, [r0]
	ldr	r1, .L1238+0x8
	add	r0, r0, r1
	add	r0, r0, r5
	ldrh	r0, [r0]
	ldr	r1, .L1238+0xc
	add	r1, r7, r1
	ldrb	r2, [r1]
	ldr	r3, [sp, #0x2c]
	orr	r2, r2, r3
	b	.L1226
.L1239:
	.align	2, 0
.L1238:
	.word	0x3fe
	.word	gSaveBlock2Ptr
	.word	0xd64
	.word	sInfoTrainerMonX
.L1054:
	ldr	r0, .L1240
	ldr	r0, [r0]
	ldr	r3, .L1240+0x4
	add	r0, r0, r3
	add	r0, r0, r5
	ldrh	r1, [r0]
	ldr	r0, .L1240+0x8
	ldr	r0, [r0]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldr	r1, .L1240+0xc
	add	r1, r7, r1
	ldrb	r2, [r1]
	ldr	r1, [sp, #0x2c]
	orr	r2, r2, r1
.L1226:
	ldr	r1, .L1240+0x10
	add	r1, r7, r1
	ldrb	r3, [r1]
	ldr	r1, [sp, #0x30]
	add	r3, r3, r1
	mov	r1, r9
	str	r1, [sp]
	str	r1, [sp, #0x4]
	mov	r1, #0x1
	str	r1, [sp, #0x8]
	ldr	r1, .L1240+0x14
	bl	CreateMonIcon
	ldr	r1, [r6]
	add	r1, r1, r4
	strb	r0, [r1]
	ldr	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldrb	r1, [r0, #0x5]
	mov	r2, #0xd
	neg	r2, r2
	and	r1, r1, r2
	strb	r1, [r0, #0x5]
	mov	r0, #0x1e
	ldr	r3, [sp, #0x1c]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1050	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L1050:
	add	r4, r4, #0x1
	add	r5, r5, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x2
	ble	.L1051	@cond_branch
	add	r0, sp, #0xc
	mov	r2, #0x0
	mov	r3, #0x2
	strb	r3, [r0, #0x5]
	strb	r2, [r0, #0x6]
	strb	r2, [r0, #0x7]
	add	r1, r0, #0
	add	r0, r2, #0
	strb	r0, [r1, #0x8]
	add	r0, r1, #0
	ldrb	r0, [r0, #0x7]
	strb	r0, [r1, #0x9]
	add	r0, r1, #0
	strb	r3, [r0, #0xa]
	strb	r2, [r0, #0xb]
	add	r3, r0, #0
	ldrb	r2, [r3, #0xc]
	mov	r1, #0x10
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3, #0xc]
	add	r2, r3, #0
	mov	r0, #0xe0
	strb	r0, [r2, #0xc]
	ldrb	r0, [r2, #0xd]
	and	r1, r1, r0
	strb	r1, [r2, #0xd]
	add	r1, r2, #0
	mov	r0, #0xd0
	strb	r0, [r1, #0xd]
	mov	r7, #0x0
	ldr	r0, .L1240+0x18
	ldr	r4, [sp, #0x24]
	cmp	r4, r0
	bne	.L1058	@cond_branch
	ldr	r0, .L1240+0x1c
	add	r0, r0, #0x3c
	ldrb	r5, [r0]
	b	.L1059
.L1241:
	.align	2, 0
.L1240:
	.word	gSaveBlock2Ptr
	.word	0xd64
	.word	gFacilityTrainerMons
	.word	sInfoTrainerMonX
	.word	sInfoTrainerMonY
	.word	SpriteCb_MonIcon
	.word	0x3ff
	.word	gFacilityClassToTrainerClass
.L1058:
	ldr	r0, .L1242
	ldr	r1, [sp, #0x24]
	cmp	r1, r0
	bne	.L1060	@cond_branch
	bl	GetDomeBrainTrainerClass
	b	.L1227
.L1243:
	.align	2, 0
.L1242:
	.word	0x3fe
.L1060:
	ldr	r0, [sp, #0x24]
	bl	GetFrontierOpponentClass
.L1227:
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L1059:
	ldr	r2, .L1244
	mov	r0, #0xd
	mov	r1, r5
	mul	r1, r1, r0
	add	r0, r7, r1
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0xff
	beq	.L1063	@cond_branch
	ldr	r3, .L1244+0x4
	add	r0, r1, r2
	add	r2, r7, r0
.L1065:
	add	r0, r7, r3
	ldrb	r1, [r2]
	strb	r1, [r0]
	add	r2, r2, #0x1
	add	r7, r7, #0x1
	ldrb	r0, [r2]
	cmp	r0, #0xff
	bne	.L1065	@cond_branch
.L1063:
	ldr	r5, .L1244+0x4
	add	r1, r7, r5
	mov	r0, #0x0
	strb	r0, [r1]
	add	r0, r7, #0x1
	add	r0, r0, r5
	mov	r1, #0xff
	strb	r1, [r0]
	ldr	r0, .L1244+0x8
	ldr	r2, [sp, #0x24]
	cmp	r2, r0
	bne	.L1067	@cond_branch
	ldr	r0, .L1244+0xc
	ldr	r1, [r0]
	add	r0, r5, #0
	bl	StringAppend
	b	.L1068
.L1245:
	.align	2, 0
.L1244:
	.word	gTrainerClassNames
	.word	gStringVar1
	.word	0x3ff
	.word	gSaveBlock2Ptr
.L1067:
	ldr	r0, .L1246
	ldr	r3, [sp, #0x24]
	cmp	r3, r0
	bne	.L1069	@cond_branch
	ldr	r4, .L1246+0x4
	add	r0, r4, #0
	bl	CopyDomeBrainTrainerName
	add	r0, r5, #0
	add	r1, r4, #0
	bl	StringAppend
	b	.L1068
.L1247:
	.align	2, 0
.L1246:
	.word	0x3fe
	.word	gStringVar2
.L1069:
	ldr	r4, .L1248
	ldr	r1, [sp, #0x24]
	add	r0, r4, #0
	bl	CopyDomeTrainerName
	add	r0, r5, #0
	add	r1, r4, #0
	bl	StringAppend
.L1068:
	add	r0, sp, #0xc
	ldrb	r0, [r0, #0x5]
	ldr	r4, .L1248+0x4
	add	r1, sp, #0xc
	ldrb	r3, [r1, #0xa]
	add	r1, r4, #0
	mov	r2, #0xd0
	bl	GetStringCenterAlignXOffsetWithLetterSpacing
	add	r1, sp, #0xc
	mov	r5, #0x0
	strb	r0, [r1, #0x8]
	str	r4, [sp, #0xc]
	add	r0, r1, #0
	add	r4, sp, #0x28
	ldrb	r4, [r4]
	strb	r4, [r0, #0x4]
	ldr	r0, [sp, #0x44]
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	PutWindowTilemap
	add	r0, r4, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	r0, sp, #0xc
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	add	r0, sp, #0xc
	strb	r5, [r0, #0xa]
	mov	r7, #0x0
	add	r6, r0, #0
	ldr	r1, [sp, #0x3c]
	ldr	r2, [sp, #0x20]
	add	r0, r1, r2
	lsl	r0, r0, #0x1
	mov	r9, r0
	mov	r3, #0xb
	mov	sl, r3
.L1074:
	ldr	r0, .L1248+0x8
	add	r0, r7, r0
	ldrb	r0, [r0]
	strb	r0, [r6, #0x9]
	ldr	r0, .L1248+0xc
	ldr	r4, [sp, #0x24]
	cmp	r4, r0
	bne	.L1075	@cond_branch
	ldr	r0, .L1248+0x10
	ldr	r1, [r0]
	lsl	r0, r7, #0x1
	add	r0, r0, r9
	ldr	r2, .L1248+0x14
	add	r1, r1, r2
	b	.L1228
.L1249:
	.align	2, 0
.L1248:
	.word	gStringVar2
	.word	gStringVar1
	.word	gUnknown_0860D346
	.word	0x3ff
	.word	gSaveBlock2Ptr
	.word	0xd64
.L1075:
	ldr	r0, .L1250
	ldr	r4, [sp, #0x24]
	cmp	r4, r0
	bne	.L1077	@cond_branch
	ldr	r0, .L1250+0x4
	ldr	r1, [r0]
	lsl	r0, r7, #0x1
	add	r0, r0, r9
	ldr	r2, .L1250+0x8
	add	r1, r1, r2
	b	.L1228
.L1251:
	.align	2, 0
.L1250:
	.word	0x3fe
	.word	gSaveBlock2Ptr
	.word	0xd64
.L1077:
	ldr	r4, .L1252
	ldr	r1, [r4]
	lsl	r0, r7, #0x1
	add	r0, r0, r9
	ldr	r2, .L1252+0x4
	add	r1, r1, r2
	add	r1, r1, r0
	ldrh	r1, [r1]
	ldr	r0, .L1252+0x8
	ldr	r0, [r0]
	lsl	r1, r1, #0x4
.L1228:
	add	r1, r1, r0
	ldrh	r0, [r1]
	mov	r3, sl
	mul	r3, r3, r0
	add	r0, r3, #0
	ldr	r1, .L1252+0xc
	add	r0, r0, r1
	str	r0, [sp, #0xc]
	add	r0, r7, #0x1
	ldr	r4, [sp, #0x28]
	add	r0, r0, r4
	mov	r1, #0x0
	strb	r0, [r6, #0x4]
	cmp	r7, #0x1
	bne	.L1079	@cond_branch
	mov	r0, #0x7
	strb	r0, [r6, #0x8]
	b	.L1080
.L1253:
	.align	2, 0
.L1252:
	.word	gSaveBlock2Ptr
	.word	0xd64
	.word	gFacilityTrainerMons
	.word	gSpeciesNames
.L1079:
	strb	r1, [r6, #0x8]
.L1080:
	add	r5, r7, #0x1
	ldr	r0, [sp, #0x28]
	add	r4, r5, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	PutWindowTilemap
	add	r0, r4, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	r0, sp, #0xc
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	add	r7, r5, #0
	cmp	r7, #0x2
	ble	.L1074	@cond_branch
	ldr	r4, [sp, #0x40]
	add	r0, r4, #0
	bl	PutWindowTilemap
	add	r0, r4, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldr	r0, .L1254
	ldr	r1, [sp, #0x24]
	cmp	r1, r0
	bne	.L1082	@cond_branch
	ldr	r0, .L1254+0x4
	ldr	r0, [r0, #0x40]
	b	.L1229
.L1255:
	.align	2, 0
.L1254:
	.word	0x3fe
	.word	sBattleDomePotentialTexts
.L1082:
	ldr	r0, .L1256
	ldr	r2, [sp, #0x20]
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
.L1229:
	str	r0, [sp, #0xc]
	add	r1, sp, #0xc
	mov	r2, #0x0
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	add	r0, r1, #0
	add	r3, sp, #0x40
	ldrb	r3, [r3]
	strb	r3, [r0, #0x4]
	strb	r2, [r0, #0x8]
	mov	r1, #0x4
	strb	r1, [r0, #0x7]
	strb	r1, [r0, #0x9]
	mov	r1, #0x0
	bl	AddTextPrinter
	mov	r7, #0x0
	ldr	r3, .L1256+0x4
.L1087:
	mov	r5, #0x0
	add	r4, r7, #0x1
	str	r4, [sp, #0x38]
	lsl	r0, r7, #0x1
	str	r0, [sp, #0x34]
	lsl	r2, r7, #0x4
.L1091:
	mov	r6, #0x0
	lsl	r1, r5, #0x1
	mov	sl, r1
	mov	r4, r8
	mov	r9, r2
.L1095:
	ldr	r0, .L1256+0x8
	ldr	r1, [sp, #0x24]
	cmp	r1, r0
	bne	.L1096	@cond_branch
	lsl	r0, r7, #0x18
	lsl	r1, r5, #0x18
	lsr	r0, r0, #0x18
	lsr	r1, r1, #0x18
	str	r2, [sp, #0x48]
	str	r3, [sp, #0x4c]
	bl	GetFrontierBrainMonMove
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xc
	add	r0, r6, r0
	ldr	r3, [sp, #0x4c]
	add	r0, r0, r3
	ldrh	r1, [r4]
	ldrb	r0, [r0]
	add	r1, r1, r0
	strh	r1, [r4]
	ldr	r2, [sp, #0x48]
	b	.L1094
.L1257:
	.align	2, 0
.L1256:
	.word	sBattleDomePotentialTexts
	.word	sMovePointsForDomeTrainers
	.word	0x3fe
.L1096:
	ldr	r0, .L1258
	ldr	r1, [sp, #0x24]
	cmp	r1, r0
	bne	.L1098	@cond_branch
	ldr	r0, .L1258+0x4
	ldr	r0, [r0]
	ldr	r1, .L1258+0x8
	add	r0, r0, r1
	add	r0, r0, r9
	b	.L1230
.L1259:
	.align	2, 0
.L1258:
	.word	0x3ff
	.word	gSaveBlock2Ptr
	.word	0xefc
.L1098:
	ldr	r0, .L1260
	ldr	r0, [r0]
	mov	ip, r0
	ldr	r0, [sp, #0x3c]
	ldr	r1, [sp, #0x20]
	add	r0, r0, r1
	str	r0, [sp, #0x50]
	lsl	r0, r0, #0x1
	ldr	r1, [sp, #0x34]
	add	r0, r1, r0
	ldr	r1, .L1260+0x4
	add	r1, r1, ip
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldr	r1, .L1260+0x8
	ldr	r1, [r1]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	add	r0, r0, #0x2
	add	r0, r0, sl
.L1230:
	ldrh	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r6, r0
	add	r0, r0, r3
	ldrh	r1, [r4]
	ldrb	r0, [r0]
	add	r1, r1, r0
	strh	r1, [r4]
.L1094:
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0xf
	ble	.L1095	@cond_branch
	add	r2, r2, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1091	@cond_branch
	ldr	r7, [sp, #0x38]
	cmp	r7, #0x2
	ble	.L1087	@cond_branch
	mov	r7, #0x0
	ldr	r2, .L1260+0xc
	mov	r9, r2
	ldr	r3, .L1260+0x10
	mov	sl, r3
.L1106:
	mov	r4, #0x0
	mov	r6, #0x0
	mov	r5, #0x0
	mov	r3, r8
	lsl	r0, r7, #0x4
	mov	r1, sl
	add	r2, r0, r1
.L1110:
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L1109	@cond_branch
	add	r4, r4, #0x1
	mov	r1, #0x0
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	beq	.L1109	@cond_branch
	ldrb	r1, [r2]
	cmp	r0, r1
	blt	.L1109	@cond_branch
	add	r6, r6, #0x1
.L1109:
	add	r3, r3, #0x2
	add	r2, r2, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0xf
	ble	.L1110	@cond_branch
	cmp	r4, r6
	beq	.L1104	@cond_branch
	add	r7, r7, #0x1
	cmp	r7, #0x1e
	bls	.L1106	@cond_branch
.L1104:
	lsl	r0, r7, #0x2
	add	r0, r0, r9
	ldr	r0, [r0]
	str	r0, [sp, #0xc]
	add	r0, sp, #0xc
	mov	r1, #0x14
	strb	r1, [r0, #0x7]
	strb	r1, [r0, #0x9]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	mov	r1, #0x0
	mov	r0, r8
	add	r0, r0, #0x22
.L1119:
	strh	r1, [r0]
	sub	r0, r0, #0x2
	cmp	r0, r8
	bge	.L1119	@cond_branch
	ldr	r2, [sp, #0x24]
	ldr	r3, .L1260+0x14
	add	r0, r2, r3
	cmp	r0, #0x1
	bls	.LCB10591
	b	.L1121	@long jump
.LCB10591:
	mov	r7, #0x0
	mov	r4, #0x0
	mov	r9, r4
.L1125:
	mov	r5, #0x0
	mov	r4, r8
	mov	r6, r9
.L1129:
	ldr	r0, .L1260+0x18
	ldr	r1, [sp, #0x24]
	cmp	r1, r0
	bne	.L1130	@cond_branch
	lsl	r1, r5, #0x18
	lsr	r1, r1, #0x18
	lsr	r0, r6, #0x18
	bl	GetFrontierBrainMonEvs
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L1231
.L1261:
	.align	2, 0
.L1260:
	.word	gSaveBlock2Ptr
	.word	0xd64
	.word	gFacilityTrainerMons
	.word	sBattleDomeOpponentStyleTexts
	.word	gUnknown_0860C988
	.word	-0x3fe
	.word	0x3fe
.L1130:
	ldr	r0, .L1262
	ldr	r0, [r0]
	lsl	r1, r7, #0x4
	add	r1, r5, r1
	ldr	r2, .L1262+0x4
	add	r0, r0, r2
	add	r0, r0, r1
	ldrb	r0, [r0]
.L1231:
	strh	r0, [r4]
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L1129	@cond_branch
	mov	r3, r8
	ldrh	r0, [r3]
	ldrh	r4, [r3, #0xc]
	add	r0, r0, r4
	strh	r0, [r3, #0xc]
	mov	r5, #0x0
	mov	r4, r8
.L1136:
	ldr	r0, .L1262+0x8
	ldr	r1, [sp, #0x24]
	cmp	r1, r0
	bne	.L1137	@cond_branch
	mov	r2, r9
	lsr	r0, r2, #0x18
	bl	GetFrontierBrainMonNature
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	b	.L1138
.L1263:
	.align	2, 0
.L1262:
	.word	gSaveBlock2Ptr
	.word	0xf04
	.word	0x3fe
.L1137:
	ldr	r0, .L1264
	ldr	r0, [r0]
	lsl	r1, r7, #0x4
	add	r0, r0, r1
	ldr	r3, .L1264+0x4
	add	r0, r0, r3
	ldrb	r2, [r0]
.L1138:
	ldr	r1, .L1264+0x8
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	add	r0, r5, r0
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	ble	.L1139	@cond_branch
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	mov	r0, #0x6e
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	ldrh	r1, [r4, #0xe]
	add	r1, r1, r0
	strh	r1, [r4, #0xe]
	b	.L1135
.L1265:
	.align	2, 0
.L1264:
	.word	gSaveBlock2Ptr
	.word	0xf0a
	.word	gNatureStatTable
.L1139:
	cmp	r0, #0
	bge	.L1141	@cond_branch
	mov	r2, #0x2
	ldrsh	r1, [r4, r2]
	mov	r0, #0x5a
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	ldrh	r1, [r4, #0xe]
	add	r1, r1, r0
	strh	r1, [r4, #0xe]
	ldrh	r0, [r4, #0x1a]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1a]
	b	.L1135
.L1141:
	ldrh	r0, [r4, #0x2]
	ldrh	r3, [r4, #0xe]
	add	r0, r0, r3
	strh	r0, [r4, #0xe]
.L1135:
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x4
	ble	.L1136	@cond_branch
	mov	r4, #0x80
	lsl	r4, r4, #0x11
	add	r9, r9, r4
	add	r7, r7, #0x1
	cmp	r7, #0x2
	bgt	.LCB10773
	b	.L1125	@long jump
.LCB10773:
	mov	r5, #0x0
	mov	r1, r8
	mov	r7, #0x5
.L1148:
	mov	r2, #0xc
	ldrsh	r0, [r1, r2]
	add	r5, r5, r0
	add	r1, r1, #0x2
	sub	r7, r7, #0x1
	cmp	r7, #0
	bge	.L1148	@cond_branch
	mov	r6, #0x64
	mov	r4, r8
	mov	r7, #0x5
.L1153:
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	mul	r0, r0, r6
	add	r1, r5, #0
	bl	__divsi3
	strh	r0, [r4]
	add	r4, r4, #0x2
	sub	r7, r7, #0x1
	cmp	r7, #0
	bge	.L1153	@cond_branch
	b	.L1155
.L1121:
	ldr	r4, .L1266
	mov	sl, r4
	ldr	r1, [sp, #0x3c]
	ldr	r2, [sp, #0x20]
	add	r0, r1, r2
	lsl	r0, r0, #0x1
	mov	r9, r0
	mov	r7, #0x2
.L1159:
	ldr	r3, .L1266+0x4
	ldr	r0, [r3]
	ldr	r4, .L1266+0x8
	add	r0, r0, r4
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r2, sl
	ldr	r1, [r2]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r2, [r0, #0xb]
	mov	r6, #0x0
	mov	r4, #0x0
	mov	r3, #0x1
	mov	r1, r8
	mov	r5, #0x5
.L1163:
	strh	r4, [r1]
	add	r0, r2, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1164	@cond_branch
	add	r6, r6, #0x1
.L1164:
	asr	r2, r2, #0x1
	add	r1, r1, #0x2
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L1163	@cond_branch
	mov	r0, #0xff
	lsl	r0, r0, #0x1
	add	r1, r6, #0
	bl	__divsi3
	add	r6, r0, #0
	ldr	r3, .L1266+0x4
	ldr	r0, [r3]
	ldr	r4, .L1266+0x8
	add	r0, r0, r4
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r2, sl
	ldr	r1, [r2]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r2, [r0, #0xb]
	mov	r3, #0x1
	mov	r1, r8
	mov	r5, #0x5
.L1169:
	add	r0, r2, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1170	@cond_branch
	strh	r6, [r1]
.L1170:
	asr	r2, r2, #0x1
	add	r1, r1, #0x2
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L1169	@cond_branch
	mov	r3, r8
	ldrh	r0, [r3]
	ldrh	r4, [r3, #0xc]
	add	r0, r0, r4
	strh	r0, [r3, #0xc]
	mov	r5, #0x0
	mov	r4, r8
.L1175:
	ldr	r1, .L1266+0x4
	ldr	r0, [r1]
	ldr	r2, .L1266+0x8
	add	r0, r0, r2
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r3, sl
	ldr	r1, [r3]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r2, [r0, #0xc]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	add	r0, r5, r0
	ldr	r1, .L1266+0xc
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	ble	.L1176	@cond_branch
	mov	r2, #0x2
	ldrsh	r1, [r4, r2]
	mov	r0, #0x6e
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	ldrh	r1, [r4, #0xe]
	add	r1, r1, r0
	strh	r1, [r4, #0xe]
	b	.L1174
.L1267:
	.align	2, 0
.L1266:
	.word	gFacilityTrainerMons
	.word	gSaveBlock2Ptr
	.word	0xd64
	.word	gNatureStatTable
.L1176:
	cmp	r0, #0
	bge	.L1178	@cond_branch
	mov	r3, #0x2
	ldrsh	r1, [r4, r3]
	mov	r0, #0x5a
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	ldrh	r1, [r4, #0xe]
	add	r1, r1, r0
	strh	r1, [r4, #0xe]
	ldrh	r0, [r4, #0x1a]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1a]
	b	.L1174
.L1178:
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r4, #0xe]
	add	r0, r0, r1
	strh	r0, [r4, #0xe]
.L1174:
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x4
	ble	.L1175	@cond_branch
	mov	r2, #0x2
	add	r9, r9, r2
	sub	r7, r7, #0x1
	cmp	r7, #0
	blt	.LCB11029
	b	.L1159	@long jump
.LCB11029:
	mov	r5, #0x0
	mov	r1, r8
	mov	r7, #0x5
.L1185:
	mov	r3, #0xc
	ldrsh	r0, [r1, r3]
	add	r5, r5, r0
	add	r1, r1, #0x2
	sub	r7, r7, #0x1
	cmp	r7, #0
	bge	.L1185	@cond_branch
	mov	r6, #0x64
	mov	r4, r8
	mov	r7, #0x5
.L1190:
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	mul	r0, r0, r6
	add	r1, r5, #0
	bl	__divsi3
	strh	r0, [r4]
	add	r4, r4, #0x2
	sub	r7, r7, #0x1
	cmp	r7, #0
	bge	.L1190	@cond_branch
.L1155:
	mov	r7, #0x0
	mov	r5, #0x0
	mov	r6, #0x0
	mov	r4, r8
	mov	sl, r8
	mov	r9, r8
.L1195:
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	cmp	r1, #0x1d
	ble	.L1196	@cond_branch
	cmp	r7, #0x2
	bne	.L1197	@cond_branch
	mov	r3, r8
	mov	r0, #0xc
	ldrsh	r3, [r3, r0]
	mov	ip, r3
	cmp	ip, r1
	bge	.L1198	@cond_branch
	mov	r2, r8
	ldrh	r2, [r2, #0xe]
	add	r3, sp, #0x54
	strh	r2, [r3]
	mov	r2, r8
	mov	r3, #0xe
	ldrsh	r0, [r2, r3]
	cmp	r0, r1
	bge	.L1199	@cond_branch
	cmp	ip, r0
	bge	.L1200	@cond_branch
	add	r0, sp, #0x54
	ldrh	r0, [r0]
	strh	r0, [r2, #0xc]
	strh	r6, [r2, #0xe]
	b	.L1196
.L1200:
	mov	r1, r8
	strh	r6, [r1, #0xe]
	b	.L1196
.L1199:
	add	r2, sp, #0x54
	ldrh	r3, [r2]
	mov	r2, r8
	strh	r3, [r2, #0xc]
	strh	r6, [r2, #0xe]
	b	.L1196
.L1198:
	mov	r3, r8
	mov	r2, #0xe
	ldrsh	r0, [r3, r2]
	cmp	r0, r1
	bge	.L1196	@cond_branch
	strh	r6, [r3, #0xe]
	b	.L1196
.L1197:
	mov	r3, r9
	strh	r6, [r3, #0xc]
	mov	r0, #0x2
	add	r9, r9, r0
	add	r7, r7, #0x1
.L1196:
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L1194	@cond_branch
	cmp	r5, #0x2
	bne	.L1207	@cond_branch
	mov	r2, #0x18
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x1
	bgt	.L1209	@cond_branch
	cmp	r0, #0x1
	bne	.L1194	@cond_branch
	mov	r3, r8
	mov	r1, #0x10
	ldrsh	r0, [r3, r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	mov	r2, #0x18
	ldrsh	r0, [r0, r2]
	cmp	r0, #0
	bne	.L1208	@cond_branch
	mov	r1, #0x12
	ldrsh	r0, [r3, r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	mov	r2, #0x18
	ldrsh	r0, [r0, r2]
	cmp	r0, #0
	bne	.L1208	@cond_branch
.L1209:
	mov	r3, r8
	ldrh	r0, [r3, #0x12]
	strh	r0, [r3, #0x10]
	strh	r6, [r3, #0x12]
	b	.L1194
.L1208:
	mov	r1, #0x18
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	bne	.L1194	@cond_branch
	mov	r2, r8
	mov	r3, #0x10
	ldrsh	r0, [r2, r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1211	@cond_branch
	ldrh	r0, [r2, #0x12]
	strh	r0, [r2, #0x10]
	strh	r6, [r2, #0x12]
	b	.L1194
.L1211:
	mov	r2, r8
	mov	r3, #0x12
	ldrsh	r0, [r2, r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1194	@cond_branch
	strh	r6, [r2, #0x12]
	b	.L1194
.L1207:
	mov	r2, sl
	strh	r6, [r2, #0x10]
	mov	r3, #0x2
	add	sl, sl, r3
	add	r5, r5, #0x1
.L1194:
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x5
	ble	.L1195	@cond_branch
	cmp	r7, #0x2
	bne	.L1216	@cond_branch
	ldr	r0, .L1268
	mov	r4, r8
	mov	r1, #0xc
	ldrsh	r2, [r4, r1]
	add	r0, r2, r0
	mov	r3, #0xe
	ldrsh	r1, [r4, r3]
	sub	r1, r1, #0x1
	sub	r1, r1, r2
	ldrb	r0, [r0]
	add	r7, r1, r0
	b	.L1217
.L1269:
	.align	2, 0
.L1268:
	.word	gUnknown_0860D349
.L1216:
	cmp	r7, #0x1
	bne	.L1218	@cond_branch
	mov	r4, r8
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	add	r7, r0, #0
	add	r7, r7, #0xf
	b	.L1217
.L1218:
	cmp	r5, #0x2
	bne	.L1220	@cond_branch
	ldr	r0, .L1270
	mov	r3, r8
	mov	r4, #0x10
	ldrsh	r2, [r3, r4]
	add	r0, r2, r0
	mov	r4, #0x12
	ldrsh	r1, [r3, r4]
	sub	r1, r1, #0x1
	sub	r1, r1, r2
	ldrb	r0, [r0]
	add	r1, r1, r0
	add	r7, r1, #0
	add	r7, r7, #0x15
	b	.L1217
.L1271:
	.align	2, 0
.L1270:
	.word	gUnknown_0860D349
.L1220:
	cmp	r5, #0x1
	bne	.L1222	@cond_branch
	mov	r1, r8
	mov	r2, #0x10
	ldrsh	r0, [r1, r2]
	add	r7, r0, #0
	add	r7, r7, #0x24
	b	.L1217
.L1222:
	mov	r7, #0x2a
.L1217:
	lsl	r0, r7, #0x2
	ldr	r3, .L1272
	add	r0, r0, r3
	ldr	r0, [r0]
	str	r0, [sp, #0xc]
	add	r0, sp, #0xc
	mov	r1, #0x24
	strb	r1, [r0, #0x7]
	strb	r1, [r0, #0x9]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	mov	r0, r8
	bl	Free
	add	sp, sp, #0x58
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1273:
	.align	2, 0
.L1272:
	.word	sBattleDomeOpponentStatsTexts
.Lfe40:
	.size	 DisplayTrainerInfoOnCard,.Lfe40-DisplayTrainerInfoOnCard
	.align	2, 0
	.type	 sub_8192F08,function
	.thumb_func
sub_8192F08:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	str	r1, [sp]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	mov	r8, r0
	ldr	r2, .L1304
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	add	r1, r0, r2
	ldrb	r6, [r1]
	add	r1, r2, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r0, r6, r0
	add	r3, r2, #0
	cmp	r6, r0
	bge	.L1276	@cond_branch
	ldr	r5, .L1304+0x4
	ldr	r1, .L1304+0x8
	mov	sl, r1
	ldr	r2, .L1304+0xc
	mov	r9, r2
.L1278:
	ldr	r0, .L1304+0x10
	add	r0, r6, r0
	ldrb	r4, [r0]
	ldr	r0, [r5]
	lsl	r1, r4, #0x2
	add	r0, r0, r1
	ldr	r2, .L1304+0x14
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.L1277	@cond_branch
	ldr	r0, [sp]
	add	r0, r0, r8
	strb	r4, [r0]
	ldr	r2, [r5]
	add	r0, r2, r1
	ldr	r1, .L1304+0x18
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r1, r0, #0x16
	lsr	r0, r1, #0x16
	cmp	r0, sl
	bne	.L1280	@cond_branch
	ldr	r0, .L1304+0x1c
	add	r1, r2, #0
	bl	StringCopy
	b	.L1281
.L1305:
	.align	2, 0
.L1304:
	.word	gUnknown_0860D3C4
	.word	gSaveBlock2Ptr
	.word	0x3ff
	.word	0x3fe
	.word	gUnknown_0860D3B4
	.word	0xd25
	.word	0xd24
	.word	gStringVar1
.L1280:
	lsr	r0, r1, #0x16
	cmp	r0, r9
	bne	.L1282	@cond_branch
	ldr	r0, .L1306
	bl	CopyDomeBrainTrainerName
	b	.L1281
.L1307:
	.align	2, 0
.L1306:
	.word	gStringVar1
.L1282:
	lsr	r1, r1, #0x16
	ldr	r0, .L1308
	bl	CopyDomeTrainerName
.L1281:
	mov	r2, #0x1
	add	r8, r8, r2
	ldr	r3, .L1308+0x4
.L1277:
	add	r6, r6, #0x1
	lsl	r1, r7, #0x1
	add	r1, r1, r7
	add	r0, r1, r3
	ldrb	r2, [r0]
	add	r0, r3, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r2, r2, r0
	cmp	r6, r2
	blt	.L1278	@cond_branch
.L1276:
	mov	r5, r8
	cmp	r5, #0x2
	bne	.L1285	@cond_branch
	mov	r0, #0x0
	b	.L1302
.L1309:
	.align	2, 0
.L1308:
	.word	gStringVar1
	.word	gUnknown_0860D3C4
.L1285:
	mov	ip, r3
	lsl	r3, r7, #0x1
	add	r0, r3, r7
	mov	r2, ip
	add	r1, r0, r2
	ldrb	r6, [r1]
	mov	r1, ip
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r0, r6, r0
	str	r3, [sp, #0x8]
	cmp	r6, r0
	blt	.LCB11507
	b	.L1287	@long jump
.LCB11507:
	ldr	r5, .L1310
	mov	sl, r5
	ldr	r0, .L1310+0x4
	mov	r9, r0
.L1289:
	ldr	r0, .L1310+0x8
	add	r0, r6, r0
	ldrb	r4, [r0]
	mov	r1, sl
	ldr	r0, [r1]
	lsl	r2, r4, #0x2
	str	r2, [sp, #0xc]
	add	r0, r0, r2
	add	r0, r0, r9
	ldrb	r2, [r0]
	lsl	r0, r2, #0x1d
	cmp	r0, #0
	bge	.L1290	@cond_branch
	lsl	r2, r2, #0x1b
	add	r1, r3, r7
	mov	r0, ip
	add	r0, r0, #0x2
	add	r1, r1, r0
	lsr	r2, r2, #0x1e
	ldrb	r1, [r1]
	cmp	r2, r1
	bcc	.L1290	@cond_branch
	ldr	r0, [sp]
	add	r0, r0, r8
	strb	r4, [r0]
	mov	r5, #0x1
	add	r8, r8, r5
	mov	r0, sl
	ldr	r3, [r0]
	ldr	r5, [sp, #0xc]
	add	r2, r3, r5
	add	r0, r2, #0
	add	r0, r0, r9
	ldrb	r5, [r0]
	mov	ip, r5
	mov	r0, ip
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1e
	cmp	r0, r1
	bne	.L1291	@cond_branch
	lsl	r4, r4, #0x1
	mov	r1, #0xec
	lsl	r1, r1, #0x4
	add	r0, r3, r1
	add	r0, r0, r4
	ldrh	r1, [r0]
	mov	r0, #0xd
	mul	r1, r1, r0
	ldr	r0, .L1310+0xc
	add	r1, r1, r0
	ldr	r0, .L1310+0x10
	bl	StringCopy
	mov	r2, sl
	ldr	r1, [r2]
	ldr	r5, [sp, #0xc]
	add	r0, r1, r5
	add	r0, r0, r9
	ldrb	r0, [r0]
	lsl	r2, r0, #0x18
	lsr	r0, r2, #0x1d
	lsl	r0, r0, #0x1
	str	r0, [sp, #0x4]
	mov	r0, #0xec
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	add	r1, r1, r4
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L1290	@cond_branch
	lsr	r0, r2, #0x1d
	cmp	r0, #0
	bne	.L1290	@cond_branch
	mov	r1, #0x4
	str	r1, [sp, #0x4]
	b	.L1290
.L1311:
	.align	2, 0
.L1310:
	.word	gSaveBlock2Ptr
	.word	0xd25
	.word	gUnknown_0860D3B4
	.word	gMoveNames
	.word	gStringVar2
.L1291:
	ldr	r5, .L1312
	add	r0, r2, r5
	ldrh	r0, [r0]
	lsl	r1, r0, #0x16
	ldr	r0, .L1312+0x4
	cmp	r1, r0
	bne	.L1294	@cond_branch
	ldr	r0, .L1312+0x8
	add	r1, r3, #0
	bl	StringCopy
	b	.L1290
.L1313:
	.align	2, 0
.L1312:
	.word	0xd24
	.word	-0x400000
	.word	gStringVar1
.L1294:
	ldr	r0, .L1314
	cmp	r1, r0
	bne	.L1296	@cond_branch
	ldr	r0, .L1314+0x4
	bl	CopyDomeBrainTrainerName
	b	.L1290
.L1315:
	.align	2, 0
.L1314:
	.word	-0x800000
	.word	gStringVar1
.L1296:
	lsr	r1, r1, #0x16
	ldr	r0, .L1316
	bl	CopyDomeTrainerName
.L1290:
	mov	r0, r8
	cmp	r0, #0x2
	beq	.L1287	@cond_branch
	add	r6, r6, #0x1
	ldr	r1, .L1316+0x4
	mov	ip, r1
	ldr	r3, [sp, #0x8]
	add	r1, r3, r7
	mov	r2, ip
	add	r0, r1, r2
	ldrb	r2, [r0]
	mov	r0, ip
	add	r0, r0, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r2, r2, r0
	cmp	r6, r2
	bge	.LCB11705
	b	.L1289	@long jump
.LCB11705:
.L1287:
	cmp	r7, #0xe
	beq	.L1300	@cond_branch
	ldr	r0, [sp, #0x4]
	add	r0, r0, #0x1
	b	.L1303
.L1317:
	.align	2, 0
.L1316:
	.word	gStringVar1
	.word	gUnknown_0860D3C4
.L1300:
	ldr	r0, [sp, #0x4]
	add	r0, r0, #0x2
.L1303:
.L1302:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe41:
	.size	 sub_8192F08,.Lfe41-sub_8192F08
	.align	2, 0
	.type	 DisplayMatchInfoOnCard,function
	.thumb_func
DisplayMatchInfoOnCard:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x80
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x34]
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	mov	r0, #0x0
	str	r0, [sp, #0x3c]
	mov	r7, #0x0
	mov	r1, #0x0
	str	r1, [sp, #0x40]
	mov	r2, #0x0
	str	r2, [sp, #0x44]
	mov	r9, r2
	mov	r0, #0x1
	ldr	r3, [sp, #0x34]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1319	@cond_branch
	mov	r7, #0x8
	str	r7, [sp, #0x3c]
	mov	r7, #0x9
	mov	r0, #0x2
	mov	r9, r0
.L1319:
	mov	r0, #0x2
	ldr	r1, [sp, #0x34]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1320	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	str	r2, [sp, #0x40]
.L1320:
	mov	r0, #0x4
	ldr	r3, [sp, #0x34]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1321	@cond_branch
	mov	r0, #0xa0
	str	r0, [sp, #0x44]
.L1321:
	mov	r0, #0x8
	ldr	r1, [sp, #0x34]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1322	@cond_branch
	ldr	r2, .L1380
	str	r2, [sp, #0x40]
.L1322:
	mov	r0, #0x10
	ldr	r3, [sp, #0x34]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1323	@cond_branch
	mov	r0, #0xa0
	neg	r0, r0
	str	r0, [sp, #0x44]
.L1323:
	ldr	r4, .L1380+0x4
	ldr	r1, [r4]
	add	r1, r1, #0x11
	add	r0, r6, #0
	bl	sub_8192F08
	str	r0, [sp, #0x38]
	mov	r5, #0x0
	mov	r1, sp
	add	r1, r1, #0x1c
	str	r1, [sp, #0x48]
	mov	r2, sp
	add	r2, r2, #0x24
	str	r2, [sp, #0x4c]
	lsl	r1, r6, #0x1
	mov	r3, sp
	add	r3, r3, #0x2c
	str	r3, [sp, #0x50]
	ldr	r0, [sp, #0x40]
	add	r0, r0, #0x30
	mov	r8, r0
	ldr	r2, [sp, #0x44]
	add	r2, r2, #0x58
	str	r2, [sp, #0x78]
	mov	r3, #0xc
	add	r3, r3, r9
	mov	sl, r3
	ldr	r0, [sp, #0x40]
	add	r0, r0, #0xc0
	str	r0, [sp, #0x7c]
	mov	r2, r9
	add	r2, r2, #0xd
	str	r2, [sp, #0x74]
	ldr	r3, [sp, #0x3c]
	add	r3, r3, #0x1
	mov	r9, r3
	ldr	r0, [sp, #0x3c]
	add	r0, r0, #0x2
	str	r0, [sp, #0x54]
	ldr	r2, [sp, #0x3c]
	add	r2, r2, #0x5
	str	r2, [sp, #0x5c]
	add	r3, r7, #0
	add	r3, r3, #0x8
	str	r3, [sp, #0x6c]
	add	r0, r7, #0x6
	str	r0, [sp, #0x64]
	add	r2, r7, #0x7
	str	r2, [sp, #0x68]
	lsl	r3, r6, #0x2
	str	r3, [sp, #0x58]
	add	r0, r7, #0x5
	str	r0, [sp, #0x60]
	ldr	r0, [r4]
	add	r0, r0, #0x11
	mov	ip, r0
	ldr	r0, .L1380+0x8
	ldr	r4, [r0]
	ldr	r0, .L1380+0xc
	mov	r3, #0x0
	add	r1, r1, r6
	add	r1, r1, r0
	ldrb	r6, [r1]
.L1327:
	ldr	r1, [sp, #0x48]
	add	r2, r3, r1
	mov	r7, ip
	add	r0, r7, r5
	ldrb	r0, [r0]
	str	r0, [r2]
	ldr	r7, [sp, #0x4c]
	add	r1, r3, r7
	lsl	r0, r0, #0x2
	add	r0, r4, r0
	ldr	r7, .L1380+0x10
	add	r0, r0, r7
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	str	r0, [r1]
	ldr	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r4, r0
	ldr	r1, .L1380+0x14
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1b
	lsr	r0, r0, #0x1e
	cmp	r0, r6
	bhi	.L1328	@cond_branch
	lsl	r0, r1, #0x1d
	cmp	r0, #0
	bge	.L1328	@cond_branch
	ldr	r2, [sp, #0x50]
	add	r1, r3, r2
	mov	r0, #0x1
	b	.L1373
.L1381:
	.align	2, 0
.L1380:
	.word	-0x100
	.word	sBattleDomeStruct
	.word	gSaveBlock2Ptr
	.word	gUnknown_0860D3C4+0x2
	.word	0xd24
	.word	0xd25
.L1328:
	ldr	r7, [sp, #0x50]
	add	r1, r3, r7
	mov	r0, #0x0
.L1373:
	str	r0, [r1]
	add	r3, r3, #0x4
	add	r5, r5, #0x1
	cmp	r5, #0x1
	ble	.L1327	@cond_branch
	ldr	r1, [sp, #0x24]
	ldr	r0, .L1382
	cmp	r1, r0
	bne	.L1331	@cond_branch
	ldr	r0, .L1382+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	bl	PlayerGenderToFrontTrainerPicId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r2, r8
	ldr	r3, [sp, #0x78]
	mov	r1, sl
	str	r1, [sp]
	b	.L1374
.L1383:
	.align	2, 0
.L1382:
	.word	0x3ff
	.word	gSaveBlock2Ptr
.L1331:
	ldr	r0, .L1384
	cmp	r1, r0
	bne	.L1333	@cond_branch
	bl	GetDomeBrainTrainerPicId
	b	.L1375
.L1385:
	.align	2, 0
.L1384:
	.word	0x3fe
.L1333:
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	bl	GetFrontierTrainerFrontSpriteId
.L1375:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, r8
	ldr	r3, [sp, #0x78]
	mov	r7, sl
	str	r7, [sp]
.L1374:
	ldr	r1, .L1386
	str	r1, [sp, #0x4]
	mov	r1, #0x1
	bl	CreateTrainerPicSprite
	ldr	r1, .L1386+0x4
	ldr	r1, [r1]
	ldr	r2, [sp, #0x3c]
	add	r1, r1, r2
	strb	r0, [r1]
	mov	r0, #0x1e
	ldr	r3, [sp, #0x34]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1335	@cond_branch
	ldr	r2, .L1386+0x8
	ldr	r0, .L1386+0x4
	ldr	r0, [r0]
	ldr	r7, [sp, #0x3c]
	add	r0, r0, r7
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L1335:
	ldr	r0, [sp, #0x2c]
	cmp	r0, #0
	beq	.L1336	@cond_branch
	ldr	r2, .L1386+0x8
	ldr	r0, .L1386+0x4
	ldr	r0, [r0]
	ldr	r1, [sp, #0x3c]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r2, [r0, #0x5]
	mov	r1, #0xf
	and	r1, r1, r2
	mov	r2, #0x30
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
.L1336:
	ldr	r2, [sp, #0x4c]
	ldr	r1, [r2, #0x4]
	ldr	r0, .L1386+0xc
	cmp	r1, r0
	bne	.L1337	@cond_branch
	ldr	r0, .L1386+0x10
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	bl	PlayerGenderToFrontTrainerPicId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	b	.L1376
.L1387:
	.align	2, 0
.L1386:
	.word	0xffff
	.word	sBattleDomeStruct
	.word	gSprites
	.word	0x3ff
	.word	gSaveBlock2Ptr
.L1337:
	ldr	r0, .L1388
	cmp	r1, r0
	bne	.L1339	@cond_branch
	bl	GetDomeBrainTrainerPicId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, [sp, #0x7c]
	ldr	r3, [sp, #0x78]
	ldr	r1, [sp, #0x74]
	str	r1, [sp]
	b	.L1377
.L1389:
	.align	2, 0
.L1388:
	.word	0x3fe
.L1339:
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	bl	GetFrontierTrainerFrontSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L1376:
	ldr	r2, [sp, #0x7c]
	ldr	r3, [sp, #0x78]
	ldr	r7, [sp, #0x74]
	str	r7, [sp]
.L1377:
	ldr	r1, .L1390
	str	r1, [sp, #0x4]
	mov	r1, #0x1
	bl	CreateTrainerPicSprite
	ldr	r1, .L1390+0x4
	ldr	r1, [r1]
	add	r1, r1, r9
	strb	r0, [r1]
	mov	r0, #0x1e
	ldr	r1, [sp, #0x34]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1341	@cond_branch
	ldr	r2, .L1390+0x8
	ldr	r0, .L1390+0x4
	ldr	r0, [r0]
	add	r0, r0, r9
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L1341:
	ldr	r2, [sp, #0x50]
	ldr	r0, [r2, #0x4]
	cmp	r0, #0
	beq	.L1342	@cond_branch
	ldr	r2, .L1390+0x8
	ldr	r0, .L1390+0x4
	ldr	r0, [r0]
	add	r0, r0, r9
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r2, [r0, #0x5]
	mov	r1, #0xf
	and	r1, r1, r2
	mov	r2, #0x30
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
.L1342:
	mov	r5, #0x0
	ldr	r3, [sp, #0x38]
	lsl	r3, r3, #0x2
	str	r3, [sp, #0x70]
	mov	r8, r5
	ldr	r6, .L1390+0x4
	ldr	r7, .L1390+0x8
	ldr	r4, [sp, #0x54]
	mov	r9, r5
	mov	r0, #0x1
	mov	sl, r0
.L1346:
	ldr	r1, [sp, #0x24]
	ldr	r0, .L1390+0xc
	cmp	r1, r0
	bne	.L1347	@cond_branch
	ldr	r0, .L1390+0x10
	ldr	r2, [r0]
	ldr	r1, [sp, #0x1c]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldr	r1, .L1390+0x14
	add	r2, r2, r1
	add	r2, r2, r0
	ldrh	r0, [r2]
	b	.L1378
.L1391:
	.align	2, 0
.L1390:
	.word	0xffff
	.word	sBattleDomeStruct
	.word	gSprites
	.word	0x3ff
	.word	gSaveBlock2Ptr
	.word	0xd64
.L1347:
	ldr	r0, .L1392
	cmp	r1, r0
	bne	.L1349	@cond_branch
	ldr	r0, .L1392+0x4
	ldr	r2, [r0]
	ldr	r1, [sp, #0x1c]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldr	r1, .L1392+0x8
	add	r2, r2, r1
	add	r2, r2, r0
	ldrh	r0, [r2]
	b	.L1378
.L1393:
	.align	2, 0
.L1392:
	.word	0x3fe
	.word	gSaveBlock2Ptr
	.word	0xd64
.L1349:
	ldr	r0, .L1394
	ldr	r2, [r0]
	ldr	r1, [sp, #0x1c]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldr	r1, .L1394+0x4
	add	r2, r2, r1
	add	r2, r2, r0
	ldrh	r1, [r2]
	ldr	r0, .L1394+0x8
	ldr	r0, [r0]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrh	r0, [r1]
.L1378:
	ldr	r1, .L1394+0xc
	add	r1, r5, r1
	ldrb	r2, [r1]
	ldr	r3, [sp, #0x40]
	orr	r2, r2, r3
	ldr	r1, .L1394+0x10
	add	r1, r5, r1
	ldrb	r3, [r1]
	ldr	r1, [sp, #0x44]
	add	r3, r3, r1
	mov	r1, r8
	str	r1, [sp]
	str	r1, [sp, #0x4]
	mov	r1, sl
	str	r1, [sp, #0x8]
	ldr	r1, .L1394+0x14
	bl	CreateMonIcon
	ldr	r1, [r6]
	add	r1, r1, r4
	strb	r0, [r1]
	ldr	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r1, [r0, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r2, r3, #0
	and	r1, r1, r2
	strb	r1, [r0, #0x5]
	mov	r0, #0x1e
	ldr	r1, [sp, #0x34]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1351	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L1351:
	ldr	r0, [sp, #0x2c]
	cmp	r0, #0
	beq	.L1345	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	mov	r2, #0x30
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	ldr	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	mov	r2, sl
	strh	r2, [r0, #0x34]
.L1345:
	add	r4, r4, #0x1
	mov	r3, #0x2
	add	r9, r9, r3
	add	r5, r5, #0x1
	cmp	r5, #0x2
	bgt	.LCB12461
	b	.L1346	@long jump
.LCB12461:
	mov	r5, #0x0
	ldr	r6, .L1394+0x18
	ldr	r7, .L1394+0x1c
	mov	r8, r7
	ldr	r4, [sp, #0x5c]
	mov	r9, r5
	mov	r7, #0x0
.L1357:
	ldr	r0, [sp, #0x4c]
	ldr	r1, [r0, #0x4]
	ldr	r0, .L1394+0x20
	cmp	r1, r0
	bne	.L1358	@cond_branch
	ldr	r0, .L1394
	ldr	r2, [r0]
	ldr	r3, [sp, #0x48]
	ldr	r1, [r3, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldr	r1, .L1394+0x4
	add	r2, r2, r1
	add	r2, r2, r0
	ldrh	r0, [r2]
	b	.L1379
.L1395:
	.align	2, 0
.L1394:
	.word	gSaveBlock2Ptr
	.word	0xd64
	.word	gFacilityTrainerMons
	.word	sFirstTrainerMonX
	.word	sFirstTrainerMonY
	.word	SpriteCb_MonIcon
	.word	sBattleDomeStruct
	.word	gSprites
	.word	0x3ff
.L1358:
	ldr	r0, .L1396
	cmp	r1, r0
	bne	.L1360	@cond_branch
	ldr	r0, .L1396+0x4
	ldr	r2, [r0]
	ldr	r0, [sp, #0x48]
	ldr	r1, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldr	r1, .L1396+0x8
	add	r2, r2, r1
	add	r2, r2, r0
	ldrh	r0, [r2]
	b	.L1379
.L1397:
	.align	2, 0
.L1396:
	.word	0x3fe
	.word	gSaveBlock2Ptr
	.word	0xd64
.L1360:
	ldr	r0, .L1398
	ldr	r2, [r0]
	ldr	r0, [sp, #0x48]
	ldr	r1, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldr	r1, .L1398+0x4
	add	r2, r2, r1
	add	r2, r2, r0
	ldrh	r1, [r2]
	ldr	r0, .L1398+0x8
	ldr	r0, [r0]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrh	r0, [r1]
.L1379:
	ldr	r1, .L1398+0xc
	add	r1, r5, r1
	ldrb	r2, [r1]
	ldr	r3, [sp, #0x40]
	orr	r2, r2, r3
	ldr	r1, .L1398+0x10
	add	r1, r5, r1
	ldrb	r3, [r1]
	ldr	r1, [sp, #0x44]
	add	r3, r3, r1
	str	r7, [sp]
	str	r7, [sp, #0x4]
	mov	r1, #0x1
	str	r1, [sp, #0x8]
	ldr	r1, .L1398+0x14
	bl	CreateMonIcon
	ldr	r1, [r6]
	add	r1, r1, r4
	strb	r0, [r1]
	ldr	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrb	r1, [r0, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r2, r3, #0
	and	r1, r1, r2
	strb	r1, [r0, #0x5]
	mov	r0, #0x1e
	ldr	r1, [sp, #0x34]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1362	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L1362:
	ldr	r2, [sp, #0x50]
	ldr	r0, [r2, #0x4]
	cmp	r0, #0
	beq	.L1356	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	mov	r2, #0x30
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	ldr	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	mov	r1, #0x1
	strh	r1, [r0, #0x34]
.L1356:
	add	r4, r4, #0x1
	mov	r3, #0x2
	add	r9, r9, r3
	add	r5, r5, #0x1
	cmp	r5, #0x2
	bgt	.LCB12686
	b	.L1357	@long jump
.LCB12686:
	add	r0, sp, #0xc
	mov	r5, #0x0
	strb	r5, [r0, #0x6]
	add	r1, r0, #0
	mov	r0, #0x2
	strb	r0, [r1, #0x7]
	add	r0, r1, #0
	ldrb	r0, [r0, #0x6]
	strb	r0, [r1, #0x8]
	add	r0, r1, #0
	ldrb	r0, [r0, #0x7]
	strb	r0, [r1, #0x9]
	add	r0, r1, #0
	strb	r5, [r0, #0xa]
	strb	r5, [r0, #0xb]
	add	r3, r0, #0
	ldrb	r2, [r3, #0xc]
	mov	r1, #0x10
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3, #0xc]
	add	r2, r3, #0
	mov	r0, #0xe0
	strb	r0, [r2, #0xc]
	ldrb	r0, [r2, #0xd]
	and	r1, r1, r0
	strb	r1, [r2, #0xd]
	add	r1, r2, #0
	mov	r0, #0xd0
	strb	r0, [r1, #0xd]
	ldr	r4, .L1398+0x18
	ldr	r0, .L1398+0x1c
	ldr	r7, [sp, #0x70]
	add	r0, r7, r0
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	str	r4, [sp, #0xc]
	add	r0, sp, #0xc
	add	r1, sp, #0x6c
	ldrb	r1, [r1]
	strb	r1, [r0, #0x4]
	add	r1, r0, #0
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	ldr	r4, [sp, #0x6c]
	add	r0, r4, #0
	bl	PutWindowTilemap
	add	r0, r4, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	r0, sp, #0xc
	strb	r5, [r0, #0x8]
	add	r1, r0, #0
	strb	r5, [r0, #0x7]
	strb	r5, [r1, #0x9]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	ldr	r1, [sp, #0x24]
	ldr	r0, .L1398+0x20
	cmp	r1, r0
	bne	.L1365	@cond_branch
	ldr	r0, .L1398+0x24
	ldr	r1, .L1398
	ldr	r1, [r1]
	bl	StringCopy
	b	.L1366
.L1399:
	.align	2, 0
.L1398:
	.word	gSaveBlock2Ptr
	.word	0xd64
	.word	gFacilityTrainerMons
	.word	sSecondTrainerMonX
	.word	sSecondTrainerMonY
	.word	SpriteCb_MonIcon
	.word	gStringVar4
	.word	sBattleDomeWinTexts
	.word	0x3ff
	.word	gStringVar1
.L1365:
	ldr	r0, .L1400
	cmp	r1, r0
	bne	.L1367	@cond_branch
	ldr	r0, .L1400+0x4
	bl	CopyDomeBrainTrainerName
	b	.L1366
.L1401:
	.align	2, 0
.L1400:
	.word	0x3fe
	.word	gStringVar1
.L1367:
	ldr	r0, .L1402
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	CopyDomeTrainerName
.L1366:
	add	r0, sp, #0xc
	mov	r4, #0x2
	strb	r4, [r0, #0x5]
	strb	r4, [r0, #0xa]
	ldr	r5, .L1402
	str	r5, [sp, #0xc]
	add	r2, sp, #0x64
	ldrb	r2, [r2]
	strb	r2, [r0, #0x4]
	ldrb	r0, [r0, #0x5]
	ldr	r1, [sp, #0xc]
	add	r2, sp, #0xc
	ldrb	r3, [r2, #0xa]
	mov	r2, #0x40
	bl	GetStringCenterAlignXOffsetWithLetterSpacing
	add	r1, sp, #0xc
	strb	r0, [r1, #0x8]
	add	r0, r1, #0
	strb	r4, [r0, #0x7]
	strb	r4, [r1, #0x9]
	ldr	r4, [sp, #0x64]
	add	r0, r4, #0
	bl	PutWindowTilemap
	add	r0, r4, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	r0, sp, #0xc
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	ldr	r3, [sp, #0x4c]
	ldr	r1, [r3, #0x4]
	ldr	r0, .L1402+0x4
	cmp	r1, r0
	bne	.L1369	@cond_branch
	ldr	r0, .L1402+0x8
	ldr	r1, [r0]
	add	r0, r5, #0
	bl	StringCopy
	b	.L1370
.L1403:
	.align	2, 0
.L1402:
	.word	gStringVar1
	.word	0x3ff
	.word	gSaveBlock2Ptr
.L1369:
	ldr	r0, .L1404
	cmp	r1, r0
	bne	.L1371	@cond_branch
	add	r0, r5, #0
	bl	CopyDomeBrainTrainerName
	b	.L1370
.L1405:
	.align	2, 0
.L1404:
	.word	0x3fe
.L1371:
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r5, #0
	bl	CopyDomeTrainerName
.L1370:
	ldr	r0, .L1406
	str	r0, [sp, #0xc]
	add	r0, sp, #0xc
	mov	r6, #0x0
	add	r7, sp, #0x68
	ldrb	r7, [r7]
	strb	r7, [r0, #0x4]
	ldrb	r0, [r0, #0x5]
	ldr	r1, [sp, #0xc]
	add	r2, sp, #0xc
	ldrb	r3, [r2, #0xa]
	mov	r2, #0x40
	bl	GetStringCenterAlignXOffsetWithLetterSpacing
	add	r1, sp, #0xc
	strb	r0, [r1, #0x8]
	add	r0, r1, #0
	mov	r5, #0x2
	strb	r5, [r0, #0x7]
	strb	r5, [r1, #0x9]
	ldr	r4, [sp, #0x68]
	add	r0, r4, #0
	bl	PutWindowTilemap
	add	r0, r4, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	r0, sp, #0xc
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	add	r0, sp, #0xc
	strb	r6, [r0, #0xa]
	ldr	r0, .L1406+0x4
	ldr	r1, [sp, #0x58]
	add	r0, r1, r0
	ldr	r0, [r0]
	str	r0, [sp, #0xc]
	add	r0, sp, #0xc
	add	r2, sp, #0x60
	ldrb	r2, [r2]
	strb	r2, [r0, #0x4]
	ldrb	r0, [r0, #0x5]
	ldr	r1, [sp, #0xc]
	add	r2, sp, #0xc
	ldrb	r3, [r2, #0xa]
	mov	r2, #0xa0
	bl	GetStringCenterAlignXOffsetWithLetterSpacing
	add	r1, sp, #0xc
	strb	r0, [r1, #0x8]
	add	r0, r1, #0
	strb	r5, [r0, #0x7]
	strb	r5, [r1, #0x9]
	ldr	r4, [sp, #0x60]
	add	r0, r4, #0
	bl	PutWindowTilemap
	add	r0, r4, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	r0, sp, #0xc
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	add	sp, sp, #0x80
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1407:
	.align	2, 0
.L1406:
	.word	gStringVar1
	.word	sBattleDomeMatchNumberTexts
.Lfe42:
	.size	 DisplayMatchInfoOnCard,.Lfe42-DisplayMatchInfoOnCard
	.align	2, 0
	.type	 ShowDomeTourneyTree,function
	.thumb_func
ShowDomeTourneyTree:
	push	{lr}
	ldr	r0, .L1409
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1409+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	strh	r2, [r1, #0x8]
	strh	r2, [r1, #0xa]
	mov	r0, #0x2
	strh	r0, [r1, #0xc]
	strh	r2, [r1, #0x10]
	ldr	r0, .L1409+0x8
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L1410:
	.align	2, 0
.L1409:
	.word	Task_ShowTourneyTree
	.word	gTasks
	.word	CB2_BattleDome
.Lfe43:
	.size	 ShowDomeTourneyTree,.Lfe43-ShowDomeTourneyTree
	.align	2, 0
	.type	 ShowPreviousDomeResultsTourneyTree,function
	.thumb_func
ShowPreviousDomeResultsTourneyTree:
	push	{r4, lr}
	bl	InitDomeFacilityTrainersAndMons
	ldr	r4, .L1412
	ldr	r2, [r4]
	ldr	r1, .L1412+0x4
	add	r0, r2, r1
	ldrb	r1, [r0]
	sub	r1, r1, #0x1
	ldr	r0, .L1412+0x8
	add	r2, r2, r0
	mov	r0, #0x3
	and	r1, r1, r0
	ldrb	r3, [r2]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r4]
	ldr	r1, .L1412+0xc
	add	r0, r0, r1
	mov	r4, #0x0
	mov	r1, #0x3
	strh	r1, [r0]
	ldr	r0, .L1412+0x10
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1412+0x14
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0x8]
	strh	r4, [r1, #0xa]
	mov	r0, #0x2
	strh	r0, [r1, #0xc]
	mov	r0, #0x1
	strh	r0, [r1, #0x10]
	ldr	r0, .L1412+0x18
	bl	SetMainCallback2
	pop	{r4}
	pop	{r0}
	bx	r0
.L1413:
	.align	2, 0
.L1412:
	.word	gSaveBlock2Ptr
	.word	0xd0a
	.word	0xca9
	.word	0xcb2
	.word	Task_ShowTourneyTree
	.word	gTasks
	.word	CB2_BattleDome
.Lfe44:
	.size	 ShowPreviousDomeResultsTourneyTree,.Lfe44-ShowPreviousDomeResultsTourneyTree
	.align	2, 0
	.type	 sub_819395C,function
	.thumb_func
sub_819395C:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L1439
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0xa
	ldrsh	r7, [r0, r2]
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	add	r2, r1, #0
	cmp	r0, #0x7
	bls	.LCB13122
	b	.L1415	@long jump
.LCB13122:
	lsl	r0, r0, #0x2
	ldr	r1, .L1439+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1440:
	.align	2, 0
.L1439:
	.word	gTasks
	.word	.L1437
	.align	2, 0
	.align	2, 0
.L1437:
	.word	.L1416
	.word	.L1418
	.word	.L1420
	.word	.L1429
	.word	.L1415
	.word	.L1432
	.word	.L1415
	.word	.L1435
.L1416:
	ldr	r0, .L1441
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	beq	.LCB13149
	b	.L1415	@long jump
.LCB13149:
	mov	r0, #0x1
	neg	r0, r0
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r1, .L1441+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x1
	strh	r1, [r0, #0x8]
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	ldr	r1, .L1441+0x8
	add	r0, r0, r1
	mov	r1, #0x1
	bl	StartSpriteAnim
	b	.L1415
.L1442:
	.align	2, 0
.L1441:
	.word	gPaletteFade
	.word	gTasks
	.word	gSprites
.L1418:
	ldr	r0, .L1443
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB13192
	b	.L1415	@long jump
.LCB13192:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x2
	strh	r1, [r0, #0x8]
	b	.L1415
.L1444:
	.align	2, 0
.L1443:
	.word	gPaletteFade
.L1420:
	add	r0, r5, #0
	bl	UpdateTourneyTreeCursor
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.LCB13216
	b	.L1415	@long jump
.LCB13216:
	cmp	r0, #0x1
	ble	.L1423	@cond_branch
	cmp	r0, #0x2
	beq	.L1425	@cond_branch
	cmp	r0, #0x3
	beq	.L1426	@cond_branch
.L1423:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L1445
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x7
	strh	r1, [r0, #0x8]
	b	.L1415
.L1446:
	.align	2, 0
.L1445:
	.word	gTasks
.L1425:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L1447
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x3
	strh	r1, [r0, #0x8]
	b	.L1415
.L1448:
	.align	2, 0
.L1447:
	.word	gTasks
.L1426:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L1449
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x5
	strh	r1, [r0, #0x8]
	b	.L1415
.L1450:
	.align	2, 0
.L1449:
	.word	gTasks
.L1429:
	ldr	r0, .L1451
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0
	beq	.LCB13308
	b	.L1415	@long jump
.LCB13308:
	bl	FreeAllWindowBuffers
	bl	ScanlineEffect_Stop
	ldr	r4, .L1451+0x4
	ldr	r0, [r4]
	bl	Free
	str	r6, [r4]
	ldr	r0, .L1451+0x8
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r2, .L1451+0xc
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r3, #0x0
	strh	r6, [r1, #0x8]
	ldr	r0, .L1451+0x10
	add	r0, r7, r0
	ldrb	r0, [r0]
	strh	r0, [r1, #0xa]
	mov	r0, #0x1
	strh	r0, [r1, #0xc]
	strh	r5, [r1, #0xe]
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x4
	strh	r1, [r0, #0x8]
	ldr	r0, .L1451+0x14
	ldr	r0, [r0]
	strb	r3, [r0, #0x10]
	b	.L1415
.L1452:
	.align	2, 0
.L1451:
	.word	gPaletteFade
	.word	sTilemapBuffer
	.word	Task_ShowOpponentInfo
	.word	gTasks
	.word	sTourneyTreeTrainerIds
	.word	sBattleDomeStruct
.L1432:
	ldr	r0, .L1453
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0
	bne	.L1415	@cond_branch
	bl	FreeAllWindowBuffers
	bl	ScanlineEffect_Stop
	ldr	r4, .L1453+0x4
	ldr	r0, [r4]
	bl	Free
	str	r6, [r4]
	ldr	r0, .L1453+0x8
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r2, .L1453+0xc
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	strh	r6, [r0, #0x8]
	add	r1, r7, #0
	sub	r1, r1, #0x10
	strh	r1, [r0, #0xa]
	mov	r1, #0x2
	strh	r1, [r0, #0xc]
	strh	r5, [r0, #0xe]
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x6
	strh	r1, [r0, #0x8]
	b	.L1415
.L1454:
	.align	2, 0
.L1453:
	.word	gPaletteFade
	.word	sTilemapBuffer
	.word	Task_ShowOpponentInfo
	.word	gTasks
.L1435:
	ldr	r0, .L1455
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0
	bne	.L1415	@cond_branch
	bl	FreeAllWindowBuffers
	bl	ScanlineEffect_Stop
	ldr	r4, .L1455+0x4
	ldr	r0, [r4]
	bl	Free
	str	r6, [r4]
	ldr	r0, .L1455+0x8
	bl	SetMainCallback2
	ldr	r1, .L1455+0xc
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x16]
	bl	DestroyTask
	add	r0, r5, #0
	bl	DestroyTask
.L1415:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1456:
	.align	2, 0
.L1455:
	.word	gPaletteFade
	.word	sTilemapBuffer
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
	.word	gTasks
.Lfe45:
	.size	 sub_819395C,.Lfe45-sub_819395C
	.align	2, 0
	.type	 UpdateTourneyTreeCursor,function
	.thumb_func
UpdateTourneyTreeCursor:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x1
	mov	r9, r0
	mov	r1, #0x4
	mov	r8, r1
	ldr	r1, .L1474
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0xa
	ldrsh	r5, [r0, r1]
	ldr	r0, .L1474+0x4
	ldr	r0, [r0]
	ldr	r1, .L1474+0x8
	add	r0, r0, r1
	ldrh	r6, [r0]
	ldr	r0, .L1474+0xc
	ldrh	r1, [r0, #0x2e]
	add	r2, r1, #0
	add	r3, r0, #0
	cmp	r2, #0x2
	beq	.L1459	@cond_branch
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1461	@cond_branch
	cmp	r5, #0x1f
	bne	.L1458	@cond_branch
.L1459:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x0
	mov	r9, r0
	b	.L1460
.L1475:
	.align	2, 0
.L1474:
	.word	gTasks
	.word	gSaveBlock2Ptr
	.word	0xcb2
	.word	gMain
.L1458:
	cmp	r5, #0xf
	bgt	.L1462	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r1, #0x2
	mov	r9, r1
	b	.L1460
.L1462:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x3
	mov	r9, r0
	b	.L1460
.L1461:
	cmp	r2, #0x40
	bne	.L1465	@cond_branch
	ldr	r0, .L1476
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L1465	@cond_branch
	mov	r1, #0x0
	mov	r8, r1
	b	.L1460
.L1477:
	.align	2, 0
.L1476:
	.word	sTourneyTreeCursorMovementMap
.L1465:
	ldrh	r0, [r3, #0x2e]
	cmp	r0, #0x80
	bne	.L1467	@cond_branch
	ldr	r0, .L1478
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r0, r0, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L1467	@cond_branch
	mov	r0, #0x1
	b	.L1473
.L1479:
	.align	2, 0
.L1478:
	.word	sTourneyTreeCursorMovementMap
.L1467:
	ldrh	r0, [r3, #0x2e]
	cmp	r0, #0x20
	bne	.L1469	@cond_branch
	ldr	r0, .L1480
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r0, r0, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L1469	@cond_branch
	mov	r1, #0x2
	mov	r8, r1
	b	.L1460
.L1481:
	.align	2, 0
.L1480:
	.word	sTourneyTreeCursorMovementMap
.L1469:
	ldrh	r0, [r3, #0x2e]
	cmp	r0, #0x10
	bne	.L1460	@cond_branch
	ldr	r0, .L1482
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r0, r0, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L1460	@cond_branch
	mov	r0, #0x3
.L1473:
	mov	r8, r0
.L1460:
	mov	r1, r8
	cmp	r1, #0x4
	beq	.L1472	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	ldr	r4, .L1482+0x4
	add	r0, r0, r4
	mov	r1, #0x0
	bl	StartSpriteAnim
	ldr	r2, .L1482
	lsl	r1, r6, #0x2
	add	r1, r1, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	add	r1, r1, r2
	ldrb	r5, [r1]
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldr	r1, .L1482+0x8
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r5, [r0, #0xa]
.L1472:
	mov	r0, r9
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1483:
	.align	2, 0
.L1482:
	.word	sTourneyTreeCursorMovementMap
	.word	gSprites
	.word	gTasks
.Lfe46:
	.size	 UpdateTourneyTreeCursor,.Lfe46-UpdateTourneyTreeCursor
	.align	2, 0
	.type	 ShowNonInteractiveDomeTourneyTree,function
	.thumb_func
ShowNonInteractiveDomeTourneyTree:
	push	{lr}
	ldr	r0, .L1485
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1485+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	strh	r2, [r1, #0x8]
	mov	r0, #0x1
	strh	r0, [r1, #0xa]
	mov	r0, #0x2
	strh	r0, [r1, #0xc]
	strh	r2, [r1, #0x10]
	ldr	r0, .L1485+0x8
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L1486:
	.align	2, 0
.L1485:
	.word	Task_ShowTourneyTree
	.word	gTasks
	.word	CB2_BattleDome
.Lfe47:
	.size	 ShowNonInteractiveDomeTourneyTree,.Lfe47-ShowNonInteractiveDomeTourneyTree
	.align	2, 0
	.type	 ResolveDomeRoundWinners,function
	.thumb_func
ResolveDomeRoundWinners:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r7, .L1498
	ldrh	r0, [r7]
	cmp	r0, #0x1
	bne	.L1488	@cond_branch
	ldr	r5, .L1498+0x4
	ldrh	r0, [r5]
	bl	TrainerIdToTournamentId
	ldr	r4, .L1498+0x8
	ldr	r2, [r4]
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	ldr	r6, .L1498+0xc
	add	r2, r2, r6
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r5]
	bl	TrainerIdToTournamentId
	ldr	r1, [r4]
	lsl	r0, r0, #0x2
	add	r0, r1, r0
	ldr	r2, .L1498+0x10
	mov	r8, r2
	add	r1, r1, r8
	add	r0, r0, r6
	mov	r3, #0x3
	ldrb	r2, [r1]
	and	r2, r2, r3
	lsl	r2, r2, #0x3
	ldrb	r3, [r0]
	mov	r1, #0x19
	neg	r1, r1
	and	r1, r1, r3
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrh	r0, [r5]
	bl	TrainerIdToTournamentId
	ldr	r2, [r4]
	lsl	r0, r0, #0x1
	mov	r3, #0xec
	lsl	r3, r3, #0x4
	add	r1, r2, r3
	add	r1, r1, r0
	ldr	r0, .L1498+0x14
	ldrh	r0, [r0, #0x22]
	strh	r0, [r1]
	add	r2, r2, r8
	ldrh	r0, [r2]
	cmp	r0, #0x2
	bhi	.L1490	@cond_branch
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DecideRoundWinners
	b	.L1490
.L1499:
	.align	2, 0
.L1498:
	.word	gSpecialVar_0x8005
	.word	gTrainerBattleOpponent_A
	.word	gSaveBlock2Ptr
	.word	0xd25
	.word	0xcb2
	.word	gBattleResults
.L1488:
	ldr	r5, .L1500
	add	r0, r5, #0
	bl	TrainerIdToTournamentId
	ldr	r4, .L1500+0x4
	ldr	r2, [r4]
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	ldr	r6, .L1500+0x8
	add	r2, r2, r6
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r0, r5, #0
	bl	TrainerIdToTournamentId
	ldr	r1, [r4]
	lsl	r0, r0, #0x2
	add	r0, r1, r0
	ldr	r2, .L1500+0xc
	add	r1, r1, r2
	add	r0, r0, r6
	mov	r3, #0x3
	ldrb	r2, [r1]
	and	r2, r2, r3
	lsl	r2, r2, #0x3
	ldrb	r3, [r0]
	mov	r1, #0x19
	neg	r1, r1
	and	r1, r1, r3
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r0, r5, #0
	bl	TrainerIdToTournamentId
	ldr	r1, [r4]
	lsl	r0, r0, #0x1
	mov	r3, #0xec
	lsl	r3, r3, #0x4
	add	r1, r1, r3
	add	r1, r1, r0
	ldr	r0, .L1500+0x10
	ldrh	r0, [r0, #0x24]
	strh	r0, [r1]
	ldr	r0, .L1500+0x14
	ldrb	r0, [r0]
	cmp	r0, #0x9
	beq	.L1492	@cond_branch
	ldrh	r0, [r7]
	cmp	r0, #0x9
	bne	.L1491	@cond_branch
.L1492:
	add	r0, r5, #0
	bl	TrainerIdToTournamentId
	ldr	r2, [r4]
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	add	r2, r2, r6
	ldrb	r1, [r2]
	mov	r0, #0x1f
	and	r0, r0, r1
	mov	r1, #0x20
	orr	r0, r0, r1
	strb	r0, [r2]
.L1491:
	ldr	r0, .L1500+0x4
	ldr	r0, [r0]
	ldr	r1, .L1500+0xc
	add	r0, r0, r1
	ldrh	r4, [r0]
	cmp	r4, #0x3
	bgt	.L1490	@cond_branch
.L1496:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	DecideRoundWinners
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1496	@cond_branch
.L1490:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1501:
	.align	2, 0
.L1500:
	.word	0x3ff
	.word	gSaveBlock2Ptr
	.word	0xd25
	.word	0xcb2
	.word	gBattleResults
	.word	gBattleOutcome
.Lfe48:
	.size	 ResolveDomeRoundWinners,.Lfe48-ResolveDomeRoundWinners
	.align	2, 0
	.type	 GetWinningMove,function
	.thumb_func
GetWinningMove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x84
	str	r0, [sp, #0x48]
	str	r1, [sp, #0x4c]
	lsl	r4, r2, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	str	r0, [sp, #0x54]
	mov	r1, #0x0
	str	r1, [sp, #0x58]
	bl	SetFacilityPtrsGetLevel
	mov	r2, #0x0
	str	r2, [sp, #0x50]
	add	r3, sp, #0x30
	mov	sl, r3
	ldr	r5, [sp, #0x4c]
	lsl	r5, r5, #0x1
	str	r5, [sp, #0x70]
	sub	r4, r4, #0x1
	str	r4, [sp, #0x78]
.L1506:
	mov	r0, #0x0
	mov	r9, r0
	ldr	r1, [sp, #0x50]
	lsl	r1, r1, #0x2
	str	r1, [sp, #0x74]
	ldr	r2, [sp, #0x48]
	lsl	r2, r2, #0x2
	str	r2, [sp, #0x6c]
	ldr	r3, [sp, #0x50]
	add	r3, r3, #0x1
	str	r3, [sp, #0x60]
.L1510:
	ldr	r4, [sp, #0x74]
	add	r4, r4, r9
	lsl	r0, r4, #0x2
	mov	r5, sp
	add	r1, r5, r0
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r0, .L1574
	ldr	r3, [r0]
	ldr	r1, [sp, #0x6c]
	add	r0, r3, r1
	ldr	r2, .L1574+0x4
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	ldr	r1, .L1574+0x8
	cmp	r0, r1
	bne	.L1511	@cond_branch
	ldr	r3, [sp, #0x50]
	lsl	r0, r3, #0x18
	mov	r5, r9
	lsl	r1, r5, #0x18
	lsr	r1, r1, #0x18
	lsr	r0, r0, #0x18
	bl	GetFrontierBrainMonMove
	lsl	r1, r4, #0x1
	add	r1, r1, sl
	strh	r0, [r1]
	b	.L1512
.L1575:
	.align	2, 0
.L1574:
	.word	gSaveBlock2Ptr
	.word	0xd24
	.word	-0x800000
.L1511:
	lsl	r2, r4, #0x1
	add	r2, r2, sl
	ldr	r1, [sp, #0x48]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	ldr	r4, [sp, #0x50]
	add	r0, r0, r4
	lsl	r0, r0, #0x1
	ldr	r5, .L1576
	add	r1, r3, r5
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldr	r1, .L1576+0x4
	ldr	r1, [r1]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	mov	r3, r9
	lsl	r1, r3, #0x1
	add	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r2]
.L1512:
	ldr	r0, .L1576+0x8
	ldr	r1, [sp, #0x74]
	add	r1, r1, r9
	lsl	r1, r1, #0x1
	add	r1, r1, sl
	ldrh	r2, [r1]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r6, [r1, #0x1]
	cmp	r6, #0
	bne	.L1513	@cond_branch
	mov	r6, #0x28
	b	.L1514
.L1577:
	.align	2, 0
.L1576:
	.word	0xd64
	.word	gFacilityTrainerMons
	.word	gBattleMoves
.L1513:
	cmp	r6, #0x1
	bne	.L1515	@cond_branch
	mov	r6, #0x3c
	b	.L1514
.L1515:
	add	r1, r2, #0
	cmp	r1, #0x78
	beq	.L1518	@cond_branch
	cmp	r1, #0x99
	bne	.L1514	@cond_branch
.L1518:
	lsr	r0, r6, #0x1f
	add	r0, r6, r0
	asr	r6, r0, #0x1
.L1514:
	mov	r1, #0x0
	mov	r4, r9
	add	r4, r4, #0x1
	str	r4, [sp, #0x64]
	ldr	r5, [sp, #0x70]
	ldr	r2, [sp, #0x4c]
	add	r0, r5, r2
	lsl	r0, r0, #0x1
	str	r0, [sp, #0x5c]
.L1522:
	lsl	r7, r1, #0x1
	add	r1, r1, #0x1
	str	r1, [sp, #0x68]
	ldr	r3, [sp, #0x5c]
	add	r3, r3, r7
	mov	r8, r3
.L1523:
	bl	Random
	add	r4, r0, #0
	bl	Random
	lsl	r4, r4, #0x10
	lsr	r5, r4, #0x10
	lsl	r0, r0, #0x10
	orr	r5, r5, r0
	ldr	r2, .L1578
	ldr	r0, [r2]
	ldr	r4, .L1578+0x4
	add	r0, r0, r4
	add	r0, r0, r8
	ldrh	r4, [r0]
	ldr	r3, .L1578+0x8
	ldr	r0, [r3]
	lsl	r4, r4, #0x4
	add	r4, r4, r0
	add	r0, r5, #0
	str	r2, [sp, #0x7c]
	str	r3, [sp, #0x80]
	bl	GetNatureFromPersonality
	ldrb	r1, [r4, #0xc]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, [sp, #0x7c]
	ldr	r3, [sp, #0x80]
	cmp	r1, r0
	bne	.L1523	@cond_branch
	ldr	r0, [r2]
	ldr	r2, [sp, #0x5c]
	add	r1, r7, r2
	ldr	r4, .L1578+0x4
	add	r0, r0, r4
	add	r0, r0, r1
	ldrh	r0, [r0]
	ldr	r1, [r3]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r5, r5, r0
	cmp	r5, #0
	beq	.L1528	@cond_branch
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r5, .L1578+0xc
	add	r0, r0, r5
	ldrb	r2, [r0, #0x17]
	b	.L1529
.L1579:
	.align	2, 0
.L1578:
	.word	gSaveBlock2Ptr
	.word	0xd64
	.word	gFacilityTrainerMons
	.word	gBaseStats
.L1528:
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r2, .L1580
	add	r0, r0, r2
	ldrb	r2, [r0, #0x16]
.L1529:
	ldr	r4, [sp, #0x74]
	add	r4, r4, r9
	lsl	r0, r4, #0x1
	add	r0, r0, sl
	ldrh	r0, [r0]
	bl	AI_TypeCalc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, #0x6
	and	r0, r0, r5
	cmp	r0, #0x6
	bne	.L1530	@cond_branch
	lsl	r0, r4, #0x2
	mov	r3, sp
	add	r1, r3, r0
	b	.L1572
.L1581:
	.align	2, 0
.L1580:
	.word	gBaseStats
.L1530:
	mov	r0, #0x29
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L1521	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1534	@cond_branch
	lsl	r0, r4, #0x2
	mov	r5, sp
	add	r2, r5, r0
	lsl	r1, r6, #0x1
	b	.L1573
.L1534:
	mov	r0, #0x4
	and	r5, r5, r0
	cmp	r5, #0
	beq	.L1536	@cond_branch
	lsl	r0, r4, #0x2
	mov	r1, sp
	add	r2, r1, r0
	lsr	r1, r6, #0x1f
	add	r1, r6, r1
	asr	r1, r1, #0x1
.L1573:
	ldr	r0, [r2]
	add	r0, r0, r1
	str	r0, [r2]
	b	.L1521
.L1536:
	lsl	r0, r4, #0x2
	mov	r2, sp
	add	r1, r2, r0
.L1572:
	ldr	r0, [r1]
	add	r0, r0, r6
	str	r0, [r1]
.L1521:
	ldr	r1, [sp, #0x68]
	cmp	r1, #0x2
	bgt	.LCB14316
	b	.L1522	@long jump
.LCB14316:
	ldr	r2, [sp, #0x74]
	add	r2, r2, r9
	lsl	r0, r2, #0x2
	add	r0, r0, sp
	ldr	r1, [r0]
	ldr	r3, [sp, #0x54]
	cmp	r3, r1
	bge	.L1539	@cond_branch
	lsl	r0, r2, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x58]
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x54]
	b	.L1509
.L1539:
	ldr	r4, [sp, #0x54]
	cmp	r4, r1
	bne	.L1509	@cond_branch
	ldr	r5, [sp, #0x58]
	lsl	r0, r5, #0x1
	add	r0, r0, sl
	lsl	r1, r2, #0x1
	add	r1, r1, sl
	ldrh	r0, [r0]
	ldrh	r1, [r1]
	cmp	r0, r1
	bcs	.L1509	@cond_branch
	lsl	r0, r2, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x58]
.L1509:
	ldr	r0, [sp, #0x64]
	mov	r9, r0
	cmp	r0, #0x3
	bgt	.LCB14366
	b	.L1510	@long jump
.LCB14366:
	ldr	r1, [sp, #0x60]
	str	r1, [sp, #0x50]
	cmp	r1, #0x2
	bgt	.LCB14373
	b	.L1506	@long jump
.LCB14373:
	ldr	r2, [sp, #0x58]
	mov	r9, r2
	b	.L1545
.L1548:
	mov	r3, #0x0
	mov	r9, r3
	mov	r1, #0x0
	mov	r4, sl
	mov	r3, sl
	mov	r2, sp
.L1552:
	ldr	r0, [r2]
	ldr	r5, [sp, #0x54]
	cmp	r5, r0
	bge	.L1553	@cond_branch
	mov	r9, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x54]
	b	.L1551
.L1553:
	ldr	r5, [sp, #0x54]
	cmp	r5, r0
	bne	.L1551	@cond_branch
	mov	r5, r9
	lsl	r0, r5, #0x1
	add	r0, r4, r0
	ldrh	r0, [r0]
	ldrh	r5, [r3]
	cmp	r0, r5
	bcs	.L1551	@cond_branch
	mov	r9, r1
.L1551:
	add	r3, r3, #0x2
	add	r2, r2, #0x4
	add	r1, r1, #0x1
	cmp	r1, #0xb
	ble	.L1552	@cond_branch
	ldr	r0, [sp, #0x50]
	ldr	r1, [sp, #0x78]
	cmp	r0, r1
	beq	.L1547	@cond_branch
.L1545:
	mov	r2, #0x0
	str	r2, [sp, #0x50]
	mov	r3, r9
	lsl	r7, r3, #0x2
	ldr	r4, [sp, #0x78]
	cmp	r2, r4
	bge	.L1559	@cond_branch
	lsl	r0, r3, #0x1
	mov	r5, sl
	add	r6, r5, r0
	ldr	r0, [sp, #0x48]
	lsl	r5, r0, #0x18
.L1561:
	ldr	r0, .L1582
	ldr	r4, [r0]
	ldr	r2, [sp, #0x50]
	lsl	r1, r2, #0x18
	lsr	r1, r1, #0x18
	lsr	r0, r5, #0x18
	bl	sub_81953E8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	mov	r3, #0xec
	lsl	r3, r3, #0x4
	add	r4, r4, r3
	add	r4, r4, r0
	ldrh	r0, [r4]
	ldrh	r4, [r6]
	cmp	r0, r4
	beq	.L1559	@cond_branch
	ldr	r0, [sp, #0x50]
	add	r0, r0, #0x1
	str	r0, [sp, #0x50]
	ldr	r1, [sp, #0x78]
	cmp	r0, r1
	blt	.L1561	@cond_branch
.L1559:
	ldr	r2, [sp, #0x50]
	ldr	r3, [sp, #0x78]
	cmp	r2, r3
	beq	.L1547	@cond_branch
	mov	r4, sp
	add	r1, r4, r7
	mov	r0, #0x0
	str	r0, [r1]
	mov	r5, #0x0
	str	r5, [sp, #0x54]
	mov	r9, r5
	mov	r2, sp
	mov	r1, #0xb
.L1568:
	ldmia	r2!, {r0}
	add	r9, r9, r0
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L1568	@cond_branch
	mov	r0, r9
	cmp	r0, #0
	bne	.L1548	@cond_branch
.L1547:
	mov	r1, r9
	lsl	r0, r1, #0x2
	add	r0, r0, sp
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1571	@cond_branch
	ldr	r2, [sp, #0x58]
	mov	r9, r2
.L1571:
	mov	r3, r9
	lsl	r0, r3, #0x1
	add	r0, r0, sl
	ldrh	r0, [r0]
	add	sp, sp, #0x84
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1583:
	.align	2, 0
.L1582:
	.word	gSaveBlock2Ptr
.Lfe49:
	.size	 GetWinningMove,.Lfe49-GetWinningMove
	.align	2, 0
	.type	 Task_ShowTourneyTree,function
	.thumb_func
Task_ShowTourneyTree:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x28
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L1653
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0xa
	ldrsh	r1, [r0, r2]
	mov	sl, r1
	mov	r3, #0xc
	ldrsh	r4, [r0, r3]
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x5
	bls	.LCB14581
	b	.L1585	@long jump
.LCB14581:
	lsl	r0, r0, #0x2
	ldr	r1, .L1653+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1654:
	.align	2, 0
.L1653:
	.word	gTasks
	.word	.L1642
	.align	2, 0
	.align	2, 0
.L1642:
	.word	.L1586
	.word	.L1587
	.word	.L1588
	.word	.L1589
	.word	.L1598
	.word	.L1629
.L1586:
	mov	r0, #0x0
	bl	SetHBlankCallback
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x3
	bl	EnableInterrupts
	mov	r4, #0x0
	str	r4, [sp, #0x14]
	add	r0, sp, #0x14
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	ldr	r2, .L1655
	bl	CpuSet
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L1655+0x4
	mov	r0, #0x0
	mov	r2, #0x4
	bl	InitBgsFromTemplates
	ldr	r0, .L1655+0x8
	bl	InitWindows
	bl	DeactivateAllTextPrinters
	ldr	r0, .L1655+0xc
	strh	r4, [r0]
	ldr	r0, .L1655+0x10
	strh	r4, [r0]
	ldr	r0, .L1655+0x14
	strh	r4, [r0]
	ldr	r0, .L1655+0x18
	strh	r4, [r0]
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r1, #0xb0
	lsl	r1, r1, #0x4
	mov	r0, #0x3
	mov	r2, #0x0
	bl	ChangeBgY
	ldr	r1, .L1655+0x1c
	mov	r2, r8
	lsl	r0, r2, #0x2
	b	.L1645
.L1656:
	.align	2, 0
.L1655:
	.word	0x5006000
	.word	gUnknown_0860CE74
	.word	gUnknown_0860CE94
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gTasks
.L1587:
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x4c
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r1, .L1657
	mov	r0, #0x40
	bl	SetGpuReg
	mov	r0, #0x44
	mov	r1, #0x9f
	bl	SetGpuReg
	ldr	r1, .L1657+0x4
	mov	r0, #0x42
	bl	SetGpuReg
	mov	r0, #0x46
	mov	r1, #0x9f
	bl	SetGpuReg
	mov	r0, #0x48
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x4a
	mov	r1, #0x3f
	bl	SetGpuReg
	bl	ResetPaletteFade
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	ldr	r1, .L1657+0x8
	mov	r3, r8
	lsl	r0, r3, #0x2
	b	.L1645
.L1658:
	.align	2, 0
.L1657:
	.word	0x5860
	.word	0x9098
	.word	gTasks
.L1588:
	ldr	r4, .L1659
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	bl	AllocZeroed
	add	r1, r0, #0
	str	r1, [r4]
	ldr	r0, .L1659+0x4
	bl	LZDecompressWram
	ldr	r1, [r4]
	mov	r0, #0x1
	bl	SetBgTilemapBuffer
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	ldr	r1, .L1659+0x8
	mov	r5, #0x80
	lsl	r5, r5, #0x6
	mov	r6, #0x0
	str	r6, [sp]
	mov	r0, #0x1
	add	r2, r5, #0
	mov	r3, #0x0
	bl	DecompressAndLoadBgGfxUsingHeap
	ldr	r1, .L1659+0xc
	str	r6, [sp]
	mov	r0, #0x2
	add	r2, r5, #0
	mov	r3, #0x0
	bl	DecompressAndLoadBgGfxUsingHeap
	ldr	r1, .L1659+0x10
	mov	r4, #0x1
	str	r4, [sp]
	mov	r0, #0x2
	add	r2, r5, #0
	mov	r3, #0x0
	bl	DecompressAndLoadBgGfxUsingHeap
	ldr	r1, .L1659+0x14
	str	r4, [sp]
	mov	r0, #0x3
	add	r2, r5, #0
	mov	r3, #0x0
	bl	DecompressAndLoadBgGfxUsingHeap
	ldr	r0, .L1659+0x18
	mov	r4, #0x80
	lsl	r4, r4, #0x2
	mov	r1, #0x0
	add	r2, r4, #0
	bl	LoadCompressedPalette
	ldr	r0, .L1659+0x1c
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r2, r4, #0
	bl	LoadCompressedPalette
	ldr	r0, .L1659+0x20
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadCompressedPalette
	str	r6, [sp, #0x18]
	add	r0, sp, #0x18
	ldr	r1, .L1659+0x24
	ldr	r2, .L1659+0x28
	bl	CpuSet
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
	ldr	r1, .L1659+0x2c
	mov	r4, r8
	lsl	r0, r4, #0x2
.L1645:
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	b	.L1585
.L1660:
	.align	2, 0
.L1659:
	.word	sTilemapBuffer
	.word	gUnknown_08D83900
	.word	gUnknown_08D82F10
	.word	gUnknown_08D834FC
	.word	gUnknown_08D83B2C
	.word	gUnknown_08D83C3C
	.word	gUnknown_08D85358
	.word	gUnknown_08D85444
	.word	gUnknown_08D85600
	.word	gPlttBufferFaded
	.word	0x5000100
	.word	gTasks
.L1589:
	ldr	r0, .L1661
	bl	LoadCompressedSpriteSheet
	mov	r0, r8
	lsl	r0, r0, #0x2
	str	r0, [sp, #0x1c]
	mov	r1, sl
	cmp	r1, #0
	bne	.L1590	@cond_branch
	mov	r5, #0x0
	ldr	r4, .L1661+0x4
.L1594:
	ldrb	r1, [r4]
	ldrb	r2, [r4, #0x1]
	ldr	r0, .L1661+0x8
	mov	r3, #0x0
	bl	CreateSprite
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x1e
	bls	.L1594	@cond_branch
	ldr	r0, .L1661+0xc
	ldr	r1, [sp, #0x1c]
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, #0x10
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L1596	@cond_branch
	ldr	r0, .L1661+0x10
	mov	r1, #0xda
	mov	r2, #0xc
	mov	r3, #0x0
	bl	CreateSprite
	b	.L1590
.L1662:
	.align	2, 0
.L1661:
	.word	sDomeOptionsSpriteSheet
	.word	gUnknown_0860D411
	.word	gUnknown_0860CFA8
	.word	gTasks
	.word	gUnknown_0860D008
.L1596:
	ldr	r0, .L1663
	mov	r1, #0xda
	mov	r2, #0xc
	mov	r3, #0x0
	bl	CreateSprite
.L1590:
	ldr	r1, .L1663+0x4
	mov	r0, #0x0
	bl	SetGpuReg
	b	.L1646
.L1664:
	.align	2, 0
.L1663:
	.word	gUnknown_0860CFD8
	.word	0x7f40
.L1598:
	add	r0, sp, #0x4
	mov	r2, #0x0
	mov	r1, #0x2
	strb	r1, [r0, #0x5]
	ldr	r0, .L1665
	str	r0, [sp, #0x4]
	add	r0, sp, #0x4
	strb	r1, [r0, #0x4]
	strb	r2, [r0, #0x6]
	strb	r2, [r0, #0x7]
	strb	r1, [r0, #0xa]
	strb	r2, [r0, #0xb]
	ldrb	r0, [r0, #0x5]
	ldr	r1, [sp, #0x4]
	add	r2, sp, #0x4
	ldrb	r3, [r2, #0xa]
	mov	r2, #0x70
	bl	GetStringCenterAlignXOffsetWithLetterSpacing
	add	r1, sp, #0x4
	strb	r0, [r1, #0x8]
	mov	r0, #0x1
	strb	r0, [r1, #0x9]
	add	r3, r1, #0
	ldrb	r2, [r3, #0xc]
	mov	r1, #0x10
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3, #0xc]
	add	r2, r3, #0
	mov	r0, #0xe0
	strb	r0, [r2, #0xc]
	ldrb	r0, [r2, #0xd]
	and	r1, r1, r0
	strb	r1, [r2, #0xd]
	add	r1, r2, #0
	mov	r0, #0xd0
	strb	r0, [r1, #0xd]
	add	r0, r1, #0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	mov	r3, r8
	lsl	r3, r3, #0x2
	str	r3, [sp, #0x1c]
	add	r4, sp, #0x4
	mov	r0, #0xf
	mov	r9, r0
	mov	r1, #0x0
	str	r1, [sp, #0x20]
	mov	r2, #0x0
	str	r2, [sp, #0x24]
	mov	r7, #0x0
	mov	r5, #0xf
.L1602:
	ldr	r3, .L1665+0x4
	ldr	r0, [r3]
	add	r0, r0, r7
	ldr	r1, .L1665+0x8
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	ldr	r0, .L1665+0xc
	bl	CopyDomeTrainerName
	mov	r2, sl
	cmp	r2, #0x1
	bne	.L1603	@cond_branch
	ldr	r3, .L1665+0x4
	ldr	r2, [r3]
	add	r0, r2, r7
	ldr	r1, .L1665+0x10
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1d
	cmp	r0, #0
	blt	.L1647	@cond_branch
	ldr	r3, .L1665+0x14
	add	r0, r2, r3
	ldrh	r1, [r0]
	cmp	r1, #0x1
	beq	.L1608	@cond_branch
	ldr	r2, [sp, #0x24]
	lsr	r0, r2, #0x18
	sub	r1, r1, #0x2
	b	.L1648
.L1666:
	.align	2, 0
.L1665:
	.word	gText_BattleTourney
	.word	gSaveBlock2Ptr
	.word	0xd24
	.word	gDisplayedStringBattle
	.word	0xd25
	.word	0xcb2
.L1603:
	mov	r3, sl
	cmp	r3, #0
	bne	.L1608	@cond_branch
	ldr	r0, .L1667
	ldr	r2, [r0]
	add	r0, r2, r7
	ldr	r1, .L1667+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1d
	cmp	r0, #0
	bge	.L1610	@cond_branch
.L1647:
	lsl	r1, r1, #0x1b
	lsr	r0, r1, #0x1e
	cmp	r0, #0
	beq	.L1608	@cond_branch
	sub	r1, r0, #0x1
	ldr	r2, [sp, #0x24]
	lsr	r0, r2, #0x18
.L1648:
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	sub_81948EC
	b	.L1608
.L1668:
	.align	2, 0
.L1667:
	.word	gSaveBlock2Ptr
	.word	0xd25
.L1610:
	ldr	r3, .L1669
	add	r1, r2, r3
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L1608	@cond_branch
	ldr	r0, [sp, #0x1c]
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r2, .L1669+0x4
	add	r0, r0, r2
	mov	r3, #0x10
	ldrsh	r0, [r0, r3]
	cmp	r0, #0
	beq	.L1614	@cond_branch
	ldrh	r1, [r1]
	b	.L1615
.L1670:
	.align	2, 0
.L1669:
	.word	0xcb2
	.word	gTasks
.L1614:
	ldrh	r0, [r1]
	sub	r1, r0, #0x1
.L1615:
	ldr	r2, [sp, #0x24]
	lsr	r0, r2, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	sub_81948EC
.L1608:
	ldr	r0, [sp, #0x1c]
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r3, .L1671
	add	r0, r0, r3
	mov	r1, #0x10
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L1616	@cond_branch
	ldr	r2, .L1671+0x4
	ldr	r0, [r2]
	ldr	r3, .L1671+0x8
	add	r0, r0, r3
	ldrh	r3, [r0]
	add	r6, r2, #0
	b	.L1617
.L1672:
	.align	2, 0
.L1671:
	.word	gTasks
	.word	gSaveBlock2Ptr
	.word	0xcb2
.L1616:
	ldr	r1, .L1673
	ldr	r0, [r1]
	ldr	r2, .L1673+0x4
	add	r0, r0, r2
	ldrh	r0, [r0]
	sub	r3, r0, #0x1
	add	r6, r1, #0
.L1617:
	mov	r0, sl
	cmp	r0, #0x1
	bne	.L1620	@cond_branch
	ldr	r2, [r6]
	add	r0, r2, r7
	ldr	r1, .L1673+0x8
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1b
	lsr	r1, r1, #0x1e
	ldr	r0, .L1673+0x4
	add	r2, r2, r0
	ldrh	r0, [r2]
	sub	r0, r0, #0x1
	cmp	r1, r0
	blt	.L1619	@cond_branch
.L1620:
	mov	r1, sl
	cmp	r1, #0
	bne	.L1618	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, r7
	ldr	r2, .L1673+0x8
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1e
	cmp	r0, r3
	bgt	.L1618	@cond_branch
.L1619:
	ldr	r0, [r6]
	add	r1, r0, r7
	ldr	r3, .L1673+0x8
	add	r0, r1, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L1618	@cond_branch
	ldr	r2, .L1673+0xc
	add	r0, r1, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	ldr	r3, .L1673+0x10
	cmp	r0, r3
	bne	.L1621	@cond_branch
	ldrb	r1, [r4, #0xc]
	mov	r0, r9
	and	r0, r0, r1
	mov	r1, #0x30
	orr	r0, r0, r1
	strb	r0, [r4, #0xc]
	ldrb	r1, [r4, #0xd]
	mov	r0, r9
	and	r0, r0, r1
	mov	r1, #0x40
	b	.L1649
.L1674:
	.align	2, 0
.L1673:
	.word	gSaveBlock2Ptr
	.word	0xcb2
	.word	0xd25
	.word	0xd24
	.word	0x3ff
.L1621:
	ldrb	r1, [r4, #0xc]
	mov	r0, r9
	and	r0, r0, r1
	mov	r1, #0xb0
	b	.L1650
.L1618:
	ldr	r0, [r6]
	add	r0, r0, r7
	ldr	r1, .L1675
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	ldr	r2, .L1675+0x4
	cmp	r0, r2
	bne	.L1624	@cond_branch
	ldrb	r1, [r4, #0xc]
	mov	r0, r9
	and	r0, r0, r1
	mov	r1, #0x30
	orr	r0, r0, r1
	strb	r0, [r4, #0xc]
	ldrb	r1, [r4, #0xd]
	mov	r0, r9
	and	r0, r0, r1
	mov	r1, #0x40
	b	.L1649
.L1676:
	.align	2, 0
.L1675:
	.word	0xd24
	.word	0x3ff
.L1624:
	ldrb	r1, [r4, #0xc]
	mov	r0, r9
	and	r0, r0, r1
	mov	r1, #0xe0
.L1650:
	orr	r0, r0, r1
	strb	r0, [r4, #0xc]
	ldrb	r1, [r4, #0xd]
	mov	r0, r9
	and	r0, r0, r1
	mov	r1, #0xd0
.L1649:
	orr	r0, r0, r1
	strb	r0, [r4, #0xd]
	ldr	r0, .L1677
	ldr	r3, [sp, #0x20]
	add	r0, r3, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1626	@cond_branch
	ldrb	r0, [r4, #0x5]
	ldrb	r3, [r4, #0xa]
	ldr	r1, .L1677+0x4
	mov	r2, #0x3d
	bl	GetStringWidthDifference
	b	.L1651
.L1678:
	.align	2, 0
.L1677:
	.word	gUnknown_0860D3F1
	.word	gDisplayedStringBattle
.L1626:
	mov	r0, #0x3
.L1651:
	strb	r0, [r4, #0x8]
	ldr	r0, .L1679
	str	r0, [sp, #0x4]
	ldr	r0, .L1679+0x4
	ldr	r1, [sp, #0x20]
	add	r0, r1, r0
	ldrb	r0, [r0]
	strb	r0, [r4, #0x4]
	ldr	r2, .L1679+0x8
	add	r0, r1, r2
	ldrb	r0, [r0]
	strb	r0, [r4, #0x9]
	add	r0, sp, #0x4
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	ldr	r3, [sp, #0x20]
	add	r3, r3, #0x2
	str	r3, [sp, #0x20]
	ldr	r0, [sp, #0x24]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r0, r0, r1
	str	r0, [sp, #0x24]
	add	r7, r7, #0x4
	sub	r5, r5, #0x1
	cmp	r5, #0
	blt	.LCB15409
	b	.L1602	@long jump
.LCB15409:
.L1646:
	ldr	r0, .L1679+0xc
	ldr	r1, [sp, #0x1c]
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L1585
.L1680:
	.align	2, 0
.L1679:
	.word	gDisplayedStringBattle
	.word	gUnknown_0860D3F1
	.word	gUnknown_0860D3F1+0x1
	.word	gTasks
.L1629:
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x2
	bl	PutWindowTilemap
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	mov	r0, #0x1
	mov	r1, #0x3
	bl	CopyWindowToVram
	mov	r0, #0x2
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldr	r0, .L1681
	bl	SetHBlankCallback
	ldr	r0, .L1681+0x4
	bl	SetVBlankCallback
	cmp	r4, #0x2
	bne	.L1630	@cond_branch
	mov	r2, sl
	cmp	r2, #0
	bne	.L1631	@cond_branch
	ldr	r0, .L1681+0x8
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r2, .L1681+0xc
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r3, sl
	strh	r3, [r1, #0x8]
	strh	r3, [r1, #0xa]
	mov	r4, r8
	lsl	r0, r4, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r0, [r0, #0x10]
	strh	r0, [r1, #0x14]
	b	.L1633
.L1682:
	.align	2, 0
.L1681:
	.word	HblankCb_BattleDome
	.word	VblankCb1_BattleDome
	.word	sub_819395C
	.word	gTasks
.L1631:
	ldr	r0, .L1683
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L1683+0x4
	b	.L1652
.L1684:
	.align	2, 0
.L1683:
	.word	sub_8194950
	.word	gTasks
.L1630:
	ldr	r1, .L1685
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r3, #0xe
	ldrsh	r5, [r0, r3]
.L1652:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x8]
.L1633:
	bl	ScanlineEffect_Clear
	ldr	r0, .L1685+0x4
	ldr	r2, .L1685+0x8
	mov	r4, #0xf0
	lsl	r4, r4, #0x3
	add	r1, r0, r4
	mov	r5, #0x5a
.L1636:
	strh	r2, [r0]
	strh	r2, [r1]
	add	r1, r1, #0x2
	add	r0, r0, #0x2
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L1636	@cond_branch
	mov	r5, #0x5b
	ldr	r3, .L1685+0xc
	ldr	r0, .L1685+0x4
	ldr	r2, .L1685+0x10
	ldr	r4, .L1685+0x14
	add	r1, r0, r4
	add	r0, r0, #0xb6
.L1640:
	strh	r2, [r0]
	strh	r2, [r1]
	add	r1, r1, #0x2
	add	r0, r0, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x9f
	ble	.L1640	@cond_branch
	ldr	r0, [r3]
	ldr	r1, [r3, #0x4]
	ldr	r2, [r3, #0x8]
	bl	ScanlineEffect_SetParams
	mov	r0, r8
	bl	DestroyTask
.L1585:
	add	sp, sp, #0x28
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1686:
	.align	2, 0
.L1685:
	.word	gTasks
	.word	gScanlineEffectRegBuffers
	.word	0x1f0a
	.word	sTourneyTreeScanlineEffectParams
	.word	0x1f09
	.word	0x836
.Lfe50:
	.size	 Task_ShowTourneyTree,.Lfe50-Task_ShowTourneyTree
	.align	2, 0
	.type	 sub_81948EC,function
	.thumb_func
sub_81948EC:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r4, .L1693
	lsl	r2, r1, #0x2
	lsl	r3, r0, #0x4
	add	r2, r2, r3
	add	r2, r2, r4
	ldr	r3, [r2]
	ldr	r2, .L1693+0x4
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	add	r1, r1, r2
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L1689	@cond_branch
	mov	r7, #0x1
	add	r4, r3, #0
	add	r5, r4, #0x2
	add	r6, r0, #0
.L1691:
	ldrb	r2, [r4]
	ldrb	r3, [r4, #0x1]
	str	r7, [sp]
	str	r7, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	add	r1, r5, #0
	bl	CopyToBgTilemapBufferRect_ChangePalette
	add	r4, r4, #0x4
	add	r5, r5, #0x4
	sub	r6, r6, #0x1
	cmp	r6, #0
	bne	.L1691	@cond_branch
.L1689:
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1694:
	.align	2, 0
.L1693:
	.word	gUnknown_0860DD10
	.word	gUnknown_0860DE10
.Lfe51:
	.size	 sub_81948EC,.Lfe51-sub_81948EC
	.align	2, 0
	.type	 sub_8194950,function
	.thumb_func
sub_8194950:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L1718
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	add	r2, r1, #0
	cmp	r0, #0x4
	bls	.LCB15708
	b	.L1696	@long jump
.LCB15708:
	lsl	r0, r0, #0x2
	ldr	r1, .L1718+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1719:
	.align	2, 0
.L1718:
	.word	gTasks
	.word	.L1715
	.align	2, 0
	.align	2, 0
.L1715:
	.word	.L1697
	.word	.L1698
	.word	.L1709
	.word	.L1711
	.word	.L1713
.L1697:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r1, .L1720
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x1
	strh	r1, [r0, #0x8]
	b	.L1696
.L1721:
	.align	2, 0
.L1720:
	.word	gTasks
.L1698:
	ldr	r0, .L1722
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB15760
	b	.L1696	@long jump
.LCB15760:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r2, #0x0
	mov	r3, #0x2
	mov	r1, #0x2
	strh	r1, [r0, #0x8]
	mov	r1, #0x40
	strh	r1, [r0, #0xe]
	add	r0, sp, #0x4
	strb	r3, [r0, #0x5]
	strb	r2, [r0, #0x6]
	strb	r2, [r0, #0x7]
	strb	r3, [r0, #0xa]
	strb	r2, [r0, #0xb]
	add	r3, r0, #0
	ldrb	r2, [r3, #0xc]
	sub	r1, r1, #0x50
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3, #0xc]
	add	r2, r3, #0
	mov	r0, #0xb0
	strb	r0, [r2, #0xc]
	ldrb	r0, [r2, #0xd]
	and	r1, r1, r0
	strb	r1, [r2, #0xd]
	add	r1, r2, #0
	mov	r0, #0xd0
	strb	r0, [r1, #0xd]
	mov	r7, #0x0
	ldr	r0, .L1722+0x4
	mov	r9, r0
	ldr	r1, .L1722+0x8
	mov	r8, r1
	add	r4, r2, #0
	ldr	r6, .L1722+0xc
	mov	r5, #0x0
.L1703:
	mov	r2, r8
	ldr	r0, [r2]
	add	r0, r0, r5
	ldr	r1, .L1722+0x10
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	mov	r0, r9
	bl	CopyDomeTrainerName
	mov	r0, r8
	ldr	r2, [r0]
	add	r0, r2, r5
	ldr	r1, .L1722+0x14
	add	r0, r0, r1
	ldrb	r3, [r0]
	lsl	r1, r3, #0x1b
	lsr	r1, r1, #0x1e
	ldr	r0, .L1722+0x18
	add	r2, r2, r0
	ldrh	r0, [r2]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bne	.L1704	@cond_branch
	lsl	r0, r3, #0x1d
	cmp	r0, #0
	bge	.L1704	@cond_branch
	ldrb	r0, [r6]
	cmp	r0, #0
	bne	.L1705	@cond_branch
	ldrb	r0, [r4, #0x5]
	ldrb	r3, [r4, #0xa]
	mov	r1, r9
	mov	r2, #0x3d
	bl	GetStringWidthDifference
	b	.L1717
.L1723:
	.align	2, 0
.L1722:
	.word	gPaletteFade
	.word	gDisplayedStringBattle
	.word	gSaveBlock2Ptr
	.word	gUnknown_0860D3F1
	.word	0xd24
	.word	0xd25
	.word	0xcb2
.L1705:
	mov	r0, #0x3
.L1717:
	strb	r0, [r4, #0x8]
	mov	r1, r9
	str	r1, [sp, #0x4]
	ldrb	r0, [r6]
	strb	r0, [r4, #0x4]
	ldrb	r0, [r6, #0x1]
	strb	r0, [r4, #0x9]
	add	r0, sp, #0x4
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
.L1704:
	mov	r2, r8
	ldr	r1, [r2]
	add	r0, r1, r5
	ldr	r2, .L1724
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.L1702	@cond_branch
	sub	r2, r2, #0x73
	add	r0, r1, r2
	ldrh	r1, [r0]
	sub	r1, r1, #0x1
	lsl	r0, r7, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	sub_81948EC
.L1702:
	add	r6, r6, #0x2
	add	r5, r5, #0x4
	add	r7, r7, #0x1
	cmp	r7, #0xf
	ble	.L1703	@cond_branch
	b	.L1696
.L1725:
	.align	2, 0
.L1724:
	.word	0xd25
.L1709:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrh	r0, [r1, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0xe]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1696	@cond_branch
	mov	r0, #0x3
	strh	r0, [r1, #0x8]
	b	.L1696
.L1711:
	ldr	r0, .L1726
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1696	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L1726+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x4
	strh	r1, [r0, #0x8]
	b	.L1696
.L1727:
	.align	2, 0
.L1726:
	.word	gMain
	.word	gTasks
.L1713:
	ldr	r0, .L1728
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1696	@cond_branch
	ldr	r0, .L1728+0x4
	bl	SetMainCallback2
	add	r0, r4, #0
	bl	DestroyTask
.L1696:
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1729:
	.align	2, 0
.L1728:
	.word	gPaletteFade
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.Lfe52:
	.size	 sub_8194950,.Lfe52-sub_8194950
	.align	2, 0
	.type	 CB2_BattleDome,function
	.thumb_func
CB2_BattleDome:
	push	{lr}
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	RunTextPrinters
	bl	UpdatePaletteFade
	bl	RunTasks
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 CB2_BattleDome,.Lfe53-CB2_BattleDome
	.align	2, 0
	.type	 VblankCb0_BattleDome,function
	.thumb_func
VblankCb0_BattleDome:
	push	{lr}
	mov	r0, #0x3
	mov	r1, #0x80
	mov	r2, #0x1
	bl	ChangeBgX
	mov	r0, #0x3
	mov	r1, #0x80
	mov	r2, #0x2
	bl	ChangeBgY
	ldr	r0, .L1732
	ldrh	r1, [r0]
	mov	r0, #0x10
	bl	SetGpuReg
	ldr	r0, .L1732+0x4
	ldrh	r1, [r0]
	mov	r0, #0x12
	bl	SetGpuReg
	ldr	r0, .L1732+0x8
	ldrh	r1, [r0]
	mov	r0, #0x14
	bl	SetGpuReg
	ldr	r0, .L1732+0xc
	ldrh	r1, [r0]
	mov	r0, #0x16
	bl	SetGpuReg
	ldr	r0, .L1732+0x10
	ldrh	r1, [r0]
	mov	r0, #0x18
	bl	SetGpuReg
	ldr	r0, .L1732+0x14
	ldrh	r1, [r0]
	mov	r0, #0x1a
	bl	SetGpuReg
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.L1733:
	.align	2, 0
.L1732:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
.Lfe54:
	.size	 VblankCb0_BattleDome,.Lfe54-VblankCb0_BattleDome
	.align	2, 0
	.type	 HblankCb_BattleDome,function
	.thumb_func
HblankCb_BattleDome:
	push	{lr}
	ldr	r0, .L1751
	ldrh	r0, [r0]
	add	r1, r0, #0
	cmp	r0, #0x29
	bls	.L1735	@cond_branch
	cmp	r0, #0x31
	bhi	.L1736	@cond_branch
	ldr	r1, .L1751+0x4
	ldr	r2, .L1751+0x8
	add	r0, r2, #0
	strh	r0, [r1]
	sub	r1, r1, #0x8
	ldr	r0, .L1751+0xc
	b	.L1750
.L1752:
	.align	2, 0
.L1751:
	.word	0x4000006
	.word	0x4000048
	.word	0x3b3b
	.word	-0x6764aaa8
.L1736:
	cmp	r0, #0x39
	bls	.L1735	@cond_branch
	cmp	r0, #0x4a
	bhi	.L1739	@cond_branch
	ldr	r1, .L1753
	ldr	r2, .L1753+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	sub	r1, r1, #0x8
	ldr	r0, .L1753+0x8
	b	.L1750
.L1754:
	.align	2, 0
.L1753:
	.word	0x4000048
	.word	0x3b3b
	.word	-0x6f67a7a0
.L1739:
	cmp	r0, #0x51
	bhi	.L1741	@cond_branch
	ldr	r1, .L1755
	ldr	r2, .L1755+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	sub	r1, r1, #0x8
	ldr	r0, .L1755+0x8
	b	.L1750
.L1756:
	.align	2, 0
.L1755:
	.word	0x4000048
	.word	0x3b3b
	.word	-0x6764aaa8
.L1741:
	cmp	r0, #0x5e
	bls	.L1735	@cond_branch
	cmp	r0, #0x66
	bhi	.L1744	@cond_branch
	ldr	r1, .L1757
	ldr	r2, .L1757+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	sub	r1, r1, #0x8
	ldr	r0, .L1757+0x8
	b	.L1750
.L1758:
	.align	2, 0
.L1757:
	.word	0x4000048
	.word	0x3737
	.word	-0x6764aaa8
.L1744:
	cmp	r0, #0x76
	bhi	.L1746	@cond_branch
	ldr	r1, .L1759
	ldr	r2, .L1759+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	sub	r1, r1, #0x8
	ldr	r0, .L1759+0x8
	b	.L1750
.L1760:
	.align	2, 0
.L1759:
	.word	0x4000048
	.word	0x3737
	.word	-0x6f67a7a0
.L1746:
	cmp	r0, #0x7e
	bls	.L1735	@cond_branch
	cmp	r1, #0x86
	bhi	.L1735	@cond_branch
	ldr	r1, .L1761
	ldr	r2, .L1761+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	sub	r1, r1, #0x8
	ldr	r0, .L1761+0x8
	b	.L1750
.L1762:
	.align	2, 0
.L1761:
	.word	0x4000048
	.word	0x3737
	.word	-0x6764aaa8
.L1735:
	ldr	r1, .L1763
	ldr	r2, .L1763+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	sub	r1, r1, #0x8
	mov	r0, #0x0
.L1750:
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1764:
	.align	2, 0
.L1763:
	.word	0x4000048
	.word	0x3f3f
.Lfe55:
	.size	 HblankCb_BattleDome,.Lfe55-HblankCb_BattleDome
	.align	2, 0
	.type	 VblankCb1_BattleDome,function
	.thumb_func
VblankCb1_BattleDome:
	push	{lr}
	ldr	r0, .L1766
	ldrh	r1, [r0]
	mov	r0, #0x10
	bl	SetGpuReg
	ldr	r0, .L1766+0x4
	ldrh	r1, [r0]
	mov	r0, #0x12
	bl	SetGpuReg
	ldr	r0, .L1766+0x8
	ldrh	r1, [r0]
	mov	r0, #0x14
	bl	SetGpuReg
	ldr	r0, .L1766+0xc
	ldrh	r1, [r0]
	mov	r0, #0x16
	bl	SetGpuReg
	mov	r0, #0x2
	mov	r1, #0x80
	mov	r2, #0x2
	bl	ChangeBgY
	mov	r0, #0x3
	mov	r1, #0x80
	mov	r2, #0x1
	bl	ChangeBgY
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	bl	ScanlineEffect_InitHBlankDmaTransfer
	pop	{r0}
	bx	r0
.L1767:
	.align	2, 0
.L1766:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
.Lfe56:
	.size	 VblankCb1_BattleDome,.Lfe56-VblankCb1_BattleDome
	.align	2, 0
	.type	 InitDomeFacilityTrainersAndMons,function
	.thumb_func
InitDomeFacilityTrainersAndMons:
	ldr	r1, .L1769
	ldr	r0, .L1769+0x4
	str	r0, [r1]
	ldr	r1, .L1769+0x8
	ldr	r0, .L1769+0xc
	str	r0, [r1]
	bx	lr
.L1770:
	.align	2, 0
.L1769:
	.word	gFacilityTrainerMons
	.word	gBattleFrontierMons
	.word	gFacilityTrainers
	.word	gBattleFrontierTrainers
.Lfe57:
	.size	 InitDomeFacilityTrainersAndMons,.Lfe57-InitDomeFacilityTrainersAndMons
	.align	2, 0
	.type	 RestoreDomePlayerParty,function
	.thumb_func
RestoreDomePlayerParty:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	r3, #0x0
.L1775:
	ldr	r0, .L1788
	ldr	r1, [r0]
	ldr	r0, .L1788+0x4
	add	r0, r3, r0
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x1
	ldr	r2, .L1788+0x8
	add	r1, r1, r2
	add	r1, r1, r0
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	mov	sl, r0
	mov	r6, #0x0
	add	r0, r3, #0x1
	str	r0, [sp]
	mov	r1, #0x64
	mov	r0, sl
	mul	r0, r0, r1
	mov	r2, #0x8e
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	mov	r9, r2
	mov	r7, r3
	mul	r7, r7, r1
.L1779:
	mov	r5, #0x0
	add	r0, r6, #0x1
	mov	r8, r0
	b	.L1780
.L1789:
	.align	2, 0
.L1788:
	.word	gSaveBlock2Ptr
	.word	gSelectedOrderFromParty
	.word	0xcaa
.L1783:
	add	r5, r5, #0x1
.L1780:
	cmp	r5, #0x3
	bgt	.L1781	@cond_branch
	ldr	r1, .L1790
	ldr	r0, [r1]
	add	r0, r0, r9
	add	r1, r5, #0
	add	r1, r1, #0xd
	mov	r2, #0x0
	str	r3, [sp, #0x4]
	bl	GetMonData
	add	r4, r0, #0
	add	r1, r6, #0
	add	r1, r1, #0xd
	ldr	r2, .L1790+0x4
	add	r0, r7, r2
	mov	r2, #0x0
	bl	GetMonData
	ldr	r3, [sp, #0x4]
	cmp	r4, r0
	bne	.L1783	@cond_branch
.L1781:
	cmp	r5, #0x4
	bne	.L1778	@cond_branch
	lsl	r2, r6, #0x18
	lsr	r2, r2, #0x18
	ldr	r1, .L1790+0x4
	add	r0, r7, r1
	mov	r1, #0xa6
	str	r3, [sp, #0x4]
	bl	SetMonMoveSlot
	ldr	r3, [sp, #0x4]
.L1778:
	mov	r6, r8
	cmp	r6, #0x3
	ble	.L1779	@cond_branch
	ldr	r2, .L1790
	ldr	r0, [r2]
	mov	r2, #0x64
	mov	r1, sl
	mul	r1, r1, r2
	add	r0, r0, r1
	mov	r1, #0x8e
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, r3
	mul	r1, r1, r2
	ldr	r2, .L1790+0x4
	add	r1, r1, r2
	mov	r2, #0x64
	bl	memcpy
	ldr	r3, [sp]
	cmp	r3, #0x1
	ble	.L1775	@cond_branch
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1791:
	.align	2, 0
.L1790:
	.word	gSaveBlock1Ptr
	.word	gPlayerParty
.Lfe58:
	.size	 RestoreDomePlayerParty,.Lfe58-RestoreDomePlayerParty
	.align	2, 0
	.type	 RestoreDomePlayerPartyHeldItems,function
	.thumb_func
RestoreDomePlayerPartyHeldItems:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	mov	r4, #0x0
	ldr	r7, .L1798
	mov	r6, #0x64
	mov	r5, #0x0
.L1796:
	ldr	r0, .L1798+0x4
	ldr	r1, [r0]
	ldr	r0, .L1798+0x8
	add	r0, r4, r0
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x1
	ldr	r2, .L1798+0xc
	add	r1, r1, r2
	add	r1, r1, r0
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	mov	r1, r0
	mul	r1, r1, r6
	mov	r0, #0x8e
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldr	r0, [r7]
	add	r0, r0, r1
	mov	r1, #0xc
	mov	r2, #0x0
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1]
	ldr	r0, .L1798+0x10
	add	r0, r5, r0
	mov	r1, #0xc
	mov	r2, sp
	bl	SetMonData
	add	r5, r5, #0x64
	add	r4, r4, #0x1
	cmp	r4, #0x1
	ble	.L1796	@cond_branch
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1799:
	.align	2, 0
.L1798:
	.word	gSaveBlock1Ptr
	.word	gSaveBlock2Ptr
	.word	gSelectedOrderFromParty
	.word	0xcaa
	.word	gPlayerParty
.Lfe59:
	.size	 RestoreDomePlayerPartyHeldItems,.Lfe59-RestoreDomePlayerPartyHeldItems
	.align	2, 0
	.type	 ReduceDomePlayerPartyTo3Mons,function
	.thumb_func
ReduceDomePlayerPartyTo3Mons:
	push	{lr}
	bl	ReducePlayerPartyToSelectedMons
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 ReduceDomePlayerPartyTo3Mons,.Lfe60-ReduceDomePlayerPartyTo3Mons
	.align	2, 0
	.type	 GetPlayerSeededBeforeOpponent,function
	.thumb_func
GetPlayerSeededBeforeOpponent:
	push	{r4, lr}
	ldr	r0, .L1805
	ldrh	r0, [r0]
	bl	TrainerIdToTournamentId
	add	r4, r0, #0
	ldr	r0, .L1805+0x4
	bl	TrainerIdToTournamentId
	cmp	r4, r0
	ble	.L1802	@cond_branch
	ldr	r1, .L1805+0x8
	mov	r0, #0x1
	b	.L1804
.L1806:
	.align	2, 0
.L1805:
	.word	gTrainerBattleOpponent_A
	.word	0x3ff
	.word	gSpecialVar_Result
.L1802:
	ldr	r1, .L1807
	mov	r0, #0x2
.L1804:
	strh	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1808:
	.align	2, 0
.L1807:
	.word	gSpecialVar_Result
.Lfe61:
	.size	 GetPlayerSeededBeforeOpponent,.Lfe61-GetPlayerSeededBeforeOpponent
	.align	2, 0
	.type	 BufferLastDomeWinnerName,function
	.thumb_func
BufferLastDomeWinnerName:
	push	{r4, lr}
	bl	InitDomeFacilityTrainersAndMons
	mov	r2, #0x0
	ldr	r3, .L1816
	ldr	r0, [r3]
	ldr	r1, .L1816+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L1811	@cond_branch
	add	r4, r3, #0
	add	r3, r1, #0
.L1812:
	add	r2, r2, #0x1
	cmp	r2, #0xf
	bgt	.L1811	@cond_branch
	ldr	r0, [r4]
	lsl	r1, r2, #0x2
	add	r0, r0, r1
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.L1812	@cond_branch
.L1811:
	ldr	r0, .L1816+0x8
	ldr	r1, .L1816
	ldr	r1, [r1]
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldr	r2, .L1816+0xc
	add	r1, r1, r2
	ldrh	r1, [r1]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	bl	CopyDomeTrainerName
	pop	{r4}
	pop	{r0}
	bx	r0
.L1817:
	.align	2, 0
.L1816:
	.word	gSaveBlock2Ptr
	.word	0xd25
	.word	gStringVar1
	.word	0xd24
.Lfe62:
	.size	 BufferLastDomeWinnerName,.Lfe62-BufferLastDomeWinnerName
	.align	2, 0
	.type	 sub_8194F58,function
	.thumb_func
sub_8194F58:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x40
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r0, [sp, #0x10]
	ldr	r4, .L1892
	ldr	r2, [r4]
	ldr	r5, .L1892+0x4
	add	r0, r2, r5
	ldrb	r1, [r0]
	ldr	r6, .L1892+0x8
	add	r0, r2, r6
	ldrb	r0, [r0]
	cmn	r1, r0
	beq	.L1819	@cond_branch
	ldr	r1, .L1892+0xc
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.LCB16730
	b	.L1818	@long jump
.LCB16730:
.L1819:
	mov	r0, #0x20
	bl	AllocZeroed
	str	r0, [sp, #0x18]
	mov	r0, #0x18
	bl	AllocZeroed
	str	r0, [sp, #0x1c]
	ldr	r1, [r4]
	ldr	r2, .L1892+0x10
	add	r1, r1, r2
	ldrb	r2, [r1]
	lsl	r0, r2, #0x1e
	lsr	r0, r0, #0x1e
	str	r0, [sp, #0x14]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r4]
	mov	r1, #0x1
	add	r0, r0, r5
	strb	r1, [r0]
	ldr	r0, [r4]
	add	r0, r0, r6
	strb	r1, [r0]
	mov	r3, #0x0
	mov	sl, r3
	mov	r4, #0x0
	str	r4, [sp, #0x38]
	mov	r5, #0x0
	str	r5, [sp, #0x3c]
.L1824:
	mov	r0, sl
	cmp	r0, #0x4
	bgt	.L1827	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	b	.L1828
.L1893:
	.align	2, 0
.L1892:
	.word	gSaveBlock2Ptr
	.word	0xd0a
	.word	0xd0b
	.word	0xca8
	.word	0xca9
.L1827:
	mov	r1, sl
	cmp	r1, #0xe
	bgt	.L1829	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x14
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r4, r0, #0
	add	r4, r4, #0xa
	b	.L1828
.L1829:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r4, r0, #0
	add	r4, r4, #0x1e
.L1828:
	mov	r6, #0x0
	cmp	r6, sl
	bge	.L1826	@cond_branch
	ldr	r2, .L1894
	ldr	r0, [r2]
	ldr	r3, .L1894+0x4
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	cmp	r0, r4
	beq	.L1826	@cond_branch
	add	r3, r2, #0
	ldr	r2, .L1894+0x4
.L1833:
	add	r6, r6, #0x1
	cmp	r6, sl
	bge	.L1826	@cond_branch
	ldr	r0, [r3]
	lsl	r1, r6, #0x2
	add	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	cmp	r0, r4
	bne	.L1833	@cond_branch
.L1826:
	cmp	r6, sl
	bne	.L1824	@cond_branch
	ldr	r5, .L1894
	ldr	r3, [r5]
	ldr	r0, [sp, #0x38]
	add	r3, r3, r0
	ldr	r1, .L1894+0x4
	add	r3, r3, r1
	ldr	r2, .L1894+0x8
	add	r0, r2, #0
	add	r2, r4, #0
	and	r2, r2, r0
	ldrh	r0, [r3]
	ldr	r5, .L1894+0xc
	add	r1, r5, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strh	r0, [r3]
	mov	r6, #0x0
	lsl	r4, r4, #0x10
	str	r4, [sp, #0x30]
	ldr	r0, [sp, #0x3c]
	str	r0, [sp, #0x20]
.L1842:
	add	r1, r6, #0x1
	str	r1, [sp, #0x24]
	lsl	r2, r6, #0x2
	str	r2, [sp, #0x2c]
	lsl	r3, r6, #0x1
	str	r3, [sp, #0x28]
.L1843:
	ldr	r4, [sp, #0x30]
	lsr	r0, r4, #0x10
	bl	RandomizeFacilityTrainerMonSet
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r7, #0x0
	cmp	r7, r6
	bge	.L1845	@cond_branch
	ldr	r0, .L1894
	ldr	r0, [r0]
	ldr	r1, .L1894+0x10
	mov	r9, r1
	ldr	r2, [sp, #0x8]
	mov	r8, r2
	ldr	r3, [sp, #0xc]
	mov	ip, r3
	ldr	r4, .L1894+0x14
	add	r0, r0, r4
	ldr	r1, [sp, #0x20]
	add	r4, r1, r0
.L1849:
	ldrh	r3, [r4]
	cmp	r3, r5
	beq	.L1845	@cond_branch
	mov	r2, r9
	ldr	r1, [r2]
	lsl	r0, r5, #0x4
	add	r2, r0, r1
	ldrh	r0, [r2]
	cmp	r8, r0
	beq	.L1845	@cond_branch
	cmp	ip, r0
	beq	.L1845	@cond_branch
	lsl	r0, r3, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0xa]
	ldrb	r2, [r2, #0xa]
	cmp	r0, r2
	beq	.L1845	@cond_branch
	add	r4, r4, #0x2
	add	r7, r7, #0x1
	cmp	r7, r6
	blt	.L1849	@cond_branch
.L1845:
	cmp	r7, r6
	bne	.L1843	@cond_branch
	ldr	r3, .L1894
	ldr	r0, [r3]
	ldr	r4, [sp, #0x28]
	ldr	r2, [sp, #0x3c]
	add	r1, r4, r2
	ldr	r3, .L1894+0x14
	add	r0, r0, r3
	add	r0, r0, r1
	strh	r5, [r0]
	ldr	r2, [sp, #0x2c]
	add	r2, r2, sp
	add	r2, r2, #0x8
	ldr	r3, .L1894+0x10
	ldr	r1, [r3]
	lsl	r0, r5, #0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	str	r0, [r2]
	ldr	r6, [sp, #0x24]
	cmp	r6, #0x2
	ble	.L1842	@cond_branch
	ldr	r4, .L1894
	ldr	r2, [r4]
	ldr	r5, [sp, #0x38]
	add	r2, r2, r5
	ldr	r0, .L1894+0x18
	add	r2, r2, r0
	ldrb	r0, [r2]
	mov	r4, #0x5
	neg	r4, r4
	add	r1, r4, #0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r5, .L1894
	ldr	r2, [r5]
	ldr	r0, [sp, #0x38]
	add	r2, r2, r0
	ldr	r1, .L1894+0x18
	add	r2, r2, r1
	ldrb	r0, [r2]
	sub	r4, r4, #0x14
	add	r1, r4, #0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, [r5]
	ldr	r5, [sp, #0x38]
	add	r1, r1, r5
	ldr	r0, .L1894+0x18
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x1f
	and	r0, r0, r2
	strb	r0, [r1]
	add	r5, r5, #0x4
	str	r5, [sp, #0x38]
	ldr	r1, [sp, #0x3c]
	add	r1, r1, #0x6
	str	r1, [sp, #0x3c]
	mov	r2, #0x1
	add	sl, sl, r2
	mov	r4, sl
	cmp	r4, #0xf
	bgt	.LCB17059
	b	.L1824	@long jump
.LCB17059:
	mov	r5, #0x0
	mov	sl, r5
	ldr	r5, [sp, #0x18]
	mov	r0, #0x0
	str	r0, [sp, #0x34]
.L1860:
	mov	r7, #0x0
	strh	r7, [r5]
	ldr	r1, .L1894
	ldr	r0, [r1]
	mov	r2, sl
	lsl	r1, r2, #0x2
	add	r0, r0, r1
	ldr	r3, .L1894+0x4
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	bl	GetDomeTrainerMonIvs
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r6, #0x0
	ldr	r4, [sp, #0x34]
	mov	r9, r4
.L1864:
	ldr	r1, .L1894
	ldr	r0, [r1]
	mov	r4, r9
	add	r4, r4, sl
	add	r4, r4, r6
	lsl	r4, r4, #0x1
	ldr	r2, .L1894+0x14
	add	r0, r0, r2
	add	r0, r0, r4
	ldrh	r1, [r0]
	ldr	r3, .L1894+0x10
	ldr	r0, [r3]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldrb	r3, [r1, #0xb]
	ldrb	r1, [r1, #0xc]
	str	r1, [sp]
	ldr	r1, [sp, #0x1c]
	str	r1, [sp, #0x4]
	mov	r1, #0x32
	mov	r2, r8
	bl	CalcDomeMonStats
	ldr	r2, [sp, #0x1c]
	ldr	r1, [r2, #0x4]
	ldrh	r0, [r5]
	add	r0, r0, r1
	ldr	r1, [r2, #0x8]
	add	r0, r0, r1
	ldr	r1, [r2, #0x10]
	add	r0, r0, r1
	ldr	r1, [r2, #0x14]
	add	r0, r0, r1
	ldr	r1, [r2, #0xc]
	add	r0, r0, r1
	ldr	r1, [r2]
	add	r0, r0, r1
	strh	r0, [r5]
	ldr	r3, .L1894
	ldr	r0, [r3]
	ldr	r1, .L1894+0x14
	add	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0]
	ldr	r2, .L1894+0x10
	ldr	r1, [r2]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r3, .L1894+0x1c
	add	r1, r1, r3
	ldrb	r0, [r1, #0x6]
	lsl	r0, r0, #0x2
	ldr	r4, .L1894+0x20
	add	r0, r0, r4
	ldr	r0, [r0]
	orr	r7, r7, r0
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	orr	r7, r7, r0
	add	r6, r6, #0x1
	cmp	r6, #0x2
	ble	.L1864	@cond_branch
	mov	r4, #0x0
	mov	r1, #0x1
	mov	r6, #0x1f
.L1869:
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1870	@cond_branch
	add	r4, r4, #0x1
.L1870:
	asr	r7, r7, #0x1
	sub	r6, r6, #0x1
	cmp	r6, #0
	bge	.L1869	@cond_branch
	mov	r1, #0x32
	mov	r0, r4
	mul	r0, r0, r1
	mov	r1, #0x14
	bl	__divsi3
	ldrh	r1, [r5]
	add	r1, r1, r0
	strh	r1, [r5]
	add	r5, r5, #0x2
	ldr	r2, [sp, #0x34]
	add	r2, r2, #0x2
	str	r2, [sp, #0x34]
	mov	r3, #0x1
	add	sl, sl, r3
	mov	r4, sl
	cmp	r4, #0xf
	ble	.L1860	@cond_branch
	mov	r5, #0x0
	mov	sl, r5
	ldr	r7, [sp, #0x18]
.L1876:
	mov	r6, sl
	add	r6, r6, #0x1
	cmp	r6, #0xf
	bgt	.L1875	@cond_branch
	mov	r8, r7
	ldr	r5, .L1894+0x4
	lsl	r0, r6, #0x1
	ldr	r1, [sp, #0x18]
	add	r4, r0, r1
.L1880:
	mov	r2, r8
	ldrh	r1, [r2]
	ldrh	r0, [r4]
	cmp	r1, r0
	bcs	.L1881	@cond_branch
	mov	r0, sl
	add	r1, r6, #0
	ldr	r2, [sp, #0x18]
	bl	SwapDomeTrainers
	b	.L1879
.L1895:
	.align	2, 0
.L1894:
	.word	gSaveBlock2Ptr
	.word	0xd24
	.word	0x3ff
	.word	-0x400
	.word	gFacilityTrainerMons
	.word	0xd64
	.word	0xd25
	.word	gBaseStats
	.word	gBitTable
.L1881:
	cmp	r1, r0
	bne	.L1879	@cond_branch
	ldr	r0, .L1896
	ldr	r1, [r0]
	mov	r3, sl
	lsl	r0, r3, #0x2
	add	r0, r1, r0
	add	r0, r0, r5
	ldrh	r2, [r0]
	lsl	r2, r2, #0x16
	lsl	r0, r6, #0x2
	add	r1, r1, r0
	add	r1, r1, r5
	ldrh	r0, [r1]
	lsl	r0, r0, #0x16
	cmp	r2, r0
	bls	.L1879	@cond_branch
	mov	r0, sl
	add	r1, r6, #0
	ldr	r2, [sp, #0x18]
	bl	SwapDomeTrainers
.L1879:
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0xf
	ble	.L1880	@cond_branch
.L1875:
	add	r7, r7, #0x2
	mov	r4, #0x1
	add	sl, sl, r4
	mov	r5, sl
	cmp	r5, #0xe
	ble	.L1876	@cond_branch
	ldr	r0, [sp, #0x18]
	bl	Free
	ldr	r0, [sp, #0x1c]
	bl	Free
	mov	r0, #0x0
	mov	sl, r0
.L1890:
	mov	r1, sl
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	bl	DecideRoundWinners
	mov	r2, #0x1
	add	sl, sl, r2
	mov	r3, sl
	cmp	r3, #0x3
	ble	.L1890	@cond_branch
	ldr	r0, .L1896
	ldr	r1, [r0]
	ldr	r4, .L1896+0x4
	add	r1, r1, r4
	ldrb	r2, [r1]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r2
	ldr	r5, [sp, #0x14]
	orr	r0, r0, r5
	strb	r0, [r1]
.L1818:
	add	sp, sp, #0x40
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1897:
	.align	2, 0
.L1896:
	.word	gSaveBlock2Ptr
	.word	0xca9
.Lfe63:
	.size	 sub_8194F58,.Lfe63-sub_8194F58
	.align	2, 0
	.type	 TrainerIdToTournamentId,function
	.thumb_func
TrainerIdToTournamentId:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	mov	r2, #0x0
	ldr	r4, .L1905
	ldr	r0, [r4]
	ldr	r1, .L1905+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	cmp	r0, r3
	beq	.L1900	@cond_branch
	add	r5, r4, #0
	add	r4, r1, #0
.L1901:
	add	r2, r2, #0x1
	cmp	r2, #0xf
	bgt	.L1900	@cond_branch
	ldr	r0, [r5]
	lsl	r1, r2, #0x2
	add	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	cmp	r0, r3
	bne	.L1901	@cond_branch
.L1900:
	add	r0, r2, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L1906:
	.align	2, 0
.L1905:
	.word	gSaveBlock2Ptr
	.word	0xd24
.Lfe64:
	.size	 TrainerIdToTournamentId,.Lfe64-TrainerIdToTournamentId
	.align	2, 0
	.globl	TrainerIdToDomeTournamentId
	.type	 TrainerIdToDomeTournamentId,function
	.thumb_func
TrainerIdToDomeTournamentId:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	mov	r2, #0x0
	ldr	r4, .L1914
	ldr	r0, [r4]
	ldr	r1, .L1914+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	cmp	r0, r3
	beq	.L1909	@cond_branch
	add	r5, r4, #0
	add	r4, r1, #0
.L1910:
	add	r2, r2, #0x1
	cmp	r2, #0xf
	bgt	.L1909	@cond_branch
	ldr	r0, [r5]
	lsl	r1, r2, #0x2
	add	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	cmp	r0, r3
	bne	.L1910	@cond_branch
.L1909:
	add	r0, r2, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L1915:
	.align	2, 0
.L1914:
	.word	gSaveBlock2Ptr
	.word	0xd24
.Lfe65:
	.size	 TrainerIdToDomeTournamentId,.Lfe65-TrainerIdToDomeTournamentId
	.align	2, 0
	.type	 sub_81953E8,function
	.thumb_func
sub_81953E8:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L1921
	ldr	r0, .L1921+0x4
	add	r0, r4, r0
	ldrb	r0, [r0]
	lsr	r0, r0, #0x1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	add	r1, r1, r2
	ldrb	r0, [r1]
	sub	r0, r0, #0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, sp
	bl	sub_8192F08
	mov	r0, sp
	ldrb	r0, [r0]
	cmp	r4, r0
	beq	.L1917	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0]
	b	.L1920
.L1922:
	.align	2, 0
.L1921:
	.word	gUnknown_0860D1A0
	.word	gUnknown_0860D1C0
.L1917:
	mov	r0, sp
	ldrb	r0, [r0, #0x1]
.L1920:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe66:
	.size	 sub_81953E8,.Lfe66-sub_81953E8
	.align	2, 0
	.type	 DecideRoundWinners,function
	.thumb_func
DecideRoundWinners:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x40
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0xc]
	mov	r1, #0x0
	str	r1, [sp, #0x10]
	mov	r5, #0x0
	mov	r1, #0x3
	ldr	r0, [sp]
	and	r0, r0, r1
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x14]
.L1927:
	ldr	r2, .L1974
	ldr	r0, [r2]
	lsl	r4, r5, #0x2
	add	r1, r0, r4
	ldr	r3, .L1974+0x4
	add	r0, r1, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	add	r2, r5, #0x1
	str	r2, [sp, #0x24]
	cmp	r0, #0
	bge	.LCB17620
	b	.L1926	@long jump
.LCB17620:
	sub	r3, r3, #0x1
	add	r0, r1, r3
	ldrh	r0, [r0]
	lsl	r1, r0, #0x16
	ldr	r0, .L1974+0x8
	cmp	r1, r0
	bne	.LCB17634
	b	.L1926	@long jump
.LCB17634:
	str	r5, [sp, #0x4]
	lsr	r1, r1, #0x16
	ldr	r0, [sp]
	bl	TournamentIdOfOpponent
	str	r0, [sp, #0x8]
	ldr	r0, .L1974
	ldr	r3, [r0]
	add	r0, r3, r4
	ldr	r1, .L1974+0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	ldr	r1, .L1974+0x10
	cmp	r0, r1
	bne	.L1930	@cond_branch
	ldr	r2, [sp, #0x8]
	cmp	r2, #0xff
	beq	.L1930	@cond_branch
	lsl	r2, r2, #0x2
	add	r1, r3, r2
	ldr	r3, .L1974+0x4
	add	r1, r1, r3
	ldrb	r0, [r1]
	mov	r3, #0x4
	orr	r0, r0, r3
	strb	r0, [r1]
	ldr	r0, .L1974
	ldr	r1, [r0]
	add	r1, r1, r2
	ldr	r2, .L1974+0x4
	add	r1, r1, r2
	ldrb	r0, [r1]
	sub	r3, r3, #0x1d
	and	r0, r0, r3
	ldr	r2, [sp, #0x14]
	orr	r0, r0, r2
	strb	r0, [r1]
	add	r0, r5, #0
	ldr	r1, [sp, #0x8]
	ldr	r2, [sp]
	bl	GetWinningMove
	ldr	r3, .L1974
	ldr	r1, [r3]
	ldr	r5, [sp, #0x8]
	lsl	r2, r5, #0x1
	mov	r3, #0xec
	lsl	r3, r3, #0x4
	add	r1, r1, r3
	add	r1, r1, r2
	b	.L1972
.L1975:
	.align	2, 0
.L1974:
	.word	gSaveBlock2Ptr
	.word	0xd25
	.word	-0x400000
	.word	0xd24
	.word	-0x800000
.L1930:
	ldr	r4, .L1976
	ldr	r3, [r4]
	ldr	r0, [sp, #0x8]
	lsl	r2, r0, #0x2
	add	r0, r3, r2
	ldr	r1, .L1976+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	ldr	r1, .L1976+0x8
	str	r2, [sp, #0x30]
	cmp	r0, r1
	bne	.L1932	@cond_branch
	ldr	r2, [sp, #0x4]
	cmp	r2, #0xff
	beq	.L1932	@cond_branch
	lsl	r2, r2, #0x2
	add	r1, r3, r2
	ldr	r3, .L1976+0xc
	add	r1, r1, r3
	ldrb	r0, [r1]
	mov	r3, #0x4
	orr	r0, r0, r3
	strb	r0, [r1]
	ldr	r1, [r4]
	add	r1, r1, r2
	ldr	r0, .L1976+0xc
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x19
	neg	r2, r2
	and	r0, r0, r2
	ldr	r3, [sp, #0x14]
	orr	r0, r0, r3
	strb	r0, [r1]
	ldr	r0, [sp, #0x8]
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp]
	bl	GetWinningMove
	ldr	r1, [r4]
	ldr	r3, [sp, #0x4]
	lsl	r2, r3, #0x1
	mov	r3, #0xec
	lsl	r3, r3, #0x4
	add	r1, r1, r3
	add	r1, r1, r2
	strh	r0, [r1]
	add	r5, r5, #0x1
	str	r5, [sp, #0x24]
	b	.L1926
.L1977:
	.align	2, 0
.L1976:
	.word	gSaveBlock2Ptr
	.word	0xd24
	.word	-0x800000
	.word	0xd25
.L1932:
	add	r5, r5, #0x1
	str	r5, [sp, #0x24]
	ldr	r5, [sp, #0x8]
	cmp	r5, #0xff
	bne	.LCB17785
	b	.L1926	@long jump
.LCB17785:
	mov	r0, #0x0
	mov	sl, r0
	lsl	r1, r5, #0x1
	str	r1, [sp, #0x2c]
	ldr	r2, [sp, #0x4]
	lsl	r2, r2, #0x1
	str	r2, [sp, #0x28]
	ldr	r3, [sp, #0x4]
	add	r0, r2, r3
	lsl	r0, r0, #0x1
	mov	r9, r0
	add	r0, r1, r5
	lsl	r0, r0, #0x1
	str	r0, [sp, #0x18]
.L1938:
	mov	r5, #0x0
	mov	r0, r9
	str	r0, [sp, #0x38]
.L1942:
	mov	r6, #0x0
	lsl	r7, r5, #0x1
	ldr	r4, [sp, #0x18]
.L1946:
	ldr	r2, .L1978
	ldr	r1, [r2]
	ldr	r3, .L1978+0x4
	add	r1, r1, r3
	ldr	r2, [sp, #0x38]
	add	r0, r1, r2
	ldrh	r0, [r0]
	ldr	r3, .L1978+0x8
	mov	r8, r3
	ldr	r2, [r3]
	lsl	r0, r0, #0x4
	add	r0, r0, r2
	add	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	add	r1, r1, r4
	ldrh	r1, [r1]
	lsl	r1, r1, #0x4
	add	r1, r1, r2
	ldrh	r1, [r1]
	mov	r2, #0x2
	bl	GetTypeEffectivenessPoints
	ldr	r1, [sp, #0xc]
	add	r1, r1, r0
	str	r1, [sp, #0xc]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x2
	ble	.L1946	@cond_branch
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1942	@cond_branch
	ldr	r2, .L1978
	ldr	r0, [r2]
	ldr	r3, .L1978+0x4
	add	r0, r0, r3
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r5, r8
	ldr	r1, [r5]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrh	r2, [r0]
	ldr	r0, .L1978+0xc
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	ldrb	r2, [r1, #0x1]
	add	r0, r0, r2
	ldrb	r2, [r1, #0x2]
	add	r0, r0, r2
	ldrb	r2, [r1, #0x3]
	add	r0, r0, r2
	ldrb	r3, [r1, #0x4]
	add	r0, r0, r3
	ldrb	r1, [r1, #0x5]
	add	r0, r0, r1
	mov	r1, #0xa
	bl	__divsi3
	ldr	r5, [sp, #0xc]
	add	r5, r5, r0
	str	r5, [sp, #0xc]
	mov	r0, #0x2
	add	r9, r9, r0
	mov	r1, #0x1
	add	sl, sl, r1
	mov	r2, sl
	cmp	r2, #0x2
	ble	.L1938	@cond_branch
	bl	Random
	mov	r1, #0x1f
	and	r1, r1, r0
	add	r5, r5, r1
	ldr	r3, [sp, #0x4]
	add	r5, r5, r3
	str	r5, [sp, #0xc]
	mov	r5, #0x0
	mov	sl, r5
	ldr	r1, [sp, #0x2c]
	ldr	r2, [sp, #0x8]
	add	r0, r1, r2
	lsl	r0, r0, #0x1
	str	r0, [sp, #0x1c]
	ldr	r5, [sp, #0x28]
	add	r0, r5, r3
	lsl	r0, r0, #0x1
	str	r0, [sp, #0x20]
.L1953:
	mov	r5, #0x0
	mov	r0, sl
	lsl	r3, r0, #0x1
	mov	r1, #0x1
	add	sl, sl, r1
	ldr	r2, [sp, #0x1c]
	add	r2, r2, r3
	mov	r8, r2
.L1957:
	mov	r6, #0x0
	lsl	r7, r5, #0x1
	add	r5, r5, #0x1
	str	r5, [sp, #0x3c]
	ldr	r4, [sp, #0x20]
.L1961:
	ldr	r5, .L1978
	ldr	r1, [r5]
	ldr	r0, .L1978+0x4
	add	r1, r1, r0
	mov	r2, r8
	add	r0, r1, r2
	ldrh	r0, [r0]
	ldr	r5, .L1978+0x8
	mov	r9, r5
	ldr	r2, [r5]
	lsl	r0, r0, #0x4
	add	r0, r0, r2
	add	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	add	r1, r1, r4
	ldrh	r1, [r1]
	lsl	r1, r1, #0x4
	add	r1, r1, r2
	ldrh	r1, [r1]
	mov	r2, #0x2
	str	r3, [sp, #0x34]
	bl	GetTypeEffectivenessPoints
	ldr	r1, [sp, #0x10]
	add	r1, r1, r0
	str	r1, [sp, #0x10]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	ldr	r3, [sp, #0x34]
	cmp	r6, #0x2
	ble	.L1961	@cond_branch
	ldr	r5, [sp, #0x3c]
	cmp	r5, #0x3
	ble	.L1957	@cond_branch
	ldr	r2, .L1978
	ldr	r0, [r2]
	ldr	r5, [sp, #0x1c]
	add	r1, r3, r5
	ldr	r2, .L1978+0x4
	add	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r3, r9
	ldr	r1, [r3]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrh	r2, [r0]
	ldr	r0, .L1978+0xc
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	ldrb	r2, [r1, #0x1]
	add	r0, r0, r2
	ldrb	r5, [r1, #0x2]
	add	r0, r0, r5
	ldrb	r2, [r1, #0x3]
	add	r0, r0, r2
	ldrb	r2, [r1, #0x4]
	add	r0, r0, r2
	ldrb	r1, [r1, #0x5]
	add	r0, r0, r1
	mov	r1, #0xa
	bl	__divsi3
	ldr	r3, [sp, #0x10]
	add	r3, r3, r0
	str	r3, [sp, #0x10]
	mov	r5, sl
	cmp	r5, #0x2
	ble	.L1953	@cond_branch
	bl	Random
	mov	r1, #0x1f
	and	r1, r1, r0
	ldr	r0, [sp, #0x10]
	add	r0, r0, r1
	ldr	r1, [sp, #0x8]
	add	r0, r0, r1
	str	r0, [sp, #0x10]
	ldr	r2, [sp, #0xc]
	cmp	r2, r0
	ble	.L1965	@cond_branch
	ldr	r3, .L1978
	ldr	r1, [r3]
	ldr	r5, [sp, #0x30]
	add	r1, r1, r5
	ldr	r0, .L1978+0x10
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, [r3]
	add	r1, r1, r5
	ldr	r3, .L1978+0x10
	add	r1, r1, r3
	ldrb	r0, [r1]
	mov	r5, #0x19
	neg	r5, r5
	and	r0, r0, r5
	ldr	r2, [sp, #0x14]
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [sp, #0x4]
	ldr	r1, [sp, #0x8]
	ldr	r2, [sp]
	bl	GetWinningMove
	ldr	r3, .L1978
	ldr	r1, [r3]
	mov	r5, #0xec
	lsl	r5, r5, #0x4
	add	r1, r1, r5
	ldr	r2, [sp, #0x2c]
	add	r1, r1, r2
	b	.L1972
.L1979:
	.align	2, 0
.L1978:
	.word	gSaveBlock2Ptr
	.word	0xd64
	.word	gFacilityTrainerMons
	.word	gBaseStats
	.word	0xd25
.L1965:
	ldr	r3, [sp, #0xc]
	ldr	r5, [sp, #0x10]
	cmp	r3, r5
	bge	.L1967	@cond_branch
	ldr	r0, .L1980
	ldr	r1, [r0]
	ldr	r3, [sp, #0x4]
	lsl	r2, r3, #0x2
	add	r1, r1, r2
	ldr	r5, .L1980+0x4
	add	r1, r1, r5
	ldrb	r0, [r1]
	mov	r3, #0x4
	orr	r0, r0, r3
	strb	r0, [r1]
	ldr	r5, .L1980
	ldr	r1, [r5]
	add	r1, r1, r2
	ldr	r0, .L1980+0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x19
	neg	r2, r2
	and	r0, r0, r2
	ldr	r3, [sp, #0x14]
	orr	r0, r0, r3
	strb	r0, [r1]
	ldr	r0, [sp, #0x8]
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp]
	bl	GetWinningMove
	ldr	r1, [r5]
	mov	r5, #0xec
	lsl	r5, r5, #0x4
	add	r1, r1, r5
	ldr	r2, [sp, #0x28]
	add	r1, r1, r2
	b	.L1972
.L1981:
	.align	2, 0
.L1980:
	.word	gSaveBlock2Ptr
	.word	0xd25
.L1967:
	ldr	r3, [sp, #0x4]
	ldr	r5, [sp, #0x8]
	cmp	r3, r5
	ble	.L1969	@cond_branch
	ldr	r0, .L1982
	ldr	r1, [r0]
	ldr	r2, [sp, #0x30]
	add	r1, r1, r2
	ldr	r3, .L1982+0x4
	add	r1, r1, r3
	ldrb	r0, [r1]
	mov	r5, #0x4
	orr	r0, r0, r5
	strb	r0, [r1]
	ldr	r0, .L1982
	ldr	r1, [r0]
	add	r1, r1, r2
	add	r1, r1, r3
	ldrb	r0, [r1]
	mov	r2, #0x19
	neg	r2, r2
	and	r0, r0, r2
	ldr	r3, [sp, #0x14]
	orr	r0, r0, r3
	strb	r0, [r1]
	ldr	r0, [sp, #0x4]
	ldr	r1, [sp, #0x8]
	ldr	r2, [sp]
	bl	GetWinningMove
	ldr	r5, .L1982
	ldr	r1, [r5]
	mov	r2, #0xec
	lsl	r2, r2, #0x4
	add	r1, r1, r2
	ldr	r3, [sp, #0x2c]
	b	.L1973
.L1983:
	.align	2, 0
.L1982:
	.word	gSaveBlock2Ptr
	.word	0xd25
.L1969:
	ldr	r5, .L1984
	ldr	r1, [r5]
	ldr	r0, [sp, #0x4]
	lsl	r2, r0, #0x2
	add	r1, r1, r2
	ldr	r3, .L1984+0x4
	add	r1, r1, r3
	ldrb	r0, [r1]
	mov	r5, #0x4
	orr	r0, r0, r5
	strb	r0, [r1]
	ldr	r0, .L1984
	ldr	r1, [r0]
	add	r1, r1, r2
	add	r1, r1, r3
	ldrb	r0, [r1]
	mov	r2, #0x19
	neg	r2, r2
	and	r0, r0, r2
	ldr	r3, [sp, #0x14]
	orr	r0, r0, r3
	strb	r0, [r1]
	ldr	r0, [sp, #0x8]
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp]
	bl	GetWinningMove
	ldr	r5, .L1984
	ldr	r1, [r5]
	mov	r2, #0xec
	lsl	r2, r2, #0x4
	add	r1, r1, r2
	ldr	r3, [sp, #0x28]
.L1973:
	add	r1, r1, r3
.L1972:
	strh	r0, [r1]
.L1926:
	ldr	r5, [sp, #0x24]
	cmp	r5, #0xf
	bgt	.LCB18288
	b	.L1927	@long jump
.LCB18288:
	add	sp, sp, #0x40
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1985:
	.align	2, 0
.L1984:
	.word	gSaveBlock2Ptr
	.word	0xd25
.Lfe67:
	.size	 DecideRoundWinners,.Lfe67-DecideRoundWinners
	.align	2, 0
	.type	 CopyDomeTrainerName,function
	.thumb_func
CopyDomeTrainerName:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	mov	r4, #0x0
	bl	SetFacilityPtrsGetLevel
	ldr	r0, .L2002
	cmp	r5, r0
	bne	.L1987	@cond_branch
	add	r0, r6, #0
	bl	CopyDomeBrainTrainerName
	b	.L1988
.L2003:
	.align	2, 0
.L2002:
	.word	0x3fe
.L1987:
	ldr	r0, .L2004
	cmp	r5, r0
	bne	.L1989	@cond_branch
	ldr	r0, .L2004+0x4
	ldr	r2, [r0]
.L1993:
	add	r0, r6, r4
	add	r1, r2, r4
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x6
	ble	.L1993	@cond_branch
	b	.L1995
.L2005:
	.align	2, 0
.L2004:
	.word	0x3ff
	.word	gSaveBlock2Ptr
.L1989:
	ldr	r0, .L2006
	cmp	r5, r0
	bhi	.L1995	@cond_branch
	ldr	r0, .L2006+0x4
	ldr	r1, [r0]
	mov	r0, #0x34
	mul	r0, r0, r5
	add	r0, r0, r1
	add	r2, r0, #0x4
.L2000:
	add	r0, r6, r4
	add	r1, r2, r4
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x6
	ble	.L2000	@cond_branch
.L1995:
	add	r1, r6, r4
	mov	r0, #0xff
	strb	r0, [r1]
.L1988:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2007:
	.align	2, 0
.L2006:
	.word	0x12b
	.word	gFacilityTrainers
.Lfe68:
	.size	 CopyDomeTrainerName,.Lfe68-CopyDomeTrainerName
	.align	2, 0
	.type	 GetDomeBrainTrainerPicId,function
	.thumb_func
GetDomeBrainTrainerPicId:
	ldr	r0, .L2009
	ldr	r1, .L2009+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	bx	lr
.L2010:
	.align	2, 0
.L2009:
	.word	gTrainers
	.word	0x7df3
.Lfe69:
	.size	 GetDomeBrainTrainerPicId,.Lfe69-GetDomeBrainTrainerPicId
	.align	2, 0
	.type	 GetDomeBrainTrainerClass,function
	.thumb_func
GetDomeBrainTrainerClass:
	ldr	r0, .L2012
	ldr	r1, .L2012+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	bx	lr
.L2013:
	.align	2, 0
.L2012:
	.word	gTrainers
	.word	0x7df1
.Lfe70:
	.size	 GetDomeBrainTrainerClass,.Lfe70-GetDomeBrainTrainerClass
	.align	2, 0
	.type	 CopyDomeBrainTrainerName,function
	.thumb_func
CopyDomeBrainTrainerName:
	push	{r4, lr}
	add	r3, r0, #0
	mov	r2, #0x0
	ldr	r4, .L2020
.L2018:
	add	r0, r3, r2
	add	r1, r2, r4
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x6
	ble	.L2018	@cond_branch
	add	r1, r3, r2
	mov	r0, #0xff
	strb	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2021:
	.align	2, 0
.L2020:
	.word	gTrainers+0x7df4
.Lfe71:
	.size	 CopyDomeBrainTrainerName,.Lfe71-CopyDomeBrainTrainerName
.text
	.align	2, 0

