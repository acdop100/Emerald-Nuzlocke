@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gUnknown_0203A0F8
	.section ewram_data,"aw"
	.align	1, 0
	.type	 gUnknown_0203A0F8,object
	.size	 gUnknown_0203A0F8,8
gUnknown_0203A0F8:
	.short	0x0
	.space	6
	.globl	gUnknown_085920F0
	.section .rodata
	.align	2, 0
	.type	 gUnknown_085920F0,object
gUnknown_085920F0:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x2
	.byte	0x5
	.space	1
	.short	0x4
	.byte	0x5
	.space	1
	.short	0x6
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	0xa
	.byte	0x5
	.space	1
	.short	0xc
	.byte	0x5
	.space	1
	.short	0xe
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_085920F0,36
	.globl	gUnknown_08592114
	.align	2, 0
	.type	 gUnknown_08592114,object
gUnknown_08592114:
	.word	gUnknown_085920F0
	.size	 gUnknown_08592114,4
	.globl	gSleepPowderParticleSpriteTemplate
	.align	2, 0
	.type	 gSleepPowderParticleSpriteTemplate,object
	.size	 gSleepPowderParticleSpriteTemplate,24
gSleepPowderParticleSpriteTemplate:
	.short	0x2753
	.short	0x2753
	.word	gUnknown_08524944
	.word	gUnknown_08592114
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMovePowderParticle
	.globl	gStunSporeParticleSpriteTemplate
	.align	2, 0
	.type	 gStunSporeParticleSpriteTemplate,object
	.size	 gStunSporeParticleSpriteTemplate,24
gStunSporeParticleSpriteTemplate:
	.short	0x2754
	.short	0x2754
	.word	gUnknown_08524944
	.word	gUnknown_08592114
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMovePowderParticle
	.globl	gPoisonPowderParticleSpriteTemplate
	.align	2, 0
	.type	 gPoisonPowderParticleSpriteTemplate,object
	.size	 gPoisonPowderParticleSpriteTemplate,24
gPoisonPowderParticleSpriteTemplate:
	.short	0x2751
	.short	0x2751
	.word	gUnknown_08524944
	.word	gUnknown_08592114
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMovePowderParticle
	.globl	gUnknown_08592160
	.align	2, 0
	.type	 gUnknown_08592160,object
gUnknown_08592160:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592160,8
	.globl	gUnknown_08592168
	.align	2, 0
	.type	 gUnknown_08592168,object
gUnknown_08592168:
	.short	0x1
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592168,8
	.globl	gUnknown_08592170
	.align	2, 0
	.type	 gUnknown_08592170,object
gUnknown_08592170:
	.short	0x2
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592170,8
	.globl	gUnknown_08592178
	.align	2, 0
	.type	 gUnknown_08592178,object
gUnknown_08592178:
	.short	0x3
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592178,8
	.globl	gUnknown_08592180
	.align	2, 0
	.type	 gUnknown_08592180,object
gUnknown_08592180:
	.short	0x4
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592180,8
	.globl	gUnknown_08592188
	.align	2, 0
	.type	 gUnknown_08592188,object
gUnknown_08592188:
	.short	0x5
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592188,8
	.globl	gUnknown_08592190
	.align	2, 0
	.type	 gUnknown_08592190,object
gUnknown_08592190:
	.short	0x6
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592190,8
	.globl	gUnknown_08592198
	.align	2, 0
	.type	 gUnknown_08592198,object
gUnknown_08592198:
	.short	0x7
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592198,8
	.globl	gUnknown_085921A0
	.align	2, 0
	.type	 gUnknown_085921A0,object
gUnknown_085921A0:
	.short	0x8
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085921A0,8
	.globl	gUnknown_085921A8
	.align	2, 0
	.type	 gUnknown_085921A8,object
gUnknown_085921A8:
	.word	gUnknown_08592160
	.word	gUnknown_08592168
	.word	gUnknown_08592170
	.word	gUnknown_08592178
	.word	gUnknown_08592180
	.word	gUnknown_08592188
	.word	gUnknown_08592190
	.size	 gUnknown_085921A8,28
	.globl	gUnknown_085921C4
	.align	2, 0
	.type	 gUnknown_085921C4,object
gUnknown_085921C4:
	.word	gUnknown_08592198
	.size	 gUnknown_085921C4,4
	.globl	gUnknown_085921C8
	.align	2, 0
	.type	 gUnknown_085921C8,object
gUnknown_085921C8:
	.word	gUnknown_085921A0
	.size	 gUnknown_085921C8,4
	.globl	gUnknown_085921CC
	.align	2, 0
	.type	 gUnknown_085921CC,object
gUnknown_085921CC:
	.short	-0x5
	.short	-0x5
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gUnknown_085921CC,16
	.globl	gUnknown_085921DC
	.align	2, 0
	.type	 gUnknown_085921DC,object
gUnknown_085921DC:
	.word	gUnknown_085921CC
	.size	 gUnknown_085921DC,4
	.globl	gPowerAbsorptionOrbSpriteTemplate
	.align	2, 0
	.type	 gPowerAbsorptionOrbSpriteTemplate,object
	.size	 gPowerAbsorptionOrbSpriteTemplate,24
gPowerAbsorptionOrbSpriteTemplate:
	.short	0x27a3
	.short	0x27a3
	.word	gUnknown_08524A8C
	.word	gUnknown_085921C8
	.word	0x0
	.word	gUnknown_085921DC
	.word	AnimPowerAbsorptionOrb
	.globl	gSolarbeamBigOrbSpriteTemplate
	.align	2, 0
	.type	 gSolarbeamBigOrbSpriteTemplate,object
	.size	 gSolarbeamBigOrbSpriteTemplate,24
gSolarbeamBigOrbSpriteTemplate:
	.short	0x27a3
	.short	0x27a3
	.word	gUnknown_08524904
	.word	gUnknown_085921A8
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSolarbeamBigOrb
	.globl	gSolarbeamSmallOrbSpriteTemplate
	.align	2, 0
	.type	 gSolarbeamSmallOrbSpriteTemplate,object
	.size	 gSolarbeamSmallOrbSpriteTemplate,24
gSolarbeamSmallOrbSpriteTemplate:
	.short	0x27a3
	.short	0x27a3
	.word	gUnknown_08524904
	.word	gUnknown_085921C4
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSolarbeamSmallOrb
	.globl	gUnknown_08592228
	.align	2, 0
	.type	 gUnknown_08592228,object
gUnknown_08592228:
	.short	0x140
	.short	0x140
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0xe
	.short	-0xe
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gUnknown_08592228,24
	.globl	gUnknown_08592240
	.align	2, 0
	.type	 gUnknown_08592240,object
gUnknown_08592240:
	.word	gUnknown_08592228
	.size	 gUnknown_08592240,4
	.globl	gStockpileAbsorptionOrbSpriteTemplate
	.align	2, 0
	.type	 gStockpileAbsorptionOrbSpriteTemplate,object
	.size	 gStockpileAbsorptionOrbSpriteTemplate,24
gStockpileAbsorptionOrbSpriteTemplate:
	.short	0x27fb
	.short	0x27fb
	.word	gUnknown_085249C4
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08592240
	.word	AnimPowerAbsorptionOrb
	.globl	gUnknown_0859225C
	.align	2, 0
	.type	 gUnknown_0859225C,object
gUnknown_0859225C:
	.short	-0x5
	.short	-0x5
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gUnknown_0859225C,16
	.globl	gUnknown_0859226C
	.align	2, 0
	.type	 gUnknown_0859226C,object
gUnknown_0859226C:
	.word	gUnknown_0859225C
	.size	 gUnknown_0859226C,4
	.globl	gAbsorptionOrbSpriteTemplate
	.align	2, 0
	.type	 gAbsorptionOrbSpriteTemplate,object
	.size	 gAbsorptionOrbSpriteTemplate,24
gAbsorptionOrbSpriteTemplate:
	.short	0x27a3
	.short	0x27a3
	.word	gUnknown_08524A8C
	.word	gUnknown_085921C8
	.word	0x0
	.word	gUnknown_0859226C
	.word	AnimAbsorptionOrb
	.globl	gHyperBeamOrbSpriteTemplate
	.align	2, 0
	.type	 gHyperBeamOrbSpriteTemplate,object
	.size	 gHyperBeamOrbSpriteTemplate,24
gHyperBeamOrbSpriteTemplate:
	.short	0x27a3
	.short	0x27a3
	.word	gUnknown_08524904
	.word	gUnknown_085921A8
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimHyperBeamOrb
	.globl	gUnknown_085922A0
	.align	2, 0
	.type	 gUnknown_085922A0,object
gUnknown_085922A0:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085922A0,8
	.globl	gUnknown_085922A8
	.align	2, 0
	.type	 gUnknown_085922A8,object
gUnknown_085922A8:
	.short	0x4
	.byte	0x7
	.space	1
	.short	0x8
	.byte	0x7
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_085922A8,12
	.globl	gUnknown_085922B4
	.align	2, 0
	.type	 gUnknown_085922B4,object
gUnknown_085922B4:
	.word	gUnknown_085922A0
	.word	gUnknown_085922A8
	.size	 gUnknown_085922B4,8
	.globl	gLeechSeedSpriteTemplate
	.align	2, 0
	.type	 gLeechSeedSpriteTemplate,object
	.size	 gLeechSeedSpriteTemplate,24
gLeechSeedSpriteTemplate:
	.short	0x2716
	.short	0x2716
	.word	gUnknown_0852490C
	.word	gUnknown_085922B4
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimLeechSeed
	.globl	gUnknown_085922D4
	.align	2, 0
	.type	 gUnknown_085922D4,object
gUnknown_085922D4:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085922D4,8
	.globl	gUnknown_085922DC
	.align	2, 0
	.type	 gUnknown_085922DC,object
gUnknown_085922DC:
	.short	0x4
	.byte	0x7
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085922DC,8
	.globl	gUnknown_085922E4
	.align	2, 0
	.type	 gUnknown_085922E4,object
gUnknown_085922E4:
	.word	gUnknown_085922D4
	.word	gUnknown_085922DC
	.size	 gUnknown_085922E4,8
	.globl	gSporeParticleSpriteTemplate
	.align	2, 0
	.type	 gSporeParticleSpriteTemplate,object
	.size	 gSporeParticleSpriteTemplate,24
gSporeParticleSpriteTemplate:
	.short	0x27ae
	.short	0x27ae
	.word	gUnknown_0852490C
	.word	gUnknown_085922E4
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSporeParticle
	.globl	gUnknown_08592304
	.align	2, 0
	.type	 gUnknown_08592304,object
gUnknown_08592304:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592304,8
	.globl	gUnknown_0859230C
	.align	2, 0
	.type	 gUnknown_0859230C,object
gUnknown_0859230C:
	.short	0x4
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0859230C,8
	.globl	gUnknown_08592314
	.align	2, 0
	.type	 gUnknown_08592314,object
gUnknown_08592314:
	.word	gUnknown_08592304
	.size	 gUnknown_08592314,4
	.globl	gUnknown_08592318
	.align	2, 0
	.type	 gUnknown_08592318,object
gUnknown_08592318:
	.word	gUnknown_0859230C
	.size	 gUnknown_08592318,4
	.globl	gPetalDanceBigFlowerSpriteTemplate
	.align	2, 0
	.type	 gPetalDanceBigFlowerSpriteTemplate,object
	.size	 gPetalDanceBigFlowerSpriteTemplate,24
gPetalDanceBigFlowerSpriteTemplate:
	.short	0x27af
	.short	0x27af
	.word	gUnknown_0852490C
	.word	gUnknown_08592314
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimPetalDanceBigFlower
	.globl	gPetalDanceSmallFlowerSpriteTemplate
	.align	2, 0
	.type	 gPetalDanceSmallFlowerSpriteTemplate,object
	.size	 gPetalDanceSmallFlowerSpriteTemplate,24
gPetalDanceSmallFlowerSpriteTemplate:
	.short	0x27af
	.short	0x27af
	.word	gUnknown_08524904
	.word	gUnknown_08592318
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimPetalDanceSmallFlower
	.globl	gUnknown_0859234C
	.align	2, 0
	.type	 gUnknown_0859234C,object
gUnknown_0859234C:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x4
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	0xc
	.byte	0x5
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0x14
	.byte	0x5
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0xc
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	0x4
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_0859234C,44
	.globl	gUnknown_08592378
	.align	2, 0
	.type	 gUnknown_08592378,object
gUnknown_08592378:
	.short	0x18
	.byte	0x5
	.space	1
	.short	0x1c
	.byte	0x5
	.space	1
	.short	0x20
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592378,16
	.globl	gUnknown_08592388
	.align	2, 0
	.type	 gUnknown_08592388,object
gUnknown_08592388:
	.word	gUnknown_0859234C
	.word	gUnknown_08592378
	.size	 gUnknown_08592388,8
	.globl	gRazorLeafParticleSpriteTemplate
	.align	2, 0
	.type	 gRazorLeafParticleSpriteTemplate,object
	.size	 gRazorLeafParticleSpriteTemplate,24
gRazorLeafParticleSpriteTemplate:
	.short	0x274f
	.short	0x274f
	.word	gUnknown_0852490C
	.word	gUnknown_08592388
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimRazorLeafParticle
	.globl	gTwisterLeafParticleSpriteTemplate
	.align	2, 0
	.type	 gTwisterLeafParticleSpriteTemplate,object
	.size	 gTwisterLeafParticleSpriteTemplate,24
gTwisterLeafParticleSpriteTemplate:
	.short	0x274f
	.short	0x274f
	.word	gUnknown_0852490C
	.word	gUnknown_08592388
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMoveTwisterParticle
	.globl	gUnknown_085923C0
	.align	2, 0
	.type	 gUnknown_085923C0,object
gUnknown_085923C0:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x0
	.byte	0x43
	.space	1
	.short	0x0
	.byte	0xc3
	.space	1
	.short	0x0
	.byte	0x83
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_085923C0,20
	.globl	gUnknown_085923D4
	.align	2, 0
	.type	 gUnknown_085923D4,object
gUnknown_085923D4:
	.word	gUnknown_085923C0
	.size	 gUnknown_085923D4,4
	.globl	gRazorLeafCutterSpriteTemplate
	.align	2, 0
	.type	 gRazorLeafCutterSpriteTemplate,object
	.size	 gRazorLeafCutterSpriteTemplate,24
gRazorLeafCutterSpriteTemplate:
	.short	0x27b0
	.short	0x27b0
	.word	gUnknown_08524934
	.word	gUnknown_085923D4
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimTranslateLinearSingleSineWave
	.globl	gUnknown_085923F0
	.align	2, 0
	.type	 gUnknown_085923F0,object
gUnknown_085923F0:
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gUnknown_085923F0,16
	.globl	gUnknown_08592400
	.align	2, 0
	.type	 gUnknown_08592400,object
gUnknown_08592400:
	.word	gUnknown_085923F0
	.size	 gUnknown_08592400,4
	.globl	gSwiftStarSpriteTemplate
	.align	2, 0
	.type	 gSwiftStarSpriteTemplate,object
	.size	 gSwiftStarSpriteTemplate,24
gSwiftStarSpriteTemplate:
	.short	0x27be
	.short	0x27be
	.word	gUnknown_08524974
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08592400
	.word	AnimTranslateLinearSingleSineWave
	.globl	gUnknown_0859241C
	.align	2, 0
	.type	 gUnknown_0859241C,object
gUnknown_0859241C:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x40
	.byte	0x4
	.space	1
	.short	0x60
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0859241C,20
	.globl	gUnknown_08592430
	.align	2, 0
	.type	 gUnknown_08592430,object
gUnknown_08592430:
	.short	0x0
	.byte	0x44
	.space	1
	.short	0x20
	.byte	0x44
	.space	1
	.short	0x40
	.byte	0x44
	.space	1
	.short	0x60
	.byte	0x44
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592430,20
	.globl	gUnknown_08592444
	.align	2, 0
	.type	 gUnknown_08592444,object
gUnknown_08592444:
	.word	gUnknown_0859241C
	.word	gUnknown_08592430
	.size	 gUnknown_08592444,8
	.globl	gUnknown_0859244C
	.align	2, 0
	.type	 gUnknown_0859244C,object
gUnknown_0859244C:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0xb
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0xb
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_0859244C,32
	.globl	gUnknown_0859246C
	.align	2, 0
	.type	 gUnknown_0859246C,object
gUnknown_0859246C:
	.short	-0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0xb
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	-0xb
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_0859246C,32
	.globl	gUnknown_0859248C
	.align	2, 0
	.type	 gUnknown_0859248C,object
gUnknown_0859248C:
	.word	gUnknown_0859244C
	.word	gUnknown_0859246C
	.size	 gUnknown_0859248C,8
	.globl	gConstrictBindingSpriteTemplate
	.align	2, 0
	.type	 gConstrictBindingSpriteTemplate,object
	.size	 gConstrictBindingSpriteTemplate,24
gConstrictBindingSpriteTemplate:
	.short	0x27ca
	.short	0x27ca
	.word	gUnknown_0852499C
	.word	gUnknown_08592444
	.word	0x0
	.word	gUnknown_0859248C
	.word	AnimConstrictBinding
	.globl	gUnknown_085924AC
	.align	2, 0
	.type	 gUnknown_085924AC,object
gUnknown_085924AC:
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x30
	.short	0x30
	.byte	0x0
	.byte	0xe
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_085924AC,24
	.globl	gUnknown_085924C4
	.align	2, 0
	.type	 gUnknown_085924C4,object
gUnknown_085924C4:
	.short	-0x10
	.short	-0x10
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gUnknown_085924C4,16
	.globl	gUnknown_085924D4
	.align	2, 0
	.type	 gUnknown_085924D4,object
gUnknown_085924D4:
	.word	gUnknown_085924AC
	.word	gUnknown_085924C4
	.size	 gUnknown_085924D4,8
	.globl	gMimicOrbSpriteTemplate
	.align	2, 0
	.type	 gMimicOrbSpriteTemplate,object
	.size	 gMimicOrbSpriteTemplate,24
gMimicOrbSpriteTemplate:
	.short	0x27a3
	.short	0x27a3
	.word	gUnknown_085249CC
	.word	gUnknown_085921C8
	.word	0x0
	.word	gUnknown_085924D4
	.word	AnimMimicOrb
	.globl	gUnknown_085924F4
	.align	2, 0
	.type	 gUnknown_085924F4,object
gUnknown_085924F4:
	.short	0x0
	.byte	0x7
	.space	1
	.short	0x10
	.byte	0x7
	.space	1
	.short	0x20
	.byte	0x7
	.space	1
	.short	0x30
	.byte	0x7
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085924F4,20
	.globl	gUnknown_08592508
	.align	2, 0
	.type	 gUnknown_08592508,object
gUnknown_08592508:
	.short	0x0
	.byte	0x47
	.space	1
	.short	0x10
	.byte	0x47
	.space	1
	.short	0x20
	.byte	0x47
	.space	1
	.short	0x30
	.byte	0x47
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592508,20
	.globl	gUnknown_0859251C
	.align	2, 0
	.type	 gUnknown_0859251C,object
gUnknown_0859251C:
	.short	0x0
	.byte	0x7
	.space	1
	.short	0x10
	.byte	0x7
	.space	1
	.short	0x20
	.byte	0x7
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0859251C,16
	.globl	gUnknown_0859252C
	.align	2, 0
	.type	 gUnknown_0859252C,object
gUnknown_0859252C:
	.short	0x0
	.byte	0x47
	.space	1
	.short	0x10
	.byte	0x47
	.space	1
	.short	0x20
	.byte	0x47
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0859252C,16
	.globl	gUnknown_0859253C
	.align	2, 0
	.type	 gUnknown_0859253C,object
gUnknown_0859253C:
	.word	gUnknown_085924F4
	.word	gUnknown_08592508
	.word	gUnknown_0859251C
	.word	gUnknown_0859252C
	.size	 gUnknown_0859253C,16
	.globl	gIngrainRootSpriteTemplate
	.align	2, 0
	.type	 gIngrainRootSpriteTemplate,object
	.size	 gIngrainRootSpriteTemplate,24
gIngrainRootSpriteTemplate:
	.short	0x27ef
	.short	0x27ef
	.word	gUnknown_08524914
	.word	gUnknown_0859253C
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimIngrainRoot
	.globl	gFrenzyPlantRootSpriteTemplate
	.align	2, 0
	.type	 gFrenzyPlantRootSpriteTemplate,object
	.size	 gFrenzyPlantRootSpriteTemplate,24
gFrenzyPlantRootSpriteTemplate:
	.short	0x27ef
	.short	0x27ef
	.word	gUnknown_08524914
	.word	gUnknown_0859253C
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFrenzyPlantRoot
	.globl	gUnknown_0859257C
	.align	2, 0
	.type	 gUnknown_0859257C,object
gUnknown_0859257C:
	.short	0x3
	.byte	0x3
	.space	1
	.short	0x0
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_0859257C,12
	.globl	gUnknown_08592588
	.align	2, 0
	.type	 gUnknown_08592588,object
gUnknown_08592588:
	.word	gUnknown_0859257C
	.size	 gUnknown_08592588,4
	.globl	gIngrainOrbSpriteTemplate
	.align	2, 0
	.type	 gIngrainOrbSpriteTemplate,object
	.size	 gIngrainOrbSpriteTemplate,24
gIngrainOrbSpriteTemplate:
	.short	0x27a3
	.short	0x27a3
	.word	gUnknown_08524904
	.word	gUnknown_08592588
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimIngrainOrb
	.globl	gUnknown_085925A4
	.align	2, 0
	.type	 gUnknown_085925A4,object
gUnknown_085925A4:
	.short	0x0
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085925A4,8
	.globl	gUnknown_085925AC
	.align	2, 0
	.type	 gUnknown_085925AC,object
gUnknown_085925AC:
	.word	gUnknown_085925A4
	.size	 gUnknown_085925AC,4
	.globl	gUnknown_085925B0
	.align	2, 0
	.type	 gUnknown_085925B0,object
gUnknown_085925B0:
	.short	0x0
	.short	0x0
	.byte	0xfc
	.byte	0xa
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x4
	.byte	0x14
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xfc
	.byte	0xa
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_085925B0,32
	.globl	gUnknown_085925D0
	.align	2, 0
	.type	 gUnknown_085925D0,object
gUnknown_085925D0:
	.short	0x0
	.short	0x0
	.byte	0xff
	.byte	0x2
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x1
	.byte	0x4
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xff
	.byte	0x4
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x1
	.byte	0x4
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xff
	.byte	0x4
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x1
	.byte	0x2
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_085925D0,56
	.globl	gUnknown_08592608
	.align	2, 0
	.type	 gUnknown_08592608,object
gUnknown_08592608:
	.word	gUnknown_085925B0
	.word	gUnknown_085925D0
	.size	 gUnknown_08592608,8
	.globl	gPresentSpriteTemplate
	.align	2, 0
	.type	 gPresentSpriteTemplate,object
	.size	 gPresentSpriteTemplate,24
gPresentSpriteTemplate:
	.short	0x27f0
	.short	0x27f0
	.word	gUnknown_08524974
	.word	gUnknown_085925AC
	.word	0x0
	.word	gUnknown_08592608
	.word	AnimPresent
	.globl	gKnockOffItemSpriteTemplate
	.align	2, 0
	.type	 gKnockOffItemSpriteTemplate,object
	.size	 gKnockOffItemSpriteTemplate,24
gKnockOffItemSpriteTemplate:
	.short	0x27f0
	.short	0x27f0
	.word	gUnknown_08524974
	.word	gUnknown_085925AC
	.word	0x0
	.word	gUnknown_08592608
	.word	AnimKnockOffItem
	.globl	gUnknown_08592640
	.align	2, 0
	.type	 gUnknown_08592640,object
gUnknown_08592640:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x4
	.byte	0x4
	.space	1
	.short	0x8
	.byte	0x4
	.space	1
	.short	0xc
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592640,20
	.globl	gUnknown_08592654
	.align	2, 0
	.type	 gUnknown_08592654,object
gUnknown_08592654:
	.word	gUnknown_08592640
	.size	 gUnknown_08592654,4
	.globl	gPresentHealParticleSpriteTemplate
	.align	2, 0
	.type	 gPresentHealParticleSpriteTemplate,object
	.size	 gPresentHealParticleSpriteTemplate,24
gPresentHealParticleSpriteTemplate:
	.short	0x27d3
	.short	0x27d3
	.word	gUnknown_0852490C
	.word	gUnknown_08592654
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimPresentHealParticle
	.globl	gItemStealSpriteTemplate
	.align	2, 0
	.type	 gItemStealSpriteTemplate,object
	.size	 gItemStealSpriteTemplate,24
gItemStealSpriteTemplate:
	.short	0x27f0
	.short	0x27f0
	.word	gUnknown_08524974
	.word	gUnknown_085925AC
	.word	0x0
	.word	gUnknown_08592608
	.word	AnimItemSteal
	.globl	gUnknown_08592688
	.align	2, 0
	.type	 gUnknown_08592688,object
gUnknown_08592688:
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08592688,16
	.globl	gUnknown_08592698
	.align	2, 0
	.type	 gUnknown_08592698,object
gUnknown_08592698:
	.short	0x0
	.short	-0xa
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x0
	.short	-0x6
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x0
	.short	-0x2
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x0
	.short	0x2
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x0
	.short	0x6
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x0
	.short	0xa
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08592698,64
	.globl	gUnknown_085926D8
	.align	2, 0
	.type	 gUnknown_085926D8,object
gUnknown_085926D8:
	.word	gUnknown_08592688
	.word	gUnknown_08592698
	.word	gUnknown_085925B0
	.word	gUnknown_085925D0
	.size	 gUnknown_085926D8,16
	.globl	gTrickBagSpriteTemplate
	.align	2, 0
	.type	 gTrickBagSpriteTemplate,object
	.size	 gTrickBagSpriteTemplate,24
gTrickBagSpriteTemplate:
	.short	0x27f0
	.short	0x27f0
	.word	gUnknown_08524974
	.word	gUnknown_085925AC
	.word	0x0
	.word	gUnknown_085926D8
	.word	AnimTrickBag
	.globl	gUnknown_08592700
	.type	 gUnknown_08592700,object
gUnknown_08592700:
	.byte	0x5
	.byte	0x18
	.byte	0x1
	.byte	0x0
	.byte	0x4
	.byte	0x0
	.byte	0x8
	.byte	0x10
	.byte	-0x1
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x8
	.byte	0x10
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x8
	.byte	0x10
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x8
	.byte	0x10
	.byte	0x1
	.byte	0x0
	.byte	0x10
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x7f
	.size	 gUnknown_08592700,33
	.globl	gUnknown_08592724
	.align	2, 0
	.type	 gUnknown_08592724,object
gUnknown_08592724:
	.short	0x1c
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592724,8
	.globl	gUnknown_0859272C
	.align	2, 0
	.type	 gUnknown_0859272C,object
gUnknown_0859272C:
	.short	0x20
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0859272C,8
	.globl	gUnknown_08592734
	.align	2, 0
	.type	 gUnknown_08592734,object
gUnknown_08592734:
	.short	0x14
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592734,8
	.globl	gUnknown_0859273C
	.align	2, 0
	.type	 gUnknown_0859273C,object
gUnknown_0859273C:
	.short	0x1c
	.byte	0x41
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0859273C,8
	.globl	gUnknown_08592744
	.align	2, 0
	.type	 gUnknown_08592744,object
gUnknown_08592744:
	.short	0x10
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592744,8
	.globl	gUnknown_0859274C
	.align	2, 0
	.type	 gUnknown_0859274C,object
gUnknown_0859274C:
	.short	0x10
	.byte	0x41
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0859274C,8
	.globl	gUnknown_08592754
	.align	2, 0
	.type	 gUnknown_08592754,object
gUnknown_08592754:
	.short	0x1c
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592754,8
	.globl	gUnknown_0859275C
	.align	2, 0
	.type	 gUnknown_0859275C,object
gUnknown_0859275C:
	.word	gUnknown_08592724
	.word	gUnknown_0859272C
	.word	gUnknown_08592734
	.word	gUnknown_0859273C
	.word	gUnknown_08592744
	.word	gUnknown_0859274C
	.word	gUnknown_08592754
	.size	 gUnknown_0859275C,28
	.globl	gUnknown_08592778
	.align	2, 0
	.type	 gUnknown_08592778,object
	.size	 gUnknown_08592778,24
gUnknown_08592778:
	.short	0x274f
	.short	0x274f
	.word	gUnknown_0852490C
	.word	gUnknown_0859275C
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.globl	gUnknown_08592790
	.align	2, 0
	.type	 gUnknown_08592790,object
gUnknown_08592790:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x4
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gUnknown_08592790,24
	.globl	gUnknown_085927A8
	.align	2, 0
	.type	 gUnknown_085927A8,object
gUnknown_085927A8:
	.word	gUnknown_08592790
	.size	 gUnknown_085927A8,4
	.globl	gUnknown_085927AC
	.align	2, 0
	.type	 gUnknown_085927AC,object
	.size	 gUnknown_085927AC,24
gUnknown_085927AC:
	.short	0x27af
	.short	0x27af
	.word	gUnknown_08524904
	.word	gUnknown_08592318
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8100640
	.globl	gUnknown_085927C4
	.align	2, 0
	.type	 gUnknown_085927C4,object
	.size	 gUnknown_085927C4,24
gUnknown_085927C4:
	.short	0x27af
	.short	0x27af
	.word	gUnknown_0852496C
	.word	gUnknown_08592314
	.word	0x0
	.word	gUnknown_085927A8
	.word	sub_8100640
	.globl	gUnknown_085927DC
	.align	2, 0
	.type	 gUnknown_085927DC,object
gUnknown_085927DC:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xf6
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gUnknown_085927DC,24
	.globl	gUnknown_085927F4
	.align	2, 0
	.type	 gUnknown_085927F4,object
gUnknown_085927F4:
	.short	0xc0
	.short	0xc0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xf4
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gUnknown_085927F4,24
	.globl	gUnknown_0859280C
	.align	2, 0
	.type	 gUnknown_0859280C,object
gUnknown_0859280C:
	.short	0x8f
	.short	0x8f
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xf1
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gUnknown_0859280C,24
	.globl	gUnknown_08592824
	.align	2, 0
	.type	 gUnknown_08592824,object
gUnknown_08592824:
	.word	gUnknown_085927DC
	.size	 gUnknown_08592824,4
	.globl	gUnknown_08592828
	.align	2, 0
	.type	 gUnknown_08592828,object
gUnknown_08592828:
	.word	gUnknown_085927F4
	.size	 gUnknown_08592828,4
	.globl	gUnknown_0859282C
	.align	2, 0
	.type	 gUnknown_0859282C,object
gUnknown_0859282C:
	.word	gUnknown_0859280C
	.size	 gUnknown_0859282C,4
	.globl	gUnknown_08592830
	.align	2, 0
	.type	 gUnknown_08592830,object
	.size	 gUnknown_08592830,24
gUnknown_08592830:
	.short	0x281f
	.short	0x281f
	.word	gUnknown_0852496C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08592824
	.word	sub_8100640
	.globl	gUnknown_08592848
	.align	2, 0
	.type	 gUnknown_08592848,object
	.size	 gUnknown_08592848,24
gUnknown_08592848:
	.short	0x281f
	.short	0x281f
	.word	gUnknown_0852496C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08592828
	.word	sub_8100640
	.globl	gUnknown_08592860
	.align	2, 0
	.type	 gUnknown_08592860,object
	.size	 gUnknown_08592860,24
gUnknown_08592860:
	.short	0x281f
	.short	0x281f
	.word	gUnknown_0852496C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_0859282C
	.word	sub_8100640
	.globl	gMagicalLeafBlendColors
	.align	1, 0
	.type	 gMagicalLeafBlendColors,object
gMagicalLeafBlendColors:
	.short	0x1f
	.short	0x27f
	.short	0x3ff
	.short	0x3e0
	.short	0x7dc5
	.short	0x7d56
	.short	0x7eb6
	.size	 gMagicalLeafBlendColors,14
	.globl	gUnknown_08592888
	.align	2, 0
	.type	 gUnknown_08592888,object
	.size	 gUnknown_08592888,24
gUnknown_08592888:
	.short	0x281a
	.short	0x281a
	.word	gUnknown_0852496C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8100898
	.globl	gUnknown_085928A0
	.align	2, 0
	.type	 gUnknown_085928A0,object
gUnknown_085928A0:
	.short	0x40
	.byte	0x3
	.space	1
	.short	0x50
	.byte	0x3
	.space	1
	.short	0x60
	.byte	0x3
	.space	1
	.short	0x70
	.byte	0x6
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085928A0,20
	.globl	gUnknown_085928B4
	.align	2, 0
	.type	 gUnknown_085928B4,object
gUnknown_085928B4:
	.short	0x40
	.byte	0x43
	.space	1
	.short	0x50
	.byte	0x43
	.space	1
	.short	0x60
	.byte	0x43
	.space	1
	.short	0x70
	.byte	0x46
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085928B4,20
	.globl	gUnknown_085928C8
	.align	2, 0
	.type	 gUnknown_085928C8,object
gUnknown_085928C8:
	.word	gUnknown_085928A0
	.word	gUnknown_085928B4
	.size	 gUnknown_085928C8,8
	.globl	gUnknown_085928D0
	.align	2, 0
	.type	 gUnknown_085928D0,object
	.size	 gUnknown_085928D0,24
gUnknown_085928D0:
	.short	0x2748
	.short	0x2748
	.word	gUnknown_08524914
	.word	gUnknown_085928C8
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8100A50
	.globl	gVineWhipSpriteTemplate
	.align	2, 0
	.type	 gVineWhipSpriteTemplate,object
	.size	 gVineWhipSpriteTemplate,24
gVineWhipSpriteTemplate:
	.short	0x282f
	.short	0x282f
	.word	gUnknown_08524914
	.word	gUnknown_085928C8
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8100A50
	.globl	gUnknown_08592900
	.align	2, 0
	.type	 gUnknown_08592900,object
gUnknown_08592900:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x30
	.byte	0x4
	.space	1
	.short	0x40
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592900,24
	.globl	gUnknown_08592918
	.align	2, 0
	.type	 gUnknown_08592918,object
gUnknown_08592918:
	.word	gUnknown_08592900
	.size	 gUnknown_08592918,4
	.globl	gUnknown_0859291C
	.align	2, 0
	.type	 gUnknown_0859291C,object
	.size	 gUnknown_0859291C,24
gUnknown_0859291C:
	.short	0x2725
	.short	0x2725
	.word	gUnknown_08524914
	.word	gUnknown_08592918
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_81009F8
	.globl	gUnknown_08592934
	.align	2, 0
	.type	 gUnknown_08592934,object
	.size	 gUnknown_08592934,24
gUnknown_08592934:
	.short	0x2726
	.short	0x2726
	.word	gUnknown_08524914
	.word	gUnknown_08592918
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_81009F8
	.globl	gUnknown_0859294C
	.align	2, 0
	.type	 gUnknown_0859294C,object
gUnknown_0859294C:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_0859294C,16
	.globl	gUnknown_0859295C
	.align	2, 0
	.type	 gUnknown_0859295C,object
gUnknown_0859295C:
	.short	0x100
	.short	0x100
	.byte	0x20
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_0859295C,16
	.globl	gUnknown_0859296C
	.align	2, 0
	.type	 gUnknown_0859296C,object
gUnknown_0859296C:
	.short	0x100
	.short	0x100
	.byte	0x40
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_0859296C,16
	.globl	gUnknown_0859297C
	.align	2, 0
	.type	 gUnknown_0859297C,object
gUnknown_0859297C:
	.short	0x100
	.short	0x100
	.byte	0x60
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_0859297C,16
	.globl	gUnknown_0859298C
	.align	2, 0
	.type	 gUnknown_0859298C,object
gUnknown_0859298C:
	.short	0x100
	.short	0x100
	.byte	0x80
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_0859298C,16
	.globl	gUnknown_0859299C
	.align	2, 0
	.type	 gUnknown_0859299C,object
gUnknown_0859299C:
	.short	0x100
	.short	0x100
	.byte	0xa0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_0859299C,16
	.globl	gUnknown_085929AC
	.align	2, 0
	.type	 gUnknown_085929AC,object
gUnknown_085929AC:
	.short	0x100
	.short	0x100
	.byte	0xc0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_085929AC,16
	.globl	gUnknown_085929BC
	.align	2, 0
	.type	 gUnknown_085929BC,object
gUnknown_085929BC:
	.short	0x100
	.short	0x100
	.byte	0xe0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_085929BC,16
	.globl	gUnknown_085929CC
	.align	2, 0
	.type	 gUnknown_085929CC,object
gUnknown_085929CC:
	.word	gUnknown_0859294C
	.word	gUnknown_0859295C
	.word	gUnknown_0859296C
	.word	gUnknown_0859297C
	.word	gUnknown_0859298C
	.word	gUnknown_0859299C
	.word	gUnknown_085929AC
	.word	gUnknown_085929BC
	.size	 gUnknown_085929CC,32
	.globl	gUnknown_085929EC
	.align	2, 0
	.type	 gUnknown_085929EC,object
	.size	 gUnknown_085929EC,24
gUnknown_085929EC:
	.short	0x279f
	.short	0x279f
	.word	gUnknown_08524974
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_085929CC
	.word	sub_8100A94
	.globl	gUnknown_08592A04
	.align	2, 0
	.type	 gUnknown_08592A04,object
gUnknown_08592A04:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0x20
	.byte	0x5
	.space	1
	.short	0x30
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592A04,20
	.globl	gUnknown_08592A18
	.align	2, 0
	.type	 gUnknown_08592A18,object
gUnknown_08592A18:
	.word	gUnknown_08592A04
	.size	 gUnknown_08592A18,4
	.globl	gCuttingSliceSpriteTemplate
	.align	2, 0
	.type	 gCuttingSliceSpriteTemplate,object
	.size	 gCuttingSliceSpriteTemplate,24
gCuttingSliceSpriteTemplate:
	.short	0x279a
	.short	0x279a
	.word	gUnknown_08524A34
	.word	gUnknown_08592A18
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimCuttingSlice
	.globl	gUnknown_08592A34
	.align	2, 0
	.type	 gUnknown_08592A34,object
	.size	 gUnknown_08592A34,24
gUnknown_08592A34:
	.short	0x279a
	.short	0x279a
	.word	gUnknown_08524A34
	.word	gUnknown_08592A18
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8100B88
	.globl	gUnknown_08592A4C
	.align	2, 0
	.type	 gUnknown_08592A4C,object
gUnknown_08592A4C:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592A4C,8
	.globl	gUnknown_08592A54
	.align	2, 0
	.type	 gUnknown_08592A54,object
gUnknown_08592A54:
	.short	0x4
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592A54,8
	.globl	gUnknown_08592A5C
	.align	2, 0
	.type	 gUnknown_08592A5C,object
gUnknown_08592A5C:
	.short	0x8
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592A5C,8
	.globl	gUnknown_08592A64
	.align	2, 0
	.type	 gUnknown_08592A64,object
gUnknown_08592A64:
	.short	0xc
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592A64,8
	.globl	gUnknown_08592A6C
	.align	2, 0
	.type	 gUnknown_08592A6C,object
gUnknown_08592A6C:
	.short	0x10
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592A6C,8
	.globl	gUnknown_08592A74
	.align	2, 0
	.type	 gUnknown_08592A74,object
gUnknown_08592A74:
	.short	0x14
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592A74,8
	.globl	gUnknown_08592A7C
	.align	2, 0
	.type	 gUnknown_08592A7C,object
gUnknown_08592A7C:
	.short	0x0
	.byte	0x81
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592A7C,8
	.globl	gUnknown_08592A84
	.align	2, 0
	.type	 gUnknown_08592A84,object
gUnknown_08592A84:
	.short	0x4
	.byte	0x81
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592A84,8
	.globl	gUnknown_08592A8C
	.align	2, 0
	.type	 gUnknown_08592A8C,object
gUnknown_08592A8C:
	.short	0x8
	.byte	0x81
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592A8C,8
	.globl	gUnknown_08592A94
	.align	2, 0
	.type	 gUnknown_08592A94,object
gUnknown_08592A94:
	.short	0xc
	.byte	0x81
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592A94,8
	.globl	gUnknown_08592A9C
	.align	2, 0
	.type	 gUnknown_08592A9C,object
gUnknown_08592A9C:
	.word	gUnknown_08592A4C
	.word	gUnknown_08592A54
	.word	gUnknown_08592A5C
	.word	gUnknown_08592A64
	.word	gUnknown_08592A6C
	.word	gUnknown_08592A74
	.word	gUnknown_08592A7C
	.word	gUnknown_08592A84
	.word	gUnknown_08592A8C
	.word	gUnknown_08592A94
	.size	 gUnknown_08592A9C,40
	.globl	gUnknown_08592AC4
	.align	2, 0
	.type	 gUnknown_08592AC4,object
	.size	 gUnknown_08592AC4,24
gUnknown_08592AC4:
	.short	0x2758
	.short	0x2758
	.word	gUnknown_0852490C
	.word	gUnknown_08592A9C
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8100E1C
	.globl	gUnknown_08592ADC
	.align	2, 0
	.type	 gUnknown_08592ADC,object
	.size	 gUnknown_08592ADC,24
gUnknown_08592ADC:
	.short	0x2828
	.short	0x2828
	.word	gUnknown_08524A3C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8100EF0
	.globl	gUnknown_08592AF4
	.align	2, 0
	.type	 gUnknown_08592AF4,object
gUnknown_08592AF4:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08592AF4,16
	.globl	gUnknown_08592B04
	.align	2, 0
	.type	 gUnknown_08592B04,object
gUnknown_08592B04:
	.short	0x0
	.short	0x0
	.byte	0x2
	.byte	0xc
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xfe
	.byte	0x18
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x2
	.byte	0xc
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gUnknown_08592B04,48
	.globl	gUnknown_08592B34
	.align	2, 0
	.type	 gUnknown_08592B34,object
gUnknown_08592B34:
	.word	gUnknown_08592AF4
	.word	gUnknown_08592B04
	.size	 gUnknown_08592B34,8
	.globl	gUnknown_08592B3C
	.align	2, 0
	.type	 gUnknown_08592B3C,object
	.size	 gUnknown_08592B3C,24
gUnknown_08592B3C:
	.short	0x2773
	.short	0x2773
	.word	gUnknown_08524A94
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08592B34
	.word	sub_81010CC
	.globl	gUnknown_08592B54
	.align	2, 0
	.type	 gUnknown_08592B54,object
gUnknown_08592B54:
	.short	0x0
	.byte	0x7
	.space	1
	.short	0x10
	.byte	0x7
	.space	1
	.short	0x20
	.byte	0x7
	.space	1
	.short	0x30
	.byte	0x7
	.space	1
	.short	0x40
	.byte	0x7
	.space	1
	.short	0x50
	.byte	0x7
	.space	1
	.short	0x60
	.byte	0x7
	.space	1
	.short	0x70
	.byte	0x7
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_08592B54,36
	.globl	gUnknown_08592B78
	.align	2, 0
	.type	 gUnknown_08592B78,object
gUnknown_08592B78:
	.word	gUnknown_08592B54
	.size	 gUnknown_08592B78,4
	.globl	gUnknown_08592B7C
	.align	2, 0
	.type	 gUnknown_08592B7C,object
	.size	 gUnknown_08592B7C,24
gUnknown_08592B7C:
	.short	0x2741
	.short	0x2741
	.word	gUnknown_08524914
	.word	gUnknown_08592B78
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810130C
	.globl	gUnknown_08592B94
	.align	2, 0
	.type	 gUnknown_08592B94,object
	.size	 gUnknown_08592B94,24
gUnknown_08592B94:
	.short	0x2741
	.short	0x2741
	.word	gUnknown_08524914
	.word	gUnknown_08592B78
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810135C
	.globl	gUnknown_08592BAC
	.align	2, 0
	.type	 gUnknown_08592BAC,object
gUnknown_08592BAC:
	.short	0x0
	.byte	0xa
	.space	1
	.short	0x4
	.byte	0xa
	.space	1
	.short	0x8
	.byte	0xa
	.space	1
	.short	0xc
	.byte	0xa
	.space	1
	.short	0x10
	.byte	0x1a
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0x14
	.byte	0x5
	.space	1
	.short	0x18
	.byte	0xf
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592BAC,36
	.globl	gUnknown_08592BD0
	.align	2, 0
	.type	 gUnknown_08592BD0,object
gUnknown_08592BD0:
	.short	0x0
	.byte	0x4a
	.space	1
	.short	0x4
	.byte	0x4a
	.space	1
	.short	0x8
	.byte	0x4a
	.space	1
	.short	0xc
	.byte	0x4a
	.space	1
	.short	0x10
	.byte	0x5a
	.space	1
	.short	0x10
	.byte	0x45
	.space	1
	.short	0x14
	.byte	0x45
	.space	1
	.short	0x18
	.byte	0x4f
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592BD0,36
	.globl	gUnknown_08592BF4
	.align	2, 0
	.type	 gUnknown_08592BF4,object
gUnknown_08592BF4:
	.word	gUnknown_08592BAC
	.word	gUnknown_08592BD0
	.size	 gUnknown_08592BF4,8
	.globl	gUnknown_08592BFC
	.align	2, 0
	.type	 gUnknown_08592BFC,object
	.size	 gUnknown_08592BFC,24
gUnknown_08592BFC:
	.short	0x2730
	.short	0x2730
	.word	gUnknown_0852490C
	.word	gUnknown_08592BF4
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8101440
	.globl	gUnknown_08592C14
	.align	2, 0
	.type	 gUnknown_08592C14,object
gUnknown_08592C14:
	.short	0x0
	.byte	0x28
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592C14,8
	.globl	gUnknown_08592C1C
	.align	2, 0
	.type	 gUnknown_08592C1C,object
gUnknown_08592C1C:
	.word	gUnknown_08592C14
	.size	 gUnknown_08592C1C,4
	.globl	gUnknown_08592C20
	.align	2, 0
	.type	 gUnknown_08592C20,object
gUnknown_08592C20:
	.short	0x14
	.short	0x14
	.byte	0xe2
	.byte	0x0
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x1
	.byte	0x18
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08592C20,24
	.globl	gUnknown_08592C20_2
	.align	2, 0
	.type	 gUnknown_08592C20_2,object
gUnknown_08592C20_2:
	.short	0x7ffd
	.short	0x0
	.space	4
	.short	0x0
	.short	0x0
	.byte	0x1
	.byte	0x18
	.space	2
	.short	0x7ffd
	.short	0xa
	.space	4
	.size	 gUnknown_08592C20_2,24
	.globl	gUnknown_08592C50
	.align	2, 0
	.type	 gUnknown_08592C50,object
gUnknown_08592C50:
	.short	0x14
	.short	0x14
	.byte	0x1e
	.byte	0x0
	.space	2
	.short	0x8
	.short	0x8
	.byte	0xff
	.byte	0x18
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08592C50,24
	.globl	gUnknown_08592C50_2
	.align	2, 0
	.type	 gUnknown_08592C50_2,object
gUnknown_08592C50_2:
	.short	0x7ffd
	.short	0x0
	.space	4
	.short	0x0
	.short	0x0
	.byte	0xff
	.byte	0x18
	.space	2
	.short	0x7ffd
	.short	0xa
	.space	4
	.size	 gUnknown_08592C50_2,24
	.globl	gUnknown_08592C80
	.align	2, 0
	.type	 gUnknown_08592C80,object
gUnknown_08592C80:
	.word	gUnknown_08592C20
	.word	gUnknown_08592C50
	.size	 gUnknown_08592C80,8
	.globl	gUnknown_08592C88
	.align	2, 0
	.type	 gUnknown_08592C88,object
	.size	 gUnknown_08592C88,24
gUnknown_08592C88:
	.short	0x27f4
	.short	0x27f4
	.word	gUnknown_08524974
	.word	gUnknown_08592C1C
	.word	0x0
	.word	gUnknown_08592C80
	.word	sub_81014F4
	.globl	gUnknown_08592CA0
	.align	2, 0
	.type	 gUnknown_08592CA0,object
	.size	 gUnknown_08592CA0,24
gUnknown_08592CA0:
	.short	0x271e
	.short	0x271e
	.word	gUnknown_08524914
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_81015AC
	.globl	gUnknown_08592CB8
	.align	2, 0
	.type	 gUnknown_08592CB8,object
	.size	 gUnknown_08592CB8,24
gUnknown_08592CB8:
	.short	0x271e
	.short	0x271e
	.word	gUnknown_0852490C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8101898
	.globl	gUnknown_08592CD0
	.type	 gUnknown_08592CD0,object
gUnknown_08592CD0:
	.byte	0x40
	.byte	0x40
	.byte	0x0
	.byte	-0x40
	.byte	-0x40
	.byte	0x40
	.byte	0x20
	.byte	-0x20
	.size	 gUnknown_08592CD0,8
	.globl	gUnknown_08592CD8
	.align	2, 0
	.type	 gUnknown_08592CD8,object
	.size	 gUnknown_08592CD8,24
gUnknown_08592CD8:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8101940
	.globl	gUnknown_08592CF0
	.align	2, 0
	.type	 gUnknown_08592CF0,object
	.size	 gUnknown_08592CF0,24
gUnknown_08592CF0:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8101B90
	.globl	gUnknown_08592D08
	.align	2, 0
	.type	 gUnknown_08592D08,object
gUnknown_08592D08:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x30
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592D08,20
	.globl	gUnknown_08592D1C
	.align	2, 0
	.type	 gUnknown_08592D1C,object
gUnknown_08592D1C:
	.short	0x30
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592D1C,8
	.globl	gUnknown_08592D24
	.align	2, 0
	.type	 gUnknown_08592D24,object
gUnknown_08592D24:
	.word	gUnknown_08592D08
	.word	gUnknown_08592D1C
	.size	 gUnknown_08592D24,8
	.globl	gUnknown_08592D2C
	.align	2, 0
	.type	 gUnknown_08592D2C,object
	.size	 gUnknown_08592D2C,24
gUnknown_08592D2C:
	.short	0x27c7
	.short	0x27c7
	.word	gUnknown_08524914
	.word	gUnknown_08592D24
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8101F40
	.globl	gUnknown_08592D44
	.align	2, 0
	.type	 gUnknown_08592D44,object
	.size	 gUnknown_08592D44,24
gUnknown_08592D44:
	.short	0x282e
	.short	0x282e
	.word	gUnknown_08524914
	.word	gUnknown_08592D24
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8101FA8
	.globl	gUnknown_08592D5C
	.align	2, 0
	.type	 gUnknown_08592D5C,object
	.size	 gUnknown_08592D5C,24
gUnknown_08592D5C:
	.short	0x282e
	.short	0x282e
	.word	gUnknown_08524914
	.word	gUnknown_08592D24
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8101FF0
	.globl	gUnknown_08592D74
	.align	2, 0
	.type	 gUnknown_08592D74,object
gUnknown_08592D74:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x8
	.byte	0xc
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x18
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592D74,20
	.globl	gUnknown_08592D88
	.align	2, 0
	.type	 gUnknown_08592D88,object
gUnknown_08592D88:
	.word	gUnknown_08592D74
	.size	 gUnknown_08592D88,4
	.globl	gUnknown_08592D8C
	.align	2, 0
	.type	 gUnknown_08592D8C,object
	.size	 gUnknown_08592D8C,24
gUnknown_08592D8C:
	.short	0x27c8
	.short	0x27c8
	.word	gUnknown_08524954
	.word	gUnknown_08592D88
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_81020D8
	.globl	gUnknown_08592DA4
	.align	2, 0
	.type	 gUnknown_08592DA4,object
gUnknown_08592DA4:
	.short	0x0
	.byte	0x12
	.space	1
	.short	0x0
	.byte	0x6
	.space	1
	.short	0x10
	.byte	0x12
	.space	1
	.short	0x0
	.byte	0x6
	.space	1
	.short	0x10
	.byte	0x6
	.space	1
	.short	0x20
	.byte	0x12
	.space	1
	.short	0x10
	.byte	0x6
	.space	1
	.short	0x20
	.byte	0x6
	.space	1
	.short	0x30
	.byte	0x12
	.space	1
	.short	0x20
	.byte	0x6
	.space	1
	.short	0x30
	.byte	0x6
	.space	1
	.short	0x40
	.byte	0x12
	.space	1
	.short	0x30
	.byte	0x6
	.space	1
	.short	0x40
	.byte	0x36
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592DA4,60
	.globl	gUnknown_08592DE0
	.align	2, 0
	.type	 gUnknown_08592DE0,object
gUnknown_08592DE0:
	.word	gUnknown_08592DA4
	.size	 gUnknown_08592DE0,4
	.globl	gUnknown_08592DE4
	.align	2, 0
	.type	 gUnknown_08592DE4,object
	.size	 gUnknown_08592DE4,24
gUnknown_08592DE4:
	.short	0x27c9
	.short	0x27c9
	.word	gUnknown_08524914
	.word	gUnknown_08592DE0
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810217C
	.globl	gUnknown_08592DFC
	.align	2, 0
	.type	 gUnknown_08592DFC,object
	.size	 gUnknown_08592DFC,24
gUnknown_08592DFC:
	.short	0x2721
	.short	0x2721
	.word	gUnknown_08524904
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	TranslateAnimSpriteToTargetMonLocation
	.globl	gUnknown_08592E14
	.align	2, 0
	.type	 gUnknown_08592E14,object
gUnknown_08592E14:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x10
	.byte	0x3
	.space	1
	.short	0x20
	.byte	0x3
	.space	1
	.short	0x30
	.byte	0x3
	.space	1
	.short	0x40
	.byte	0x3
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592E14,24
	.globl	gUnknown_08592E2C
	.align	2, 0
	.type	 gUnknown_08592E2C,object
gUnknown_08592E2C:
	.word	gUnknown_08592E14
	.size	 gUnknown_08592E2C,4
	.globl	gUnknown_08592E30
	.align	2, 0
	.type	 gUnknown_08592E30,object
	.size	 gUnknown_08592E30,24
gUnknown_08592E30:
	.short	0x272e
	.short	0x272e
	.word	gUnknown_08524914
	.word	gUnknown_08592E2C
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_80A77C8
	.globl	gUnknown_08592E48
	.align	2, 0
	.type	 gUnknown_08592E48,object
gUnknown_08592E48:
	.short	0x3
	.byte	0x5
	.space	1
	.short	0x2
	.byte	0x5
	.space	1
	.short	0x1
	.byte	0x5
	.space	1
	.short	0x0
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592E48,20
	.globl	gUnknown_08592E5C
	.align	2, 0
	.type	 gUnknown_08592E5C,object
gUnknown_08592E5C:
	.word	gUnknown_08592E48
	.size	 gUnknown_08592E5C,4
	.globl	gUnknown_08592E60
	.align	2, 0
	.type	 gUnknown_08592E60,object
gUnknown_08592E60:
	.short	0x200
	.short	0x200
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08592E60,16
	.globl	gUnknown_08592E70
	.align	2, 0
	.type	 gUnknown_08592E70,object
gUnknown_08592E70:
	.word	gUnknown_08592E60
	.size	 gUnknown_08592E70,4
	.globl	gUnknown_08592E74
	.align	2, 0
	.type	 gUnknown_08592E74,object
	.size	 gUnknown_08592E74,24
gUnknown_08592E74:
	.short	0x2722
	.short	0x2722
	.word	gUnknown_08524AE4
	.word	gUnknown_08592E5C
	.word	0x0
	.word	gUnknown_08592E70
	.word	sub_8102268
	.globl	gUnknown_08592E8C
	.align	2, 0
	.type	 gUnknown_08592E8C,object
gUnknown_08592E8C:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x1
	.byte	0x5
	.space	1
	.short	0x2
	.byte	0x5
	.space	1
	.short	0x3
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592E8C,20
	.globl	gUnknown_08592EA0
	.align	2, 0
	.type	 gUnknown_08592EA0,object
gUnknown_08592EA0:
	.word	gUnknown_08592E8C
	.size	 gUnknown_08592EA0,4
	.globl	gUnknown_08592EA4
	.align	2, 0
	.type	 gUnknown_08592EA4,object
	.size	 gUnknown_08592EA4,24
gUnknown_08592EA4:
	.short	0x2722
	.short	0x2722
	.word	gUnknown_08524AE4
	.word	gUnknown_08592EA0
	.word	0x0
	.word	gUnknown_08592E70
	.word	sub_810234C
	.globl	gUnknown_08592EBC
	.align	2, 0
	.type	 gUnknown_08592EBC,object
	.size	 gUnknown_08592EBC,24
gUnknown_08592EBC:
	.short	0x27d2
	.short	0x27d2
	.word	gUnknown_08524A3C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_81024E0
	.globl	gUnknown_08592ED4
	.align	2, 0
	.type	 gUnknown_08592ED4,object
gUnknown_08592ED4:
	.short	0x0
	.byte	0x8
	.space	1
	.short	0x4
	.byte	0x8
	.space	1
	.short	0x8
	.byte	0x8
	.space	1
	.short	0xc
	.byte	0x8
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_08592ED4,20
	.globl	gUnknown_08592EE8
	.align	2, 0
	.type	 gUnknown_08592EE8,object
gUnknown_08592EE8:
	.word	gUnknown_08592ED4
	.size	 gUnknown_08592EE8,4
	.globl	gBattleAnimSpriteTemplate_8592EEC
	.align	2, 0
	.type	 gBattleAnimSpriteTemplate_8592EEC,object
	.size	 gBattleAnimSpriteTemplate_8592EEC,24
gBattleAnimSpriteTemplate_8592EEC:
	.short	0x27d3
	.short	0x27d3
	.word	gUnknown_0852490C
	.word	gUnknown_08592EE8
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8102540
	.globl	gUnknown_08592F04
	.align	2, 0
	.type	 gUnknown_08592F04,object
gUnknown_08592F04:
	.short	0x0
	.byte	0x2
	.space	1
	.short	0x10
	.byte	0x2
	.space	1
	.short	0x20
	.byte	0x2
	.space	1
	.short	0x30
	.byte	0x3
	.space	1
	.short	0x40
	.byte	0x5
	.space	1
	.short	0x50
	.byte	0x3
	.space	1
	.short	0x60
	.byte	0x2
	.space	1
	.short	0x0
	.byte	0x2
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592F04,36
	.globl	gUnknown_08592F28
	.align	2, 0
	.type	 gUnknown_08592F28,object
gUnknown_08592F28:
	.word	gUnknown_08592F04
	.size	 gUnknown_08592F28,4
	.globl	gUnknown_08592F2C
	.align	2, 0
	.type	 gUnknown_08592F2C,object
	.size	 gUnknown_08592F2C,24
gUnknown_08592F2C:
	.short	0x272f
	.short	0x272f
	.word	gUnknown_08524914
	.word	gUnknown_08592F28
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_80A77C8
	.globl	gUnknown_08592F44
	.align	2, 0
	.type	 gUnknown_08592F44,object
	.size	 gUnknown_08592F44,24
gUnknown_08592F44:
	.short	0x2724
	.short	0x2724
	.word	gUnknown_08524914
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8102844
	.globl	gUnknown_08592F5C
	.align	2, 0
	.type	 gUnknown_08592F5C,object
gUnknown_08592F5C:
	.short	0x0
	.byte	0x2
	.space	1
	.short	0x10
	.byte	0x2
	.space	1
	.short	0x20
	.byte	0x2
	.space	1
	.short	0x30
	.byte	0x2
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592F5C,20
	.globl	gUnknown_08592F70
	.align	2, 0
	.type	 gUnknown_08592F70,object
gUnknown_08592F70:
	.word	gUnknown_08592F5C
	.size	 gUnknown_08592F70,4
	.globl	gUnknown_08592F74
	.align	2, 0
	.type	 gUnknown_08592F74,object
	.size	 gUnknown_08592F74,24
gUnknown_08592F74:
	.short	0x27d0
	.short	0x27d0
	.word	gUnknown_08524914
	.word	gUnknown_08592F70
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8102BCC
	.globl	gUnknown_08592F8C
	.align	2, 0
	.type	 gUnknown_08592F8C,object
gUnknown_08592F8C:
	.short	0x0
	.byte	0xa
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592F8C,8
	.globl	gUnknown_08592F94
	.align	2, 0
	.type	 gUnknown_08592F94,object
gUnknown_08592F94:
	.short	0x4
	.byte	0xa
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592F94,8
	.globl	gUnknown_08592F9C
	.align	2, 0
	.type	 gUnknown_08592F9C,object
gUnknown_08592F9C:
	.short	0x8
	.byte	0x29
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592F9C,8
	.globl	gUnknown_08592FA4
	.align	2, 0
	.type	 gUnknown_08592FA4,object
gUnknown_08592FA4:
	.short	0xc
	.byte	0xa
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592FA4,8
	.globl	gUnknown_08592FAC
	.align	2, 0
	.type	 gUnknown_08592FAC,object
gUnknown_08592FAC:
	.short	0x10
	.byte	0xa
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592FAC,8
	.globl	gUnknown_08592FB4
	.align	2, 0
	.type	 gUnknown_08592FB4,object
gUnknown_08592FB4:
	.short	0x14
	.byte	0xa
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592FB4,8
	.globl	gUnknown_08592FBC
	.align	2, 0
	.type	 gUnknown_08592FBC,object
gUnknown_08592FBC:
	.short	0x0
	.byte	0x8a
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592FBC,8
	.globl	gUnknown_08592FC4
	.align	2, 0
	.type	 gUnknown_08592FC4,object
gUnknown_08592FC4:
	.short	0x4
	.byte	0x8a
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592FC4,8
	.globl	gUnknown_08592FCC
	.align	2, 0
	.type	 gUnknown_08592FCC,object
gUnknown_08592FCC:
	.word	gUnknown_08592F8C
	.word	gUnknown_08592F94
	.word	gUnknown_08592F9C
	.word	gUnknown_08592FA4
	.word	gUnknown_08592FAC
	.word	gUnknown_08592FB4
	.word	gUnknown_08592FBC
	.word	gUnknown_08592FC4
	.size	 gUnknown_08592FCC,32
	.globl	gUnknown_08592FEC
	.align	2, 0
	.type	 gUnknown_08592FEC,object
gUnknown_08592FEC:
	.short	0xc
	.short	0xc
	.byte	0x0
	.byte	0x10
	.space	2
	.short	-0xc
	.short	-0xc
	.byte	0x0
	.byte	0x10
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gUnknown_08592FEC,24
	.globl	gUnknown_08593004
	.align	2, 0
	.type	 gUnknown_08593004,object
gUnknown_08593004:
	.word	gUnknown_08592FEC
	.size	 gUnknown_08593004,4
	.globl	gUnknown_08593008
	.align	2, 0
	.type	 gUnknown_08593008,object
	.size	 gUnknown_08593008,24
gUnknown_08593008:
	.short	0x2758
	.short	0x2758
	.word	gUnknown_085249CC
	.word	gUnknown_08592FCC
	.word	0x0
	.word	gUnknown_08593004
	.word	sub_8102CD4
	.globl	gUnknown_08593020
	.align	1, 0
	.type	 gUnknown_08593020,object
gUnknown_08593020:
	.short	0x2758
	.short	0x7fff
	.short	0x735f
	.short	0x6adf
	.short	0x623f
	.short	0x59bf
	.short	0x2771
	.short	0x7fff
	.short	0x6bf9
	.short	0x57f4
	.short	0x43ef
	.short	0x33ea
	.short	0x27c9
	.short	0x7fff
	.short	0x63ff
	.short	0x47ff
	.short	0x2bff
	.short	0xfff
	.short	0x27bf
	.short	0x7fff
	.short	0x7f9a
	.short	0x7f55
	.short	0x7f10
	.short	0x7ecc
	.size	 gUnknown_08593020,48
	.globl	gUnknown_08593050
	.align	2, 0
	.type	 gUnknown_08593050,object
	.size	 gUnknown_08593050,24
gUnknown_08593050:
	.short	0x2758
	.short	0x2758
	.word	gUnknown_085249CC
	.word	gUnknown_08592FCC
	.word	0x0
	.word	gUnknown_08593004
	.word	sub_8102EB0
	.globl	gUnknown_08593068
	.align	2, 0
	.type	 gUnknown_08593068,object
	.size	 gUnknown_08593068,24
gUnknown_08593068:
	.short	0x27d1
	.short	0x27d1
	.word	gUnknown_08524914
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8102FB8
	.globl	gUnknown_08593080
	.align	2, 0
	.type	 gUnknown_08593080,object
gUnknown_08593080:
	.short	0xa0
	.short	0xa0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x4
	.short	0x4
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gUnknown_08593080,24
	.globl	gUnknown_08593098
	.align	2, 0
	.type	 gUnknown_08593098,object
gUnknown_08593098:
	.word	gUnknown_08593080
	.size	 gUnknown_08593098,4
	.globl	gUnknown_0859309C
	.align	2, 0
	.type	 gUnknown_0859309C,object
	.size	 gUnknown_0859309C,24
gUnknown_0859309C:
	.short	0x2758
	.short	0x2758
	.word	gUnknown_085249CC
	.word	gUnknown_08592FCC
	.word	0x0
	.word	gUnknown_08593098
	.word	sub_8103028
	.globl	gUnknown_085930B4
	.align	2, 0
	.type	 gUnknown_085930B4,object
gUnknown_085930B4:
	.short	0x0
	.byte	0x42
	.space	1
	.short	0x10
	.byte	0x42
	.space	1
	.short	0x20
	.byte	0x42
	.space	1
	.short	0x30
	.byte	0x42
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085930B4,20
	.globl	gUnknown_085930C8
	.align	2, 0
	.type	 gUnknown_085930C8,object
gUnknown_085930C8:
	.short	0x30
	.byte	0x42
	.space	1
	.short	0x20
	.byte	0x42
	.space	1
	.short	0x10
	.byte	0x42
	.space	1
	.short	0x0
	.byte	0x42
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085930C8,20
	.globl	gUnknown_085930DC
	.align	2, 0
	.type	 gUnknown_085930DC,object
gUnknown_085930DC:
	.short	0x0
	.byte	0x2
	.space	1
	.short	0x10
	.byte	0x2
	.space	1
	.short	0x20
	.byte	0x2
	.space	1
	.short	0x30
	.byte	0x2
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085930DC,20
	.globl	gUnknown_085930F0
	.align	2, 0
	.type	 gUnknown_085930F0,object
gUnknown_085930F0:
	.short	0x30
	.byte	0x2
	.space	1
	.short	0x20
	.byte	0x2
	.space	1
	.short	0x10
	.byte	0x2
	.space	1
	.short	0x0
	.byte	0x2
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085930F0,20
	.globl	gUnknown_08593104
	.align	2, 0
	.type	 gUnknown_08593104,object
gUnknown_08593104:
	.word	gUnknown_085930B4
	.word	gUnknown_085930DC
	.word	gUnknown_085930C8
	.word	gUnknown_085930F0
	.size	 gUnknown_08593104,16
	.globl	gUnknown_08593114
	.align	2, 0
	.type	 gUnknown_08593114,object
	.size	 gUnknown_08593114,24
gUnknown_08593114:
	.short	0x27e1
	.short	0x27e1
	.word	gUnknown_08524914
	.word	gUnknown_08593104
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8103164
	.globl	gUnknown_0859312C
	.align	2, 0
	.type	 gUnknown_0859312C,object
gUnknown_0859312C:
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x1e
	.short	0x1e
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_0859312C,24
	.globl	gUnknown_08593144
	.align	2, 0
	.type	 gUnknown_08593144,object
gUnknown_08593144:
	.short	0x0
	.short	0x0
	.byte	0x4
	.byte	0xb
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xfc
	.byte	0xb
	.space	2
	.short	0x7ffd
	.short	0x2
	.space	4
	.short	-0x1e
	.short	-0x1e
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08593144,40
	.globl	gUnknown_08593144_2
	.align	2, 0
	.type	 gUnknown_08593144_2,object
gUnknown_08593144_2:
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x1e
	.short	0x1e
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x10
	.space	2
	.short	0x7ffd
	.short	0x0
	.space	4
	.short	0x0
	.short	0x0
	.byte	0x4
	.byte	0xb
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xfc
	.byte	0xb
	.space	2
	.short	0x7ffd
	.short	0x2
	.space	4
	.short	-0x1e
	.short	-0x1e
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08593144_2,72
	.globl	gUnknown_085931B4
	.align	2, 0
	.type	 gUnknown_085931B4,object
gUnknown_085931B4:
	.word	gUnknown_0859312C
	.word	gUnknown_08593144
	.size	 gUnknown_085931B4,8
	.globl	gUnknown_085931BC
	.align	2, 0
	.type	 gUnknown_085931BC,object
	.size	 gUnknown_085931BC,24
gUnknown_085931BC:
	.short	0x2750
	.short	0x2750
	.word	gUnknown_085249D4
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_085931B4
	.word	sub_8103208
	.globl	gUnknown_085931D4
	.align	2, 0
	.type	 gUnknown_085931D4,object
	.size	 gUnknown_085931D4,24
gUnknown_085931D4:
	.short	0x2750
	.short	0x2750
	.word	gUnknown_08524974
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_085931B4
	.word	sub_8103284
	.globl	gUnknown_085931EC
	.align	2, 0
	.type	 gUnknown_085931EC,object
gUnknown_085931EC:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085931EC,8
	.globl	gUnknown_085931F4
	.align	2, 0
	.type	 gUnknown_085931F4,object
gUnknown_085931F4:
	.short	0x0
	.byte	0x41
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085931F4,8
	.globl	gUnknown_085931FC
	.align	2, 0
	.type	 gUnknown_085931FC,object
gUnknown_085931FC:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085931FC,32
	.globl	gUnknown_0859321C
	.align	2, 0
	.type	 gUnknown_0859321C,object
gUnknown_0859321C:
	.short	0x0
	.byte	0x44
	.space	1
	.short	0x10
	.byte	0x44
	.space	1
	.short	0x20
	.byte	0x44
	.space	1
	.short	0x10
	.byte	0x44
	.space	1
	.short	0x0
	.byte	0x44
	.space	1
	.short	0x10
	.byte	0x44
	.space	1
	.short	0x20
	.byte	0x44
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0859321C,32
	.globl	gUnknown_0859323C
	.align	2, 0
	.type	 gUnknown_0859323C,object
gUnknown_0859323C:
	.word	gUnknown_085931EC
	.word	gUnknown_085931F4
	.word	gUnknown_085931FC
	.word	gUnknown_0859321C
	.size	 gUnknown_0859323C,16
	.globl	gUnknown_0859324C
	.align	2, 0
	.type	 gUnknown_0859324C,object
	.size	 gUnknown_0859324C,24
gUnknown_0859324C:
	.short	0x27e6
	.short	0x27e6
	.word	gUnknown_08524914
	.word	gUnknown_0859323C
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8103390
.text
	.align	2, 0
	.globl	AnimMovePowderParticle
	.type	 AnimMovePowderParticle,function
	.thumb_func
AnimMovePowderParticle:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L6
	ldrh	r0, [r5]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x30]
	ldr	r0, .L6+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3	@cond_branch
	ldrh	r0, [r5, #0x8]
	neg	r0, r0
	b	.L5
.L7:
	.align	2, 0
.L6:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L3:
	ldrh	r0, [r5, #0x8]
.L5:
	strh	r0, [r4, #0x34]
	ldr	r0, .L8
	ldrh	r0, [r0, #0xa]
	strh	r0, [r4, #0x36]
	ldr	r0, .L8+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	gBattleAnimArgs
	.word	AnimMovePowderParticleStep
.Lfe1:
	.size	 AnimMovePowderParticle,.Lfe1-AnimMovePowderParticle
	.align	2, 0
	.type	 AnimMovePowderParticleStep,function
	.thumb_func
AnimMovePowderParticleStep:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L11	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x32]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r1, r1, r0
	strh	r1, [r4, #0x32]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r2, #0x34
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x38]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	b	.L12
.L11:
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L12:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 AnimMovePowderParticleStep,.Lfe2-AnimMovePowderParticleStep
	.align	2, 0
	.globl	AnimPowerAbsorptionOrb
	.type	 AnimPowerAbsorptionOrb,function
	.thumb_func
AnimPowerAbsorptionOrb:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L14
	ldrh	r0, [r0, #0x4]
	strh	r0, [r4, #0x2e]
	ldr	r5, .L14+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	ldr	r0, .L14+0x8
	str	r0, [r4, #0x1c]
	ldr	r1, .L14+0xc
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	StartAnimLinearTranslation
	.word	DestroySpriteAndMatrix
.Lfe3:
	.size	 AnimPowerAbsorptionOrb,.Lfe3-AnimPowerAbsorptionOrb
	.align	2, 0
	.globl	AnimSolarbeamBigOrb
	.type	 AnimSolarbeamBigOrb,function
	.thumb_func
AnimSolarbeamBigOrb:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r5, .L17
	ldrb	r1, [r5, #0x6]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x2e]
	ldr	r5, .L17+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	ldr	r0, .L17+0x8
	str	r0, [r4, #0x1c]
	ldr	r1, .L17+0xc
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L18:
	.align	2, 0
.L17:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe4:
	.size	 AnimSolarbeamBigOrb,.Lfe4-AnimSolarbeamBigOrb
	.align	2, 0
	.globl	AnimSolarbeamSmallOrb
	.type	 AnimSolarbeamSmallOrb,function
	.thumb_func
AnimSolarbeamSmallOrb:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r6, .L20
	ldrh	r0, [r6, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldr	r5, .L20+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	ldrh	r0, [r6, #0x6]
	strh	r0, [r4, #0x38]
	ldr	r1, .L20+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L21:
	.align	2, 0
.L20:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	AnimSolarbeamSmallOrbStep
.Lfe5:
	.size	 AnimSolarbeamSmallOrb,.Lfe5-AnimSolarbeamSmallOrb
	.align	2, 0
	.type	 AnimSolarbeamSmallOrbStep,function
	.thumb_func
AnimSolarbeamSmallOrbStep:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L23	@cond_branch
	add	r0, r4, #0
	bl	DestroySprite
	b	.L24
.L23:
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7f
	ble	.L25	@cond_branch
	ldr	r0, .L28
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	add	r0, r0, #0x1
	b	.L27
.L29:
	.align	2, 0
.L28:
	.word	gBattleAnimTarget
.L25:
	ldr	r0, .L30
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	add	r0, r0, #0x6
.L27:
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x5
	bl	Sin
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0xe
	bl	Cos
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0xf
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
.L24:
	pop	{r4}
	pop	{r0}
	bx	r0
.L31:
	.align	2, 0
.L30:
	.word	gBattleAnimTarget
.Lfe6:
	.size	 AnimSolarbeamSmallOrbStep,.Lfe6-AnimSolarbeamSmallOrbStep
	.align	2, 0
	.globl	AnimTask_CreateSmallSolarbeamOrbs
	.type	 AnimTask_CreateSmallSolarbeamOrbs,function
	.thumb_func
AnimTask_CreateSmallSolarbeamOrbs:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	ldr	r1, .L35
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r0, [r5, #0x8]
	sub	r0, r0, #0x1
	mov	r2, #0x0
	strh	r0, [r5, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L33	@cond_branch
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	mov	r0, #0x6
	strh	r0, [r5, #0x8]
	ldr	r1, .L35+0x4
	mov	r0, #0xf
	strh	r0, [r1]
	strh	r2, [r1, #0x2]
	mov	r0, #0x50
	strh	r0, [r1, #0x4]
	strh	r2, [r1, #0x6]
	ldr	r4, .L35+0x8
	ldr	r0, .L35+0xc
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	add	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	CreateSpriteAndAnimate
.L33:
	mov	r1, #0xa
	ldrsh	r0, [r5, r1]
	cmp	r0, #0xf
	bne	.L34	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L34:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L36:
	.align	2, 0
.L35:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gSolarbeamSmallOrbSpriteTemplate
	.word	gBattleAnimTarget
.Lfe7:
	.size	 AnimTask_CreateSmallSolarbeamOrbs,.Lfe7-AnimTask_CreateSmallSolarbeamOrbs
	.align	2, 0
	.globl	AnimAbsorptionOrb
	.type	 AnimAbsorptionOrb,function
	.thumb_func
AnimAbsorptionOrb:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
	ldr	r6, .L38
	ldrh	r0, [r6, #0x6]
	strh	r0, [r4, #0x2e]
	ldr	r5, .L38+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	ldrh	r0, [r6, #0x4]
	strh	r0, [r4, #0x38]
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldr	r0, .L38+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L39:
	.align	2, 0
.L38:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	AnimAbsorptionOrbStep
.Lfe8:
	.size	 AnimAbsorptionOrb,.Lfe8-AnimAbsorptionOrb
	.align	2, 0
	.type	 AnimAbsorptionOrbStep,function
	.thumb_func
AnimAbsorptionOrbStep:
	push	{r4, lr}
	add	r4, r0, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L41	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L41:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 AnimAbsorptionOrbStep,.Lfe9-AnimAbsorptionOrbStep
	.align	2, 0
	.globl	AnimHyperBeamOrb
	.type	 AnimHyperBeamOrb,function
	.thumb_func
AnimHyperBeamOrb:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	Random2
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x7
	and	r1, r1, r0
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r4, .L46
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L43	@cond_branch
	ldrh	r0, [r5, #0x20]
	sub	r0, r0, #0x14
	b	.L45
.L47:
	.align	2, 0
.L46:
	.word	gBattleAnimAttacker
.L43:
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x14
.L45:
	strh	r0, [r5, #0x20]
	bl	Random2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1f
	and	r0, r0, r1
	add	r0, r0, #0x40
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r5, #0x20]
	strh	r0, [r5, #0x30]
	ldr	r4, .L48
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x22]
	strh	r0, [r5, #0x34]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	add	r0, r5, #0
	bl	InitAnimFastLinearTranslationWithSpeed
	bl	Random2
	mov	r1, #0xff
	and	r1, r1, r0
	strh	r1, [r5, #0x38]
	add	r0, r5, #0
	add	r0, r0, #0x43
	ldrb	r0, [r0]
	strh	r0, [r5, #0x3a]
	ldr	r1, .L48+0x4
	str	r1, [r5, #0x1c]
	add	r0, r5, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L49:
	.align	2, 0
.L48:
	.word	gBattleAnimTarget
	.word	AnimHyperBeamOrbStep
.Lfe10:
	.size	 AnimHyperBeamOrb,.Lfe10-AnimHyperBeamOrb
	.align	2, 0
	.type	 AnimHyperBeamOrbStep,function
	.thumb_func
AnimHyperBeamOrbStep:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimFastTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L51	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
	b	.L52
.L51:
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0xc
	bl	Cos
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7e
	bgt	.L53	@cond_branch
	ldrh	r0, [r4, #0x3a]
	b	.L55
.L53:
	ldrh	r0, [r4, #0x3a]
	add	r0, r0, #0x1
.L55:
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x18
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
.L52:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 AnimHyperBeamOrbStep,.Lfe11-AnimHyperBeamOrbStep
	.align	2, 0
	.globl	AnimLeechSeed
	.type	 AnimLeechSeed,function
	.thumb_func
AnimLeechSeed:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L58
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L57	@cond_branch
	ldr	r1, .L58+0x4
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L57:
	ldr	r4, .L58+0x4
	ldrh	r0, [r4, #0x8]
	strh	r0, [r6, #0x2e]
	ldr	r5, .L58+0x8
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x4]
	add	r0, r0, r1
	strh	r0, [r6, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x6]
	add	r0, r0, r1
	strh	r0, [r6, #0x36]
	ldrh	r0, [r4, #0xa]
	strh	r0, [r6, #0x38]
	add	r0, r6, #0
	bl	InitAnimArcTranslation
	ldr	r0, .L58+0xc
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	AnimLeechSeedStep
.Lfe12:
	.size	 AnimLeechSeed,.Lfe12-AnimLeechSeed
	.align	2, 0
	.type	 AnimLeechSeedStep,function
	.thumb_func
AnimLeechSeedStep:
	push	{r4, lr}
	add	r4, r0, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L61	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	ldr	r0, .L62
	str	r0, [r4, #0x1c]
	ldr	r1, .L62+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
.L61:
	pop	{r4}
	pop	{r0}
	bx	r0
.L63:
	.align	2, 0
.L62:
	.word	WaitAnimForDuration
	.word	AnimLeechSeedSprouts
.Lfe13:
	.size	 AnimLeechSeedStep,.Lfe13-AnimLeechSeedStep
	.align	2, 0
	.type	 AnimLeechSeedSprouts,function
	.thumb_func
AnimLeechSeedSprouts:
	push	{r4, lr}
	add	r4, r0, #0
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	mov	r0, #0x3c
	strh	r0, [r4, #0x2e]
	ldr	r0, .L65
	str	r0, [r4, #0x1c]
	ldr	r1, .L65+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4}
	pop	{r0}
	bx	r0
.L66:
	.align	2, 0
.L65:
	.word	WaitAnimForDuration
	.word	DestroyAnimSprite
.Lfe14:
	.size	 AnimLeechSeedSprouts,.Lfe14-AnimLeechSeedSprouts
	.align	2, 0
	.globl	AnimSporeParticle
	.type	 AnimSporeParticle,function
	.thumb_func
AnimSporeParticle:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
	ldr	r5, .L69
	ldrb	r1, [r5, #0x8]
	add	r0, r4, #0
	bl	StartSpriteAnim
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	bne	.L68	@cond_branch
	ldrb	r0, [r4, #0x1]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x4
	orr	r1, r1, r0
	strb	r1, [r4, #0x1]
.L68:
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x30]
	ldr	r1, .L69+0x4
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L70:
	.align	2, 0
.L69:
	.word	gBattleAnimArgs
	.word	AnimSporeParticleStep
.Lfe15:
	.size	 AnimSporeParticle,.Lfe15-AnimSporeParticle
	.align	2, 0
	.type	 AnimSporeParticleStep,function
	.thumb_func
AnimSporeParticleStep:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x20
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x3
	neg	r1, r1
	bl	Cos
	ldrh	r1, [r4, #0x32]
	add	r1, r1, #0x18
	strh	r1, [r4, #0x32]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x40
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x7f
	bhi	.L72	@cond_branch
	ldr	r0, .L77
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	b	.L76
.L78:
	.align	2, 0
.L77:
	.word	gBattleAnimTarget
.L72:
	ldr	r0, .L79
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L74	@cond_branch
	mov	r2, #0x3
.L74:
	mov	r0, #0x3
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r1, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	orr	r0, r0, r2
.L76:
	strb	r0, [r4, #0x5]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x2
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L75	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L75:
	pop	{r4}
	pop	{r0}
	bx	r0
.L80:
	.align	2, 0
.L79:
	.word	gBattleAnimTarget
.Lfe16:
	.size	 AnimSporeParticleStep,.Lfe16-AnimSporeParticleStep
	.align	2, 0
	.globl	AnimTask_SporeDoubleBattle
	.type	 AnimTask_SporeDoubleBattle,function
	.thumb_func
AnimTask_SporeDoubleBattle:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L83	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L82	@cond_branch
.L83:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L84
.L82:
	ldr	r0, .L87
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L85	@cond_branch
	mov	r0, #0x2
	mov	r1, #0x4
	mov	r2, #0x3
	bl	SetAnimBgAttribute
	b	.L86
.L88:
	.align	2, 0
.L87:
	.word	gBattleAnimTarget
.L85:
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
.L86:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L84:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 AnimTask_SporeDoubleBattle,.Lfe17-AnimTask_SporeDoubleBattle
	.align	2, 0
	.globl	AnimPetalDanceBigFlower
	.type	 AnimPetalDanceBigFlower,function
	.thumb_func
AnimPetalDanceBigFlower:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	ldr	r5, .L90
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	ldr	r0, .L90+0x4
	ldrb	r0, [r0]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r5, [r5, #0x4]
	add	r0, r0, r5
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	mov	r0, #0x40
	strh	r0, [r4, #0x38]
	ldr	r1, .L90+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L91:
	.align	2, 0
.L90:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	AnimPetalDanceBigFlowerStep
.Lfe18:
	.size	 AnimPetalDanceBigFlower,.Lfe18-AnimPetalDanceBigFlower
	.align	2, 0
	.type	 AnimPetalDanceBigFlowerStep,function
	.thumb_func
AnimPetalDanceBigFlowerStep:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L93	@cond_branch
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x20
	bl	Sin
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x5
	neg	r1, r1
	bl	Cos
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x38]
	sub	r0, r0, #0x40
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x7f
	bhi	.L94	@cond_branch
	ldr	r0, .L98
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	sub	r0, r0, #0x1
	b	.L97
.L99:
	.align	2, 0
.L98:
	.word	gBattleAnimAttacker
.L94:
	ldr	r0, .L100
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	add	r0, r0, #0x1
.L97:
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x5
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	b	.L96
.L101:
	.align	2, 0
.L100:
	.word	gBattleAnimAttacker
.L93:
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L96:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 AnimPetalDanceBigFlowerStep,.Lfe19-AnimPetalDanceBigFlowerStep
	.align	2, 0
	.globl	AnimPetalDanceSmallFlower
	.type	 AnimPetalDanceSmallFlower,function
	.thumb_func
AnimPetalDanceSmallFlower:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r5, .L103
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	ldr	r0, .L103+0x4
	ldrb	r0, [r0]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r5, [r5, #0x4]
	add	r0, r0, r5
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	mov	r0, #0x40
	strh	r0, [r4, #0x38]
	ldr	r1, .L103+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L104:
	.align	2, 0
.L103:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	AnimPetalDanceSmallFlowerStep
.Lfe20:
	.size	 AnimPetalDanceSmallFlower,.Lfe20-AnimPetalDanceSmallFlower
	.align	2, 0
	.type	 AnimPetalDanceSmallFlowerStep,function
	.thumb_func
AnimPetalDanceSmallFlowerStep:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L106	@cond_branch
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x8
	bl	Sin
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x38]
	add	r0, r1, #0
	sub	r0, r0, #0x3b
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x4
	bls	.L108	@cond_branch
	add	r0, r1, #0
	sub	r0, r0, #0xbb
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x4
	bhi	.L107	@cond_branch
.L108:
	ldrb	r2, [r4, #0x3]
	lsl	r1, r2, #0x1a
	lsr	r1, r1, #0x1b
	mov	r0, #0x8
	eor	r1, r1, r0
	lsl	r1, r1, #0x1
	sub	r0, r0, #0x47
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4, #0x3]
.L107:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x5
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	b	.L109
.L106:
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L109:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 AnimPetalDanceSmallFlowerStep,.Lfe21-AnimPetalDanceSmallFlowerStep
	.align	2, 0
	.globl	AnimRazorLeafParticle
	.type	 AnimRazorLeafParticle,function
	.thumb_func
AnimRazorLeafParticle:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L111
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	ldr	r1, .L111+0x4
	ldrh	r0, [r1]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x32]
	ldr	r0, .L111+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L112:
	.align	2, 0
.L111:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimRazorLeafParticleStep1
.Lfe22:
	.size	 AnimRazorLeafParticle,.Lfe22-AnimRazorLeafParticle
	.align	2, 0
	.type	 AnimRazorLeafParticleStep1,function
	.thumb_func
AnimRazorLeafParticleStep1:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x32]
	mov	r2, #0x32
	ldrsh	r3, [r1, r2]
	cmp	r3, #0
	bne	.L114	@cond_branch
	ldrh	r0, [r1, #0x30]
	mov	r2, #0x1
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L115	@cond_branch
	mov	r0, #0x80
	strh	r0, [r1, #0x2e]
	strh	r3, [r1, #0x30]
	strh	r3, [r1, #0x32]
	b	.L116
.L115:
	strh	r2, [r1, #0x2e]
	strh	r2, [r1, #0x30]
	strh	r2, [r1, #0x32]
.L116:
	ldr	r0, .L118
	str	r0, [r1, #0x1c]
	b	.L117
.L119:
	.align	2, 0
.L118:
	.word	AnimRazorLeafParticleStep2
.L114:
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x32]
	ldrh	r0, [r1, #0x2e]
	ldrh	r2, [r1, #0x20]
	add	r0, r0, r2
	strh	r0, [r1, #0x20]
	ldrh	r0, [r1, #0x30]
	ldrh	r2, [r1, #0x22]
	add	r0, r0, r2
	strh	r0, [r1, #0x22]
.L117:
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 AnimRazorLeafParticleStep1,.Lfe23-AnimRazorLeafParticleStep1
	.align	2, 0
	.type	 AnimRazorLeafParticleStep2,function
	.thumb_func
AnimRazorLeafParticleStep2:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L126
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L121	@cond_branch
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x19
	bl	Sin
	neg	r0, r0
	b	.L125
.L127:
	.align	2, 0
.L126:
	.word	gBattleAnimAttacker
.L121:
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x19
	bl	Sin
.L125:
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x2
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L123	@cond_branch
	ldrh	r0, [r4, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x26]
.L123:
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x50
	ble	.L124	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L124:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 AnimRazorLeafParticleStep2,.Lfe24-AnimRazorLeafParticleStep2
	.align	2, 0
	.globl	AnimTranslateLinearSingleSineWave
	.type	 AnimTranslateLinearSingleSineWave,function
	.thumb_func
AnimTranslateLinearSingleSineWave:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L136
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L129	@cond_branch
	ldr	r1, .L136+0x4
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L129:
	ldr	r6, .L136+0x4
	ldrh	r0, [r6, #0x8]
	strh	r0, [r5, #0x2e]
	mov	r1, #0xc
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L130	@cond_branch
	ldr	r4, .L136+0x8
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x4]
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x6]
	add	r0, r0, r6
	b	.L134
.L137:
	.align	2, 0
.L136:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
.L130:
	ldr	r0, .L138
	ldrb	r0, [r0]
	add	r2, r5, #0
	add	r2, r2, #0x32
	add	r3, r5, #0
	add	r3, r3, #0x36
	mov	r1, #0x1
	bl	SetAverageBattlerPositions
	ldrh	r0, [r6, #0x4]
	ldrh	r1, [r5, #0x32]
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	ldrh	r0, [r6, #0x6]
	ldrh	r1, [r5, #0x36]
	add	r0, r0, r1
.L134:
	strh	r0, [r5, #0x36]
	ldr	r0, .L138+0x4
	ldrh	r0, [r0, #0xa]
	strh	r0, [r5, #0x38]
	add	r0, r5, #0
	bl	InitAnimArcTranslation
	ldr	r0, .L138+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	add	r4, r0, #0
	ldr	r0, .L138
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.L132	@cond_branch
	mov	r0, #0x1
	b	.L135
.L139:
	.align	2, 0
.L138:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L132:
	mov	r0, #0x0
.L135:
	strh	r0, [r5, #0x2e]
	ldr	r0, .L140
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L141:
	.align	2, 0
.L140:
	.word	AnimTranslateLinearSingleSineWaveStep
.Lfe25:
	.size	 AnimTranslateLinearSingleSineWave,.Lfe25-AnimTranslateLinearSingleSineWave
	.align	2, 0
	.type	 AnimTranslateLinearSingleSineWaveStep,function
	.thumb_func
AnimTranslateLinearSingleSineWaveStep:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	mov	r7, #0x0
	ldrh	r5, [r6, #0x2e]
	ldrh	r4, [r6, #0x3c]
	mov	r0, #0x1
	strh	r0, [r6, #0x2e]
	add	r0, r6, #0
	bl	TranslateAnimHorizontalArc
	ldrh	r0, [r6, #0x3c]
	strh	r5, [r6, #0x2e]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	cmp	r4, #0xc8
	ble	.L143	@cond_branch
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x37
	bgt	.L143	@cond_branch
	ldrh	r0, [r6, #0x6]
	cmp	r0, #0
	bne	.L149	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r6, #0x6]
.L143:
	ldrh	r0, [r6, #0x6]
	cmp	r0, #0
	beq	.L144	@cond_branch
.L149:
	mov	r1, #0x2e
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	beq	.L144	@cond_branch
	add	r3, r6, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	ldrh	r0, [r6, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x6]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1e
	bne	.L144	@cond_branch
	mov	r7, #0x1
.L144:
	mov	r2, #0x20
	ldrsh	r0, [r6, r2]
	mov	r2, #0x24
	ldrsh	r1, [r6, r2]
	add	r0, r0, r1
	add	r0, r0, #0x10
	mov	r1, #0x88
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bhi	.L147	@cond_branch
	mov	r0, #0x22
	ldrsh	r1, [r6, r0]
	mov	r2, #0x26
	ldrsh	r0, [r6, r2]
	add	r1, r1, r0
	cmp	r1, #0xa0
	bgt	.L147	@cond_branch
	mov	r0, #0x10
	neg	r0, r0
	cmp	r1, r0
	bge	.L146	@cond_branch
.L147:
	mov	r7, #0x1
.L146:
	cmp	r7, #0
	beq	.L148	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimSprite
.L148:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 AnimTranslateLinearSingleSineWaveStep,.Lfe26-AnimTranslateLinearSingleSineWaveStep
	.align	2, 0
	.globl	AnimMoveTwisterParticle
	.type	 AnimMoveTwisterParticle,function
	.thumb_func
AnimMoveTwisterParticle:
	push	{r4, lr}
	add	r4, r0, #0
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L151	@cond_branch
	ldr	r0, .L152
	ldrb	r0, [r0]
	add	r2, r4, #0
	add	r2, r2, #0x20
	add	r3, r4, #0
	add	r3, r3, #0x22
	mov	r1, #0x1
	bl	SetAverageBattlerPositions
.L151:
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x20
	strh	r0, [r4, #0x22]
	ldr	r1, .L152+0x4
	ldrh	r0, [r1]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x36]
	ldr	r0, .L152+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L153:
	.align	2, 0
.L152:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	AnimMoveTwisterParticleStep
.Lfe27:
	.size	 AnimMoveTwisterParticle,.Lfe27-AnimMoveTwisterParticle
	.align	2, 0
	.type	 AnimMoveTwisterParticleStep,function
	.thumb_func
AnimMoveTwisterParticleStep:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xff
	bne	.L155	@cond_branch
	ldrh	r0, [r4, #0x22]
	sub	r0, r0, #0x2
	strh	r0, [r4, #0x22]
	b	.L156
.L155:
	cmp	r0, #0
	ble	.L156	@cond_branch
	ldrh	r0, [r4, #0x22]
	sub	r0, r0, #0x2
	strh	r0, [r4, #0x22]
	sub	r0, r1, #0x2
	strh	r0, [r4, #0x30]
.L156:
	ldrh	r3, [r4, #0x32]
	ldrh	r5, [r4, #0x38]
	add	r2, r3, r5
	strh	r2, [r4, #0x38]
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	mov	r5, #0x36
	ldrsh	r0, [r4, r5]
	cmp	r1, r0
	bge	.L158	@cond_branch
	add	r0, r2, r3
	strh	r0, [r4, #0x38]
.L158:
	ldrh	r1, [r4, #0x38]
	mov	r0, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r2, #0x34
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r5, #0x38
	ldrsh	r0, [r4, r5]
	mov	r1, #0x5
	bl	Sin
	strh	r0, [r4, #0x26]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7f
	bgt	.L159	@cond_branch
	ldr	r0, .L163
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x1
	b	.L162
.L164:
	.align	2, 0
.L163:
	.word	gBattleAnimTarget
.L159:
	ldr	r0, .L165
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1
.L162:
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0x5]
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L161	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L161:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L166:
	.align	2, 0
.L165:
	.word	gBattleAnimTarget
.Lfe28:
	.size	 AnimMoveTwisterParticleStep,.Lfe28-AnimMoveTwisterParticleStep
	.align	2, 0
	.globl	AnimConstrictBinding
	.type	 AnimConstrictBinding,function
	.thumb_func
AnimConstrictBinding:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
	add	r2, r5, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r4, .L168
	ldrb	r1, [r4, #0x4]
	add	r0, r5, #0
	bl	StartSpriteAffineAnim
	ldrh	r0, [r4, #0x4]
	strh	r0, [r5, #0x3a]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r5, #0x3c]
	ldr	r0, .L168+0x4
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L169:
	.align	2, 0
.L168:
	.word	gBattleAnimArgs
	.word	AnimConstrictBindingStep1
.Lfe29:
	.size	 AnimConstrictBinding,.Lfe29-AnimConstrictBinding
	.align	2, 0
	.type	 AnimConstrictBindingStep1,function
	.thumb_func
AnimConstrictBindingStep1:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L172
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L172+0x4
	cmp	r1, r0
	bne	.L171	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	ldr	r0, .L172+0x8
	str	r0, [r4, #0x1c]
.L171:
	pop	{r4}
	pop	{r0}
	bx	r0
.L173:
	.align	2, 0
.L172:
	.word	gBattleAnimArgs
	.word	0xffff
	.word	AnimConstrictBindingStep2
.Lfe30:
	.size	 AnimConstrictBindingStep1,.Lfe30-AnimConstrictBindingStep1
	.align	2, 0
	.type	 AnimConstrictBindingStep2,function
	.thumb_func
AnimConstrictBindingStep2:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L175	@cond_branch
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0xb
	b	.L181
.L175:
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0xb
.L181:
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	bne	.L177	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x32]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r4, #0x32]
.L177:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L178	@cond_branch
	ldrh	r0, [r4, #0x3c]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L179	@cond_branch
	ldrh	r1, [r4, #0x3a]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	StartSpriteAffineAnim
	b	.L178
.L179:
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L178:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 AnimConstrictBindingStep2,.Lfe31-AnimConstrictBindingStep2
	.align	2, 0
	.globl	sub_80FF458
	.type	 sub_80FF458,function
	.thumb_func
sub_80FF458:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r0, .L185
	mov	sl, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r2, sl
	add	r7, r0, r2
	add	r0, r7, #0
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L183	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L184
.L186:
	.align	2, 0
.L185:
	.word	gSprites
.L183:
	add	r0, r1, #0
	mov	r1, #0x1
	bl	PrepareBattlerSpriteForRotScale
	ldr	r0, .L187
	lsl	r6, r4, #0x2
	add	r6, r6, r4
	lsl	r6, r6, #0x3
	add	r6, r6, r0
	ldrb	r0, [r7, #0x5]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1e
	strh	r0, [r6, #0x24]
	ldr	r0, .L187+0x4
	mov	r9, r0
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	mov	r8, r1
	mov	r1, r8
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r7, #0x5]
	mov	r5, #0xd
	neg	r5, r5
	add	r0, r5, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r7, #0x5]
	mov	r0, #0x3
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	lsl	r4, r1, #0x4
	add	r4, r4, r1
	lsl	r4, r4, #0x2
	add	r4, r4, sl
	ldrb	r0, [r4, #0x5]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1e
	strh	r0, [r6, #0x26]
	mov	r2, r9
	ldrb	r1, [r2]
	mov	r0, #0x2
	eor	r0, r0, r1
	bl	GetBattlerSpriteBGPriority
	mov	r1, r8
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r0, [r4, #0x5]
	and	r5, r5, r0
	orr	r5, r5, r1
	strb	r5, [r4, #0x5]
	ldr	r1, .L187+0x8
	ldrh	r0, [r1]
	strh	r0, [r6, #0x8]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r6, #0xa]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r6, #0x1e]
	ldr	r0, .L187+0xc
	str	r0, [r6]
.L184:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L188:
	.align	2, 0
.L187:
	.word	gTasks
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	sub_80FF53C
.Lfe32:
	.size	 sub_80FF458,.Lfe32-sub_80FF458
	.align	2, 0
	.type	 sub_80FF53C,function
	.thumb_func
sub_80FF53C:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	ldr	r1, .L192
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r1, [r4, #0x8]
	ldrh	r0, [r4, #0x1c]
	add	r1, r1, r0
	strh	r1, [r4, #0x1c]
	ldr	r2, .L192+0x4
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r5, r0, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r5, #0x24]
	ldr	r0, .L192+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L190	@cond_branch
	ldrh	r0, [r5, #0x24]
	neg	r0, r0
	strh	r0, [r5, #0x24]
.L190:
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x10
	strh	r0, [r4, #0x1e]
	mov	r0, #0x1e
	ldrsh	r2, [r4, r0]
	add	r0, r6, #0
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	add	r0, r6, #0
	bl	SetBattlerSpriteYOffsetFromYScale
	ldrh	r0, [r4, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L191	@cond_branch
	strh	r0, [r4, #0x8]
	ldr	r0, .L192+0xc
	str	r0, [r4]
.L191:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L193:
	.align	2, 0
.L192:
	.word	gTasks
	.word	gSprites
	.word	gBattleAnimTarget
	.word	sub_80FF5CC
.Lfe33:
	.size	 sub_80FF53C,.Lfe33-sub_80FF53C
	.align	2, 0
	.type	 sub_80FF5CC,function
	.thumb_func
sub_80FF5CC:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L200
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L200+0x4
	cmp	r1, r0
	bne	.L195	@cond_branch
	ldr	r0, .L200+0x8
	lsl	r2, r3, #0x2
	add	r1, r2, r3
	lsl	r1, r1, #0x3
	add	r7, r1, r0
	mov	r1, #0x8
	ldrsh	r5, [r7, r1]
	add	r4, r0, #0
	cmp	r5, #0
	bne	.L197	@cond_branch
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	ResetSpriteRotScale
	ldr	r6, .L200+0xc
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	strh	r5, [r1, #0x24]
	strh	r5, [r1, #0x26]
	mov	r5, #0x3
	ldrh	r2, [r7, #0x24]
	and	r2, r2, r5
	lsl	r2, r2, #0x2
	ldrb	r3, [r1, #0x5]
	mov	r4, #0xd
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	mov	r0, #0x3
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrh	r0, [r7, #0x26]
	and	r0, r0, r5
	lsl	r0, r0, #0x2
	ldrb	r2, [r1, #0x5]
	and	r4, r4, r2
	orr	r4, r4, r0
	strb	r4, [r1, #0x5]
	ldrh	r0, [r7, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r7, #0x8]
	b	.L194
.L201:
	.align	2, 0
.L200:
	.word	gBattleAnimArgs
	.word	0xffff
	.word	gTasks
	.word	gSprites
.L195:
	ldr	r1, .L202
	lsl	r2, r3, #0x2
	add	r0, r2, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r4, #0x8
	ldrsh	r0, [r0, r4]
	add	r4, r1, #0
	cmp	r0, #0
	beq	.L194	@cond_branch
.L197:
	add	r1, r2, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	bne	.L194	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimVisualTask
.L194:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L203:
	.align	2, 0
.L202:
	.word	gTasks
.Lfe34:
	.size	 sub_80FF5CC,.Lfe34-sub_80FF5CC
	.align	2, 0
	.globl	AnimMimicOrb
	.type	 AnimMimicOrb,function
	.thumb_func
AnimMimicOrb:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L206	@cond_branch
	cmp	r0, #0x1
	beq	.L208	@cond_branch
	b	.L205
.L206:
	ldr	r6, .L212
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L207	@cond_branch
	ldr	r1, .L212+0x4
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	neg	r0, r0
	strh	r0, [r1]
.L207:
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L212+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r4]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r6]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r4, [r4, #0x2]
	add	r0, r0, r4
	strh	r0, [r5, #0x22]
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	b	.L205
.L213:
	.align	2, 0
.L212:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L208:
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r0, r5, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L205	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	ChangeSpriteAffineAnim
	mov	r0, #0x19
	strh	r0, [r5, #0x2e]
	ldr	r4, .L214
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	ldr	r0, .L214+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L214+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
.L205:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L215:
	.align	2, 0
.L214:
	.word	gBattleAnimAttacker
	.word	InitAndRunAnimFastLinearTranslation
	.word	DestroyAnimSprite
.Lfe35:
	.size	 AnimMimicOrb,.Lfe35-AnimMimicOrb
	.align	2, 0
	.globl	AnimIngrainRoot
	.type	 AnimIngrainRoot,function
	.thumb_func
AnimIngrainRoot:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L217	@cond_branch
	ldr	r4, .L219
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r4, .L219+0x4
	ldrh	r0, [r4]
	strh	r0, [r5, #0x24]
	ldrh	r0, [r4, #0x2]
	strh	r0, [r5, #0x26]
	ldrb	r0, [r4, #0x4]
	add	r0, r0, #0x1e
	add	r1, r5, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrb	r1, [r4, #0x6]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	mov	r2, #0x22
	ldrsh	r0, [r5, r2]
	mov	r2, #0x26
	ldrsh	r1, [r5, r2]
	add	r0, r0, r1
	cmp	r0, #0x78
	ble	.L217	@cond_branch
	ldrh	r0, [r5, #0x22]
	add	r1, r0, #0
	sub	r1, r1, #0x78
	ldrh	r2, [r5, #0x26]
	add	r0, r0, r2
	add	r1, r1, r0
	strh	r1, [r5, #0x22]
.L217:
	ldr	r0, .L219+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L220:
	.align	2, 0
.L219:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimRootFlickerOut
.Lfe36:
	.size	 AnimIngrainRoot,.Lfe36-AnimIngrainRoot
	.align	2, 0
	.globl	AnimFrenzyPlantRoot
	.type	 AnimFrenzyPlantRoot,function
	.thumb_func
AnimFrenzyPlantRoot:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #-0x4
	mov	r9, r0
	ldr	r4, .L222
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	mov	r8, r0
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r6, .L222+0x4
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	sub	r4, r4, r5
	lsl	r4, r4, #0x10
	lsr	r2, r2, #0x18
	mov	r1, r8
	sub	r2, r2, r1
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsr	r3, r4, #0x10
	mov	sl, r3
	asr	r4, r4, #0x10
	ldr	r6, .L222+0x8
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	mul	r0, r0, r4
	mov	r1, #0x64
	str	r2, [sp]
	bl	__divsi3
	add	r5, r5, r0
	mov	r3, r9
	strh	r5, [r3, #0x20]
	ldr	r2, [sp]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x0
	ldrsh	r1, [r6, r3]
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	add	r8, r8, r0
	mov	r1, r8
	mov	r0, r9
	strh	r1, [r0, #0x22]
	ldrh	r0, [r6, #0x2]
	mov	r3, r9
	strh	r0, [r3, #0x24]
	ldrh	r0, [r6, #0x4]
	strh	r0, [r3, #0x26]
	ldrb	r0, [r6, #0x6]
	add	r0, r0, #0x1e
	mov	r1, r9
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrb	r1, [r6, #0x8]
	mov	r0, r9
	bl	StartSpriteAnim
	ldrh	r0, [r6, #0xa]
	mov	r1, r9
	strh	r0, [r1, #0x32]
	ldr	r0, .L222+0xc
	str	r0, [r1, #0x1c]
	ldr	r1, .L222+0x10
	mov	r3, r9
	ldrh	r0, [r3, #0x20]
	strh	r0, [r1]
	ldrh	r0, [r3, #0x22]
	strh	r0, [r1, #0x2]
	mov	r0, sl
	strh	r0, [r1, #0x4]
	ldr	r2, [sp]
	strh	r2, [r1, #0x6]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L223:
	.align	2, 0
.L222:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	AnimRootFlickerOut
	.word	gUnknown_0203A0F8
.Lfe37:
	.size	 AnimFrenzyPlantRoot,.Lfe37-AnimFrenzyPlantRoot
	.align	2, 0
	.type	 AnimRootFlickerOut,function
	.thumb_func
AnimRootFlickerOut:
	push	{lr}
	add	r3, r0, #0
	ldrh	r1, [r3, #0x2e]
	add	r1, r1, #0x1
	strh	r1, [r3, #0x2e]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r2, #0x32
	ldrsh	r0, [r3, r2]
	sub	r0, r0, #0xa
	cmp	r1, r0
	ble	.L225	@cond_branch
	mov	r0, #0x2e
	ldrsh	r1, [r3, r0]
	lsr	r0, r1, #0x1f
	add	r0, r1, r0
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x1
	sub	r1, r1, r0
	mov	r2, #0x3e
	add	r2, r2, r3
	mov	ip, r2
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
.L225:
	mov	r2, #0x2e
	ldrsh	r1, [r3, r2]
	mov	r2, #0x32
	ldrsh	r0, [r3, r2]
	cmp	r1, r0
	ble	.L226	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimSprite
.L226:
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 AnimRootFlickerOut,.Lfe38-AnimRootFlickerOut
	.align	2, 0
	.globl	AnimIngrainOrb
	.type	 AnimIngrainOrb,function
	.thumb_func
AnimIngrainOrb:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L228	@cond_branch
	ldr	r5, .L230
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L230+0x4
	lsr	r0, r0, #0x18
	ldrh	r2, [r4]
	add	r0, r0, r2
	strh	r0, [r6, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	strh	r0, [r6, #0x22]
	ldrh	r0, [r4, #0x4]
	strh	r0, [r6, #0x30]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r6, #0x32]
	ldrh	r0, [r4, #0x8]
	strh	r0, [r6, #0x34]
.L228:
	ldrh	r0, [r6, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x2e]
	ldrh	r1, [r6, #0x30]
	mul	r0, r0, r1
	strh	r0, [r6, #0x24]
	mov	r2, #0x2e
	ldrsh	r1, [r6, r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, #0xff
	and	r0, r0, r1
	mov	r2, #0x32
	ldrsh	r1, [r6, r2]
	bl	Sin
	strh	r0, [r6, #0x26]
	mov	r0, #0x2e
	ldrsh	r1, [r6, r0]
	mov	r2, #0x34
	ldrsh	r0, [r6, r2]
	cmp	r1, r0
	ble	.L229	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimSprite
.L229:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L231:
	.align	2, 0
.L230:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.Lfe39:
	.size	 AnimIngrainOrb,.Lfe39-AnimIngrainOrb
	.align	2, 0
	.type	 sub_80FF9B8,function
	.thumb_func
sub_80FF9B8:
	push	{r4, r5, lr}
	mov	r2, #0x20
	ldrsh	r4, [r0, r2]
	lsl	r4, r4, #0x8
	mov	r3, #0x22
	ldrsh	r2, [r0, r3]
	orr	r4, r4, r2
	mov	r5, #0x3a
	ldrsh	r2, [r0, r5]
	lsl	r2, r2, #0x8
	mov	r5, #0x3c
	ldrsh	r3, [r0, r5]
	orr	r2, r2, r3
	lsl	r1, r1, #0x8
	strh	r4, [r0, #0x38]
	strh	r2, [r0, #0x3a]
	strh	r1, [r0, #0x3c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 sub_80FF9B8,.Lfe40-sub_80FF9B8
	.align	2, 0
	.globl	sub_80FF9E0
	.type	 sub_80FF9E0,function
	.thumb_func
sub_80FF9E0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r8, r0
	ldrh	r0, [r0, #0x38]
	lsr	r1, r0, #0x8
	mov	sl, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r1, r8
	ldrh	r0, [r1, #0x3a]
	lsr	r2, r0, #0x8
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrh	r1, [r1, #0x3c]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r3, #0xff
	and	r3, r3, r1
	cmp	r2, #0
	bne	.L234	@cond_branch
	mov	r2, #0x20
	neg	r2, r2
	b	.L235
.L234:
	cmp	r2, #0xff
	bne	.L235	@cond_branch
	mov	r2, #0x88
	lsl	r2, r2, #0x1
.L235:
	mov	r0, r9
	sub	r4, r4, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r1, sl
	sub	r0, r2, r1
	lsl	r5, r3, #0x10
	asr	r5, r5, #0x10
	mul	r0, r0, r5
	lsl	r1, r6, #0x10
	asr	r7, r1, #0x10
	add	r1, r7, #0
	bl	__divsi3
	add	r6, r0, #0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r0, r4
	mul	r0, r0, r5
	add	r1, r7, #0
	bl	__divsi3
	add	r6, r6, sl
	mov	r1, r8
	strh	r6, [r1, #0x20]
	add	r0, r0, r9
	strh	r0, [r1, #0x22]
	add	r5, r5, #0x1
	lsl	r5, r5, #0x10
	lsr	r3, r5, #0x10
	asr	r5, r5, #0x10
	cmp	r5, r7
	beq	.L237	@cond_branch
	lsl	r1, r7, #0x8
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	orr	r0, r0, r1
	mov	r1, r8
	strh	r0, [r1, #0x3c]
	mov	r0, #0x0
	b	.L238
.L237:
	mov	r0, #0x1
.L238:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe41:
	.size	 sub_80FF9E0,.Lfe41-sub_80FF9E0
	.align	2, 0
	.globl	sub_80FFA84
	.type	 sub_80FFA84,function
	.thumb_func
sub_80FFA84:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xa
	bne	.L240	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
.L240:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x32
	ble	.L241	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L241:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 sub_80FFA84,.Lfe42-sub_80FFA84
	.align	2, 0
	.type	 sub_80FFAB4,function
	.thumb_func
sub_80FFAB4:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x7
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	ldrh	r1, [r4, #0x2e]
	add	r1, r1, r0
	mov	r5, #0x0
	strh	r1, [r4, #0x2e]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x7f
	ble	.L243	@cond_branch
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	strh	r5, [r4, #0x2e]
.L243:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x80
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x30
	ldrsh	r2, [r4, r1]
	lsl	r2, r2, #0x3
	mov	r1, #0x1e
	sub	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Sin
	strh	r0, [r4, #0x26]
	add	r0, r4, #0
	bl	sub_80FF9E0
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L244	@cond_branch
	strh	r5, [r4, #0x26]
	strh	r5, [r4, #0x2e]
	ldr	r0, .L245
	str	r0, [r4, #0x1c]
.L244:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L246:
	.align	2, 0
.L245:
	.word	sub_80FFA84
.Lfe43:
	.size	 sub_80FFAB4,.Lfe43-sub_80FFAB4
	.align	2, 0
	.globl	AnimPresent
	.type	 AnimPresent,function
	.thumb_func
AnimPresent:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	ldr	r4, .L251
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L251+0x4
	ldrb	r1, [r0]
	mov	r0, #0x2
	eor	r0, r0, r1
	ldrb	r4, [r4]
	cmp	r0, r4
	bne	.L248	@cond_branch
	strh	r6, [r5, #0x3a]
	add	r0, r2, #0
	add	r0, r0, #0xa
	strh	r0, [r5, #0x3c]
	add	r0, r5, #0
	mov	r1, #0x3c
	bl	sub_80FF9B8
	mov	r0, #0x1
	b	.L250
.L252:
	.align	2, 0
.L251:
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
.L248:
	strh	r6, [r5, #0x3a]
	add	r0, r2, #0
	add	r0, r0, #0xa
	strh	r0, [r5, #0x3c]
	add	r0, r5, #0
	mov	r1, #0x3c
	bl	sub_80FF9B8
	mov	r0, #0x3
.L250:
	strh	r0, [r5, #0x34]
	mov	r0, #0x3c
	strh	r0, [r5, #0x36]
	ldr	r0, .L253
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L254:
	.align	2, 0
.L253:
	.word	sub_80FFAB4
.Lfe44:
	.size	 AnimPresent,.Lfe44-AnimPresent
	.align	2, 0
	.type	 sub_80FFB90,function
	.thumb_func
sub_80FFB90:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x7
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	ldrh	r1, [r4, #0x2e]
	add	r1, r1, r0
	mov	r5, #0x0
	strh	r1, [r4, #0x2e]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x7f
	ble	.L256	@cond_branch
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	strh	r5, [r4, #0x2e]
.L256:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x80
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x30
	ldrsh	r2, [r4, r1]
	lsl	r2, r2, #0x3
	mov	r1, #0x1e
	sub	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Sin
	strh	r0, [r4, #0x26]
	add	r0, r4, #0
	bl	sub_80FF9E0
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L257	@cond_branch
	strh	r5, [r4, #0x26]
	strh	r5, [r4, #0x2e]
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L257:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 sub_80FFB90,.Lfe45-sub_80FFB90
	.align	2, 0
	.globl	AnimKnockOffItem
	.type	 AnimKnockOffItem,function
	.thumb_func
AnimKnockOffItem:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r4, .L263
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L259	@cond_branch
	strh	r0, [r5, #0x3a]
	add	r0, r6, #0
	add	r0, r0, #0xa
	strh	r0, [r5, #0x3c]
	add	r0, r5, #0
	mov	r1, #0x28
	bl	sub_80FF9B8
	mov	r0, #0x3
	strh	r0, [r5, #0x34]
	mov	r0, #0x3c
	strh	r0, [r5, #0x36]
	ldr	r0, .L263+0x4
	b	.L262
.L264:
	.align	2, 0
.L263:
	.word	gBattleAnimTarget
	.word	sub_80FFAB4
.L259:
	mov	r0, #0xff
	strh	r0, [r5, #0x3a]
	add	r0, r6, #0
	add	r0, r0, #0xa
	strh	r0, [r5, #0x3c]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L261	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x3a]
.L261:
	add	r0, r5, #0
	mov	r1, #0x28
	bl	sub_80FF9B8
	mov	r0, #0x3
	strh	r0, [r5, #0x34]
	mov	r0, #0x3c
	strh	r0, [r5, #0x36]
	ldr	r0, .L265
.L262:
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L266:
	.align	2, 0
.L265:
	.word	sub_80FFB90
.Lfe46:
	.size	 AnimKnockOffItem,.Lfe46-AnimKnockOffItem
	.align	2, 0
	.globl	AnimPresentHealParticle
	.type	 AnimPresentHealParticle,function
	.thumb_func
AnimPresentHealParticle:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L268	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
	ldr	r0, .L270
	ldrh	r0, [r0, #0x4]
	strh	r0, [r4, #0x30]
.L268:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x30]
	mul	r0, r0, r1
	strh	r0, [r4, #0x26]
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L269	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L269:
	pop	{r4}
	pop	{r0}
	bx	r0
.L271:
	.align	2, 0
.L270:
	.word	gBattleAnimArgs
.Lfe47:
	.size	 AnimPresentHealParticle,.Lfe47-AnimPresentHealParticle
	.align	2, 0
	.globl	AnimItemSteal
	.type	 AnimItemSteal,function
	.thumb_func
AnimItemSteal:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
	ldr	r4, .L276
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L276+0x4
	ldrb	r1, [r0]
	mov	r0, #0x2
	eor	r0, r0, r1
	ldrb	r4, [r4]
	cmp	r0, r4
	bne	.L273	@cond_branch
	strh	r6, [r5, #0x3a]
	add	r0, r2, #0
	add	r0, r0, #0xa
	strh	r0, [r5, #0x3c]
	add	r0, r5, #0
	mov	r1, #0x3c
	bl	sub_80FF9B8
	mov	r0, #0x1
	b	.L275
.L277:
	.align	2, 0
.L276:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L273:
	strh	r6, [r5, #0x3a]
	add	r0, r2, #0
	add	r0, r0, #0xa
	strh	r0, [r5, #0x3c]
	add	r0, r5, #0
	mov	r1, #0x3c
	bl	sub_80FF9B8
	mov	r0, #0x3
.L275:
	strh	r0, [r5, #0x34]
	mov	r0, #0x3c
	strh	r0, [r5, #0x36]
	ldr	r0, .L278
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L279:
	.align	2, 0
.L278:
	.word	AnimItemStealStep
.Lfe48:
	.size	 AnimItemSteal,.Lfe48-AnimItemSteal
	.align	2, 0
	.type	 AnimItemStealStep,function
	.thumb_func
AnimItemStealStep:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x7
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	ldrh	r1, [r4, #0x2e]
	add	r1, r1, r0
	mov	r5, #0x0
	strh	r1, [r4, #0x2e]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x7f
	ble	.L281	@cond_branch
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	strh	r5, [r4, #0x2e]
.L281:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x80
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x30
	ldrsh	r2, [r4, r1]
	lsl	r2, r2, #0x3
	mov	r1, #0x1e
	sub	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Sin
	strh	r0, [r4, #0x26]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L282	@cond_branch
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x7d
	bl	PlaySE12WithPanning
.L282:
	add	r0, r4, #0
	bl	sub_80FF9E0
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L283	@cond_branch
	strh	r5, [r4, #0x26]
	strh	r5, [r4, #0x2e]
	ldr	r0, .L284
	str	r0, [r4, #0x1c]
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x7d
	bl	PlaySE12WithPanning
.L283:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L285:
	.align	2, 0
.L284:
	.word	sub_80FFA84
.Lfe49:
	.size	 AnimItemStealStep,.Lfe49-AnimItemStealStep
	.align	2, 0
	.globl	AnimTrickBag
	.type	 AnimTrickBag,function
	.thumb_func
AnimTrickBag:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L287	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L288	@cond_branch
	ldr	r0, .L295
	ldrh	r1, [r0, #0x2]
	strh	r1, [r4, #0x30]
	mov	r1, #0x78
	strh	r1, [r4, #0x20]
	add	r5, r0, #0
	b	.L289
.L296:
	.align	2, 0
.L295:
	.word	gBattleAnimArgs
.L288:
	ldr	r0, .L297
	mov	r1, #0x2
	ldrsh	r3, [r0, r1]
	add	r1, r3, #0
	sub	r1, r1, #0x20
	add	r2, r1, #0
	add	r5, r0, #0
	cmp	r1, #0
	bge	.L290	@cond_branch
	add	r2, r3, #0
	add	r2, r2, #0xdf
.L290:
	asr	r0, r2, #0x8
	lsl	r0, r0, #0x8
	sub	r0, r1, r0
	strh	r0, [r4, #0x30]
	mov	r0, #0x46
	strh	r0, [r4, #0x20]
.L289:
	ldrh	r0, [r5]
	strh	r0, [r4, #0x22]
	strh	r0, [r4, #0x32]
	mov	r0, #0x14
	strh	r0, [r4, #0x36]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x3c
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x14
	bl	Sin
	strh	r0, [r4, #0x26]
	ldr	r0, .L297+0x4
	str	r0, [r4, #0x1c]
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xbe
	bhi	.L292	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x1f
	b	.L294
.L298:
	.align	2, 0
.L297:
	.word	gBattleAnimArgs
	.word	AnimTrickBagStep1
.L292:
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x1d
.L294:
	strb	r0, [r1]
.L287:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 AnimTrickBag,.Lfe50-AnimTrickBag
	.align	2, 0
	.type	 AnimTrickBagStep1,function
	.thumb_func
AnimTrickBagStep1:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L301	@cond_branch
	cmp	r0, #0x1
	beq	.L304	@cond_branch
	b	.L300
.L301:
	ldrh	r5, [r4, #0x32]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4e
	ble	.L302	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	b	.L300
.L302:
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	mov	r1, #0xa
	bl	__divsi3
	add	r0, r5, r0
	strh	r0, [r4, #0x32]
	ldrh	r1, [r4, #0x36]
	add	r1, r1, #0x3
	strh	r1, [r4, #0x36]
	strh	r0, [r4, #0x22]
	b	.L300
.L304:
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L300	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L300	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	strh	r0, [r4, #0x32]
	ldr	r0, .L308
	str	r0, [r4, #0x1c]
.L300:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L309:
	.align	2, 0
.L308:
	.word	AnimTrickBagStep2
.Lfe51:
	.size	 AnimTrickBagStep1,.Lfe51-AnimTrickBagStep1
	.align	2, 0
	.type	 AnimTrickBagStep2,function
	.thumb_func
AnimTrickBagStep2:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r5, .L318
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x1
	add	r3, r0, r1
	add	r0, r5, #0x1
	add	r0, r3, r0
	ldrh	r2, [r4, #0x32]
	mov	r6, #0x32
	ldrsh	r1, [r4, r6]
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r1, r0
	bne	.L311	@cond_branch
	add	r0, r5, #0x2
	add	r0, r3, r0
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x7f
	bne	.L312	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	ldr	r0, .L318+0x4
	str	r0, [r4, #0x1c]
.L312:
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L313
.L319:
	.align	2, 0
.L318:
	.word	gUnknown_08592700
	.word	AnimTrickBagStep3
.L311:
	add	r0, r2, #0x1
	strh	r0, [r4, #0x32]
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	add	r1, r0, r5
	mov	r2, #0x0
	ldrsb	r2, [r1, r2]
	add	r1, r5, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	mul	r0, r0, r2
	ldrh	r1, [r4, #0x30]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L314	@cond_branch
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xbe
	bhi	.L315	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x1f
	b	.L317
.L315:
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x1d
.L317:
	strb	r0, [r1]
.L314:
	mov	r6, #0x30
	ldrsh	r0, [r4, r6]
	mov	r1, #0x3c
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x14
	bl	Sin
	strh	r0, [r4, #0x26]
.L313:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 AnimTrickBagStep2,.Lfe52-AnimTrickBagStep2
	.align	2, 0
	.type	 AnimTrickBagStep3,function
	.thumb_func
AnimTrickBagStep3:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x14
	ble	.L321	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L321:
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsr	r0, r1, #0x1f
	add	r0, r1, r0
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x1
	sub	r1, r1, r0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 AnimTrickBagStep3,.Lfe53-AnimTrickBagStep3
	.align	2, 0
	.globl	sub_80FFFC0
	.type	 sub_80FFFC0,function
	.thumb_func
sub_80FFFC0:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L326
	add	r5, r0, r1
	ldr	r4, .L326+0x4
	ldrb	r0, [r4]
	bl	GetBattlerSpriteSubpriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x10]
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x14]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x16]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoordAttr
	strh	r0, [r5, #0x1c]
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoordAttr
	strh	r0, [r5, #0x1e]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x1
	neg	r2, r2
	add	r1, r2, #0
	cmp	r0, #0x1
	bne	.L323	@cond_branch
	mov	r1, #0x1
.L323:
	strh	r1, [r5, #0x12]
	mov	r3, #0x12
	ldrsh	r0, [r5, r3]
	lsl	r0, r0, #0x6
	mov	r1, #0x38
	sub	r1, r1, r0
	strh	r1, [r5, #0x1a]
	ldrh	r0, [r5, #0x16]
	sub	r0, r0, r1
	ldrh	r1, [r5, #0x14]
	add	r0, r0, r1
	strh	r0, [r5, #0x18]
	ldr	r0, .L326+0x8
	mov	r2, #0x18
	ldrsh	r1, [r5, r2]
	mov	r3, #0x1a
	ldrsh	r2, [r5, r3]
	ldrb	r3, [r5, #0x10]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0xc]
	cmp	r0, #0x40
	bne	.L325	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L325:
	ldr	r4, .L326+0xc
	mov	r0, #0xc
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0xa
	strh	r1, [r0, #0x2e]
	mov	r2, #0xc
	ldrsh	r1, [r5, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r5, #0x18]
	strh	r1, [r0, #0x30]
	mov	r3, #0xc
	ldrsh	r0, [r5, r3]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	mov	r1, #0x1c
	ldrsh	r0, [r5, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r3, #0x12
	ldrsh	r1, [r5, r3]
	mul	r1, r1, r0
	ldrh	r0, [r5, #0x14]
	sub	r0, r0, r1
	strh	r0, [r2, #0x32]
	mov	r0, #0xc
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r5, #0x1a]
	strh	r1, [r0, #0x34]
	mov	r1, #0xc
	ldrsh	r0, [r5, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	mov	r2, #0x1e
	ldrsh	r0, [r5, r2]
	lsr	r2, r0, #0x1f
	add	r0, r0, r2
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r3, #0x12
	ldrsh	r2, [r5, r3]
	mul	r0, r0, r2
	ldrh	r2, [r5, #0x16]
	add	r0, r0, r2
	strh	r0, [r1, #0x36]
	mov	r3, #0xc
	ldrsh	r1, [r5, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	sub_8100504
	mov	r1, #0xc
	ldrsh	r2, [r5, r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	strh	r0, [r1, #0x38]
	mov	r2, #0xc
	ldrsh	r1, [r5, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	InitAnimArcTranslation
	ldr	r0, .L326+0x10
	str	r0, [r5]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L327:
	.align	2, 0
.L326:
	.word	gTasks
	.word	gBattleAnimTarget
	.word	gUnknown_08592778
	.word	gSprites
	.word	sub_8100128
.Lfe54:
	.size	 sub_80FFFC0,.Lfe54-sub_80FFFC0
	.align	2, 0
	.type	 sub_8100128,function
	.thumb_func
sub_8100128:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L362
	add	r6, r0, r1
	mov	r0, #0xc
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L362+0x4
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r5, [r6, r1]
	cmp	r5, #0x7
	bne	.LCB4111
	b	.L343	@long jump
.LCB4111:
	cmp	r5, #0x7
	bgt	.L356	@cond_branch
	cmp	r5, #0x3
	bne	.LCB4115
	b	.L339	@long jump
.LCB4115:
	cmp	r5, #0x3
	bgt	.L357	@cond_branch
	cmp	r5, #0x1
	beq	.L336	@cond_branch
	cmp	r5, #0x1
	bgt	.L337	@cond_branch
	cmp	r5, #0
	beq	.L334	@cond_branch
	b	.L329
.L363:
	.align	2, 0
.L362:
	.word	gTasks
	.word	gSprites
.L357:
	cmp	r5, #0x5
	bne	.LCB4135
	b	.L340	@long jump
.LCB4135:
	cmp	r5, #0x5
	ble	.LCB4137
	b	.L341	@long jump
.LCB4137:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	sub_8100524
	add	r0, r4, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB4147
	b	.L329	@long jump
.LCB4147:
	mov	r0, #0x5
	strh	r0, [r6, #0x26]
	mov	r0, #0xff
	b	.L361
.L356:
	cmp	r5, #0xb
	bne	.LCB4155
	b	.L347	@long jump
.LCB4155:
	cmp	r5, #0xb
	bgt	.L358	@cond_branch
	cmp	r5, #0x9
	bne	.LCB4159
	b	.L344	@long jump
.LCB4159:
	cmp	r5, #0x9
	ble	.LCB4161
	b	.L345	@long jump
.LCB4161:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	sub_8100524
	add	r0, r4, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB4171
	b	.L329	@long jump
.LCB4171:
	mov	r0, #0x9
	strh	r0, [r6, #0x26]
	mov	r0, #0xff
	b	.L361
.L358:
	cmp	r5, #0xd
	bne	.LCB4179
	b	.L350	@long jump
.LCB4179:
	cmp	r5, #0xd
	bge	.LCB4181
	b	.L348	@long jump
.LCB4181:
	cmp	r5, #0xff
	bne	.LCB4183
	b	.L352	@long jump
.LCB4183:
	b	.L329
.L334:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	sub_8100524
	add	r0, r4, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB4200
	b	.L329	@long jump
.LCB4200:
	mov	r0, #0x1
	strh	r0, [r6, #0x26]
	mov	r0, #0xff
	b	.L361
.L336:
	ldrh	r2, [r4, #0x24]
	ldrh	r3, [r4, #0x20]
	add	r2, r2, r3
	mov	r0, #0x0
	strh	r2, [r4, #0x20]
	ldrh	r1, [r4, #0x26]
	ldrh	r3, [r4, #0x22]
	add	r1, r1, r3
	strh	r1, [r4, #0x22]
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	strh	r2, [r4, #0x30]
	ldrh	r0, [r6, #0x14]
	strh	r0, [r4, #0x32]
	strh	r1, [r4, #0x34]
	ldrh	r0, [r6, #0x16]
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	sub_8100504
	strh	r0, [r4, #0x38]
	ldrh	r0, [r6, #0x10]
	add	r0, r0, #0x2
	strh	r0, [r6, #0x10]
	strh	r5, [r6, #0xe]
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L361
.L337:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	sub_8100524
	add	r0, r4, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB4264
	b	.L329	@long jump
.LCB4264:
	mov	r0, #0x3
	strh	r0, [r6, #0x26]
	mov	r0, #0xff
	b	.L361
.L339:
	ldrh	r1, [r4, #0x24]
	ldrh	r0, [r4, #0x20]
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r1, [r4, #0x20]
	ldrh	r2, [r4, #0x26]
	ldrh	r3, [r4, #0x22]
	add	r2, r2, r3
	strh	r2, [r4, #0x22]
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	mov	r1, #0x1c
	ldrsh	r0, [r6, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r3, #0x12
	ldrsh	r1, [r6, r3]
	mul	r1, r1, r0
	ldrh	r0, [r6, #0x14]
	sub	r0, r0, r1
	strh	r0, [r4, #0x32]
	strh	r2, [r4, #0x34]
	mov	r1, #0x1e
	ldrsh	r0, [r6, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r2, #0x12
	ldrsh	r1, [r6, r2]
	mul	r1, r1, r0
	ldrh	r0, [r6, #0x16]
	sub	r0, r0, r1
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	sub_8100504
	strh	r0, [r4, #0x38]
	mov	r0, #0x2
	strh	r0, [r6, #0xe]
	ldrh	r0, [r6, #0x10]
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L361
.L340:
	ldrh	r1, [r4, #0x24]
	ldrh	r3, [r4, #0x20]
	add	r1, r1, r3
	mov	r0, #0x0
	strh	r1, [r4, #0x20]
	ldrh	r2, [r4, #0x26]
	ldrh	r3, [r4, #0x22]
	add	r2, r2, r3
	strh	r2, [r4, #0x22]
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	mov	r1, #0x1c
	ldrsh	r0, [r6, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r3, #0x12
	ldrsh	r1, [r6, r3]
	mul	r0, r0, r1
	ldrh	r1, [r6, #0x14]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	strh	r2, [r4, #0x34]
	mov	r2, #0x1e
	ldrsh	r0, [r6, r2]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r3, #0x12
	ldrsh	r1, [r6, r3]
	mul	r0, r0, r1
	ldrh	r1, [r6, #0x16]
	add	r0, r0, r1
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	sub_8100504
	strh	r0, [r4, #0x38]
	ldrh	r1, [r6, #0x10]
	sub	r1, r1, #0x2
	strh	r1, [r6, #0x10]
	mov	r0, #0x3
	strh	r0, [r6, #0xe]
	add	r0, r4, #0
	add	r0, r0, #0x43
	strb	r1, [r0]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L361
.L341:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	sub_8100524
	add	r0, r4, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB4420
	b	.L329	@long jump
.LCB4420:
	mov	r0, #0x7
	strh	r0, [r6, #0x26]
	mov	r0, #0xff
	b	.L361
.L343:
	ldrh	r2, [r4, #0x24]
	ldrh	r3, [r4, #0x20]
	add	r2, r2, r3
	mov	r0, #0x0
	strh	r2, [r4, #0x20]
	ldrh	r1, [r4, #0x26]
	ldrh	r3, [r4, #0x22]
	add	r1, r1, r3
	strh	r1, [r4, #0x22]
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	strh	r2, [r4, #0x30]
	ldrh	r0, [r6, #0x14]
	strh	r0, [r4, #0x32]
	strh	r1, [r4, #0x34]
	ldrh	r0, [r6, #0x16]
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	sub_8100504
	strh	r0, [r4, #0x38]
	ldrh	r1, [r6, #0x10]
	add	r1, r1, #0x2
	strh	r1, [r6, #0x10]
	mov	r0, #0x4
	strh	r0, [r6, #0xe]
	add	r0, r4, #0
	add	r0, r0, #0x43
	strb	r1, [r0]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L361
.L344:
	ldrh	r1, [r4, #0x24]
	ldrh	r0, [r4, #0x20]
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r1, [r4, #0x20]
	ldrh	r2, [r4, #0x26]
	ldrh	r3, [r4, #0x22]
	add	r2, r2, r3
	strh	r2, [r4, #0x22]
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	mov	r1, #0x1c
	ldrsh	r0, [r6, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r3, #0x12
	ldrsh	r1, [r6, r3]
	mul	r1, r1, r0
	ldrh	r0, [r6, #0x14]
	sub	r0, r0, r1
	strh	r0, [r4, #0x32]
	strh	r2, [r4, #0x34]
	mov	r1, #0x1e
	ldrsh	r0, [r6, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r2, #0x12
	ldrsh	r1, [r6, r2]
	mul	r0, r0, r1
	ldrh	r3, [r6, #0x16]
	add	r0, r0, r3
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	sub_8100504
	strh	r0, [r4, #0x38]
	mov	r0, #0x5
	strh	r0, [r6, #0xe]
	ldrh	r0, [r6, #0x10]
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L361
.L345:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	sub_8100524
	add	r0, r4, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L329	@cond_branch
	mov	r0, #0xb
	strh	r0, [r6, #0x26]
	mov	r0, #0xff
	b	.L361
.L347:
	ldrh	r2, [r4, #0x24]
	ldrh	r0, [r4, #0x20]
	add	r2, r2, r0
	mov	r0, #0x0
	strh	r2, [r4, #0x20]
	ldrh	r1, [r4, #0x26]
	ldrh	r3, [r4, #0x22]
	add	r1, r1, r3
	strh	r1, [r4, #0x22]
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	strh	r2, [r4, #0x30]
	ldrh	r0, [r6, #0x18]
	strh	r0, [r4, #0x32]
	strh	r1, [r4, #0x34]
	ldrh	r0, [r6, #0x1a]
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	sub_8100504
	strh	r0, [r4, #0x38]
	ldrh	r1, [r6, #0x10]
	sub	r1, r1, #0x2
	strh	r1, [r6, #0x10]
	mov	r0, #0x6
	strh	r0, [r6, #0xe]
	add	r0, r4, #0
	add	r0, r0, #0x43
	strb	r1, [r0]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L361
.L348:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	sub_8100524
	add	r0, r4, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L329	@cond_branch
	add	r0, r4, #0
	bl	DestroySprite
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L361
.L350:
	mov	r1, #0x20
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L329	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	b	.L329
.L352:
	ldrh	r0, [r6, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	ble	.L329	@cond_branch
	mov	r0, #0x0
	strh	r0, [r6, #0xa]
	ldrh	r0, [r6, #0x26]
.L361:
	strh	r0, [r6, #0x8]
.L329:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 sub_8100128,.Lfe55-sub_8100128
	.align	2, 0
	.type	 sub_8100504,function
	.thumb_func
sub_8100504:
	push	{lr}
	mov	r2, #0x8
	mov	r3, #0x36
	ldrsh	r1, [r0, r3]
	mov	r3, #0x22
	ldrsh	r0, [r0, r3]
	cmp	r1, r0
	bge	.L365	@cond_branch
	neg	r0, r2
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
.L365:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe56:
	.size	 sub_8100504,.Lfe56-sub_8100504
	.align	2, 0
	.type	 sub_8100524,function
	.thumb_func
sub_8100524:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	ldrh	r0, [r6, #0x24]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x24]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L367	@cond_branch
	mov	r0, #0x0
	strh	r0, [r6, #0x24]
	ldr	r0, .L369
	mov	r8, r0
	mov	r2, #0xc
	ldrsh	r1, [r6, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrh	r1, [r0, #0x24]
	ldrh	r2, [r0, #0x20]
	add	r1, r1, r2
	ldrh	r2, [r0, #0x26]
	ldrh	r0, [r0, #0x22]
	add	r2, r2, r0
	ldr	r0, .L369+0x4
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	ldrb	r3, [r6, #0x10]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x40
	beq	.L367	@cond_branch
	lsl	r5, r0, #0x4
	add	r5, r5, r0
	lsl	r5, r5, #0x2
	mov	r0, r8
	add	r4, r5, r0
	strh	r7, [r4, #0x3a]
	mov	r0, #0xc
	strh	r0, [r4, #0x3c]
	ldr	r0, .L369+0x8
	lsl	r1, r7, #0x2
	add	r1, r1, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x20]
	ldrh	r2, [r6, #0x22]
	mov	r0, #0x1
	and	r0, r0, r2
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x22]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x22]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldrh	r0, [r6, #0x10]
	add	r4, r4, #0x43
	strb	r0, [r4]
	mov	r0, r8
	add	r0, r0, #0x1c
	add	r5, r5, r0
	ldr	r0, .L369+0xc
	str	r0, [r5]
.L367:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L370:
	.align	2, 0
.L369:
	.word	gSprites
	.word	gUnknown_08592778
	.word	gTasks
	.word	sub_80CC408
.Lfe57:
	.size	 sub_8100524,.Lfe57-sub_8100524
	.align	2, 0
	.type	 sub_80CC408,function
	.thumb_func
sub_80CC408:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L372	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L372	@cond_branch
	ldr	r3, .L374
	mov	r0, #0x3c
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x3a
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	add	r0, r4, #0
	bl	DestroySprite
.L372:
	pop	{r4}
	pop	{r0}
	bx	r0
.L375:
	.align	2, 0
.L374:
	.word	gTasks
.Lfe58:
	.size	 sub_80CC408,.Lfe58-sub_80CC408
	.align	2, 0
	.globl	sub_8100640
	.type	 sub_8100640,function
	.thumb_func
sub_8100640:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldr	r0, .L393
	mov	r1, #0xc
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L377	@cond_branch
	ldr	r0, .L393+0x4
	b	.L389
.L394:
	.align	2, 0
.L393:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L377:
	ldr	r0, .L395
.L389:
	ldrb	r6, [r0]
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L379	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x36]
	ldr	r1, .L395+0x4
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x32]
	ldr	r0, .L395+0x8
	b	.L390
.L396:
	.align	2, 0
.L395:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	0xfff0
.L379:
	mov	r0, #0x1
	strh	r0, [r4, #0x36]
	ldr	r1, .L397
	ldrh	r0, [r1, #0x6]
	neg	r0, r0
	strh	r0, [r4, #0x32]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
.L390:
	strh	r0, [r4, #0x20]
	add	r7, r1, #0
	add	r5, r7, #0
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r4, #0x34]
	mov	r1, #0xa
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L383	@cond_branch
	cmp	r0, #0x1
	bgt	.L388	@cond_branch
	cmp	r0, #0
	beq	.L382	@cond_branch
	b	.L381
.L398:
	.align	2, 0
.L397:
	.word	gBattleAnimArgs
.L388:
	cmp	r0, #0x2
	beq	.L384	@cond_branch
	cmp	r0, #0x3
	beq	.L385	@cond_branch
	b	.L381
.L382:
	ldrh	r0, [r5]
	b	.L391
.L383:
	ldrh	r0, [r5]
	strh	r0, [r4, #0x22]
	b	.L392
.L384:
	add	r0, r6, #0
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r5, [r5]
	add	r0, r0, r5
.L391:
	strh	r0, [r4, #0x22]
	add	r0, r6, #0
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
	b	.L381
.L385:
	ldr	r0, .L399
	ldrb	r0, [r0]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r7, [r7]
	add	r0, r0, r7
	strh	r0, [r4, #0x22]
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
.L392:
	add	r0, r6, #0
	bl	GetBattlerSpriteBGPriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0x5]
.L381:
	ldr	r0, .L399+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L400:
	.align	2, 0
.L399:
	.word	gBattleAnimTarget
	.word	sub_810074C
.Lfe59:
	.size	 sub_8100640,.Lfe59-sub_8100640
	.align	2, 0
	.type	 sub_810074C,function
	.thumb_func
sub_810074C:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x3c
	ldrsh	r3, [r4, r0]
	ldrh	r0, [r4, #0x3c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x3c]
	mov	r1, #0x30
	ldrsh	r2, [r4, r1]
	ldr	r1, .L406
	mov	r5, #0x2e
	ldrsh	r0, [r4, r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mul	r0, r0, r2
	asr	r0, r0, #0x8
	strh	r0, [r4, #0x26]
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	mul	r0, r0, r3
	strh	r0, [r4, #0x24]
	mov	r5, #0x34
	ldrsh	r0, [r4, r5]
	mul	r0, r0, r3
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L402	@cond_branch
	mov	r2, #0x24
	ldrsh	r0, [r4, r2]
	mov	r5, #0x20
	ldrsh	r1, [r4, r5]
	add	r0, r0, r1
	cmp	r0, #0xf7
	ble	.L401	@cond_branch
	b	.L404
.L407:
	.align	2, 0
.L406:
	.word	gSineTable
.L402:
	mov	r1, #0x24
	ldrsh	r0, [r4, r1]
	mov	r2, #0x20
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r1, #0x10
	neg	r1, r1
	cmp	r0, r1
	bgt	.L401	@cond_branch
.L404:
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
.L401:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 sub_810074C,.Lfe60-sub_810074C
	.align	2, 0
	.globl	sub_81007C4
	.type	 sub_81007C4,function
	.thumb_func
sub_81007C4:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L418
	add	r5, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L410	@cond_branch
	cmp	r0, #0x1
	beq	.L411	@cond_branch
	b	.L409
.L419:
	.align	2, 0
.L418:
	.word	gTasks
.L410:
	ldr	r0, .L420
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r4, r2, #0
	add	r0, r0, r4
	strh	r0, [r5, #0x18]
	ldr	r0, .L420+0x4
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x14
	add	r0, r0, r4
	strh	r0, [r5, #0x20]
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	b	.L409
.L421:
	.align	2, 0
.L420:
	.word	0x274f
	.word	0x27b0
.L411:
	ldrh	r0, [r5, #0x1a]
	add	r0, r0, #0x1
	mov	r7, #0x0
	strh	r0, [r5, #0x1a]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	blt	.L409	@cond_branch
	strh	r7, [r5, #0x1a]
	ldrh	r0, [r5, #0x18]
	ldrb	r2, [r5, #0x1c]
	ldr	r4, .L422
	mov	r3, #0x1e
	ldrsh	r1, [r5, r3]
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r3, [r1]
	mov	r1, #0x10
	bl	BlendPalette
	ldrh	r0, [r5, #0x20]
	ldrb	r2, [r5, #0x1c]
	mov	r3, #0x1e
	ldrsh	r1, [r5, r3]
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r3, [r1]
	mov	r1, #0x10
	bl	BlendPalette
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x11
	bne	.L409	@cond_branch
	strh	r7, [r5, #0x1c]
	ldrh	r0, [r5, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7
	bne	.L409	@cond_branch
	strh	r7, [r5, #0x1e]
.L409:
	ldr	r0, .L422+0x4
	mov	r2, #0xe
	ldrsh	r1, [r0, r2]
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L417	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L417:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L423:
	.align	2, 0
.L422:
	.word	gMagicalLeafBlendColors
	.word	gBattleAnimArgs
.Lfe61:
	.size	 sub_81007C4,.Lfe61-sub_81007C4
	.align	2, 0
	.globl	sub_8100898
	.type	 sub_8100898,function
	.thumb_func
sub_8100898:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	ldr	r1, .L433
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L425	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimSprite
	b	.L426
.L434:
	.align	2, 0
.L433:
	.word	gBattleAnimArgs
.L425:
	mov	r3, #0x0
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	bne	.L427	@cond_branch
	ldr	r4, .L435
	b	.L432
.L436:
	.align	2, 0
.L435:
	.word	gBattleAnimAttacker
.L427:
	ldr	r4, .L437
.L432:
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L437+0x4
	ldrh	r1, [r0, #0x8]
	strh	r1, [r6, #0x2e]
	mov	r3, #0x2
	ldrsh	r1, [r0, r3]
	add	r7, r0, #0
	cmp	r1, #0
	bne	.L429	@cond_branch
	ldrh	r0, [r7, #0x4]
	add	r0, r0, r5
	strh	r0, [r6, #0x20]
	ldrh	r0, [r7, #0x6]
	add	r0, r0, r2
	strh	r0, [r6, #0x22]
	strh	r5, [r6, #0x38]
	strh	r2, [r6, #0x3a]
	b	.L430
.L438:
	.align	2, 0
.L437:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L429:
	strh	r5, [r6, #0x20]
	strh	r2, [r6, #0x22]
	ldrh	r0, [r7, #0x4]
	add	r0, r0, r5
	strh	r0, [r6, #0x38]
	ldrh	r0, [r7, #0x6]
	add	r0, r0, r2
	strh	r0, [r6, #0x3a]
.L430:
	ldrh	r4, [r6, #0x20]
	lsl	r0, r4, #0x4
	strh	r0, [r6, #0x30]
	ldrh	r5, [r6, #0x22]
	lsl	r0, r5, #0x4
	strh	r0, [r6, #0x32]
	mov	r1, #0x38
	ldrsh	r0, [r6, r1]
	mov	r2, #0x20
	ldrsh	r1, [r6, r2]
	sub	r0, r0, r1
	lsl	r0, r0, #0x4
	mov	r3, #0x8
	ldrsh	r1, [r7, r3]
	bl	__divsi3
	strh	r0, [r6, #0x34]
	mov	r1, #0x3a
	ldrsh	r0, [r6, r1]
	mov	r2, #0x22
	ldrsh	r1, [r6, r2]
	sub	r0, r0, r1
	lsl	r0, r0, #0x4
	mov	r3, #0x8
	ldrsh	r1, [r7, r3]
	bl	__divsi3
	strh	r0, [r6, #0x36]
	ldrh	r0, [r6, #0x38]
	sub	r0, r0, r4
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r1, [r6, #0x3a]
	sub	r1, r1, r5
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	ArcTan2Neg
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L431	@cond_branch
	ldr	r1, .L439
	add	r0, r4, r1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L431:
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	str	r4, [sp]
	add	r0, r6, #0
	mov	r1, #0x0
	add	r2, r3, #0
	bl	TrySetSpriteRotScale
	ldr	r0, .L439+0x4
	str	r0, [r6, #0x1c]
.L426:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L440:
	.align	2, 0
.L439:
	.word	-0x8000
	.word	sub_81009A0
.Lfe62:
	.size	 sub_8100898,.Lfe62-sub_8100898
	.align	2, 0
	.type	 sub_81009A0,function
	.thumb_func
sub_81009A0:
	push	{r4, lr}
	add	r2, r0, #0
	ldrh	r3, [r2, #0x2e]
	mov	r1, #0x2e
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	beq	.L442	@cond_branch
	ldrh	r0, [r2, #0x34]
	ldrh	r4, [r2, #0x30]
	add	r0, r0, r4
	strh	r0, [r2, #0x30]
	ldrh	r1, [r2, #0x36]
	ldrh	r4, [r2, #0x32]
	add	r1, r1, r4
	strh	r1, [r2, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r2, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r2, #0x22]
	sub	r0, r3, #0x1
	strh	r0, [r2, #0x2e]
	b	.L443
.L442:
	add	r0, r2, #0
	bl	DestroySpriteAndMatrix
.L443:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 sub_81009A0,.Lfe63-sub_81009A0
	.align	2, 0
	.type	 sub_81009DC,function
	.thumb_func
sub_81009DC:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L445	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L445:
	pop	{r0}
	bx	r0
.Lfe64:
	.size	 sub_81009DC,.Lfe64-sub_81009DC
	.align	2, 0
	.globl	sub_81009F8
	.type	 sub_81009F8,function
	.thumb_func
sub_81009F8:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L450
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L447	@cond_branch
	ldr	r2, .L450+0x4
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x2]
	b	.L449
.L451:
	.align	2, 0
.L450:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L447:
	ldr	r0, .L452
	ldrh	r1, [r0]
	ldrh	r2, [r4, #0x20]
	add	r1, r1, r2
	strh	r1, [r4, #0x20]
	ldrh	r0, [r0, #0x2]
.L449:
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldr	r0, .L452+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L452+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4}
	pop	{r0}
	bx	r0
.L453:
	.align	2, 0
.L452:
	.word	gBattleAnimArgs
	.word	RunStoredCallbackWhenAnimEnds
	.word	DestroyAnimSprite
.Lfe65:
	.size	 sub_81009F8,.Lfe65-sub_81009F8
	.align	2, 0
	.globl	sub_8100A50
	.type	 sub_8100A50,function
	.thumb_func
sub_8100A50:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L456
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L455	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
.L455:
	ldr	r0, .L456+0x4
	str	r0, [r5, #0x1c]
	ldr	r4, .L456+0x8
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	add	r0, r5, #0
	bl	SetAnimSpriteInitialXOffset
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r5, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L457:
	.align	2, 0
.L456:
	.word	gBattleAnimAttacker
	.word	sub_81009DC
	.word	gBattleAnimArgs
.Lfe66:
	.size	 sub_8100A50,.Lfe66-sub_8100A50
	.align	2, 0
	.globl	sub_8100A94
	.type	 sub_8100A94,function
	.thumb_func
sub_8100A94:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L459
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r1, #0xa]
	strh	r0, [r4, #0x38]
	ldrb	r1, [r1, #0xc]
	add	r0, r4, #0
	bl	StartSpriteAffineAnim
	ldr	r1, .L459+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L459+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L460:
	.align	2, 0
.L459:
	.word	gBattleAnimArgs
	.word	DestroySpriteAndMatrix
	.word	TranslateSpriteLinearAndFlicker
.Lfe67:
	.size	 sub_8100A94,.Lfe67-sub_8100A94
	.align	2, 0
	.globl	AnimCuttingSlice
	.type	 AnimCuttingSlice,function
	.thumb_func
AnimCuttingSlice:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L466
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L462	@cond_branch
	ldrh	r0, [r5, #0x22]
	add	r0, r0, #0x8
	strh	r0, [r5, #0x22]
.L462:
	ldr	r0, .L466+0x4
	str	r0, [r5, #0x1c]
	ldr	r0, .L466+0x8
	mov	r2, #0x4
	ldrsh	r1, [r0, r2]
	add	r3, r0, #0
	cmp	r1, #0
	bne	.L463	@cond_branch
	ldrh	r0, [r3]
	ldrh	r1, [r5, #0x20]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	b	.L464
.L467:
	.align	2, 0
.L466:
	.word	gBattleAnimTarget
	.word	AnimSliceStep
	.word	gBattleAnimArgs
.L463:
	ldrh	r0, [r5, #0x20]
	ldrh	r1, [r3]
	sub	r0, r0, r1
	strh	r0, [r5, #0x20]
	add	r2, r5, #0
	add	r2, r2, #0x3f
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
.L464:
	ldrh	r0, [r3, #0x2]
	ldrh	r2, [r5, #0x22]
	add	r0, r0, r2
	strh	r0, [r5, #0x22]
	ldr	r1, .L468
	add	r0, r1, #0
	ldrh	r2, [r5, #0x30]
	add	r1, r0, r2
	strh	r1, [r5, #0x30]
	mov	r2, #0x80
	lsl	r2, r2, #0x3
	add	r0, r2, #0
	ldrh	r2, [r5, #0x32]
	add	r0, r0, r2
	strh	r0, [r5, #0x32]
	ldrh	r0, [r3, #0x4]
	strh	r0, [r5, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L465	@cond_branch
	neg	r0, r1
	strh	r0, [r5, #0x30]
.L465:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L469:
	.align	2, 0
.L468:
	.word	-0x400
.Lfe68:
	.size	 AnimCuttingSlice,.Lfe68-AnimCuttingSlice
	.align	2, 0
	.globl	sub_8100B88
	.type	 sub_8100B88,function
	.thumb_func
sub_8100B88:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	ldr	r0, .L484
	mov	r1, #0x6
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x1
	beq	.L472	@cond_branch
	cmp	r0, #0x1
	ble	.L476	@cond_branch
	cmp	r0, #0x2
	beq	.L473	@cond_branch
	b	.L476
.L485:
	.align	2, 0
.L484:
	.word	gBattleAnimArgs
.L472:
	ldr	r5, .L486
	ldrb	r0, [r5]
	mov	r4, #0x2
	eor	r0, r0, r4
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r0, [r5]
	eor	r4, r4, r0
	add	r0, r4, #0
	b	.L483
.L487:
	.align	2, 0
.L486:
	.word	gBattleAnimTarget
.L473:
	ldr	r5, .L488
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r5]
	mov	r2, #0x2
	mov	r8, r2
	mov	r1, r8
	eor	r0, r0, r1
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L471	@cond_branch
	ldrb	r0, [r5]
	mov	r2, r8
	eor	r0, r0, r2
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r7
	lsr	r7, r0, #0x1
	ldrb	r0, [r5]
	mov	r1, r8
	eor	r0, r0, r1
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	lsr	r4, r0, #0x1
	b	.L471
.L489:
	.align	2, 0
.L488:
	.word	gBattleAnimTarget
.L476:
	ldr	r4, .L490
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r0, [r4]
.L483:
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L471:
	strh	r7, [r6, #0x20]
	strh	r4, [r6, #0x22]
	ldr	r0, .L490
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L479	@cond_branch
	ldrh	r0, [r6, #0x22]
	add	r0, r0, #0x8
	strh	r0, [r6, #0x22]
.L479:
	ldr	r0, .L490+0x4
	str	r0, [r6, #0x1c]
	ldr	r0, .L490+0x8
	mov	r2, #0x4
	ldrsh	r1, [r0, r2]
	add	r3, r0, #0
	cmp	r1, #0
	bne	.L480	@cond_branch
	ldrh	r0, [r3]
	ldrh	r1, [r6, #0x20]
	add	r0, r0, r1
	strh	r0, [r6, #0x20]
	b	.L481
.L491:
	.align	2, 0
.L490:
	.word	gBattleAnimTarget
	.word	AnimSliceStep
	.word	gBattleAnimArgs
.L480:
	ldrh	r0, [r6, #0x20]
	ldrh	r1, [r3]
	sub	r0, r0, r1
	strh	r0, [r6, #0x20]
	add	r2, r6, #0
	add	r2, r2, #0x3f
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
.L481:
	ldrh	r0, [r3, #0x2]
	ldrh	r2, [r6, #0x22]
	add	r0, r0, r2
	strh	r0, [r6, #0x22]
	ldr	r1, .L492
	add	r0, r1, #0
	ldrh	r2, [r6, #0x30]
	add	r1, r0, r2
	strh	r1, [r6, #0x30]
	mov	r2, #0x80
	lsl	r2, r2, #0x3
	add	r0, r2, #0
	ldrh	r2, [r6, #0x32]
	add	r0, r0, r2
	strh	r0, [r6, #0x32]
	ldrh	r0, [r3, #0x4]
	strh	r0, [r6, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L482	@cond_branch
	neg	r0, r1
	strh	r0, [r6, #0x30]
.L482:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L493:
	.align	2, 0
.L492:
	.word	-0x400
.Lfe69:
	.size	 sub_8100B88,.Lfe69-sub_8100B88
	.align	2, 0
	.type	 AnimSliceStep,function
	.thumb_func
AnimSliceStep:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x30]
	ldrh	r2, [r4, #0x34]
	add	r0, r1, r2
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	strh	r0, [r4, #0x36]
	mov	r2, #0x38
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L495	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x18
	b	.L498
.L495:
	add	r0, r1, #0
	sub	r0, r0, #0x18
.L498:
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x32]
	sub	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	bne	.L497	@cond_branch
	ldr	r1, .L499
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	mov	r0, #0x3
	strh	r0, [r4, #0x2e]
	ldr	r0, .L499+0x4
	str	r0, [r4, #0x1c]
.L497:
	pop	{r4}
	pop	{r0}
	bx	r0
.L500:
	.align	2, 0
.L499:
	.word	DestroyAnimSprite
	.word	WaitAnimForDuration
.Lfe70:
	.size	 AnimSliceStep,.Lfe70-AnimSliceStep
	.align	2, 0
	.globl	unref_sub_8100D38
	.type	 unref_sub_8100D38,function
	.thumb_func
unref_sub_8100D38:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r1, [r5, #0x32]
	mov	r2, #0x32
	ldrsh	r0, [r5, r2]
	cmp	r0, #0x1
	ble	.L502	@cond_branch
	ldrh	r1, [r5, #0x34]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L503	@cond_branch
	add	r3, r5, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r2, #0x5
	neg	r2, r2
	add	r0, r2, #0
	and	r0, r0, r1
	strb	r0, [r3]
	ldr	r4, .L507
	mov	r0, #0x2e
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x3e
	ldrb	r3, [r0]
	add	r1, r2, #0
	and	r1, r1, r3
	strb	r1, [r0]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	and	r2, r2, r1
	strb	r2, [r0]
	b	.L504
.L508:
	.align	2, 0
.L507:
	.word	gSprites
.L503:
	add	r1, r5, #0
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r3, .L509
	mov	r0, #0x2e
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r2
	strb	r1, [r0]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r2
	strb	r1, [r0]
.L504:
	mov	r0, #0x0
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	b	.L505
.L510:
	.align	2, 0
.L509:
	.word	gSprites
.L502:
	add	r0, r1, #0x1
	strh	r0, [r5, #0x32]
.L505:
	mov	r1, #0x34
	ldrsh	r0, [r5, r1]
	cmp	r0, #0xa
	bne	.L506	@cond_branch
	mov	r2, #0x2e
	ldrsh	r1, [r5, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L511
	add	r0, r0, r4
	bl	DestroySprite
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	add	r0, r5, #0
	bl	DestroyAnimSprite
.L506:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L512:
	.align	2, 0
.L511:
	.word	gSprites
.Lfe71:
	.size	 unref_sub_8100D38,.Lfe71-unref_sub_8100D38
	.align	2, 0
	.globl	sub_8100E1C
	.type	 sub_8100E1C,function
	.thumb_func
sub_8100E1C:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L517
	ldrh	r0, [r4, #0x4]
	strh	r0, [r5, #0x2e]
	ldr	r0, .L517+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L514	@cond_branch
	ldrh	r0, [r5, #0x20]
	ldrh	r1, [r4]
	sub	r0, r0, r1
	b	.L516
.L518:
	.align	2, 0
.L517:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L514:
	ldrh	r0, [r4]
	ldrh	r1, [r5, #0x20]
	add	r0, r0, r1
.L516:
	strh	r0, [r5, #0x20]
	ldr	r4, .L519
	ldrb	r1, [r4, #0xa]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldrh	r0, [r4, #0x6]
	neg	r0, r0
	strh	r0, [r5, #0x30]
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r5, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x34]
	ldr	r1, .L519+0x4
	str	r1, [r5, #0x1c]
	add	r0, r5, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L520:
	.align	2, 0
.L519:
	.word	gBattleAnimArgs
	.word	sub_8100E80
.Lfe72:
	.size	 sub_8100E1C,.Lfe72-sub_8100E1C
	.align	2, 0
	.type	 sub_8100E80,function
	.thumb_func
sub_8100E80:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x64
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	mov	r1, #0x14
	bl	Sin
	strh	r0, [r4, #0x26]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7f
	bgt	.L522	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x0
	b	.L525
.L522:
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0xe
.L525:
	strb	r0, [r1]
	ldrh	r0, [r4, #0x30]
	ldrh	r2, [r4, #0x2e]
	add	r0, r0, r2
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x82
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x34
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	bne	.L524	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L524:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe73:
	.size	 sub_8100E80,.Lfe73-sub_8100E80
	.align	2, 0
	.globl	sub_8100EF0
	.type	 sub_8100EF0,function
	.thumb_func
sub_8100EF0:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L527	@cond_branch
	ldr	r1, .L531
	ldrh	r0, [r1, #0x2]
	add	r0, r0, #0x8
	strh	r0, [r1, #0x2]
.L527:
	ldr	r6, .L531+0x4
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	ldr	r4, .L531
	lsr	r0, r0, #0x18
	ldrh	r1, [r4]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r6]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r4, [r4, #0x2]
	add	r0, r0, r4
	strh	r0, [r5, #0x22]
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L529	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L528	@cond_branch
.L529:
	ldrb	r0, [r6]
	bl	GetBattlerSpriteBGPriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r2, [r5, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0x5]
	b	.L530
.L532:
	.align	2, 0
.L531:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L528:
	ldrb	r0, [r6]
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r5, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
.L530:
	ldr	r0, .L533
	ldrh	r0, [r0, #0x4]
	strh	r0, [r5, #0x2e]
	ldr	r0, .L533+0x4
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	mov	r4, #0x10
	mov	r0, #0x10
	strh	r0, [r5, #0x3c]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r0, [r5, #0x3c]
	lsl	r1, r0, #0x8
	sub	r4, r4, r0
	orr	r1, r1, r4
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r0, .L533+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L534:
	.align	2, 0
.L533:
	.word	gBattleAnimArgs
	.word	0x2828
	.word	sub_8100FD4
.Lfe74:
	.size	 sub_8100EF0,.Lfe74-sub_8100EF0
	.align	2, 0
	.type	 sub_8100FD4,function
	.thumb_func
sub_8100FD4:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x60
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	neg	r0, r0
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L536	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldr	r1, .L547
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r5, [r0]
	mov	r2, #0x0
	add	r6, r1, #0
	add	r3, r6, #0
.L537:
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	add	r2, r2, #0x1
	add	r0, r0, r2
	lsl	r1, r0, #0x1
	add	r1, r1, r3
	add	r0, r0, #0x1
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strh	r0, [r1]
	cmp	r2, #0x5
	ble	.L537	@cond_branch
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	add	r0, r0, #0x7
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	strh	r5, [r0]
.L536:
	ldrh	r2, [r4, #0x3c]
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x6
	ble	.L542	@cond_branch
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	ble	.L543	@cond_branch
	ldrh	r0, [r4, #0x3a]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x3a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L542	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x3a]
	sub	r2, r2, #0x1
	strh	r2, [r4, #0x3c]
	lsl	r1, r2, #0x8
	mov	r0, #0x10
	sub	r0, r0, r2
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
.L542:
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L543	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	b	.L544
.L548:
	.align	2, 0
.L547:
	.word	gPlttBufferFaded
.L543:
	ldrh	r0, [r4, #0x3a]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x3a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L544	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x3a]
	ldrh	r2, [r4, #0x3c]
	add	r2, r2, #0x1
	strh	r2, [r4, #0x3c]
	lsl	r1, r2, #0x8
	mov	r0, #0x10
	sub	r0, r0, r2
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L544	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L549
	str	r0, [r4, #0x1c]
.L544:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L550:
	.align	2, 0
.L549:
	.word	DestroyAnimSpriteAndDisableBlend
.Lfe75:
	.size	 sub_8100FD4,.Lfe75-sub_8100FD4
	.align	2, 0
	.globl	sub_81010CC
	.type	 sub_81010CC,function
	.thumb_func
sub_81010CC:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r6, .L552
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	strh	r0, [r4, #0x20]
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L552+0x4
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	strh	r5, [r4, #0x2e]
	strh	r5, [r4, #0x30]
	strh	r5, [r4, #0x32]
	strh	r5, [r4, #0x34]
	strh	r5, [r4, #0x36]
	strh	r5, [r4, #0x3a]
	mov	r0, #0x10
	strh	r0, [r4, #0x3c]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r1, [r4, #0x3c]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x3a]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r0, .L552+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L553:
	.align	2, 0
.L552:
	.word	gBattleAnimTarget
	.word	0xffe8
	.word	sub_8101138
.Lfe76:
	.size	 sub_81010CC,.Lfe76-sub_81010CC
	.align	2, 0
	.type	 sub_8101138,function
	.thumb_func
sub_8101138:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	bls	.LCB6751
	b	.L555	@long jump
.LCB6751:
	lsl	r0, r0, #0x2
	ldr	r1, .L578
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L579:
	.align	2, 0
.L578:
	.word	.L575
	.align	2, 0
	.align	2, 0
.L575:
	.word	.L556
	.word	.L563
	.word	.L565
	.word	.L573
	.word	.L574
.L556:
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.LCB6777
	b	.L555	@long jump
.LCB6777:
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L558	@cond_branch
	ldrh	r1, [r4, #0x3a]
	mov	r2, #0x3a
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xf
	bgt	.L560	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x3a]
	b	.L560
.L558:
	ldrh	r1, [r4, #0x3c]
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L560	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x3c]
.L560:
	ldrh	r1, [r4, #0x3c]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x3a]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L555	@cond_branch
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L555	@cond_branch
	strh	r0, [r4, #0x30]
	b	.L577
.L563:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L555	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	b	.L577
.L565:
	add	r0, r4, #0
	mov	r1, #0x10
	mov	r2, #0x4
	bl	sub_8101298
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L566	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x22]
.L566:
	ldrh	r0, [r4, #0x32]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x32]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1d
	ble	.L555	@cond_branch
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L568	@cond_branch
	ldrh	r1, [r4, #0x3a]
	mov	r2, #0x3a
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L570	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x3a]
	b	.L570
.L568:
	ldrh	r1, [r4, #0x3c]
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xf
	bgt	.L570	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x3c]
.L570:
	ldrh	r1, [r4, #0x3c]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x3a]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x3a
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	bne	.L555	@cond_branch
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x10
	bne	.L555	@cond_branch
	strh	r1, [r4, #0x30]
	strh	r1, [r4, #0x32]
	b	.L577
.L573:
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L577:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L555
.L574:
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L555:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe77:
	.size	 sub_8101138,.Lfe77-sub_8101138
	.align	2, 0
	.type	 sub_8101298,function
	.thumb_func
sub_8101298:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xb
	bgt	.L581	@cond_branch
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x2
	strh	r0, [r4, #0x36]
.L581:
	ldrh	r5, [r4, #0x34]
	add	r0, r5, #0
	sub	r0, r0, #0x12
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r5, #0
	cmp	r0, #0x17
	bhi	.L582	@cond_branch
	ldrh	r0, [r4, #0x36]
	sub	r0, r0, #0x2
	strh	r0, [r4, #0x36]
.L582:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2f
	ble	.L583	@cond_branch
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x2
	strh	r0, [r4, #0x36]
.L583:
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	mov	r1, #0x9
	bl	__divsi3
	strh	r0, [r4, #0x24]
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	mov	r1, #0xe
	bl	__divsi3
	strh	r0, [r4, #0x26]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L584	@cond_branch
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	neg	r0, r0
	strh	r0, [r4, #0x26]
.L584:
	add	r0, r5, #0x1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3b
	ble	.L585	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x34]
.L585:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe78:
	.size	 sub_8101298,.Lfe78-sub_8101298
	.align	2, 0
	.globl	sub_810130C
	.type	 sub_810130C,function
	.thumb_func
sub_810130C:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L588
	mov	r1, #0x4
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L587	@cond_branch
	add	r0, r4, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
.L587:
	mov	r0, #0x0
	ldrsh	r1, [r5, r0]
	add	r0, r4, #0
	bl	SetAnimSpriteInitialXOffset
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldrh	r0, [r5, #0xa]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r4, #0x32]
	ldr	r1, .L588+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L588+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L589:
	.align	2, 0
.L588:
	.word	gBattleAnimArgs
	.word	DestroyAnimSprite
	.word	TranslateSpriteLinearFixedPoint
.Lfe79:
	.size	 sub_810130C,.Lfe79-sub_810130C
	.align	2, 0
	.globl	sub_810135C
	.type	 sub_810135C,function
	.thumb_func
sub_810135C:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r0, .L599
	mov	r1, #0x4
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L591	@cond_branch
	ldr	r0, .L599+0x4
	b	.L597
.L600:
	.align	2, 0
.L599:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L591:
	ldr	r0, .L601
.L597:
	ldrb	r6, [r0]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L593	@cond_branch
	mov	r1, #0x2
	add	r0, r6, #0
	eor	r0, r0, r1
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L593	@cond_branch
	ldr	r4, .L601+0x4
	ldrb	r1, [r4, #0xc]
	add	r2, r5, #0
	add	r2, r2, #0x20
	add	r3, r5, #0
	add	r3, r3, #0x22
	add	r0, r6, #0
	bl	SetAverageBattlerPositions
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	add	r0, r5, #0
	bl	SetAnimSpriteInitialXOffset
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r5, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	b	.L594
.L602:
	.align	2, 0
.L601:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L593:
	ldr	r4, .L603
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L595	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	add	r0, r6, #0
	mov	r1, #0x1
	b	.L598
.L604:
	.align	2, 0
.L603:
	.word	gBattleAnimArgs
.L595:
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	add	r0, r6, #0
	mov	r1, #0x3
.L598:
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r4, [r4, #0x2]
	add	r0, r0, r4
	strh	r0, [r5, #0x22]
	ldr	r0, .L605
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	add	r0, r5, #0
	bl	SetAnimSpriteInitialXOffset
.L594:
	ldr	r1, .L605
	ldrh	r0, [r1, #0xa]
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r5, #0x30]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r5, #0x32]
	ldr	r1, .L605+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L605+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L606:
	.align	2, 0
.L605:
	.word	gBattleAnimArgs
	.word	DestroyAnimSprite
	.word	TranslateSpriteLinearFixedPoint
.Lfe80:
	.size	 sub_810135C,.Lfe80-sub_810135C
	.align	2, 0
	.globl	sub_8101440
	.type	 sub_8101440,function
	.thumb_func
sub_8101440:
	push	{r4, lr}
	add	r4, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r0, .L610
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L608	@cond_branch
	ldr	r0, .L610+0x4
	ldrh	r1, [r0]
	ldrh	r2, [r4, #0x20]
	add	r1, r1, r2
	strh	r1, [r4, #0x20]
	ldrh	r0, [r0, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	b	.L609
.L611:
	.align	2, 0
.L610:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L608:
	ldr	r2, .L612
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
.L609:
	ldr	r0, .L612+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L613:
	.align	2, 0
.L612:
	.word	gBattleAnimArgs
	.word	sub_81014A0
.Lfe81:
	.size	 sub_8101440,.Lfe81-sub_8101440
	.align	2, 0
	.type	 sub_81014A0,function
	.thumb_func
sub_81014A0:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1e
	ble	.L615	@cond_branch
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	mov	r0, #0x1e
	sub	r0, r0, r1
	mov	r1, #0x3
	bl	__divsi3
	strh	r0, [r4, #0x26]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x12
	asr	r0, r0, #0x10
	mov	r1, #0x3
	bl	Sin
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
.L615:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L616	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L616:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe82:
	.size	 sub_81014A0,.Lfe82-sub_81014A0
	.align	2, 0
	.globl	sub_81014F4
	.type	 sub_81014F4,function
	.thumb_func
sub_81014F4:
	push	{r4, lr}
	add	r4, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r0, .L620
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L618	@cond_branch
	ldr	r1, .L620+0x4
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	mov	r0, #0x1
	strh	r0, [r4, #0x34]
	b	.L619
.L621:
	.align	2, 0
.L620:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L618:
	ldr	r2, .L622
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldr	r0, .L622+0x4
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
.L619:
	ldr	r0, .L622+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L623:
	.align	2, 0
.L622:
	.word	gBattleAnimArgs
	.word	0xffff
	.word	sub_8101560
.Lfe83:
	.size	 sub_81014F4,.Lfe83-sub_81014F4
	.align	2, 0
	.type	 sub_8101560,function
	.thumb_func
sub_8101560:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x28
	bl	__divsi3
	neg	r0, r0
	strh	r0, [r4, #0x26]
	mov	r2, #0x36
	ldrsh	r0, [r4, r2]
	mov	r1, #0xa
	bl	__divsi3
	strh	r0, [r4, #0x24]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x1
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	strh	r0, [r4, #0x36]
	ldrh	r0, [r4, #0x30]
	ldrh	r2, [r4, #0x2e]
	add	r1, r0, r2
	strh	r1, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3c
	ble	.L625	@cond_branch
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
.L625:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe84:
	.size	 sub_8101560,.Lfe84-sub_8101560
	.align	2, 0
	.globl	sub_81015AC
	.type	 sub_81015AC,function
	.thumb_func
sub_81015AC:
	push	{lr}
	ldrh	r1, [r0, #0x20]
	sub	r1, r1, #0x20
	strh	r1, [r0, #0x20]
	ldrh	r1, [r0, #0x22]
	sub	r1, r1, #0x20
	strh	r1, [r0, #0x22]
	mov	r1, #0x14
	strh	r1, [r0, #0x2e]
	ldr	r1, .L627
	str	r1, [r0, #0x1c]
	ldr	r1, .L627+0x4
	bl	StoreSpriteCallbackInData6
	pop	{r0}
	bx	r0
.L628:
	.align	2, 0
.L627:
	.word	WaitAnimForDuration
	.word	sub_81015D4
.Lfe85:
	.size	 sub_81015AC,.Lfe85-sub_81015AC
	.align	2, 0
	.type	 sub_81015D4,function
	.thumb_func
sub_81015D4:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldrh	r6, [r5, #0x38]
	mov	r1, #0x1
	add	r0, r1, #0
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L631	@cond_branch
	cmp	r0, #0x1
	beq	.L632	@cond_branch
	b	.L630
.L631:
	strh	r1, [r5, #0x2e]
	ldr	r0, .L635
	str	r0, [r5, #0x1c]
	ldr	r1, .L635+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	b	.L630
.L636:
	.align	2, 0
.L635:
	.word	WaitAnimForDuration
	.word	sub_81015D4
.L632:
	ldrh	r3, [r5, #0x24]
	ldrh	r0, [r5, #0x20]
	add	r3, r3, r0
	mov	r0, #0x0
	strh	r3, [r5, #0x20]
	ldrh	r4, [r5, #0x26]
	ldrh	r1, [r5, #0x22]
	add	r4, r4, r1
	strh	r4, [r5, #0x22]
	strh	r0, [r5, #0x26]
	strh	r0, [r5, #0x24]
	mov	r0, #0x8
	strh	r0, [r5, #0x2e]
	ldr	r2, .L637
	lsl	r0, r6, #0x10
	asr	r0, r0, #0x18
	lsl	r0, r0, #0x1
	add	r1, r0, r2
	ldrb	r1, [r1, #0]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	add	r3, r3, r1
	strh	r3, [r5, #0x32]
	add	r2, r2, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	add	r4, r4, r0
	strh	r4, [r5, #0x36]
	ldr	r0, .L637+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L637+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r1, #0
	ldrh	r1, [r5, #0x38]
	add	r0, r0, r1
	strh	r0, [r5, #0x38]
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xd2
	bl	PlaySE12WithPanning
.L630:
	ldrh	r0, [r5, #0x38]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r5, #0x38]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L638:
	.align	2, 0
.L637:
	.word	gUnknown_08592CD0
	.word	StartAnimLinearTranslation
	.word	sub_8101684
.Lfe86:
	.size	 sub_81015D4,.Lfe86-sub_81015D4
	.align	2, 0
	.type	 sub_8101684,function
	.thumb_func
sub_8101684:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	cmp	r0, #0x4
	bne	.L640	@cond_branch
	mov	r0, #0xa
	strh	r0, [r2, #0x2e]
	ldr	r0, .L642
	str	r0, [r2, #0x1c]
	ldr	r1, .L642+0x4
	add	r0, r2, #0
	bl	StoreSpriteCallbackInData6
	b	.L641
.L643:
	.align	2, 0
.L642:
	.word	WaitAnimForDuration
	.word	sub_81016B8
.L640:
	ldr	r0, .L644
	str	r0, [r2, #0x1c]
.L641:
	pop	{r0}
	bx	r0
.L645:
	.align	2, 0
.L644:
	.word	sub_81015D4
.Lfe87:
	.size	 sub_8101684,.Lfe87-sub_8101684
	.align	2, 0
	.type	 sub_81016B8,function
	.thumb_func
sub_81016B8:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	ldrh	r1, [r5, #0x6]
	cmp	r1, #0
	bne	.L647	@cond_branch
	mov	r0, #0x3
	strh	r0, [r5, #0x2e]
	strh	r1, [r5, #0x30]
	strh	r1, [r5, #0x32]
	ldr	r0, .L657
	str	r0, [r5, #0x1c]
	ldr	r1, .L657+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	b	.L648
.L658:
	.align	2, 0
.L657:
	.word	WaitAnimForDuration
	.word	sub_8101774
.L647:
	ldrh	r0, [r5, #0x6]
	cmp	r0, #0x2
	beq	.L651	@cond_branch
	cmp	r0, #0x2
	bgt	.L655	@cond_branch
	cmp	r0, #0x1
	beq	.L650	@cond_branch
	b	.L653
.L655:
	cmp	r0, #0x3
	beq	.L652	@cond_branch
	b	.L653
.L650:
	ldr	r6, .L659
	add	r7, r6, #0
	b	.L649
.L660:
	.align	2, 0
.L659:
	.word	0xfff8
.L651:
	ldr	r7, .L661
	b	.L656
.L662:
	.align	2, 0
.L661:
	.word	0xfff8
.L652:
	mov	r7, #0x8
	ldr	r6, .L663
	b	.L649
.L664:
	.align	2, 0
.L663:
	.word	0xfff8
.L653:
	mov	r7, #0x8
.L656:
	mov	r6, #0x8
.L649:
	ldrh	r0, [r5, #0x24]
	ldrh	r1, [r5, #0x20]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r5, #0x20]
	ldrh	r0, [r5, #0x26]
	ldrh	r2, [r5, #0x22]
	add	r0, r0, r2
	strh	r0, [r5, #0x22]
	strh	r1, [r5, #0x26]
	strh	r1, [r5, #0x24]
	mov	r0, #0x6
	strh	r0, [r5, #0x2e]
	ldr	r4, .L665
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r7
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r6
	strh	r0, [r5, #0x36]
	ldr	r0, .L665+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L665+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
.L648:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L666:
	.align	2, 0
.L665:
	.word	gBattleAnimTarget
	.word	StartAnimLinearTranslation
	.word	sub_8101820
.Lfe88:
	.size	 sub_81016B8,.Lfe88-sub_81016B8
	.align	2, 0
	.type	 sub_8101774,function
	.thumb_func
sub_8101774:
	push	{r4, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L668	@cond_branch
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x3
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	ble	.L670	@cond_branch
	mov	r0, #0x10
	b	.L675
.L668:
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x3
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L670	@cond_branch
	mov	r0, #0x0
.L675:
	strh	r0, [r4, #0x30]
.L670:
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x1
	mov	r3, #0x1
	bl	sub_80A75AC
	ldrh	r1, [r4, #0x30]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L676
	bl	BlendPalettes
	mov	r3, #0x30
	ldrsh	r0, [r4, r3]
	cmp	r0, #0x10
	bne	.L672	@cond_branch
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	ldrb	r1, [r4, #0x5]
	lsr	r1, r1, #0x4
	lsl	r0, r1, #0x5
	ldr	r2, .L676+0x4
	add	r0, r0, r2
	lsl	r1, r1, #0x4
	ldr	r3, .L676+0x8
	add	r2, r3, #0
	orr	r1, r1, r2
	mov	r2, #0x4
	bl	LoadPalette
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xc0
	bl	PlaySE12WithPanning
	b	.L673
.L677:
	.align	2, 0
.L676:
	.word	0x7fff
	.word	gPlttBufferUnfaded+0x210
	.word	0x101
.L672:
	cmp	r0, #0
	bne	.L673	@cond_branch
	ldr	r0, .L678
	str	r0, [r4, #0x1c]
.L673:
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L679:
	.align	2, 0
.L678:
	.word	sub_8101820
.Lfe89:
	.size	 sub_8101774,.Lfe89-sub_8101774
	.align	2, 0
	.type	 sub_8101820,function
	.thumb_func
sub_8101820:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, .L682
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L682+0x4
	cmp	r1, r0
	bne	.L681	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x30]
	strh	r0, [r2, #0x2e]
	ldr	r0, .L682+0x8
	str	r0, [r2, #0x1c]
.L681:
	pop	{r0}
	bx	r0
.L683:
	.align	2, 0
.L682:
	.word	gBattleAnimArgs
	.word	0xffff
	.word	sub_8101848
.Lfe90:
	.size	 sub_8101820,.Lfe90-sub_8101820
	.align	2, 0
	.type	 sub_8101848,function
	.thumb_func
sub_8101848:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x3
	bl	__modsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L685	@cond_branch
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L685:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x8
	bne	.L686	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L686:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe91:
	.size	 sub_8101848,.Lfe91-sub_8101848
	.align	2, 0
	.globl	sub_8101898
	.type	 sub_8101898,function
	.thumb_func
sub_8101898:
	push	{r4, lr}
	add	r3, r0, #0
	ldr	r0, .L695
	ldrh	r0, [r0]
	strh	r0, [r3, #0x6]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L688	@cond_branch
	ldrh	r0, [r3, #0x20]
	sub	r0, r0, #0x18
	strh	r0, [r3, #0x20]
	ldrh	r0, [r3, #0x22]
	sub	r0, r0, #0x18
	strh	r0, [r3, #0x22]
	b	.L689
.L696:
	.align	2, 0
.L695:
	.word	gBattleAnimArgs
.L688:
	cmp	r0, #0x2
	bne	.L690	@cond_branch
	ldrh	r0, [r3, #0x20]
	sub	r0, r0, #0x18
	strh	r0, [r3, #0x20]
	ldrh	r0, [r3, #0x22]
	add	r0, r0, #0x18
	strh	r0, [r3, #0x22]
	ldrb	r1, [r3, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x20
	b	.L694
.L690:
	cmp	r0, #0x3
	bne	.L692	@cond_branch
	ldrh	r0, [r3, #0x20]
	add	r0, r0, #0x18
	strh	r0, [r3, #0x20]
	ldrh	r0, [r3, #0x22]
	sub	r0, r0, #0x18
	strh	r0, [r3, #0x22]
	ldrb	r1, [r3, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x10
	b	.L694
.L692:
	ldrh	r0, [r3, #0x20]
	add	r0, r0, #0x18
	strh	r0, [r3, #0x20]
	ldrh	r0, [r3, #0x22]
	add	r0, r0, #0x18
	strh	r0, [r3, #0x22]
	ldrb	r1, [r3, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x30
.L694:
	orr	r0, r0, r1
	strb	r0, [r3, #0x3]
.L689:
	ldrh	r2, [r3, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x10
	ldr	r4, .L697
	add	r0, r4, #0
	and	r1, r1, r0
	ldr	r0, .L697+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3, #0x4]
	ldr	r1, .L697+0x8
	str	r1, [r3, #0x1c]
	add	r0, r3, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L698:
	.align	2, 0
.L697:
	.word	0x3ff
	.word	-0x400
	.word	sub_81015AC
.Lfe92:
	.size	 sub_8101898,.Lfe92-sub_8101898
	.align	2, 0
	.globl	sub_8101940
	.type	 sub_8101940,function
	.thumb_func
sub_8101940:
	push	{lr}
	add	r3, r0, #0
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x0
	strh	r0, [r3, #0x2e]
	ldr	r0, .L708
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x1
	beq	.L702	@cond_branch
	cmp	r0, #0x1
	bgt	.L706	@cond_branch
	cmp	r0, #0
	beq	.L701	@cond_branch
	b	.L704
.L709:
	.align	2, 0
.L708:
	.word	gBattleAnimArgs
.L706:
	cmp	r0, #0x2
	beq	.L703	@cond_branch
	b	.L704
.L701:
	ldr	r0, .L710
	b	.L707
.L711:
	.align	2, 0
.L710:
	.word	sub_8101998
.L702:
	ldr	r0, .L712
	b	.L707
.L713:
	.align	2, 0
.L712:
	.word	sub_8101A74
.L703:
	ldr	r0, .L714
	b	.L707
.L715:
	.align	2, 0
.L714:
	.word	sub_8101AC4
.L704:
	ldr	r0, .L716
.L707:
	str	r0, [r3, #0x1c]
	pop	{r0}
	bx	r0
.L717:
	.align	2, 0
.L716:
	.word	sub_8101B84
.Lfe93:
	.size	 sub_8101940,.Lfe93-sub_8101940
	.align	2, 0
	.type	 sub_8101998,function
	.thumb_func
sub_8101998:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	strh	r0, [r4, #0x2e]
	ldr	r5, .L721
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r2, #0x2
	neg	r2, r2
	add	r1, r2, #0
	cmp	r0, #0
	beq	.L719	@cond_branch
	mov	r1, #0x2
.L719:
	strh	r1, [r4, #0x30]
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	ldr	r1, .L721+0x4
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r4, #0x34]
	ldr	r1, .L721+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L721+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L722:
	.align	2, 0
.L721:
	.word	gBattleAnimAttacker
	.word	gBattlerSpriteIds
	.word	sub_81019E8
	.word	TranslateMonSpriteLinear
.Lfe94:
	.size	 sub_8101998,.Lfe94-sub_8101998
	.align	2, 0
	.type	 sub_81019E8,function
	.thumb_func
sub_81019E8:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r0, #0x2e
	ldrsh	r6, [r5, r0]
	cmp	r6, #0
	bne	.L724	@cond_branch
	ldr	r1, .L728
	ldr	r4, .L728+0x4
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r5, #0x34]
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x3a]
	ldr	r2, .L728+0x8
	add	r1, r2, #0
	cmp	r0, #0
	beq	.L725	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x2
	add	r1, r0, #0
.L725:
	strh	r1, [r5, #0x36]
	strh	r6, [r5, #0x38]
.L724:
	ldrh	r0, [r5, #0x36]
	ldrh	r1, [r5, #0x38]
	add	r0, r0, r1
	strh	r0, [r5, #0x38]
	ldrh	r0, [r5, #0x34]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r5, #0x38]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrh	r0, [r5, #0x34]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromRotation
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L727	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	ldr	r0, .L728+0xc
	str	r0, [r5, #0x1c]
.L727:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L729:
	.align	2, 0
.L728:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	-0x300
	.word	sub_8101B84
.Lfe95:
	.size	 sub_81019E8,.Lfe95-sub_81019E8
	.align	2, 0
	.type	 sub_8101A74,function
	.thumb_func
sub_8101A74:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x4
	strh	r0, [r4, #0x2e]
	ldr	r5, .L733
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r1, #0x3
	cmp	r0, #0
	beq	.L731	@cond_branch
	mov	r0, #0x3
	neg	r0, r0
	add	r1, r0, #0
.L731:
	strh	r1, [r4, #0x30]
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	ldr	r1, .L733+0x4
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r4, #0x34]
	ldr	r1, .L733+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L733+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L734:
	.align	2, 0
.L733:
	.word	gBattleAnimAttacker
	.word	gBattlerSpriteIds
	.word	sub_8101B84
	.word	TranslateMonSpriteLinear
.Lfe96:
	.size	 sub_8101A74,.Lfe96-sub_8101A74
	.align	2, 0
	.type	 sub_8101AC4,function
	.thumb_func
sub_8101AC4:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L736	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x2e]
	ldr	r0, .L737
	str	r0, [r1, #0x1c]
.L736:
	pop	{r0}
	bx	r0
.L738:
	.align	2, 0
.L737:
	.word	sub_8101AE8
.Lfe97:
	.size	 sub_8101AC4,.Lfe97-sub_8101AC4
	.align	2, 0
	.type	 sub_8101AE8,function
	.thumb_func
sub_8101AE8:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L740	@cond_branch
	ldr	r1, .L745
	ldr	r4, .L745+0x4
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r5, #0x34]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x3a]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L741	@cond_branch
	mov	r0, #0xfc
	lsl	r0, r0, #0x8
	strh	r0, [r5, #0x36]
	mov	r0, #0xc0
	lsl	r0, r0, #0x4
	b	.L744
.L746:
	.align	2, 0
.L745:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
.L741:
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	strh	r0, [r5, #0x36]
	mov	r0, #0xf4
	lsl	r0, r0, #0x8
.L744:
	strh	r0, [r5, #0x38]
.L740:
	ldrh	r0, [r5, #0x36]
	ldrh	r1, [r5, #0x38]
	add	r0, r0, r1
	strh	r0, [r5, #0x38]
	ldrh	r0, [r5, #0x34]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r5, #0x38]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrh	r0, [r5, #0x34]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromRotation
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L743	@cond_branch
	ldrh	r0, [r5, #0x34]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ResetSpriteRotScale
	ldr	r0, .L747
	str	r0, [r5, #0x1c]
.L743:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L748:
	.align	2, 0
.L747:
	.word	sub_8101B84
.Lfe98:
	.size	 sub_8101AE8,.Lfe98-sub_8101AE8
	.align	2, 0
	.type	 sub_8101B84,function
	.thumb_func
sub_8101B84:
	push	{lr}
	bl	DestroyAnimSprite
	pop	{r0}
	bx	r0
.Lfe99:
	.size	 sub_8101B84,.Lfe99-sub_8101B84
	.align	2, 0
	.globl	sub_8101B90
	.type	 sub_8101B90,function
	.thumb_func
sub_8101B90:
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
	ldr	r1, .L751
	str	r1, [r0, #0x1c]
	bx	lr
.L752:
	.align	2, 0
.L751:
	.word	sub_8101BA0
.Lfe100:
	.size	 sub_8101B90,.Lfe100-sub_8101B90
	.align	2, 0
	.type	 sub_8101BA0,function
	.thumb_func
sub_8101BA0:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x2e
	ldrsh	r5, [r4, r0]
	cmp	r5, #0x1
	beq	.L758	@cond_branch
	cmp	r5, #0x1
	bgt	.L764	@cond_branch
	cmp	r5, #0
	beq	.L755	@cond_branch
	b	.L754
.L764:
	cmp	r5, #0x2
	beq	.L760	@cond_branch
	b	.L754
.L755:
	strh	r5, [r4, #0x30]
	ldr	r1, .L765
	ldr	r2, .L765+0x4
	ldrb	r0, [r2]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r4, #0x32]
	ldrb	r0, [r2]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x34]
	ldr	r2, .L765+0x8
	add	r1, r2, #0
	cmp	r0, #0
	beq	.L756	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	add	r1, r0, #0
.L756:
	strh	r1, [r4, #0x36]
	strh	r5, [r4, #0x38]
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
.L758:
	ldrh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x38]
	add	r0, r0, r1
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0x38]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromRotation
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L754	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	mov	r2, #0x36
	ldrsh	r0, [r4, r2]
	neg	r0, r0
	strh	r0, [r4, #0x36]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L754
.L766:
	.align	2, 0
.L765:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	-0x200
.L760:
	ldrh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x38]
	add	r0, r0, r1
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0x38]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromRotation
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L754	@cond_branch
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ResetSpriteRotScale
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L754:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe101:
	.size	 sub_8101BA0,.Lfe101-sub_8101BA0
	.align	2, 0
	.globl	sub_8101C94
	.type	 sub_8101C94,function
	.thumb_func
sub_8101C94:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L776
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldr	r1, .L776+0x4
	ldr	r2, .L776+0x8
	ldrb	r0, [r2]
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r4, #0x0
	strh	r0, [r5, #0x8]
	ldrb	r0, [r2]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	strh	r2, [r5, #0xa]
	strh	r4, [r5, #0xc]
	ldr	r0, .L776+0xc
	mov	r3, #0x0
	ldrsh	r1, [r0, r3]
	cmp	r1, #0
	beq	.L770	@cond_branch
	cmp	r1, #0x1
	beq	.L772	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	b	.L768
.L777:
	.align	2, 0
.L776:
	.word	gTasks
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L770:
	strh	r1, [r5, #0xc]
	mov	r0, #0x8
	strh	r0, [r5, #0xe]
	strh	r1, [r5, #0x10]
	mov	r0, #0x3
	strh	r0, [r5, #0x12]
	cmp	r2, #0
	bne	.L771	@cond_branch
	neg	r0, r0
	strh	r0, [r5, #0x12]
.L771:
	ldr	r0, .L778
	b	.L775
.L779:
	.align	2, 0
.L778:
	.word	sub_8101D2C
.L772:
	mov	r0, #0x8
	strh	r0, [r5, #0xe]
	mov	r0, #0xc0
	lsl	r0, r0, #0x3
	strh	r0, [r5, #0x10]
	mov	r1, #0xc0
	strh	r1, [r5, #0x12]
	cmp	r2, #0
	bne	.L773	@cond_branch
	neg	r0, r0
	strh	r0, [r5, #0x10]
	neg	r0, r1
	strh	r0, [r5, #0x12]
.L773:
	ldr	r0, .L780
.L775:
	str	r0, [r5]
.L768:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L781:
	.align	2, 0
.L780:
	.word	sub_8101EEC
.Lfe102:
	.size	 sub_8101C94,.Lfe102-sub_8101C94
	.align	2, 0
	.type	 sub_8101D2C,function
	.thumb_func
sub_8101D2C:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L815
	add	r4, r0, r1
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	bls	.LCB8840
	b	.L783	@long jump
.LCB8840:
	lsl	r0, r0, #0x2
	ldr	r1, .L815+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L816:
	.align	2, 0
.L815:
	.word	gTasks
	.word	.L809
	.align	2, 0
	.align	2, 0
.L809:
	.word	.L784
	.word	.L789
	.word	.L794
	.word	.L801
	.word	.L806
.L784:
	mov	r2, #0xe
	ldrsh	r1, [r4, r2]
	cmp	r1, #0
	beq	.L785	@cond_branch
	ldrh	r2, [r4, #0x12]
	ldrh	r3, [r4, #0x10]
	add	r2, r2, r3
	b	.L811
.L785:
	mov	r0, #0x8
	strh	r0, [r4, #0xe]
	strh	r1, [r4, #0x10]
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	mov	r1, #0xc0
	cmp	r0, #0
	bne	.L787	@cond_branch
	mov	r2, #0xc0
	neg	r2, r2
	add	r1, r2, #0
.L787:
	strh	r1, [r4, #0x12]
	ldrb	r0, [r4, #0x8]
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	b	.L812
.L789:
	mov	r3, #0xe
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L790	@cond_branch
	ldrh	r0, [r4, #0x12]
	ldrh	r1, [r4, #0x10]
	add	r0, r0, r1
	strh	r0, [r4, #0x10]
	ldrb	r0, [r4, #0x8]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0x10]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrb	r0, [r4, #0x8]
	bl	SetBattlerSpriteYOffsetFromRotation
	b	.L813
.L790:
	mov	r0, #0x8
	strh	r0, [r4, #0xe]
	ldr	r2, .L817
	mov	r3, #0x8
	ldrsh	r1, [r4, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x24]
	strh	r0, [r4, #0x10]
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	mov	r2, #0x2
	neg	r2, r2
	add	r1, r2, #0
	cmp	r0, #0
	bne	.L792	@cond_branch
	mov	r1, #0x2
.L792:
	strh	r1, [r4, #0x12]
	mov	r0, #0x1
	strh	r0, [r4, #0x14]
	b	.L812
.L818:
	.align	2, 0
.L817:
	.word	gSprites
.L794:
	ldrh	r2, [r4, #0xe]
	mov	r3, #0xe
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L795	@cond_branch
	ldrh	r1, [r4, #0x14]
	mov	r3, #0x14
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L796	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x14]
	b	.L783
.L796:
	mov	r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L798	@cond_branch
	ldr	r2, .L819
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x12]
	ldrh	r2, [r4, #0x10]
	add	r1, r1, r2
	b	.L814
.L820:
	.align	2, 0
.L819:
	.word	gSprites
.L798:
	ldr	r2, .L821
	mov	r3, #0x8
	ldrsh	r1, [r4, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x10]
	ldrh	r2, [r4, #0x12]
	sub	r1, r1, r2
.L814:
	strh	r1, [r0, #0x24]
	mov	r0, #0x1
	strh	r0, [r4, #0x14]
	b	.L813
.L822:
	.align	2, 0
.L821:
	.word	gSprites
.L795:
	ldr	r2, .L823
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x10]
	strh	r1, [r0, #0x24]
	mov	r0, #0xc
	strh	r0, [r4, #0xe]
	b	.L812
.L824:
	.align	2, 0
.L823:
	.word	gSprites
.L801:
	ldrh	r1, [r4, #0xe]
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L802	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0xe]
	b	.L783
.L802:
	mov	r0, #0x3
	strh	r0, [r4, #0xe]
	ldr	r2, .L825
	mov	r3, #0x8
	ldrsh	r1, [r4, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x24]
	strh	r0, [r4, #0x10]
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	mov	r2, #0x8
	neg	r2, r2
	add	r1, r2, #0
	cmp	r0, #0
	bne	.L804	@cond_branch
	mov	r1, #0x8
.L804:
	strh	r1, [r4, #0x12]
.L812:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	b	.L783
.L826:
	.align	2, 0
.L825:
	.word	gSprites
.L806:
	mov	r3, #0xe
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L807	@cond_branch
	ldrh	r2, [r4, #0x12]
	ldrh	r0, [r4, #0x10]
	add	r2, r2, r0
.L811:
	strh	r2, [r4, #0x10]
	ldr	r3, .L827
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r2, [r0, #0x24]
.L813:
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	b	.L783
.L828:
	.align	2, 0
.L827:
	.word	gSprites
.L807:
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L783:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe103:
	.size	 sub_8101D2C,.Lfe103-sub_8101D2C
	.align	2, 0
	.type	 sub_8101EEC,function
	.thumb_func
sub_8101EEC:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L832
	add	r4, r0, r1
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L830	@cond_branch
	ldrh	r0, [r4, #0x10]
	ldrh	r1, [r4, #0x12]
	sub	r0, r0, r1
	strh	r0, [r4, #0x10]
	ldrb	r0, [r4, #0x8]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0x10]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrb	r0, [r4, #0x8]
	bl	SetBattlerSpriteYOffsetFromRotation
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	b	.L831
.L833:
	.align	2, 0
.L832:
	.word	gTasks
.L830:
	ldrb	r0, [r4, #0x8]
	bl	ResetSpriteRotScale
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L831:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe104:
	.size	 sub_8101EEC,.Lfe104-sub_8101EEC
	.align	2, 0
	.globl	sub_8101F40
	.type	 sub_8101F40,function
	.thumb_func
sub_8101F40:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L838
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L835	@cond_branch
	ldr	r4, .L838+0x4
	b	.L837
.L839:
	.align	2, 0
.L838:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L835:
	ldr	r4, .L840
.L837:
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x2]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x4]
	add	r0, r0, r6
	strh	r0, [r5, #0x22]
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	strh	r0, [r5, #0x30]
	ldr	r1, .L840+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L840+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L841:
	.align	2, 0
.L840:
	.word	gBattleAnimTarget
	.word	sub_810208C
	.word	RunStoredCallbackWhenAnimEnds
.Lfe105:
	.size	 sub_8101F40,.Lfe105-sub_8101F40
	.align	2, 0
	.globl	sub_8101FA8
	.type	 sub_8101FA8,function
	.thumb_func
sub_8101FA8:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L843
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L843+0x4
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	ldr	r1, .L843+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L843+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L844:
	.align	2, 0
.L843:
	.word	gBattleAnimTarget
	.word	0xffd0
	.word	sub_8102044
	.word	RunStoredCallbackWhenAnimEnds
.Lfe106:
	.size	 sub_8101FA8,.Lfe106-sub_8101FA8
	.align	2, 0
	.globl	sub_8101FF0
	.type	 sub_8101FF0,function
	.thumb_func
sub_8101FF0:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r5, .L846
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L846+0x4
	ldr	r2, .L846+0x8
	add	r0, r0, r2
	ldrh	r1, [r1]
	add	r0, r0, r1
	mov	r6, #0x0
	strh	r0, [r4, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	strh	r6, [r4, #0x2e]
	strh	r6, [r4, #0x30]
	ldr	r0, .L846+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L847:
	.align	2, 0
.L846:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	0xffd0
	.word	sub_810208C
.Lfe107:
	.size	 sub_8101FF0,.Lfe107-sub_8101FF0
	.align	2, 0
	.type	 sub_8102044,function
	.thumb_func
sub_8102044:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L849	@cond_branch
	mov	r0, #0xc
	strh	r0, [r4, #0x2e]
	mov	r0, #0x8
	strh	r0, [r4, #0x30]
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	ldr	r1, .L850
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L850+0x4
	str	r0, [r4, #0x1c]
.L849:
	pop	{r4}
	pop	{r0}
	bx	r0
.L851:
	.align	2, 0
.L850:
	.word	sub_810207C
	.word	TranslateSpriteLinear
.Lfe108:
	.size	 sub_8102044,.Lfe108-sub_8102044
	.align	2, 0
	.type	 sub_810207C,function
	.thumb_func
sub_810207C:
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
	strh	r1, [r0, #0x30]
	ldr	r1, .L853
	str	r1, [r0, #0x1c]
	bx	lr
.L854:
	.align	2, 0
.L853:
	.word	sub_810208C
.Lfe109:
	.size	 sub_810207C,.Lfe109-sub_810207C
	.align	2, 0
	.type	 sub_810208C,function
	.thumb_func
sub_810208C:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L856	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x2e]
	mov	r0, #0x3e
	add	r0, r0, r3
	mov	ip, r0
	ldrb	r2, [r0]
	lsr	r1, r2, #0x2
	mov	r0, #0x1
	eor	r1, r1, r0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldrh	r0, [r3, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L856	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimSprite
.L856:
	pop	{r0}
	bx	r0
.Lfe110:
	.size	 sub_810208C,.Lfe110-sub_810208C
	.align	2, 0
	.globl	sub_81020D8
	.type	 sub_81020D8,function
	.thumb_func
sub_81020D8:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L862
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L859	@cond_branch
	ldr	r4, .L862+0x4
	b	.L861
.L863:
	.align	2, 0
.L862:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L859:
	ldr	r4, .L864
.L861:
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x2]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x4]
	add	r0, r0, r6
	strh	r0, [r5, #0x22]
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	ldr	r0, .L864+0x4
	ldrh	r0, [r0, #0x6]
	strh	r0, [r5, #0x30]
	ldr	r0, .L864+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L865:
	.align	2, 0
.L864:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	sub_810213C
.Lfe111:
	.size	 sub_81020D8,.Lfe111-sub_81020D8
	.align	2, 0
	.type	 sub_810213C,function
	.thumb_func
sub_810213C:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x30
	ldrsh	r1, [r2, r3]
	cmp	r0, r1
	ble	.L867	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x2e]
	ldrh	r0, [r2, #0x22]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x22]
.L867:
	ldrh	r0, [r2, #0x22]
	ldrh	r1, [r2, #0x2e]
	sub	r0, r0, r1
	strh	r0, [r2, #0x22]
	add	r0, r2, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L868	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L868:
	pop	{r0}
	bx	r0
.Lfe112:
	.size	 sub_810213C,.Lfe112-sub_810213C
	.align	2, 0
	.globl	sub_810217C
	.type	 sub_810217C,function
	.thumb_func
sub_810217C:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r6, .L870
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	strh	r0, [r4, #0x20]
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0xc
	strh	r0, [r4, #0x22]
	strh	r5, [r4, #0x2e]
	mov	r0, #0x2
	strh	r0, [r4, #0x30]
	strh	r5, [r4, #0x32]
	strh	r5, [r4, #0x34]
	strh	r5, [r4, #0x36]
	sub	r0, r0, #0x42
	bl	BattleAnimAdjustPanning
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x38]
	ldr	r0, .L870+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L871:
	.align	2, 0
.L870:
	.word	gBattleAnimAttacker
	.word	sub_81021CC
.Lfe113:
	.size	 sub_810217C,.Lfe113-sub_810217C
	.align	2, 0
	.type	 sub_81021CC,function
	.thumb_func
sub_81021CC:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	blt	.L873	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsr	r1, r2, #0x2
	mov	r0, #0x1
	eor	r1, r1, r0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	mov	r1, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L874	@cond_branch
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x36]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L874	@cond_branch
	ldrh	r1, [r4, #0x38]
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xc2
	bl	PlaySE12WithPanning
.L874:
	mov	r1, #0x0
	strh	r1, [r4, #0x2e]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L873	@cond_branch
	strh	r1, [r4, #0x32]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
.L873:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L877	@cond_branch
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	ble	.L877	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L877	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L877:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe114:
	.size	 sub_81021CC,.Lfe114-sub_81021CC
	.align	2, 0
	.globl	sub_8102268
	.type	 sub_8102268,function
	.thumb_func
sub_8102268:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L879	@cond_branch
	ldr	r4, .L882
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r5, .L882+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r5]
	add	r0, r0, r1
	strh	r0, [r6, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r5, [r5, #0x2]
	add	r0, r0, r5
	strh	r0, [r6, #0x22]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L880	@cond_branch
	ldrh	r0, [r6, #0x22]
	add	r0, r0, #0xa
	strh	r0, [r6, #0x22]
.L880:
	ldrh	r0, [r6, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x2e]
.L879:
	ldr	r0, .L882+0x4
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L882+0x8
	cmp	r1, r0
	bne	.L881	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimSprite
.L881:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L883:
	.align	2, 0
.L882:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	0xffff
.Lfe115:
	.size	 sub_8102268,.Lfe115-sub_8102268
	.align	2, 0
	.globl	sub_81022D4
	.type	 sub_81022D4,function
	.thumb_func
sub_81022D4:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L892
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	bne	.L885	@cond_branch
	ldr	r1, .L892+0x4
	ldr	r0, .L892+0x8
	strh	r0, [r1, #0xe]
	b	.L891
.L893:
	.align	2, 0
.L892:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	0xffff
.L885:
	cmp	r0, #0x2
	bne	.L887	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	b	.L886
.L887:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L886	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldrh	r2, [r4, #0xa]
	add	r2, r2, #0x1
	strh	r2, [r4, #0xa]
	lsl	r1, r2, #0x8
	mov	r0, #0x10
	sub	r0, r0, r2
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L886	@cond_branch
.L891:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
.L886:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe116:
	.size	 sub_81022D4,.Lfe116-sub_81022D4
	.align	2, 0
	.globl	sub_810234C
	.type	 sub_810234C,function
	.thumb_func
sub_810234C:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L895
	ldrh	r0, [r0, #0x4]
	strh	r0, [r4, #0x2e]
	ldr	r0, .L895+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L896:
	.align	2, 0
.L895:
	.word	gBattleAnimArgs
	.word	sub_810237C
.Lfe117:
	.size	 sub_810234C,.Lfe117-sub_810234C
	.align	2, 0
	.type	 sub_810237C,function
	.thumb_func
sub_810237C:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r1, [r5, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r5, r2]
	cmp	r0, #0
	beq	.L898	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r5, #0x2e]
	b	.L899
.L898:
	add	r2, r5, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x1e
	strh	r0, [r5, #0x2e]
	ldr	r4, .L900
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	ldr	r0, .L900+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L900+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
.L899:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L901:
	.align	2, 0
.L900:
	.word	gBattleAnimAttacker
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe118:
	.size	 sub_810237C,.Lfe118-sub_810237C
	.align	2, 0
	.globl	sub_81023E0
	.type	 sub_81023E0,function
	.thumb_func
sub_81023E0:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L905
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L903	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldrh	r1, [r4, #0xa]
	add	r1, r1, #0x1
	strh	r1, [r4, #0xa]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L903	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L903:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L906:
	.align	2, 0
.L905:
	.word	gTasks
.Lfe119:
	.size	 sub_81023E0,.Lfe119-sub_81023E0
	.align	2, 0
	.globl	unref_sub_8102434
	.type	 unref_sub_8102434,function
	.thumb_func
unref_sub_8102434:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r4, #0x0
	ldr	r0, .L915
	ldrb	r0, [r0]
	cmp	r4, r0
	bcs	.L909	@cond_branch
	ldr	r6, .L915+0x4
	ldr	r5, .L915+0x8
.L911:
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x1
	bne	.L912	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L912	@cond_branch
	add	r0, r4, r5
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
.L912:
	mov	r1, #0x2
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x1
	bne	.L910	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L910	@cond_branch
	add	r0, r4, r5
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
.L910:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L915
	ldrb	r0, [r0]
	cmp	r4, r0
	bcc	.L911	@cond_branch
.L909:
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L916:
	.align	2, 0
.L915:
	.word	gBattlersCount
	.word	gBattleAnimArgs
	.word	gHealthboxSpriteIds
.Lfe120:
	.size	 unref_sub_8102434,.Lfe120-unref_sub_8102434
	.align	2, 0
	.globl	unref_sub_81024A8
	.type	 unref_sub_81024A8,function
	.thumb_func
unref_sub_81024A8:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	b	.L923
.L921:
	ldr	r0, .L924
	add	r0, r4, r0
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L923:
	ldr	r0, .L924+0x4
	ldrb	r0, [r0]
	cmp	r4, r0
	bcc	.L921	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L925:
	.align	2, 0
.L924:
	.word	gHealthboxSpriteIds
	.word	gBattlersCount
.Lfe121:
	.size	 unref_sub_81024A8,.Lfe121-unref_sub_81024A8
	.align	2, 0
	.globl	sub_81024E0
	.type	 sub_81024E0,function
	.thumb_func
sub_81024E0:
	push	{r4, lr}
	add	r4, r0, #0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L927	@cond_branch
	mov	r0, #0x30
	strh	r0, [r4, #0x20]
	mov	r0, #0x28
	b	.L929
.L927:
	ldr	r0, .L930
	ldrh	r1, [r0]
	strh	r1, [r4, #0x20]
	ldrh	r0, [r0, #0x2]
.L929:
	strh	r0, [r4, #0x22]
	ldrb	r1, [r4, #0x1]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r4, #0x1]
	ldrb	r0, [r4, #0x3]
	mov	r1, #0xc0
	orr	r0, r0, r1
	strb	r0, [r4, #0x3]
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	ldr	r0, .L930+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L931:
	.align	2, 0
.L930:
	.word	gBattleAnimArgs
	.word	sub_8102528
.Lfe122:
	.size	 sub_81024E0,.Lfe122-sub_81024E0
	.align	2, 0
	.type	 sub_8102528,function
	.thumb_func
sub_8102528:
	push	{lr}
	add	r1, r0, #0
	mov	r2, #0x2e
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L933	@cond_branch
	add	r0, r1, #0
	bl	DestroyAnimSprite
.L933:
	pop	{r0}
	bx	r0
.Lfe123:
	.size	 sub_8102528,.Lfe123-sub_8102528
	.align	2, 0
	.globl	sub_8102540
	.type	 sub_8102540,function
	.thumb_func
sub_8102540:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L935
	ldrb	r0, [r0]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r2, .L935+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r2]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x2]
	strh	r0, [r4, #0x22]
	strh	r1, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	strh	r1, [r4, #0x32]
	strh	r1, [r4, #0x34]
	mov	r0, #0x1
	strh	r0, [r4, #0x36]
	ldr	r0, .L935+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L936:
	.align	2, 0
.L935:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	sub_8102584
.Lfe124:
	.size	 sub_8102540,.Lfe124-sub_8102540
	.align	2, 0
	.type	 sub_8102584,function
	.thumb_func
sub_8102584:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L938	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x30]
	ldrh	r2, [r1, #0x32]
	mov	r3, #0x32
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x77
	bgt	.L938	@cond_branch
	ldrh	r0, [r1, #0x22]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x22]
	add	r0, r2, #0x1
	strh	r0, [r1, #0x32]
.L938:
	mov	r2, #0x2e
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L940	@cond_branch
	add	r0, r1, #0
	bl	DestroyAnimSprite
.L940:
	pop	{r0}
	bx	r0
.Lfe125:
	.size	 sub_8102584,.Lfe125-sub_8102584
	.align	2, 0
	.globl	sub_81025C0
	.type	 sub_81025C0,function
	.thumb_func
sub_81025C0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r4, #0x0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_80A75AC
	mov	r8, r0
	ldr	r0, .L942
	mov	r1, r8
	and	r1, r1, r0
	mov	r8, r1
	ldr	r0, .L942+0x4
	mov	r9, r0
	lsl	r5, r7, #0x2
	add	r5, r5, r7
	lsl	r5, r5, #0x3
	add	r6, r5, r0
	strh	r4, [r6, #0x8]
	strh	r4, [r6, #0xa]
	strh	r4, [r6, #0xc]
	strh	r1, [r6, #0xe]
	strh	r4, [r6, #0x10]
	strh	r4, [r6, #0x12]
	strh	r4, [r6, #0x14]
	mov	r0, #0xd
	strh	r0, [r6, #0x16]
	mov	r0, #0xe
	strh	r0, [r6, #0x18]
	mov	r0, #0xf
	strh	r0, [r6, #0x1a]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x1
	mov	r3, #0x1
	bl	sub_80A76C4
	mov	sl, r0
	mov	r1, r8
	orr	r1, r1, r0
	mov	r8, r1
	mov	r0, #0x8
	add	r9, r9, r0
	add	r5, r5, r9
	add	r0, r5, #0
	add	r0, r0, #0x1c
	add	r5, r5, #0x1e
	add	r1, r5, #0
	mov	r2, r8
	bl	StorePointerInVars
	ldr	r0, .L942+0x8
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r4, #0x80
	lsl	r4, r4, #0x9
	add	r1, r4, #0
	lsl	r1, r1, r0
	mov	r0, sl
	orr	r0, r0, r1
	mov	sl, r0
	ldr	r0, .L942+0xc
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, r0
	mov	r1, sl
	orr	r4, r4, r1
	ldr	r0, .L942+0x10
	str	r0, [sp]
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L942+0x14
	str	r1, [r6]
	add	r0, r7, #0
	bl	_call_via_r1
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L943:
	.align	2, 0
.L942:
	.word	0xffff
	.word	gTasks
	.word	0x27d2
	.word	0x27d3
	.word	0x7fbb
	.word	sub_81026A8
.Lfe126:
	.size	 sub_81025C0,.Lfe126-sub_81025C0
	.align	2, 0
	.globl	sub_81026A8
	.type	 sub_81026A8,function
	.thumb_func
sub_81026A8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L978
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	cmp	r1, #0x1
	beq	.L961	@cond_branch
	cmp	r1, #0x1
	bgt	.L976	@cond_branch
	cmp	r1, #0
	beq	.L946	@cond_branch
	b	.L945
.L979:
	.align	2, 0
.L978:
	.word	gTasks
.L976:
	cmp	r1, #0x2
	bne	.LCB10503
	b	.L970	@long jump
.LCB10503:
	cmp	r1, #0x3
	bne	.LCB10505
	b	.L972	@long jump
.LCB10505:
	b	.L945
.L946:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.LCB10517
	b	.L945	@long jump
.LCB10517:
	strh	r1, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf
	bgt	.L948	@cond_branch
	ldrh	r0, [r4, #0x16]
	ldrh	r1, [r4, #0x10]
	add	r0, r0, r1
	strh	r0, [r4, #0x10]
	ldrh	r2, [r4, #0x18]
	ldrh	r3, [r4, #0x12]
	add	r2, r2, r3
	strh	r2, [r4, #0x12]
	ldrh	r1, [r4, #0x1a]
	ldrh	r5, [r4, #0x14]
	add	r1, r1, r5
	strh	r1, [r4, #0x14]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x13
	lsl	r2, r2, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x13
	lsl	r1, r1, #0x10
	lsr	r2, r2, #0xb
	orr	r0, r0, r2
	lsr	r1, r1, #0x6
	orr	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	ip, r0
	b	.L949
.L948:
	ldr	r7, .L980
	mov	ip, r7
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L949:
	mov	r2, #0x1
	mov	r3, #0x0
	mov	r1, #0x0
.L953:
	mov	r5, #0xe
	ldrsh	r0, [r4, r5]
	and	r0, r0, r2
	lsl	r5, r2, #0x11
	add	r6, r3, #0
	add	r6, r6, #0x10
	add	r1, r1, #0x1
	mov	r8, r1
	cmp	r0, #0
	beq	.L954	@cond_branch
	mov	r1, #0x1
	ldr	r2, .L980+0x4
.L958:
	add	r0, r3, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	mov	r7, ip
	strh	r7, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0xf
	bls	.L958	@cond_branch
.L954:
	lsr	r2, r5, #0x10
	lsl	r0, r6, #0x10
	lsr	r3, r0, #0x10
	mov	r1, r8
	lsl	r0, r1, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0xf
	bls	.L953	@cond_branch
	b	.L945
.L981:
	.align	2, 0
.L980:
	.word	0x7fbb
	.word	gPlttBufferFaded
.L961:
	ldr	r0, .L982
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L945	@cond_branch
	mov	r2, #0x0
	ldr	r3, .L982+0x4
	mov	r5, #0x14
	add	r5, r5, r3
	mov	ip, r5
	ldr	r7, .L982+0x8
	mov	r8, r7
	ldr	r6, .L982+0xc
	mov	r5, #0x1
.L966:
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r1, r0, #0x2
	mov	r7, ip
	add	r0, r1, r7
	ldr	r0, [r0]
	cmp	r0, r8
	beq	.L968	@cond_branch
	cmp	r0, r6
	bne	.L965	@cond_branch
.L968:
	add	r0, r1, r3
	strh	r5, [r0, #0x2e]
.L965:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3f
	bls	.L966	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	b	.L977
.L983:
	.align	2, 0
.L982:
	.word	gPaletteFade
	.word	gSprites
	.word	gUnknown_08592EBC
	.word	gBattleAnimSpriteTemplate_8592EEC
.L970:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1e
	ble	.L945	@cond_branch
	mov	r1, #0x24
	ldrsh	r0, [r4, r1]
	mov	r2, #0x26
	ldrsh	r1, [r4, r2]
	bl	LoadPointerFromVars
	ldr	r1, .L984
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
.L977:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L945
.L985:
	.align	2, 0
.L984:
	.word	0x7fbb
.L972:
	ldr	r0, .L986
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L945	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L945:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L987:
	.align	2, 0
.L986:
	.word	gPaletteFade
.Lfe127:
	.size	 sub_81026A8,.Lfe127-sub_81026A8
	.align	2, 0
	.globl	sub_8102844
	.type	 sub_8102844,function
	.thumb_func
sub_8102844:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L996
	mov	r1, #0x4
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x1
	bgt	.L989	@cond_branch
	mov	r0, #0x2
	strh	r0, [r6, #0x4]
.L989:
	mov	r1, #0x4
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x7f
	ble	.L990	@cond_branch
	mov	r0, #0x7f
	strh	r0, [r6, #0x4]
.L990:
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r6, #0x4]
	strh	r0, [r5, #0x30]
	ldr	r4, .L996+0x4
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x2]
	add	r0, r0, r6
	strh	r0, [r5, #0x22]
	ldrh	r1, [r5, #0x20]
	strh	r1, [r5, #0x3a]
	strh	r0, [r5, #0x3c]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L991	@cond_branch
	ldrb	r1, [r5, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r5, #0x3]
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x28
	strh	r0, [r5, #0x20]
	ldrh	r4, [r5, #0x22]
	add	r4, r4, #0x14
	strh	r4, [r5, #0x22]
	lsl	r0, r0, #0x7
	strh	r0, [r5, #0x32]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	ldr	r0, .L996+0x8
	b	.L995
.L997:
	.align	2, 0
.L996:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	-0x1400
.L991:
	ldr	r0, .L998
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L993	@cond_branch
	ldrh	r0, [r5, #0x20]
	sub	r0, r0, #0x28
	strh	r0, [r5, #0x20]
	ldrh	r4, [r5, #0x22]
	add	r4, r4, #0x14
	strh	r4, [r5, #0x22]
	lsl	r0, r0, #0x7
	strh	r0, [r5, #0x32]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	mov	r0, #0xa0
	lsl	r0, r0, #0x5
.L995:
	bl	__divsi3
	strh	r0, [r5, #0x34]
	lsl	r4, r4, #0x7
	strh	r4, [r5, #0x36]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	ldr	r0, .L998+0x4
	bl	__divsi3
	strh	r0, [r5, #0x38]
	b	.L992
.L999:
	.align	2, 0
.L998:
	.word	gBattleAnimAttacker
	.word	-0xa00
.L993:
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x28
	strh	r0, [r5, #0x20]
	ldrh	r4, [r5, #0x22]
	sub	r4, r4, #0x14
	strh	r4, [r5, #0x22]
	lsl	r0, r0, #0x7
	strh	r0, [r5, #0x32]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	ldr	r0, .L1000
	bl	__divsi3
	strh	r0, [r5, #0x34]
	lsl	r4, r4, #0x7
	strh	r4, [r5, #0x36]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	mov	r0, #0xa0
	lsl	r0, r0, #0x4
	bl	__divsi3
	strh	r0, [r5, #0x38]
	ldrb	r1, [r5, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x30
	orr	r0, r0, r1
	strb	r0, [r5, #0x3]
.L992:
	ldr	r0, .L1000+0x4
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1001:
	.align	2, 0
.L1000:
	.word	-0x1400
	.word	sub_810296C
.Lfe128:
	.size	 sub_8102844,.Lfe128-sub_8102844
	.align	2, 0
	.type	 sub_810296C,function
	.thumb_func
sub_810296C:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x34]
	ldrh	r1, [r2, #0x32]
	add	r0, r0, r1
	strh	r0, [r2, #0x32]
	ldrh	r1, [r2, #0x38]
	ldrh	r3, [r2, #0x36]
	add	r1, r1, r3
	strh	r1, [r2, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x17
	strh	r0, [r2, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x17
	strh	r1, [r2, #0x22]
	ldrh	r0, [r2, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L1003	@cond_branch
	ldrh	r0, [r2, #0x3a]
	strh	r0, [r2, #0x20]
	ldrh	r0, [r2, #0x3c]
	strh	r0, [r2, #0x22]
.L1003:
	mov	r1, #0x30
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	bne	.L1004	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L1004:
	pop	{r0}
	bx	r0
.Lfe129:
	.size	 sub_810296C,.Lfe129-sub_810296C
	.align	2, 0
	.globl	sub_81029B4
	.type	 sub_81029B4,function
	.thumb_func
sub_81029B4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r1, .L1018
	add	r6, r0, r1
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x8]
	ldr	r0, .L1018+0x4
	bl	AllocSpritePalette
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0xa]
	mov	r1, #0xa
	ldrsh	r0, [r6, r1]
	lsl	r0, r0, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r0, r0, r1
	lsr	r3, r0, #0x10
	ldr	r2, .L1018+0x8
	mov	r0, #0x8
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	lsl	r4, r0, #0x4
	mov	r5, #0x1
	ldr	r2, .L1018+0xc
.L1009:
	add	r1, r3, r5
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	add	r0, r4, r5
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0xf
	bls	.L1009	@cond_branch
	add	r0, r3, #0
	mov	r1, #0x10
	mov	r2, #0xb
	mov	r3, #0x0
	bl	BlendPalette
	mov	r0, #0x0
	strh	r0, [r6, #0xe]
	mov	r5, #0x0
	ldr	r7, .L1018+0x8
	mov	r1, #0x1c
	add	r1, r1, r7
	mov	r9, r1
	b	.L1011
.L1019:
	.align	2, 0
.L1018:
	.word	gTasks
	.word	0x2771
	.word	gSprites
	.word	gPlttBufferUnfaded
.L1013:
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r4, r2, r7
	ldrb	r1, [r6, #0xa]
	lsl	r1, r1, #0x4
	ldrb	r3, [r4, #0x5]
	mov	r0, #0xf
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	lsl	r0, r5, #0x7
	strh	r0, [r4, #0x30]
	mov	r0, r8
	strh	r0, [r4, #0x32]
	add	r2, r2, r9
	ldr	r0, .L1020
	str	r0, [r2]
	ldrh	r0, [r6, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xe]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L1011:
	cmp	r5, #0x1
	bhi	.L1012	@cond_branch
	mov	r0, #0x0
	bl	CloneBattlerSpriteWithBlend
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L1013	@cond_branch
.L1012:
	ldr	r0, .L1020+0x4
	str	r0, [r6]
	ldr	r0, .L1020+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1016	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	bl	ClearGpuRegBits
	b	.L1017
.L1021:
	.align	2, 0
.L1020:
	.word	sub_8102B3C
	.word	sub_8102AE0
	.word	gBattleAnimAttacker
.L1016:
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	mov	r0, #0x0
	bl	ClearGpuRegBits
.L1017:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe130:
	.size	 sub_81029B4,.Lfe130-sub_81029B4
	.align	2, 0
	.type	 sub_8102AE0,function
	.thumb_func
sub_8102AE0:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L1026
	add	r0, r0, r1
	mov	r1, #0xe
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1023	@cond_branch
	ldr	r0, .L1026+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1024	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	bl	SetGpuRegBits
	b	.L1025
.L1027:
	.align	2, 0
.L1026:
	.word	gTasks
	.word	gBattleAnimAttacker
.L1024:
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	mov	r0, #0x0
	bl	SetGpuRegBits
.L1025:
	ldr	r0, .L1028
	bl	FreeSpritePaletteByTag
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L1023:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1029:
	.align	2, 0
.L1028:
	.word	0x2771
.Lfe131:
	.size	 sub_8102AE0,.Lfe131-sub_8102AE0
	.align	2, 0
	.type	 sub_8102B3C,function
	.thumb_func
sub_8102B3C:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L1031	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x34]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
.L1031:
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x40
	ble	.L1032	@cond_branch
	ldr	r2, .L1034
	mov	r0, #0x32
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0xe]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0xe]
	add	r0, r5, #0
	bl	obj_delete_but_dont_free_vram
	b	.L1033
.L1035:
	.align	2, 0
.L1034:
	.word	gTasks
.L1032:
	ldr	r4, .L1036
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	mov	r1, #0x6
	bl	__divsi3
	strh	r0, [r5, #0x36]
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	mov	r1, #0xd
	bl	__divsi3
	strh	r0, [r5, #0x38]
	ldrh	r1, [r5, #0x30]
	add	r1, r1, r0
	mov	r0, #0xff
	and	r1, r1, r0
	strh	r1, [r5, #0x30]
	mov	r1, #0x30
	ldrsh	r0, [r5, r1]
	mov	r2, #0x36
	ldrsh	r1, [r5, r2]
	bl	Sin
	strh	r0, [r5, #0x24]
.L1033:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1037:
	.align	2, 0
.L1036:
	.word	gSineTable
.Lfe132:
	.size	 sub_8102B3C,.Lfe132-sub_8102B3C
	.align	2, 0
	.globl	sub_8102BCC
	.type	 sub_8102BCC,function
	.thumb_func
sub_8102BCC:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L1039
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L1039+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1040:
	.align	2, 0
.L1039:
	.word	DestroyAnimSprite
	.word	RunStoredCallbackWhenAnimEnds
.Lfe133:
	.size	 sub_8102BCC,.Lfe133-sub_8102BCC
	.align	2, 0
	.globl	sub_8102BE8
	.type	 sub_8102BE8,function
	.thumb_func
sub_8102BE8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r4, .L1059
	ldrh	r0, [r4]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0xff
	beq	.L1042	@cond_branch
	lsl	r0, r3, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r0, r0, r1
	lsr	r3, r0, #0x10
	mov	r2, #0x1
	ldr	r5, .L1059+0x4
.L1046:
	add	r1, r3, r2
	lsl	r1, r1, #0x1
	add	r1, r1, r5
	lsl	r0, r2, #0x1
	add	r0, r0, r4
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x5
	bls	.L1046	@cond_branch
.L1042:
	mov	r4, #0x1
	ldr	r0, .L1059
	mov	r8, r0
.L1051:
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r5, r0, #0x2
	mov	r1, r8
	add	r0, r5, r1
	ldrh	r0, [r0]
	bl	AllocSpritePalette
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r4, r4, #0x1
	mov	ip, r4
	cmp	r3, #0xff
	beq	.L1050	@cond_branch
	lsl	r0, r3, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r0, r0, r1
	lsr	r3, r0, #0x10
	mov	r2, #0x1
	ldr	r7, .L1059+0x4
	ldr	r6, .L1059
	add	r4, r5, #0
.L1056:
	add	r1, r3, r2
	lsl	r1, r1, #0x1
	add	r1, r1, r7
	lsl	r0, r2, #0x1
	add	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x5
	bls	.L1056	@cond_branch
.L1050:
	mov	r1, ip
	lsl	r0, r1, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x3
	bls	.L1051	@cond_branch
	mov	r0, r9
	bl	DestroyAnimVisualTask
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1060:
	.align	2, 0
.L1059:
	.word	gUnknown_08593020
	.word	gPlttBufferFaded
.Lfe134:
	.size	 sub_8102BE8,.Lfe134-sub_8102BE8
	.align	2, 0
	.globl	sub_8102CA0
	.type	 sub_8102CA0,function
	.thumb_func
sub_8102CA0:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x1
	ldr	r6, .L1067
.L1065:
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r0, [r0]
	bl	FreeSpritePaletteByTag
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x3
	bls	.L1065	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1068:
	.align	2, 0
.L1067:
	.word	gUnknown_08593020
.Lfe135:
	.size	 sub_8102CA0,.Lfe135-sub_8102CA0
	.align	2, 0
	.globl	sub_8102CD4
	.type	 sub_8102CD4,function
	.thumb_func
sub_8102CD4:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r4, .L1073
	ldrb	r1, [r4]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r2, .L1073+0x4
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L1070	@cond_branch
	lsl	r2, r0, #0x4
	ldrb	r1, [r5, #0x5]
	mov	r0, #0xf
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
.L1070:
	ldrh	r0, [r4, #0x2]
	mov	r1, #0x0
	strh	r0, [r5, #0x30]
	strh	r1, [r5, #0x32]
	ldrh	r0, [r4, #0x4]
	strh	r0, [r5, #0x34]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1071	@cond_branch
	mov	r6, #0x30
	mov	r3, #0x28
	b	.L1072
.L1074:
	.align	2, 0
.L1073:
	.word	gBattleAnimArgs
	.word	gUnknown_08593020
.L1071:
	ldr	r4, .L1075
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L1072:
	ldrh	r0, [r5, #0x20]
	lsl	r1, r0, #0x4
	strh	r1, [r5, #0x36]
	ldrh	r1, [r5, #0x22]
	lsl	r2, r1, #0x4
	strh	r2, [r5, #0x38]
	sub	r0, r6, r0
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	sub	r1, r3, r1
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r2, r5, #0
	add	r2, r2, #0x3a
	add	r3, r5, #0
	add	r3, r3, #0x3c
	mov	r4, #0x28
	str	r4, [sp]
	bl	sub_8102D8C
	ldr	r0, .L1075+0x4
	str	r0, [r5, #0x1c]
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1076:
	.align	2, 0
.L1075:
	.word	gBattleAnimTarget
	.word	sub_8102DE4
.Lfe136:
	.size	 sub_8102CD4,.Lfe136-sub_8102CD4
	.align	2, 0
	.type	 sub_8102D8C,function
	.thumb_func
sub_8102D8C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r2, #0
	mov	r8, r3
	ldr	r2, [sp, #0x18]
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r1, r2, #0x18
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0
	bge	.L1078	@cond_branch
	lsl	r0, r1, #0x18
	neg	r0, r0
	lsr	r1, r0, #0x18
.L1078:
	lsl	r5, r2, #0x8
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	add	r0, r5, #0
	bl	__divsi3
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L1079	@cond_branch
	mov	r4, #0x1
.L1079:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	__divsi3
	strh	r0, [r7]
	lsl	r0, r6, #0x10
	asr	r0, r0, #0x8
	add	r1, r4, #0
	bl	__divsi3
	mov	r1, r8
	strh	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe137:
	.size	 sub_8102D8C,.Lfe137-sub_8102D8C
	.align	2, 0
	.type	 sub_8102DE4,function
	.thumb_func
sub_8102DE4:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	mov	r5, #0x0
	strh	r0, [r4, #0x2e]
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r1, r0, r1
	add	r0, r1, #0
	cmp	r1, #0
	bge	.L1081	@cond_branch
	add	r0, r0, #0xff
.L1081:
	asr	r0, r0, #0x8
	lsl	r0, r0, #0x8
	sub	r0, r1, r0
	ldrh	r1, [r4, #0x3a]
	ldrh	r2, [r4, #0x36]
	add	r1, r1, r2
	strh	r1, [r4, #0x36]
	ldrh	r2, [r4, #0x3c]
	ldrh	r3, [r4, #0x38]
	add	r2, r2, r3
	strh	r2, [r4, #0x38]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r4, #0x20]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x14
	strh	r2, [r4, #0x22]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0xf
	bl	Sin
	strh	r0, [r4, #0x26]
	ldrh	r2, [r4, #0x22]
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x10
	lsl	r0, r0, #0x10
	mov	r1, #0x88
	lsl	r1, r1, #0x11
	cmp	r0, r1
	bhi	.L1083	@cond_branch
	lsl	r0, r2, #0x10
	asr	r1, r0, #0x10
	mov	r0, #0x10
	neg	r0, r0
	cmp	r1, r0
	blt	.L1083	@cond_branch
	cmp	r1, #0x80
	ble	.L1082	@cond_branch
.L1083:
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
	b	.L1084
.L1082:
	mov	r0, #0x34
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	beq	.L1084	@cond_branch
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, r1
	ble	.L1084	@cond_branch
	strh	r5, [r4, #0x32]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L1086	@cond_branch
	strh	r5, [r4, #0x30]
.L1086:
	ldr	r2, .L1088
	mov	r3, #0x30
	ldrsh	r1, [r4, r3]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L1084	@cond_branch
	lsl	r2, r0, #0x4
	ldrb	r1, [r4, #0x5]
	mov	r0, #0xf
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r4, #0x5]
.L1084:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1089:
	.align	2, 0
.L1088:
	.word	gUnknown_08593020
.Lfe138:
	.size	 sub_8102DE4,.Lfe138-sub_8102DE4
	.align	2, 0
	.globl	sub_8102EB0
	.type	 sub_8102EB0,function
	.thumb_func
sub_8102EB0:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	ldr	r7, .L1092
	ldrb	r0, [r7]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1091	@cond_branch
	ldr	r1, .L1092+0x4
	mov	r2, #0x2
	ldrsh	r0, [r1, r2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
.L1091:
	ldrb	r0, [r7]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L1092+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	mov	r5, #0x0
	strh	r0, [r6, #0x20]
	ldrb	r0, [r7]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r2, [r4, #0x4]
	add	r0, r0, r2
	strh	r0, [r6, #0x22]
	ldrb	r1, [r4]
	add	r0, r6, #0
	bl	StartSpriteAnim
	strh	r5, [r6, #0x32]
	strh	r5, [r6, #0x34]
	ldrh	r0, [r6, #0x20]
	lsl	r0, r0, #0x4
	strh	r0, [r6, #0x36]
	ldrh	r0, [r6, #0x22]
	lsl	r0, r0, #0x4
	strh	r0, [r6, #0x38]
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x4
	mov	r1, #0x5
	bl	__divsi3
	strh	r0, [r6, #0x3a]
	mov	r2, #0x4
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x7
	mov	r1, #0x5
	bl	__divsi3
	strh	r0, [r6, #0x3c]
	ldr	r0, .L1092+0x8
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1093:
	.align	2, 0
.L1092:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	sub_8102F40
.Lfe139:
	.size	 sub_8102EB0,.Lfe139-sub_8102EB0
	.align	2, 0
	.type	 sub_8102F40,function
	.thumb_func
sub_8102F40:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x3a]
	ldrh	r1, [r4, #0x36]
	add	r0, r0, r1
	strh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x3c]
	ldrh	r2, [r4, #0x38]
	add	r1, r1, r2
	strh	r1, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r4, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r4, #0x22]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x5
	ble	.L1095	@cond_branch
	mov	r2, #0x34
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L1095	@cond_branch
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x10
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x32]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	mov	r1, #0x12
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	mov	r1, #0x12
	bl	Sin
	strh	r0, [r4, #0x26]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L1095	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4, #0x34]
.L1095:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x30
	bne	.L1097	@cond_branch
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
.L1097:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe140:
	.size	 sub_8102F40,.Lfe140-sub_8102F40
	.align	2, 0
	.globl	sub_8102FB8
	.type	 sub_8102FB8,function
	.thumb_func
sub_8102FB8:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r0, .L1101
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x1
	bne	.L1099	@cond_branch
	ldrb	r0, [r5, #0x3]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x10
	orr	r1, r1, r0
	strb	r1, [r5, #0x3]
	mov	r6, #0x10
	b	.L1100
.L1102:
	.align	2, 0
.L1101:
	.word	gBattleAnimArgs
.L1099:
	ldr	r6, .L1103
.L1100:
	ldr	r4, .L1103+0x4
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r6
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x8
	strh	r0, [r5, #0x22]
	mov	r0, #0x8
	strh	r0, [r5, #0x2e]
	ldr	r0, .L1103+0x8
	str	r0, [r5, #0x1c]
	ldr	r1, .L1103+0xc
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1104:
	.align	2, 0
.L1103:
	.word	0xfff0
	.word	gBattleAnimAttacker
	.word	WaitAnimForDuration
	.word	DestroyAnimSprite
.Lfe141:
	.size	 sub_8102FB8,.Lfe141-sub_8102FB8
	.align	2, 0
	.globl	sub_8103028
	.type	 sub_8103028,function
	.thumb_func
sub_8103028:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x8
	strh	r0, [r4, #0x22]
	ldr	r5, .L1109
	ldrb	r1, [r5, #0x2]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldr	r2, .L1109+0x4
	mov	r0, #0x4
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L1106	@cond_branch
	lsl	r2, r0, #0x4
	ldrb	r1, [r4, #0x5]
	mov	r0, #0xf
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r4, #0x5]
.L1106:
	mov	r1, #0x0
	ldrsh	r0, [r5, r1]
	mov	r2, #0x20
	cmp	r0, #0
	bne	.L1107	@cond_branch
	ldr	r2, .L1109+0x8
.L1107:
	mov	r0, #0x28
	strh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x20]
	strh	r1, [r4, #0x30]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	sub	r0, r0, #0x28
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x38]
	ldr	r0, .L1109+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1110:
	.align	2, 0
.L1109:
	.word	gBattleAnimArgs
	.word	gUnknown_08593020
	.word	0xffe0
	.word	sub_81030B0
.Lfe142:
	.size	 sub_8103028,.Lfe142-sub_8103028
	.align	2, 0
	.type	 sub_81030B0,function
	.thumb_func
sub_81030B0:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1112	@cond_branch
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x8
	bl	Sin
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	ldrh	r2, [r4, #0x24]
	mov	r3, #0x24
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	bge	.L1113	@cond_branch
	lsl	r0, r1, #0x10
	neg	r0, r0
	lsr	r1, r0, #0x10
.L1113:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r2
	strh	r0, [r4, #0x24]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x4
	bl	Sin
	ldrh	r3, [r4, #0x26]
	add	r0, r0, r3
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x8
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	b	.L1114
.L1112:
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L1114:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe143:
	.size	 sub_81030B0,.Lfe143-sub_81030B0
	.align	2, 0
	.globl	sub_810310C
	.type	 sub_810310C,function
	.thumb_func
sub_810310C:
	push	{r4, r5, r6, lr}
	add	r6, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1116	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x5
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
	b	.L1119
.L1116:
	add	r0, r5, #0
	mov	r1, #0x4
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x8
.L1119:
	strh	r0, [r6, #0x20]
	add	r0, r5, #0
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	add	r0, r5, #0
	mov	r1, #0x0
	bl	GetBattlerSpriteCoordAttr
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L1118	@cond_branch
	add	r0, r0, #0x3
.L1118:
	asr	r0, r0, #0x2
	sub	r0, r4, r0
	strh	r0, [r6, #0x22]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe144:
	.size	 sub_810310C,.Lfe144-sub_810310C
	.align	2, 0
	.globl	sub_8103164
	.type	 sub_8103164,function
	.thumb_func
sub_8103164:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L1125
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1121	@cond_branch
	ldr	r0, .L1125+0x4
	b	.L1124
.L1126:
	.align	2, 0
.L1125:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L1121:
	ldr	r0, .L1127
.L1124:
	ldrb	r4, [r0]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_810310C
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	neg	r1, r0
	orr	r1, r1, r0
	lsr	r1, r1, #0x1f
	ldr	r0, .L1127+0x4
	ldrh	r0, [r0, #0x2]
	strh	r0, [r5, #0x2e]
	add	r0, r1, #0x2
	strh	r0, [r5, #0x30]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r1, .L1127+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L1127+0xc
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1128:
	.align	2, 0
.L1127:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	sub_81031D0
	.word	RunStoredCallbackWhenAnimEnds
.Lfe145:
	.size	 sub_8103164,.Lfe145-sub_8103164
	.align	2, 0
	.type	 sub_81031D0,function
	.thumb_func
sub_81031D0:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1130	@cond_branch
	ldr	r1, .L1131
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldrh	r1, [r4, #0x30]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldr	r0, .L1131+0x4
	str	r0, [r4, #0x1c]
.L1130:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1132:
	.align	2, 0
.L1131:
	.word	DestroyAnimSprite
	.word	RunStoredCallbackWhenAnimEnds
.Lfe146:
	.size	 sub_81031D0,.Lfe146-sub_81031D0
	.align	2, 0
	.globl	sub_8103208
	.type	 sub_8103208,function
	.thumb_func
sub_8103208:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L1137
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1134	@cond_branch
	ldr	r0, .L1137+0x4
	b	.L1136
.L1138:
	.align	2, 0
.L1137:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L1134:
	ldr	r0, .L1139
.L1136:
	ldrb	r0, [r0]
	add	r1, r4, #0
	bl	sub_810310C
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	ldr	r1, .L1139+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L1139+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1140:
	.align	2, 0
.L1139:
	.word	gBattleAnimTarget
	.word	sub_8103250
	.word	RunStoredCallbackWhenAffineAnimEnds
.Lfe147:
	.size	 sub_8103208,.Lfe147-sub_8103208
	.align	2, 0
	.type	 sub_8103250,function
	.thumb_func
sub_8103250:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	ble	.L1142	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	ldr	r1, .L1143
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L1143+0x4
	str	r0, [r4, #0x1c]
.L1142:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1144:
	.align	2, 0
.L1143:
	.word	DestroySpriteAndMatrix
	.word	RunStoredCallbackWhenAffineAnimEnds
.Lfe148:
	.size	 sub_8103250,.Lfe148-sub_8103250
	.align	2, 0
	.globl	sub_8103284
	.type	 sub_8103284,function
	.thumb_func
sub_8103284:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r0, .L1150
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1146	@cond_branch
	ldr	r0, .L1150+0x4
	b	.L1149
.L1151:
	.align	2, 0
.L1150:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L1146:
	ldr	r0, .L1152
.L1149:
	ldrb	r5, [r0]
	add	r0, r5, #0
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r6, #0x0
	strh	r0, [r4, #0x20]
	add	r0, r5, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	strh	r0, [r4, #0x22]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9
	bgt	.L1148	@cond_branch
	mov	r0, #0xa
	strh	r0, [r4, #0x22]
.L1148:
	mov	r0, #0x1
	strh	r0, [r4, #0x2e]
	strh	r6, [r4, #0x30]
	add	r1, r4, #0
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	strh	r0, [r4, #0x32]
	ldrb	r0, [r1]
	add	r0, r0, #0x4
	strh	r0, [r4, #0x34]
	strh	r6, [r4, #0x36]
	ldr	r1, .L1152+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L1152+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1153:
	.align	2, 0
.L1152:
	.word	gBattleAnimTarget
	.word	sub_8103300
	.word	RunStoredCallbackWhenAffineAnimEnds
.Lfe149:
	.size	 sub_8103284,.Lfe149-sub_8103284
	.align	2, 0
	.type	 sub_8103300,function
	.thumb_func
sub_8103300:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xc
	ble	.L1155	@cond_branch
	ldr	r0, .L1156
	str	r0, [r1, #0x1c]
.L1155:
	pop	{r0}
	bx	r0
.L1157:
	.align	2, 0
.L1156:
	.word	sub_8103320
.Lfe150:
	.size	 sub_8103300,.Lfe150-sub_8103300
	.align	2, 0
	.type	 sub_8103320,function
	.thumb_func
sub_8103320:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x30]
	add	r1, r0, #0x4
	strh	r1, [r2, #0x30]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xfe
	ble	.L1159	@cond_branch
	ldrh	r0, [r2, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1160	@cond_branch
	strh	r0, [r2, #0x24]
	ldr	r0, .L1164
	str	r0, [r2, #0x1c]
	b	.L1158
.L1165:
	.align	2, 0
.L1164:
	.word	sub_8103250
.L1160:
	mov	r0, #0xff
	and	r1, r1, r0
	strh	r1, [r2, #0x30]
.L1159:
	mov	r1, #0x30
	ldrsh	r0, [r2, r1]
	cmp	r0, #0x4f
	ble	.L1162	@cond_branch
	ldrh	r0, [r2, #0x34]
	add	r1, r2, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
.L1162:
	mov	r3, #0x30
	ldrsh	r0, [r2, r3]
	cmp	r0, #0x9f
	ble	.L1163	@cond_branch
	ldrh	r0, [r2, #0x32]
	add	r1, r2, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
.L1163:
	ldr	r1, .L1166
	mov	r3, #0x30
	ldrsh	r0, [r2, r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	asr	r1, r0, #0x1
	add	r0, r0, r1
	strh	r0, [r2, #0x24]
.L1158:
	pop	{r0}
	bx	r0
.L1167:
	.align	2, 0
.L1166:
	.word	gSineTable
.Lfe151:
	.size	 sub_8103320,.Lfe151-sub_8103320
	.align	2, 0
	.globl	sub_8103390
	.type	 sub_8103390,function
	.thumb_func
sub_8103390:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L1175
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1169	@cond_branch
	ldr	r0, .L1175+0x4
	b	.L1173
.L1176:
	.align	2, 0
.L1175:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L1169:
	ldr	r0, .L1177
.L1173:
	ldrb	r4, [r0]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_810310C
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1171	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x0
	bl	StartSpriteAnim
	mov	r0, #0x2
	b	.L1174
.L1178:
	.align	2, 0
.L1177:
	.word	gBattleAnimTarget
.L1171:
	add	r0, r5, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	mov	r0, #0x3
.L1174:
	strh	r0, [r5, #0x2e]
	ldr	r0, .L1179
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1180:
	.align	2, 0
.L1179:
	.word	sub_81033F0
.Lfe152:
	.size	 sub_8103390,.Lfe152-sub_8103390
	.align	2, 0
	.type	 sub_81033F0,function
	.thumb_func
sub_81033F0:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	ble	.L1182	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x2e]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldr	r1, .L1183
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L1183+0x4
	str	r0, [r4, #0x1c]
.L1182:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1184:
	.align	2, 0
.L1183:
	.word	sub_810342C
	.word	RunStoredCallbackWhenAnimEnds
.Lfe153:
	.size	 sub_81033F0,.Lfe153-sub_81033F0
	.align	2, 0
	.type	 sub_810342C,function
	.thumb_func
sub_810342C:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	ble	.L1186	@cond_branch
	add	r0, r1, #0
	bl	DestroyAnimSprite
.L1186:
	pop	{r0}
	bx	r0
.Lfe154:
	.size	 sub_810342C,.Lfe154-sub_810342C
.text
	.align	2, 0

