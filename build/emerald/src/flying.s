@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gUnknown_08596270
	.section .rodata
	.align	2, 0
	.type	 gUnknown_08596270,object
	.size	 gUnknown_08596270,24
gUnknown_08596270:
	.short	0x2719
	.short	0x2719
	.word	gUnknown_0852495C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810DE70
	.globl	gUnknown_08596288
	.align	2, 0
	.type	 gUnknown_08596288,object
gUnknown_08596288:
	.short	0x10
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0xa
	.short	0x0
	.byte	0x0
	.byte	0x18
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08596288,24
	.globl	gUnknown_085962A0
	.align	2, 0
	.type	 gUnknown_085962A0,object
gUnknown_085962A0:
	.word	gUnknown_08596288
	.size	 gUnknown_085962A0,4
	.globl	gBattleAnimSpriteTemplate_85962A4
	.align	2, 0
	.type	 gBattleAnimSpriteTemplate_85962A4,object
	.size	 gBattleAnimSpriteTemplate_85962A4,24
gBattleAnimSpriteTemplate_85962A4:
	.short	0x2719
	.short	0x2719
	.word	gUnknown_085249BC
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_085962A0
	.word	sub_810DFA8
	.globl	gUnknown_085962BC
	.align	2, 0
	.type	 gUnknown_085962BC,object
gUnknown_085962BC:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x0
	.byte	0x43
	.space	1
	.short	0x0
	.byte	0x83
	.space	1
	.short	0x0
	.byte	0xc3
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_085962BC,20
	.globl	gUnknown_085962D0
	.align	2, 0
	.type	 gUnknown_085962D0,object
gUnknown_085962D0:
	.word	gUnknown_085962BC
	.size	 gUnknown_085962D0,4
	.globl	gUnknown_085962D4
	.align	2, 0
	.type	 gUnknown_085962D4,object
	.size	 gUnknown_085962D4,24
gUnknown_085962D4:
	.short	0x27aa
	.short	0x27aa
	.word	gUnknown_08524934
	.word	gUnknown_085962D0
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810E044
	.globl	gUnknown_085962EC
	.align	2, 0
	.type	 gUnknown_085962EC,object
gUnknown_085962EC:
	.short	0x10
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x28
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x0
	.short	-0x20
	.byte	0x0
	.byte	0x5
	.space	2
	.short	-0x10
	.short	0x20
	.byte	0x0
	.byte	0xa
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_085962EC,40
	.globl	gUnknown_08596314
	.align	2, 0
	.type	 gUnknown_08596314,object
gUnknown_08596314:
	.word	gUnknown_085962EC
	.size	 gUnknown_08596314,4
	.globl	gUnknown_08596318
	.align	2, 0
	.type	 gUnknown_08596318,object
gUnknown_08596318:
	.short	0x0
	.short	0x0
	.byte	0x32
	.byte	0x1
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08596318,16
	.globl	gUnknown_08596328
	.align	2, 0
	.type	 gUnknown_08596328,object
gUnknown_08596328:
	.short	0x0
	.short	0x0
	.byte	0xd8
	.byte	0x1
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08596328,16
	.globl	gUnknown_08596338
	.align	2, 0
	.type	 gUnknown_08596338,object
gUnknown_08596338:
	.word	gUnknown_08596318
	.word	gUnknown_08596328
	.size	 gUnknown_08596338,8
	.globl	gUnknown_08596340
	.align	2, 0
	.type	 gUnknown_08596340,object
	.size	 gUnknown_08596340,24
gUnknown_08596340:
	.short	0x27ac
	.short	0x27ac
	.word	gUnknown_085249DC
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08596314
	.word	sub_810E13C
	.globl	gUnknown_08596358
	.align	2, 0
	.type	 gUnknown_08596358,object
	.size	 gUnknown_08596358,24
gUnknown_08596358:
	.short	0x27ac
	.short	0x27ac
	.word	gUnknown_0852497C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08596338
	.word	sub_810E1C8
	.globl	gUnknown_08596370
	.align	2, 0
	.type	 gUnknown_08596370,object
gUnknown_08596370:
	.short	0x0
	.byte	0x0
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08596370,8
	.globl	gUnknown_08596378
	.align	2, 0
	.type	 gUnknown_08596378,object
gUnknown_08596378:
	.short	0x10
	.byte	0x40
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08596378,8
	.globl	gUnknown_08596380
	.align	2, 0
	.type	 gUnknown_08596380,object
gUnknown_08596380:
	.word	gUnknown_08596370
	.word	gUnknown_08596378
	.size	 gUnknown_08596380,8
	.globl	gUnknown_08596388
	.align	2, 0
	.type	 gUnknown_08596388,object
	.size	 gUnknown_08596388,24
gUnknown_08596388:
	.short	0x281e
	.short	0x281e
	.word	gUnknown_08524974
	.word	gUnknown_08596380
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810E314
	.globl	gUnknown_085963A0
	.align	2, 0
	.type	 gUnknown_085963A0,object
	.size	 gUnknown_085963A0,24
gUnknown_085963A0:
	.short	0x27ab
	.short	0x27ab
	.word	gUnknown_0852490C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810EA4C
	.globl	gUnknown_085963B8
	.align	2, 0
	.type	 gUnknown_085963B8,object
gUnknown_085963B8:
	.short	0x0
	.byte	0x1
	.space	1
	.short	0x8
	.byte	0x1
	.space	1
	.short	0x10
	.byte	0x1
	.space	1
	.short	0x8
	.byte	0x41
	.space	1
	.short	0x0
	.byte	0x41
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085963B8,24
	.globl	gUnknown_085963D0
	.align	2, 0
	.type	 gUnknown_085963D0,object
gUnknown_085963D0:
	.word	gUnknown_085963B8
	.size	 gUnknown_085963D0,4
	.globl	gUnknown_085963D4
	.align	2, 0
	.type	 gUnknown_085963D4,object
	.size	 gUnknown_085963D4,24
gUnknown_085963D4:
	.short	0x27b2
	.short	0x27b2
	.word	gUnknown_08524934
	.word	gUnknown_085963D0
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810EAA0
	.globl	gUnknown_085963EC
	.align	2, 0
	.type	 gUnknown_085963EC,object
gUnknown_085963EC:
	.short	0x10
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x28
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x0
	.short	-0x20
	.byte	0x0
	.byte	0x5
	.space	2
	.short	-0x14
	.short	0x0
	.byte	0x0
	.byte	0x7
	.space	2
	.short	-0x14
	.short	-0x14
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_085963EC,48
	.globl	gUnknown_0859641C
	.align	2, 0
	.type	 gUnknown_0859641C,object
gUnknown_0859641C:
	.word	gUnknown_085963EC
	.size	 gUnknown_0859641C,4
	.globl	gUnknown_08596420
	.align	2, 0
	.type	 gUnknown_08596420,object
	.size	 gUnknown_08596420,24
gUnknown_08596420:
	.short	0x27ac
	.short	0x27ac
	.word	gUnknown_085249DC
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_0859641C
	.word	sub_810EC34
	.globl	gUnknown_08596438
	.align	2, 0
	.type	 gUnknown_08596438,object
gUnknown_08596438:
	.short	0xa0
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08596438,16
	.globl	gUnknown_08596448
	.align	2, 0
	.type	 gUnknown_08596448,object
gUnknown_08596448:
	.word	gUnknown_08596438
	.size	 gUnknown_08596448,4
	.globl	gUnknown_0859644C
	.align	2, 0
	.type	 gUnknown_0859644C,object
	.size	 gUnknown_0859644C,24
gUnknown_0859644C:
	.short	0x27ac
	.short	0x27ac
	.word	gUnknown_085249DC
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08596448
	.word	sub_810EC94
	.globl	gUnknown_08596464
	.align	2, 0
	.type	 gUnknown_08596464,object
gUnknown_08596464:
	.short	0x10
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x28
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x0
	.short	-0x20
	.byte	0x0
	.byte	0x5
	.space	2
	.short	-0x10
	.short	0x20
	.byte	0x0
	.byte	0xa
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08596464,40
	.globl	gUnknown_0859648C
	.align	2, 0
	.type	 gUnknown_0859648C,object
gUnknown_0859648C:
	.word	gUnknown_08596464
	.size	 gUnknown_0859648C,4
	.globl	gUnknown_08596490
	.align	2, 0
	.type	 gUnknown_08596490,object
	.size	 gUnknown_08596490,24
gUnknown_08596490:
	.short	0x27ac
	.short	0x27ac
	.word	gUnknown_085249DC
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_0859648C
	.word	sub_810ED28
	.globl	gUnknown_085964A8
	.align	2, 0
	.type	 gUnknown_085964A8,object
gUnknown_085964A8:
	.short	0x100
	.short	0x0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x20
	.byte	0x0
	.byte	0xc
	.space	2
	.short	0x0
	.short	-0x20
	.byte	0x0
	.byte	0xb
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_085964A8,32
	.globl	gUnknown_085964C8
	.align	2, 0
	.type	 gUnknown_085964C8,object
gUnknown_085964C8:
	.word	gUnknown_085964A8
	.size	 gUnknown_085964C8,4
	.globl	gUnknown_085964CC
	.align	2, 0
	.type	 gUnknown_085964CC,object
	.size	 gUnknown_085964CC,24
gUnknown_085964CC:
	.short	0x2820
	.short	0x2820
	.word	gUnknown_085249DC
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810EE14
	.globl	gUnknown_085964E4
	.align	2, 0
	.type	 gUnknown_085964E4,object
	.size	 gUnknown_085964E4,24
gUnknown_085964E4:
	.short	0x2821
	.short	0x2821
	.word	gUnknown_08524904
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810EEF8
	.globl	gUnknown_085964FC
	.align	2, 0
	.type	 gUnknown_085964FC,object
	.size	 gUnknown_085964FC,24
gUnknown_085964FC:
	.short	0x27e4
	.short	0x27e4
	.word	gUnknown_08524A3C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810F004
	.globl	gUnknown_08596514
	.align	2, 0
	.type	 gUnknown_08596514,object
	.size	 gUnknown_08596514,24
gUnknown_08596514:
	.short	0x282c
	.short	0x282c
	.word	gUnknown_085249DC
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810F084
.text
	.align	2, 0
	.globl	sub_810DE70
	.type	 sub_810DE70,function
	.thumb_func
sub_810DE70:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x14
	strh	r0, [r4, #0x22]
	mov	r0, #0xbf
	strh	r0, [r4, #0x30]
	ldr	r1, .L3
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	sub_810DE98
.Lfe1:
	.size	 sub_810DE70,.Lfe1-sub_810DE70
	.align	2, 0
	.type	 sub_810DE98,function
	.thumb_func
sub_810DE98:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x20
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x8
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x5
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x47
	bne	.L6	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L6:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 sub_810DE98,.Lfe2-sub_810DE98
	.align	2, 0
	.globl	sub_810DED8
	.type	 sub_810DED8,function
	.thumb_func
sub_810DED8:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L8
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	ldr	r1, .L8+0x4
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x8]
	ldrh	r0, [r1]
	strh	r0, [r4, #0xa]
	ldr	r0, .L8+0x8
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0xc]
	ldr	r0, .L8+0xc
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	0x2719
	.word	sub_810DF18
.Lfe3:
	.size	 sub_810DED8,.Lfe3-sub_810DED8
	.align	2, 0
	.type	 sub_810DF18,function
	.thumb_func
sub_810DF18:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r2, .L18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r3, r0, r2
	ldrh	r0, [r3, #0x1c]
	add	r1, r0, #0x1
	strh	r1, [r3, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r4, #0xa
	ldrsh	r1, [r3, r4]
	add	r7, r2, #0
	cmp	r0, r1
	bne	.L11	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x1c]
	ldrb	r0, [r3, #0xc]
	ldr	r2, .L18+0x4
	lsl	r0, r0, #0x4
	mov	r3, #0x84
	lsl	r3, r3, #0x1
	add	r1, r0, r3
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r6, [r1]
	mov	r4, #0x7
	mov	ip, r0
	ldr	r0, .L18+0x8
	add	r0, r0, ip
	lsl	r0, r0, #0x1
	add	r3, r0, r2
.L12:
	ldrh	r0, [r3]
	strh	r0, [r1]
	sub	r3, r3, #0x2
	sub	r1, r1, #0x2
	sub	r4, r4, #0x1
	cmp	r4, #0
	bgt	.L12	@cond_branch
	ldr	r0, .L18+0xc
	add	r0, r0, ip
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	strh	r6, [r0]
.L11:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	ldrh	r1, [r0, #0x8]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	bne	.L17	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L17:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L19:
	.align	2, 0
.L18:
	.word	gTasks
	.word	gPlttBufferFaded
	.word	0x107
	.word	0x101
.Lfe4:
	.size	 sub_810DF18,.Lfe4-sub_810DF18
	.align	2, 0
	.globl	sub_810DFA8
	.type	 sub_810DFA8,function
	.thumb_func
sub_810DFA8:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L22
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L21	@cond_branch
	ldr	r1, .L22+0x4
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L21:
	ldr	r4, .L22+0x4
	ldrh	r0, [r4, #0x8]
	strh	r0, [r6, #0x2e]
	ldrh	r0, [r6, #0x20]
	strh	r0, [r6, #0x30]
	ldr	r5, .L22+0x8
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x4]
	add	r0, r0, r1
	strh	r0, [r6, #0x32]
	ldrh	r0, [r6, #0x22]
	strh	r0, [r6, #0x34]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r4, [r4, #0x6]
	add	r0, r0, r4
	strh	r0, [r6, #0x36]
	add	r0, r6, #0
	bl	InitAnimLinearTranslation
	ldr	r0, .L22+0xc
	str	r0, [r6, #0x1c]
	ldr	r1, .L22+0x10
	add	r0, r6, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	RunStoredCallbackWhenAffineAnimEnds
	.word	sub_810E028
.Lfe5:
	.size	 sub_810DFA8,.Lfe5-sub_810DFA8
	.align	2, 0
	.type	 sub_810E028,function
	.thumb_func
sub_810E028:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L25	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L25:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 sub_810E028,.Lfe6-sub_810E028
	.align	2, 0
	.globl	sub_810E044
	.type	 sub_810E044,function
	.thumb_func
sub_810E044:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L31
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L27	@cond_branch
	ldr	r1, .L31+0x4
	ldrh	r0, [r1]
	neg	r0, r0
	strh	r0, [r1]
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
	ldrh	r0, [r1, #0x6]
	neg	r0, r0
	strh	r0, [r1, #0x6]
.L27:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L28	@cond_branch
	ldr	r0, .L31+0x4
	ldrh	r1, [r0, #0x2]
	neg	r1, r1
	strh	r1, [r0, #0x2]
	ldrh	r1, [r0, #0x6]
	neg	r1, r1
	strh	r1, [r0, #0x6]
.L28:
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r2, .L31+0x4
	ldrh	r1, [r2]
	ldrh	r3, [r5, #0x20]
	add	r1, r1, r3
	strh	r1, [r5, #0x20]
	lsr	r0, r0, #0x18
	ldrh	r1, [r2, #0x2]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	ldrh	r0, [r2, #0x8]
	strh	r0, [r5, #0x2e]
	mov	r3, #0xc
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	bne	.L29	@cond_branch
	ldr	r4, .L31+0x8
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	b	.L30
.L32:
	.align	2, 0
.L31:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
.L29:
	ldr	r0, .L33
	ldrb	r0, [r0]
	add	r2, r5, #0
	add	r2, r2, #0x32
	add	r3, r5, #0
	add	r3, r3, #0x36
	mov	r1, #0x1
	bl	SetAverageBattlerPositions
.L30:
	ldr	r4, .L33+0x4
	ldrh	r0, [r4, #0x4]
	ldrh	r1, [r5, #0x32]
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	ldrh	r0, [r4, #0x6]
	ldrh	r3, [r5, #0x36]
	add	r0, r0, r3
	strh	r0, [r5, #0x36]
	ldr	r0, .L33+0x8
	str	r0, [r5, #0x1c]
	ldr	r1, .L33+0xc
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldrb	r1, [r4, #0xa]
	add	r0, r5, #0
	bl	SeekSpriteAnim
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L34:
	.align	2, 0
.L33:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe7:
	.size	 sub_810E044,.Lfe7-sub_810E044
	.align	2, 0
	.globl	sub_810E13C
	.type	 sub_810E13C,function
	.thumb_func
sub_810E13C:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r1, .L36
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x30]
	ldr	r0, .L36+0x4
	str	r0, [r4, #0x1c]
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	ldr	r2, .L36+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L37:
	.align	2, 0
.L36:
	.word	gBattleAnimArgs
	.word	sub_810E184
	.word	gSprites
.Lfe8:
	.size	 sub_810E13C,.Lfe8-sub_810E13C
	.align	2, 0
	.type	 sub_810E184,function
	.thumb_func
sub_810E184:
	push	{lr}
	add	r2, r0, #0
	ldrh	r1, [r2, #0x2e]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	ble	.L39	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r2, #0x2e]
	b	.L40
.L39:
	ldrh	r0, [r2, #0x30]
	ldrh	r1, [r2, #0x32]
	add	r0, r0, r1
	strh	r0, [r2, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r2, #0x26]
	sub	r1, r1, r0
	strh	r1, [r2, #0x26]
.L40:
	mov	r3, #0x22
	ldrsh	r0, [r2, r3]
	mov	r3, #0x26
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	bge	.L41	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L41:
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 sub_810E184,.Lfe9-sub_810E184
	.align	2, 0
	.globl	sub_810E1C8
	.type	 sub_810E1C8,function
	.thumb_func
sub_810E1C8:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L45
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L43	@cond_branch
	mov	r0, #0x88
	lsl	r0, r0, #0x1
	strh	r0, [r5, #0x20]
	ldr	r0, .L45+0x4
	strh	r0, [r5, #0x22]
	add	r0, r5, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	b	.L44
.L46:
	.align	2, 0
.L45:
	.word	gBattleAnimAttacker
	.word	0xffe0
.L43:
	ldr	r0, .L47
	strh	r0, [r5, #0x20]
	strh	r0, [r5, #0x22]
.L44:
	ldr	r0, .L47+0x4
	ldrh	r0, [r0]
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r5, #0x20]
	strh	r0, [r5, #0x30]
	ldr	r4, .L47+0x8
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x22]
	strh	r0, [r5, #0x34]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	add	r0, r5, #0
	bl	InitAnimLinearTranslation
	ldr	r0, .L47+0xc
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L48:
	.align	2, 0
.L47:
	.word	0xffe0
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	sub_810E24C
.Lfe10:
	.size	 sub_810E1C8,.Lfe10-sub_810E1C8
	.align	2, 0
	.type	 sub_810E24C,function
	.thumb_func
sub_810E24C:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x1
	strh	r0, [r4, #0x2e]
	add	r0, r4, #0
	bl	AnimTranslateLinear
	ldrh	r1, [r4, #0x34]
	lsr	r0, r1, #0x8
	cmp	r0, #0xc8
	bls	.L50	@cond_branch
	ldrh	r0, [r4, #0x24]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	mov	r0, #0x0
	strh	r0, [r4, #0x24]
	mov	r0, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x34]
.L50:
	mov	r1, #0x20
	ldrsh	r0, [r4, r1]
	mov	r2, #0x24
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	add	r0, r0, #0x20
	mov	r1, #0x98
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bhi	.L52	@cond_branch
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	mov	r2, #0x26
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	cmp	r0, #0xa0
	ble	.L51	@cond_branch
.L52:
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	ldr	r2, .L53
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L51:
	pop	{r4}
	pop	{r0}
	bx	r0
.L54:
	.align	2, 0
.L53:
	.word	gSprites
.Lfe11:
	.size	 sub_810E24C,.Lfe11-sub_810E24C
	.align	2, 0
	.globl	sub_810E2C8
	.type	 sub_810E2C8,function
	.thumb_func
sub_810E2C8:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	sub	r1, r0, #0x1
	strh	r1, [r4, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L56	@cond_branch
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L57	@cond_branch
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	ldrb	r1, [r4, #0x1]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r4, #0x1]
.L57:
	add	r0, r4, #0
	bl	DestroySprite
	ldr	r1, .L58
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
.L56:
	pop	{r4}
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	gAnimVisualTaskCount
.Lfe12:
	.size	 sub_810E2C8,.Lfe12-sub_810E2C8
	.align	2, 0
	.globl	sub_810E314
	.type	 sub_810E314,function
	.thumb_func
sub_810E314:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r0, #0
	add	r5, r7, #0
	add	r5, r5, #0x2e
	ldr	r0, .L74
	ldrh	r1, [r0, #0xe]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L61	@cond_branch
	ldr	r0, .L74+0x4
	b	.L72
.L75:
	.align	2, 0
.L74:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L61:
	ldr	r0, .L76
.L72:
	ldrb	r6, [r0]
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L63	@cond_branch
	ldr	r1, .L76+0x4
	ldrh	r0, [r1]
	neg	r0, r0
	strh	r0, [r1]
.L63:
	add	r0, r6, #0
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L76+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r4]
	add	r0, r0, r1
	strh	r0, [r7, #0x20]
	add	r0, r6, #0
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	lsr	r0, r0, #0x18
	add	r1, r0, r1
	strh	r1, [r7, #0x22]
	lsl	r1, r1, #0x8
	strh	r1, [r5, #0x8]
	ldrh	r1, [r4, #0xc]
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	ldrh	r2, [r5, #0xe]
	mov	r1, #0x1
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r5, #0xe]
	ldrb	r0, [r5]
	mov	r2, #0x4
	mov	r8, r2
	mov	r1, r8
	orr	r0, r0, r1
	strb	r0, [r5]
	ldrh	r0, [r4, #0x4]
	ldrb	r1, [r4, #0x4]
	strh	r1, [r5, #0x2]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0xa]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r5, #0x4]
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x6]
	ldrh	r0, [r4, #0xa]
	strh	r0, [r5, #0xc]
	sub	r1, r1, #0x40
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r1, #0x7f
	bhi	.L64	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L65	@cond_branch
	add	r0, r6, #0
	bl	GetBattlerSpriteBGPriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r2, [r7, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r7, #0x5]
	b	.L66
.L77:
	.align	2, 0
.L76:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L65:
	add	r0, r6, #0
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r7, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r7, #0x5]
.L66:
	ldrb	r1, [r5, #0xe]
	mov	r4, #0x2
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r1
	strb	r0, [r5, #0xe]
	mov	r2, #0x4
	ldrsh	r0, [r5, r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L68	@cond_branch
	add	r3, r7, #0
	add	r3, r3, #0x3f
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1f
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	add	r0, r4, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	add	r1, r7, #0
	add	r1, r1, #0x2a
	strb	r0, [r1]
	ldrb	r0, [r3]
	mov	r1, #0x4
	orr	r0, r0, r1
	b	.L73
.L64:
	add	r0, r6, #0
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r7, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r7, #0x5]
	ldrb	r0, [r5, #0xe]
	mov	r4, #0x1
	orr	r0, r0, r4
	strb	r0, [r5, #0xe]
	mov	r1, #0x4
	ldrsh	r0, [r5, r1]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L68	@cond_branch
	add	r3, r7, #0
	add	r3, r3, #0x3f
	ldrb	r2, [r3]
	lsl	r1, r2, #0x1f
	lsr	r1, r1, #0x1f
	mov	r0, #0x1
	eor	r1, r1, r0
	and	r1, r1, r4
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	add	r1, r7, #0
	add	r1, r1, #0x2a
	strb	r0, [r1]
	ldrb	r0, [r3]
	mov	r2, r8
	orr	r0, r0, r2
.L73:
	mov	r1, #0x11
	neg	r1, r1
	and	r0, r0, r1
	strb	r0, [r3]
.L68:
	ldrh	r1, [r5, #0x2]
	lsr	r1, r1, #0x6
	lsl	r1, r1, #0x4
	ldrb	r2, [r5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5]
	ldr	r3, .L78
	ldrh	r0, [r5, #0x2]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	ldrb	r0, [r5, #0xc]
	mul	r0, r0, r1
	asr	r0, r0, #0x8
	strh	r0, [r7, #0x24]
	ldrb	r2, [r7, #0x3]
	lsl	r2, r2, #0x1a
	lsr	r2, r2, #0x1b
	mov	r1, #0x24
	ldrsh	r0, [r7, r1]
	neg	r0, r0
	asr	r0, r0, #0x1
	ldrb	r5, [r5, #0xa]
	add	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r3
	ldrh	r4, [r1]
	ldr	r1, .L78+0x4
	lsl	r2, r2, #0x3
	add	r2, r2, r1
	add	r0, r0, #0x40
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strh	r0, [r2, #0x6]
	strh	r0, [r2]
	strh	r4, [r2, #0x2]
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	neg	r0, r0
	strh	r0, [r2, #0x4]
	ldr	r0, .L78+0x8
	str	r0, [r7, #0x1c]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L79:
	.align	2, 0
.L78:
	.word	gSineTable
	.word	gOamMatrices
	.word	sub_810E520
.Lfe13:
	.size	 sub_810E314,.Lfe13-sub_810E314
	.align	2, 0
	.globl	sub_810E520
	.type	 sub_810E520,function
	.thumb_func
sub_810E520:
	.syntax unified
push {r4-r7,lr}
    mov r7, r9
    mov r6, r8
    push {r6,r7}
    adds r5, r0, 0
    movs r6, 0
    adds r4, r5, 0
    adds r4, 0x2E
    ldrb r2, [r4]
    movs r7, 0x1
    movs r0, 0x1
    mov r9, r0
    ands r0, r2
    cmp r0, 0
    beq _0810E55A
    ldrb r0, [r4, 0x1]
    adds r1, r0, 0
    adds r1, 0xFF
    strb r1, [r4, 0x1]
    lsls r0, 24
    cmp r0, 0
    beq _0810E54E
    b _0810EA36
_0810E54E:
    movs r0, 0x2
    negs r0, r0
    ands r0, r2
    strb r0, [r4]
    strb r6, [r4, 0x1]
    b _0810EA36
_0810E55A:
    ldrh r0, [r4, 0x2]
    lsrs r1, r0, 6
    mov r12, r0
    cmp r1, 0x1
    bne _0810E566
    b _0810E68A
_0810E566:
    cmp r1, 0x1
    bgt _0810E570
    cmp r1, 0
    beq _0810E57E
    b _0810E97C
_0810E570:
    cmp r1, 0x2
    bne _0810E576
    b _0810E77E
_0810E576:
    cmp r1, 0x3
    bne _0810E57C
    b _0810E872
_0810E57C:
    b _0810E97C
_0810E57E:
    lsls r1, r2, 24
    lsrs r0, r1, 28
    cmp r0, 0x1
    bne _0810E592
    movs r0, 0x8
    orrs r0, r2
    orrs r0, r7
    strb r0, [r4]
    strb r6, [r4, 0x1]
    b _0810E680
_0810E592:
    lsrs r0, r1, 28
    cmp r0, 0x3
    bne _0810E5B4
    lsls r0, r2, 30
    lsrs r0, 31
    movs r1, 0x1
    eors r0, r1
    ands r0, r7
    lsls r0, 1
    movs r1, 0x3
    negs r1, r1
    ands r1, r2
    orrs r1, r0
    orrs r1, r7
    strb r1, [r4]
    strb r6, [r4, 0x1]
    b _0810E680
_0810E5B4:
    movs r0, 0x8
    ands r0, r2
    cmp r0, 0
    beq _0810E680
    adds r3, r5, 0
    adds r3, 0x3F
    ldrb r2, [r3]
    lsls r1, r2, 31
    lsrs r1, 31
    movs r6, 0x1
    eors r1, r6
    ands r1, r7
    movs r0, 0x2
    negs r0, r0
    mov r8, r0
    ands r0, r2
    orrs r0, r1
    strb r0, [r3]
    lsls r0, 31
    lsrs r0, 31
    adds r1, r5, 0
    adds r1, 0x2A
    strb r0, [r1]
    ldrb r0, [r3]
    movs r1, 0x4
    orrs r0, r1
    movs r1, 0x11
    negs r1, r1
    ands r0, r1
    strb r0, [r3]
    ldrb r1, [r4]
    movs r0, 0x4
    ands r0, r1
    cmp r0, 0
    beq _0810E672
    bl IsContest
    lsls r0, 24
    cmp r0, 0
    bne _0810E642
    ldrb r1, [r4, 0xE]
    mov r0, r9
    ands r0, r1
    cmp r0, 0
    bne _0810E628
    ldrb r2, [r5, 0x5]
    lsls r1, r2, 28
    lsrs r1, 30
    subs r1, 0x1
    movs r0, 0x3
    ands r1, r0
    lsls r1, 2
    movs r0, 0xD
    negs r0, r0
    ands r0, r2
    orrs r0, r1
    strb r0, [r5, 0x5]
    b _0810E660
_0810E628:
    ldrb r2, [r5, 0x5]
    lsls r1, r2, 28
    lsrs r1, 30
    adds r1, 0x1
    movs r0, 0x3
    ands r1, r0
    lsls r1, 2
    movs r0, 0xD
    negs r0, r0
    ands r0, r2
    orrs r0, r1
    strb r0, [r5, 0x5]
    b _0810E660
_0810E642:
    ldrb r1, [r4, 0xE]
    mov r0, r9
    ands r0, r1
    cmp r0, 0
    bne _0810E656
    adds r1, r5, 0
    adds r1, 0x43
    ldrb r0, [r1]
    subs r0, 0xC
    b _0810E65E
_0810E656:
    adds r1, r5, 0
    adds r1, 0x43
    ldrb r0, [r1]
    adds r0, 0xC
_0810E65E:
    strb r0, [r1]
_0810E660:
    ldrb r2, [r4, 0xE]
    lsls r0, r2, 31
    lsrs r0, 31
    eors r0, r6
    ands r0, r7
    mov r1, r8
    ands r1, r2
    orrs r1, r0
    strb r1, [r4, 0xE]
_0810E672:
    ldrb r1, [r4]
    movs r0, 0x9
    negs r0, r0
    ands r0, r1
    strb r0, [r4]
    ldrh r1, [r4, 0x2]
    mov r12, r1
_0810E680:
    ldrb r1, [r4]
    movs r0, 0xF
    ands r0, r1
    strb r0, [r4]
    b _0810E97C
_0810E68A:
    lsls r1, r2, 24
    lsrs r0, r1, 28
    cmp r0, 0
    bne _0810E698
    movs r0, 0x8
    orrs r0, r2
    b _0810E6A0
_0810E698:
    lsrs r0, r1, 28
    cmp r0, 0x2
    bne _0810E6A8
    adds r0, r2, 0
_0810E6A0:
    orrs r0, r7
    strb r0, [r4]
    strb r6, [r4, 0x1]
    b _0810E774
_0810E6A8:
    movs r0, 0x8
    ands r0, r2
    cmp r0, 0
    beq _0810E774
    adds r3, r5, 0
    adds r3, 0x3F
    ldrb r2, [r3]
    lsls r1, r2, 31
    lsrs r1, 31
    movs r6, 0x1
    eors r1, r6
    ands r1, r7
    movs r0, 0x2
    negs r0, r0
    mov r8, r0
    ands r0, r2
    orrs r0, r1
    strb r0, [r3]
    lsls r0, 31
    lsrs r0, 31
    adds r1, r5, 0
    adds r1, 0x2A
    strb r0, [r1]
    ldrb r0, [r3]
    movs r1, 0x4
    orrs r0, r1
    movs r1, 0x11
    negs r1, r1
    ands r0, r1
    strb r0, [r3]
    ldrb r1, [r4]
    movs r0, 0x4
    ands r0, r1
    cmp r0, 0
    beq _0810E766
    bl IsContest
    lsls r0, 24
    cmp r0, 0
    bne _0810E736
    ldrb r1, [r4, 0xE]
    mov r0, r9
    ands r0, r1
    cmp r0, 0
    bne _0810E71C
    ldrb r2, [r5, 0x5]
    lsls r1, r2, 28
    lsrs r1, 30
    subs r1, 0x1
    movs r0, 0x3
    ands r1, r0
    lsls r1, 2
    movs r0, 0xD
    negs r0, r0
    ands r0, r2
    orrs r0, r1
    strb r0, [r5, 0x5]
    b _0810E754
_0810E71C:
    ldrb r2, [r5, 0x5]
    lsls r1, r2, 28
    lsrs r1, 30
    adds r1, 0x1
    movs r0, 0x3
    ands r1, r0
    lsls r1, 2
    movs r0, 0xD
    negs r0, r0
    ands r0, r2
    orrs r0, r1
    strb r0, [r5, 0x5]
    b _0810E754
_0810E736:
    ldrb r1, [r4, 0xE]
    mov r0, r9
    ands r0, r1
    cmp r0, 0
    bne _0810E74A
    adds r1, r5, 0
    adds r1, 0x43
    ldrb r0, [r1]
    subs r0, 0xC
    b _0810E752
_0810E74A:
    adds r1, r5, 0
    adds r1, 0x43
    ldrb r0, [r1]
    adds r0, 0xC
_0810E752:
    strb r0, [r1]
_0810E754:
    ldrb r2, [r4, 0xE]
    lsls r0, r2, 31
    lsrs r0, 31
    eors r0, r6
    ands r0, r7
    mov r1, r8
    ands r1, r2
    orrs r1, r0
    strb r1, [r4, 0xE]
_0810E766:
    ldrb r1, [r4]
    movs r0, 0x9
    negs r0, r0
    ands r0, r1
    strb r0, [r4]
    ldrh r1, [r4, 0x2]
    mov r12, r1
_0810E774:
    ldrb r0, [r4]
    movs r1, 0xF
    ands r1, r0
    movs r0, 0x10
    b _0810E978
_0810E77E:
    lsls r1, r2, 24
    lsrs r0, r1, 28
    cmp r0, 0x3
    bne _0810E78C
    movs r0, 0x8
    orrs r0, r2
    b _0810E794
_0810E78C:
    lsrs r0, r1, 28
    cmp r0, 0x1
    bne _0810E79C
    adds r0, r2, 0
_0810E794:
    orrs r0, r7
    strb r0, [r4]
    strb r6, [r4, 0x1]
    b _0810E868
_0810E79C:
    movs r0, 0x8
    ands r0, r2
    cmp r0, 0
    beq _0810E868
    adds r3, r5, 0
    adds r3, 0x3F
    ldrb r2, [r3]
    lsls r1, r2, 31
    lsrs r1, 31
    movs r6, 0x1
    eors r1, r6
    ands r1, r7
    movs r0, 0x2
    negs r0, r0
    mov r8, r0
    ands r0, r2
    orrs r0, r1
    strb r0, [r3]
    lsls r0, 31
    lsrs r0, 31
    adds r1, r5, 0
    adds r1, 0x2A
    strb r0, [r1]
    ldrb r0, [r3]
    movs r1, 0x4
    orrs r0, r1
    movs r1, 0x11
    negs r1, r1
    ands r0, r1
    strb r0, [r3]
    ldrb r1, [r4]
    movs r0, 0x4
    ands r0, r1
    cmp r0, 0
    beq _0810E85A
    bl IsContest
    lsls r0, 24
    cmp r0, 0
    bne _0810E82A
    ldrb r1, [r4, 0xE]
    mov r0, r9
    ands r0, r1
    cmp r0, 0
    bne _0810E810
    ldrb r2, [r5, 0x5]
    lsls r1, r2, 28
    lsrs r1, 30
    subs r1, 0x1
    movs r0, 0x3
    ands r1, r0
    lsls r1, 2
    movs r0, 0xD
    negs r0, r0
    ands r0, r2
    orrs r0, r1
    strb r0, [r5, 0x5]
    b _0810E848
_0810E810:
    ldrb r2, [r5, 0x5]
    lsls r1, r2, 28
    lsrs r1, 30
    adds r1, 0x1
    movs r0, 0x3
    ands r1, r0
    lsls r1, 2
    movs r0, 0xD
    negs r0, r0
    ands r0, r2
    orrs r0, r1
    strb r0, [r5, 0x5]
    b _0810E848
_0810E82A:
    ldrb r1, [r4, 0xE]
    mov r0, r9
    ands r0, r1
    cmp r0, 0
    bne _0810E83E
    adds r1, r5, 0
    adds r1, 0x43
    ldrb r0, [r1]
    subs r0, 0xC
    b _0810E846
_0810E83E:
    adds r1, r5, 0
    adds r1, 0x43
    ldrb r0, [r1]
    adds r0, 0xC
_0810E846:
    strb r0, [r1]
_0810E848:
    ldrb r2, [r4, 0xE]
    lsls r0, r2, 31
    lsrs r0, 31
    eors r0, r6
    ands r0, r7
    mov r1, r8
    ands r1, r2
    orrs r1, r0
    strb r1, [r4, 0xE]
_0810E85A:
    ldrb r1, [r4]
    movs r0, 0x9
    negs r0, r0
    ands r0, r1
    strb r0, [r4]
    ldrh r1, [r4, 0x2]
    mov r12, r1
_0810E868:
    ldrb r0, [r4]
    movs r1, 0xF
    ands r1, r0
    movs r0, 0x20
    b _0810E978
_0810E872:
    lsls r1, r2, 24
    lsrs r0, r1, 28
    cmp r0, 0x2
    bne _0810E882
    movs r0, 0x8
    orrs r0, r2
    strb r0, [r4]
    b _0810E970
_0810E882:
    lsrs r0, r1, 28
    cmp r0, 0
    bne _0810E8A4
    lsls r0, r2, 30
    lsrs r0, 31
    movs r1, 0x1
    eors r0, r1
    ands r0, r7
    lsls r0, 1
    movs r1, 0x3
    negs r1, r1
    ands r1, r2
    orrs r1, r0
    orrs r1, r7
    strb r1, [r4]
    strb r6, [r4, 0x1]
    b _0810E970
_0810E8A4:
    movs r0, 0x8
    ands r0, r2
    cmp r0, 0
    beq _0810E970
    adds r3, r5, 0
    adds r3, 0x3F
    ldrb r2, [r3]
    lsls r1, r2, 31
    lsrs r1, 31
    movs r6, 0x1
    eors r1, r6
    ands r1, r7
    movs r0, 0x2
    negs r0, r0
    mov r8, r0
    ands r0, r2
    orrs r0, r1
    strb r0, [r3]
    lsls r0, 31
    lsrs r0, 31
    adds r1, r5, 0
    adds r1, 0x2A
    strb r0, [r1]
    ldrb r0, [r3]
    movs r1, 0x4
    orrs r0, r1
    movs r1, 0x11
    negs r1, r1
    ands r0, r1
    strb r0, [r3]
    ldrb r1, [r4]
    movs r0, 0x4
    ands r0, r1
    cmp r0, 0
    beq _0810E962
    bl IsContest
    lsls r0, 24
    cmp r0, 0
    bne _0810E932
    ldrb r1, [r4, 0xE]
    mov r0, r9
    ands r0, r1
    cmp r0, 0
    bne _0810E918
    ldrb r2, [r5, 0x5]
    lsls r1, r2, 28
    lsrs r1, 30
    subs r1, 0x1
    movs r0, 0x3
    ands r1, r0
    lsls r1, 2
    movs r0, 0xD
    negs r0, r0
    ands r0, r2
    orrs r0, r1
    strb r0, [r5, 0x5]
    b _0810E950
_0810E918:
    ldrb r2, [r5, 0x5]
    lsls r1, r2, 28
    lsrs r1, 30
    adds r1, 0x1
    movs r0, 0x3
    ands r1, r0
    lsls r1, 2
    movs r0, 0xD
    negs r0, r0
    ands r0, r2
    orrs r0, r1
    strb r0, [r5, 0x5]
    b _0810E950
_0810E932:
    ldrb r1, [r4, 0xE]
    mov r0, r9
    ands r0, r1
    cmp r0, 0
    bne _0810E946
    adds r1, r5, 0
    adds r1, 0x43
    ldrb r0, [r1]
    subs r0, 0xC
    b _0810E94E
_0810E946:
    adds r1, r5, 0
    adds r1, 0x43
    ldrb r0, [r1]
    adds r0, 0xC
_0810E94E:
    strb r0, [r1]
_0810E950:
    ldrb r2, [r4, 0xE]
    lsls r0, r2, 31
    lsrs r0, 31
    eors r0, r6
    ands r0, r7
    mov r1, r8
    ands r1, r2
    orrs r1, r0
    strb r1, [r4, 0xE]
_0810E962:
    ldrb r1, [r4]
    movs r0, 0x9
    negs r0, r0
    ands r0, r1
    strb r0, [r4]
    ldrh r1, [r4, 0x2]
    mov r12, r1
_0810E970:
    ldrb r0, [r4]
    movs r1, 0xF
    ands r1, r0
    movs r0, 0x30
_0810E978:
    orrs r1, r0
    strb r1, [r4]
_0810E97C:
    ldrb r1, [r4]
    lsls r1, 30
    lsrs r1, 31
    adds r0, r4, 0
    adds r0, 0xC
    adds r0, r1
    ldrb r1, [r0]
    ldr r3, =gSineTable
    mov r2, r12
    lsls r0, r2, 1
    adds r0, r3
    movs r2, 0
    ldrsh r0, [r0, r2]
    muls r0, r1
    asrs r0, 8
    strh r0, [r5, 0x24]
    ldrb r2, [r5, 0x3]
    lsls r2, 26
    lsrs r2, 27
    movs r1, 0x24
    ldrsh r0, [r5, r1]
    negs r0, r0
    asrs r0, 1
    ldrb r1, [r4, 0xA]
    adds r0, r1
    lsls r0, 24
    lsrs r0, 24
    lsls r1, r0, 1
    adds r1, r3
    ldrh r6, [r1]
    ldr r1, =gOamMatrices
    lsls r2, 3
    adds r2, r1
    adds r0, 0x40
    lsls r0, 1
    adds r0, r3
    ldrh r0, [r0]
    strh r0, [r2, 0x6]
    strh r0, [r2]
    strh r6, [r2, 0x2]
    lsls r0, r6, 16
    asrs r0, 16
    negs r0, r0
    strh r0, [r2, 0x4]
    ldrh r0, [r4, 0x6]
    ldrh r2, [r4, 0x8]
    adds r0, r2
    strh r0, [r4, 0x8]
    lsls r0, 16
    lsrs r0, 24
    strh r0, [r5, 0x22]
    movs r1, 0x4
    ldrsh r0, [r4, r1]
    movs r1, 0x80
    lsls r1, 8
    ands r0, r1
    cmp r0, 0
    beq _0810EA0C
    ldrh r0, [r4, 0x4]
    subs r1, 0x1
    ands r1, r0
    ldrh r0, [r4, 0x2]
    subs r0, r1
    movs r1, 0xFF
    ands r0, r1
    strh r0, [r4, 0x2]
    b _0810EA1C
    .pool
_0810EA0C:
    ldrh r0, [r4, 0x4]
    ldr r1, =0x00007fff
    ands r1, r0
    ldrh r2, [r4, 0x2]
    adds r1, r2
    movs r0, 0xFF
    ands r1, r0
    strh r1, [r4, 0x2]
_0810EA1C:
    movs r0, 0x22
    ldrsh r1, [r5, r0]
    movs r2, 0x26
    ldrsh r0, [r5, r2]
    adds r1, r0
    ldrh r0, [r4, 0xE]
    lsrs r0, 1
    cmp r1, r0
    blt _0810EA36
    movs r0, 0
    strh r0, [r5, 0x2E]
    ldr r0, =sub_810E2C8
    str r0, [r5, 0x1C]
_0810EA36:
    pop {r3,r4}
    mov r8, r3
    mov r9, r4
    pop {r4-r7}
    pop {r0}
    bx r0
    .pool
    
.syntax divided
	.code	16
.Lfe14:
	.size	 sub_810E520,.Lfe14-sub_810E520
	.align	2, 0
	.globl	sub_810EA4C
	.type	 sub_810EA4C,function
	.thumb_func
sub_810EA4C:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r0, .L82
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
	ldr	r5, .L82+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	ldr	r0, .L82+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
	.word	TranslateAnimSpriteToTargetMonLocation
.Lfe15:
	.size	 sub_810EA4C,.Lfe15-sub_810EA4C
	.align	2, 0
	.globl	sub_810EAA0
	.type	 sub_810EAA0,function
	.thumb_func
sub_810EAA0:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L90
	mov	r1, #0x4
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L85	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	b	.L86
.L91:
	.align	2, 0
.L90:
	.word	gBattleAnimArgs
.L85:
	add	r0, r5, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
.L86:
	ldr	r4, .L92
	mov	r2, #0x4
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L89	@cond_branch
	ldr	r0, .L92+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L88	@cond_branch
.L89:
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	bne	.L87	@cond_branch
	ldr	r0, .L92+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L87	@cond_branch
.L88:
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x8
	strh	r0, [r5, #0x20]
.L87:
	ldr	r4, .L92
	ldrb	r1, [r4, #0x8]
	add	r0, r5, #0
	bl	SeekSpriteAnim
	ldrh	r0, [r5, #0x20]
	sub	r0, r0, #0x20
	strh	r0, [r5, #0x20]
	ldr	r0, .L92+0xc
	strh	r0, [r5, #0x30]
	ldrh	r1, [r4, #0x8]
	mov	r0, #0xc
	mov	r2, r0
	mul	r2, r2, r1
	add	r0, r2, #0
	ldrh	r2, [r5, #0x24]
	add	r0, r0, r2
	strh	r0, [r5, #0x24]
	strh	r1, [r5, #0x2e]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r5, #0x3c]
	ldr	r0, .L92+0x10
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L93:
	.align	2, 0
.L92:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	0xccc
	.word	sub_810EB40
.Lfe16:
	.size	 sub_810EAA0,.Lfe16-sub_810EAA0
	.align	2, 0
	.globl	sub_810EB40
	.type	 sub_810EB40,function
	.thumb_func
sub_810EB40:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	bne	.L95	@cond_branch
	strh	r1, [r4, #0x2e]
	strh	r1, [r4, #0x24]
	add	r0, r4, #0
	bl	StartSpriteAnim
.L95:
	ldrh	r0, [r4, #0x3c]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L96	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L96:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 sub_810EB40,.Lfe17-sub_810EB40
	.align	2, 0
	.globl	sub_810EB88
	.type	 sub_810EB88,function
	.thumb_func
sub_810EB88:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	ldr	r1, .L100
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r7, r0, r1
	ldrh	r0, [r7, #0x8]
	mov	r1, #0x1f
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L98	@cond_branch
	ldr	r1, .L100+0x4
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r1, #0x8
	ldrsh	r0, [r7, r1]
	mov	r5, #0xd
	neg	r5, r5
	add	r1, r5, #0
	bl	Sin
	ldr	r4, .L100+0x8
	strh	r0, [r4]
	mov	r1, #0x8
	ldrsh	r0, [r7, r1]
	add	r1, r5, #0
	bl	Cos
	strh	r0, [r4, #0x2]
	mov	r0, #0x1
	strh	r0, [r4, #0x4]
	mov	r0, #0x3
	strh	r0, [r4, #0x6]
	ldr	r0, .L100+0xc
	mov	r8, r0
	ldr	r5, .L100+0x10
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, r8
	add	r1, r4, #0
	mov	r3, #0x3
	bl	CreateSpriteAndAnimate
.L98:
	ldrh	r0, [r7, #0x8]
	add	r0, r0, #0x8
	strh	r0, [r7, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L99	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L99:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L101:
	.align	2, 0
.L100:
	.word	gTasks
	.word	gAnimVisualTaskCount
	.word	gBattleAnimArgs
	.word	gUnknown_085973E8
	.word	gBattleAnimTarget
.Lfe18:
	.size	 sub_810EB88,.Lfe18-sub_810EB88
	.align	2, 0
	.globl	sub_810EC34
	.type	 sub_810EC34,function
	.thumb_func
sub_810EC34:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L104	@cond_branch
	cmp	r0, #0x1
	beq	.L105	@cond_branch
	b	.L103
.L104:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	ldr	r2, .L109
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L103
.L110:
	.align	2, 0
.L109:
	.word	gSprites
.L105:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L103	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L103:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 sub_810EC34,.Lfe19-sub_810EC34
	.align	2, 0
	.globl	sub_810EC94
	.type	 sub_810EC94,function
	.thumb_func
sub_810EC94:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L114	@cond_branch
	cmp	r0, #0x1
	bgt	.L120	@cond_branch
	cmp	r0, #0
	beq	.L113	@cond_branch
	b	.L112
.L120:
	cmp	r0, #0x2
	beq	.L116	@cond_branch
	b	.L112
.L113:
	ldr	r0, .L122
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	neg	r0, r0
	sub	r0, r0, #0x20
	strh	r0, [r4, #0x26]
	b	.L121
.L123:
	.align	2, 0
.L122:
	.word	gBattleAnimTarget
.L114:
	ldrh	r0, [r4, #0x26]
	add	r0, r0, #0xa
	strh	r0, [r4, #0x26]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	blt	.L112	@cond_branch
.L121:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L112
.L116:
	ldrh	r0, [r4, #0x26]
	sub	r0, r0, #0xa
	strh	r0, [r4, #0x26]
	mov	r2, #0x22
	ldrsh	r0, [r4, r2]
	mov	r2, #0x26
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	bge	.L112	@cond_branch
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	ldr	r2, .L124
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L112:
	pop	{r4}
	pop	{r0}
	bx	r0
.L125:
	.align	2, 0
.L124:
	.word	gSprites
.Lfe20:
	.size	 sub_810EC94,.Lfe20-sub_810EC94
	.align	2, 0
	.globl	sub_810ED28
	.type	 sub_810ED28,function
	.thumb_func
sub_810ED28:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r1, .L127
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x30]
	ldr	r0, .L127+0x4
	str	r0, [r4, #0x1c]
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	ldr	r2, .L127+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L128:
	.align	2, 0
.L127:
	.word	gBattleAnimArgs
	.word	sub_810ED70
	.word	gSprites
.Lfe21:
	.size	 sub_810ED28,.Lfe21-sub_810ED28
	.align	2, 0
	.globl	sub_810ED70
	.type	 sub_810ED70,function
	.thumb_func
sub_810ED70:
	push	{lr}
	add	r2, r0, #0
	ldrh	r1, [r2, #0x2e]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	ble	.L130	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r2, #0x2e]
	b	.L131
.L130:
	mov	r1, #0x22
	ldrsh	r0, [r2, r1]
	mov	r3, #0x26
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	ble	.L132	@cond_branch
	ldrh	r0, [r2, #0x30]
	ldrh	r1, [r2, #0x32]
	add	r0, r0, r1
	strh	r0, [r2, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r2, #0x26]
	sub	r1, r1, r0
	strh	r1, [r2, #0x26]
	b	.L131
.L132:
	add	r3, r2, #0
	add	r3, r3, #0x3e
	ldrb	r0, [r3]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r3]
	ldrh	r0, [r2, #0x34]
	add	r1, r0, #0x1
	strh	r1, [r2, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	ble	.L131	@cond_branch
	ldr	r0, .L135
	str	r0, [r2, #0x1c]
.L131:
	pop	{r0}
	bx	r0
.L136:
	.align	2, 0
.L135:
	.word	sub_810EDD0
.Lfe22:
	.size	 sub_810ED70,.Lfe22-sub_810ED70
	.align	2, 0
	.globl	sub_810EDD0
	.type	 sub_810EDD0,function
	.thumb_func
sub_810EDD0:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r2, #0x26]
	add	r0, r0, r1
	strh	r0, [r2, #0x26]
	mov	r3, #0x22
	ldrsh	r0, [r2, r3]
	mov	r3, #0x26
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	ble	.L138	@cond_branch
	add	r3, r2, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
.L138:
	mov	r1, #0x26
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	ble	.L139	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L139:
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 sub_810EDD0,.Lfe23-sub_810EDD0
	.align	2, 0
	.globl	sub_810EE14
	.type	 sub_810EE14,function
	.thumb_func
sub_810EE14:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L142	@cond_branch
	cmp	r0, #0x1
	beq	.L145	@cond_branch
	b	.L141
.L142:
	ldr	r0, .L154
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	cmp	r0, #0
	bne	.L143	@cond_branch
	ldr	r4, .L154+0x4
	b	.L152
.L155:
	.align	2, 0
.L154:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L143:
	ldr	r4, .L156
.L152:
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	mov	r0, #0x0
	mov	r3, #0x80
	lsl	r3, r3, #0x2
	strh	r3, [r5, #0x30]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	str	r0, [sp]
	add	r0, r5, #0
	mov	r1, #0x0
	bl	TrySetSpriteRotScale
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	b	.L141
.L157:
	.align	2, 0
.L156:
	.word	gBattleAnimTarget
.L145:
	mov	r1, #0x32
	ldrsh	r0, [r5, r1]
	cmp	r0, #0xb
	bgt	.L146	@cond_branch
	ldrh	r0, [r5, #0x30]
	sub	r0, r0, #0x28
	b	.L153
.L146:
	ldrh	r0, [r5, #0x30]
	add	r0, r0, #0x28
.L153:
	strh	r0, [r5, #0x30]
	ldrh	r0, [r5, #0x32]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r5, #0x32]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	mov	r0, #0x30
	ldrsh	r3, [r5, r0]
	str	r1, [sp]
	add	r0, r5, #0
	bl	TrySetSpriteRotScale
	ldrb	r1, [r5, #0x3]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1b
	mov	r0, #0xf4
	lsl	r0, r0, #0x6
	ldr	r2, .L158
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x6
	ldrsh	r1, [r1, r2]
	bl	__divsi3
	add	r1, r0, #0x1
	cmp	r1, #0x80
	ble	.L148	@cond_branch
	mov	r1, #0x80
.L148:
	mov	r0, #0x40
	sub	r0, r0, r1
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r1, r0, #0x1
	strh	r1, [r5, #0x26]
	mov	r1, #0x32
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x18
	bne	.L141	@cond_branch
	add	r0, r5, #0
	bl	sub_80A749C
	add	r0, r5, #0
	bl	DestroyAnimSprite
.L141:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L159:
	.align	2, 0
.L158:
	.word	gOamMatrices
.Lfe24:
	.size	 sub_810EE14,.Lfe24-sub_810EE14
	.align	2, 0
	.globl	sub_810EEF8
	.type	 sub_810EEF8,function
	.thumb_func
sub_810EEF8:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	Random2
	ldr	r4, .L171
	and	r4, r4, r0
	bl	Random2
	mov	r1, #0x7f
	and	r1, r1, r0
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L161	@cond_branch
	mov	r2, #0xb8
	lsl	r2, r2, #0x2
	add	r0, r4, r2
	b	.L168
.L172:
	.align	2, 0
.L171:
	.word	0x1ff
.L161:
	mov	r2, #0xb8
	lsl	r2, r2, #0x2
	add	r0, r2, #0
	sub	r0, r0, r4
.L168:
	strh	r0, [r5, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L163	@cond_branch
	mov	r2, #0xe0
	lsl	r2, r2, #0x2
	add	r0, r2, #0
	add	r0, r1, r0
	b	.L169
.L163:
	mov	r2, #0xe0
	lsl	r2, r2, #0x2
	add	r0, r2, #0
	sub	r0, r0, r1
.L169:
	strh	r0, [r5, #0x30]
	ldr	r2, .L173
	ldrh	r0, [r2]
	strh	r0, [r5, #0x32]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L165	@cond_branch
	ldrb	r0, [r5, #0x3]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x10
	orr	r1, r1, r0
	strb	r1, [r5, #0x3]
.L165:
	mov	r1, #0x2
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	bne	.L166	@cond_branch
	ldr	r4, .L173+0x4
	b	.L170
.L174:
	.align	2, 0
.L173:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L166:
	ldr	r4, .L175
.L170:
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x20
	strh	r0, [r5, #0x22]
	ldr	r0, .L175+0x4
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L176:
	.align	2, 0
.L175:
	.word	gBattleAnimTarget
	.word	sub_810EFA8
.Lfe25:
	.size	 sub_810EEF8,.Lfe25-sub_810EEF8
	.align	2, 0
	.globl	sub_810EFA8
	.type	 sub_810EFA8,function
	.thumb_func
sub_810EFA8:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L178	@cond_branch
	ldrh	r3, [r4, #0x2e]
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	b	.L182
.L178:
	ldrh	r3, [r4, #0x2e]
	lsl	r1, r3, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r4, #0x24]
	sub	r0, r0, r1
.L182:
	strh	r0, [r4, #0x24]
	ldrh	r2, [r4, #0x30]
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r4, #0x26]
	sub	r0, r0, r1
	strh	r0, [r4, #0x26]
	strh	r3, [r4, #0x2e]
	add	r0, r2, #0
	sub	r0, r0, #0x20
	strh	r0, [r4, #0x30]
	lsl	r0, r3, #0x10
	cmp	r0, #0
	bge	.L180	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
.L180:
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	bne	.L181	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L181:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 sub_810EFA8,.Lfe26-sub_810EFA8
	.align	2, 0
	.globl	sub_810F004
	.type	 sub_810F004,function
	.thumb_func
sub_810F004:
	mov	r1, #0x0
	strh	r1, [r0, #0x3a]
	mov	r1, #0x40
	strh	r1, [r0, #0x3c]
	ldr	r1, .L184
	str	r1, [r0, #0x1c]
	bx	lr
.L185:
	.align	2, 0
.L184:
	.word	sub_810F018
.Lfe27:
	.size	 sub_810F004,.Lfe27-sub_810F004
	.align	2, 0
	.globl	sub_810F018
	.type	 sub_810F018,function
	.thumb_func
sub_810F018:
	push	{lr}
	add	r3, r0, #0
	mov	r0, #0x2e
	ldrsh	r1, [r3, r0]
	cmp	r1, #0
	beq	.L188	@cond_branch
	cmp	r1, #0x1
	beq	.L191	@cond_branch
	b	.L187
.L188:
	ldrh	r0, [r3, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L187	@cond_branch
	strh	r1, [r3, #0x30]
	mov	r1, #0x3e
	add	r1, r1, r3
	mov	ip, r1
	ldrb	r2, [r1]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldrh	r0, [r3, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	ble	.L187	@cond_branch
	ldrb	r1, [r1]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L187	@cond_branch
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	b	.L187
.L191:
	add	r0, r3, #0
	bl	DestroyAnimSprite
.L187:
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 sub_810F018,.Lfe28-sub_810F018
	.align	2, 0
	.globl	sub_810F084
	.type	 sub_810F084,function
	.thumb_func
sub_810F084:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x4
	mov	r8, r0
	ldrh	r4, [r0, #0x20]
	ldrh	r5, [r0, #0x22]
	ldr	r6, .L195
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r8
	strh	r0, [r1, #0x20]
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r2, r8
	strh	r6, [r2, #0x22]
	ldrh	r0, [r2, #0x20]
	mov	r9, r0
	mov	r1, r9
	lsl	r0, r1, #0x4
	strh	r0, [r2, #0x36]
	lsl	r0, r6, #0x4
	strh	r0, [r2, #0x38]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r1, #0x20
	ldrsh	r0, [r2, r1]
	sub	r0, r4, r0
	lsl	r0, r0, #0x4
	mov	r1, #0xc
	bl	__divsi3
	mov	r2, r8
	strh	r0, [r2, #0x3a]
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	mov	r1, #0x22
	ldrsh	r0, [r2, r1]
	sub	r0, r5, r0
	lsl	r0, r0, #0x4
	mov	r1, #0xc
	bl	__divsi3
	mov	r2, r8
	strh	r0, [r2, #0x3c]
	mov	r0, r9
	sub	r4, r4, r0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	sub	r5, r5, r6
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	add	r0, r4, #0
	add	r1, r5, #0
	bl	ArcTan2Neg
	lsl	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	str	r0, [sp]
	mov	r0, r8
	mov	r1, #0x1
	add	r2, r3, #0
	bl	TrySetSpriteRotScale
	ldr	r0, .L195+0x4
	mov	r2, r8
	str	r0, [r2, #0x1c]
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L196:
	.align	2, 0
.L195:
	.word	gBattleAnimAttacker
	.word	sub_810F140
.Lfe29:
	.size	 sub_810F084,.Lfe29-sub_810F084
	.align	2, 0
	.globl	sub_810F140
	.type	 sub_810F140,function
	.thumb_func
sub_810F140:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x3a]
	ldrh	r1, [r2, #0x36]
	add	r0, r0, r1
	strh	r0, [r2, #0x36]
	ldrh	r1, [r2, #0x3c]
	ldrh	r3, [r2, #0x38]
	add	r1, r1, r3
	strh	r1, [r2, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r2, #0x20]
	lsl	r1, r1, #0x10
	asr	r3, r1, #0x14
	strh	r3, [r2, #0x22]
	add	r0, r0, #0x2d
	lsl	r0, r0, #0x10
	mov	r1, #0xa5
	lsl	r1, r1, #0x11
	cmp	r0, r1
	bhi	.L199	@cond_branch
	add	r1, r3, #0
	cmp	r1, #0x9d
	bgt	.L199	@cond_branch
	mov	r0, #0x2d
	neg	r0, r0
	cmp	r1, r0
	bge	.L198	@cond_branch
.L199:
	add	r0, r2, #0
	bl	DestroySpriteAndMatrix
.L198:
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 sub_810F140,.Lfe30-sub_810F140
	.align	2, 0
	.globl	unref_sub_810F184
	.type	 unref_sub_810F184,function
	.thumb_func
unref_sub_810F184:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L204
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L201	@cond_branch
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L204+0x4
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	b	.L203
.L205:
	.align	2, 0
.L204:
	.word	gBattleAnimArgs
	.word	gSprites
.L201:
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L206
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
.L203:
	strb	r0, [r1]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L207:
	.align	2, 0
.L206:
	.word	gSprites
.Lfe31:
	.size	 unref_sub_810F184,.Lfe31-unref_sub_810F184
.text
	.align	2, 0

