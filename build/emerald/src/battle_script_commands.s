@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gBattleScriptingCommandsTable
	.section .rodata
	.align	2, 0
	.type	 gBattleScriptingCommandsTable,object
gBattleScriptingCommandsTable:
	.word	atk00_attackcanceler
	.word	atk01_accuracycheck
	.word	atk02_attackstring
	.word	atk03_ppreduce
	.word	atk04_critcalc
	.word	atk05_damagecalc
	.word	atk06_typecalc
	.word	atk07_adjustnormaldamage
	.word	atk08_adjustnormaldamage2
	.word	atk09_attackanimation
	.word	atk0A_waitanimation
	.word	atk0B_healthbarupdate
	.word	atk0C_datahpupdate
	.word	atk0D_critmessage
	.word	atk0E_effectivenesssound
	.word	atk0F_resultmessage
	.word	atk10_printstring
	.word	atk11_printselectionstring
	.word	atk12_waitmessage
	.word	atk13_printfromtable
	.word	atk14_printselectionstringfromtable
	.word	atk15_seteffectwithchance
	.word	atk16_seteffectprimary
	.word	atk17_seteffectsecondary
	.word	atk18_clearstatusfromeffect
	.word	atk19_tryfaintmon
	.word	atk1A_dofaintanimation
	.word	atk1B_cleareffectsonfaint
	.word	atk1C_jumpifstatus
	.word	atk1D_jumpifstatus2
	.word	atk1E_jumpifability
	.word	atk1F_jumpifsideaffecting
	.word	atk20_jumpifstat
	.word	atk21_jumpifstatus3condition
	.word	atk22_jumpiftype
	.word	atk23_getexp
	.word	atk24
	.word	atk25_movevaluescleanup
	.word	atk26_setmultihit
	.word	atk27_decrementmultihit
	.word	atk28_goto
	.word	atk29_jumpifbyte
	.word	atk2A_jumpifhalfword
	.word	atk2B_jumpifword
	.word	atk2C_jumpifarrayequal
	.word	atk2D_jumpifarraynotequal
	.word	atk2E_setbyte
	.word	atk2F_addbyte
	.word	atk30_subbyte
	.word	atk31_copyarray
	.word	atk32_copyarraywithindex
	.word	atk33_orbyte
	.word	atk34_orhalfword
	.word	atk35_orword
	.word	atk36_bicbyte
	.word	atk37_bichalfword
	.word	atk38_bicword
	.word	atk39_pause
	.word	atk3A_waitstate
	.word	atk3B_healthbar_update
	.word	atk3C_return
	.word	atk3D_end
	.word	atk3E_end2
	.word	atk3F_end3
	.word	atk40_jumpifaffectedbyprotect
	.word	atk41_call
	.word	atk42_jumpiftype2
	.word	atk43_jumpifabilitypresent
	.word	atk44_endselectionscript
	.word	atk45_playanimation
	.word	atk46_playanimation2
	.word	atk47_setgraphicalstatchangevalues
	.word	atk48_playstatchangeanimation
	.word	atk49_moveend
	.word	atk4A_typecalc2
	.word	atk4B_returnatktoball
	.word	atk4C_getswitchedmondata
	.word	atk4D_switchindataupdate
	.word	atk4E_switchinanim
	.word	atk4F_jumpifcantswitch
	.word	atk50_openpartyscreen
	.word	atk51_switchhandleorder
	.word	atk52_switchineffects
	.word	atk53_trainerslidein
	.word	atk54_playse
	.word	atk55_fanfare
	.word	atk56_playfaintcry
	.word	atk57
	.word	atk58_returntoball
	.word	atk59_handlelearnnewmove
	.word	atk5A_yesnoboxlearnmove
	.word	atk5B_yesnoboxstoplearningmove
	.word	atk5C_hitanimation
	.word	atk5D_getmoneyreward
	.word	atk5E
	.word	atk5F_swapattackerwithtarget
	.word	atk60_incrementgamestat
	.word	atk61_drawpartystatussummary
	.word	atk62_hidepartystatussummary
	.word	atk63_jumptocalledmove
	.word	atk64_statusanimation
	.word	atk65_status2animation
	.word	atk66_chosenstatusanimation
	.word	atk67_yesnobox
	.word	atk68_cancelallactions
	.word	atk69_adjustsetdamage
	.word	atk6A_removeitem
	.word	atk6B_atknameinbuff1
	.word	atk6C_drawlvlupbox
	.word	atk6D_resetsentmonsvalue
	.word	atk6E_setatktoplayer0
	.word	atk6F_makevisible
	.word	atk70_recordlastability
	.word	atk71_buffermovetolearn
	.word	atk72_jumpifplayerran
	.word	atk73_hpthresholds
	.word	atk74_hpthresholds2
	.word	atk75_useitemonopponent
	.word	atk76_various
	.word	atk77_setprotectlike
	.word	atk78_faintifabilitynotdamp
	.word	atk79_setatkhptozero
	.word	atk7A_jumpifnexttargetvalid
	.word	atk7B_tryhealhalfhealth
	.word	atk7C_trymirrormove
	.word	atk7D_setrain
	.word	atk7E_setreflect
	.word	atk7F_setseeded
	.word	atk80_manipulatedamage
	.word	atk81_trysetrest
	.word	atk82_jumpifnotfirstturn
	.word	atk83_nop
	.word	atk84_jumpifcantmakeasleep
	.word	atk85_stockpile
	.word	atk86_stockpiletobasedamage
	.word	atk87_stockpiletohpheal
	.word	atk88_negativedamage
	.word	atk89_statbuffchange
	.word	atk8A_normalisebuffs
	.word	atk8B_setbide
	.word	atk8C_confuseifrepeatingattackends
	.word	atk8D_setmultihitcounter
	.word	atk8E_initmultihitstring
	.word	atk8F_forcerandomswitch
	.word	atk90_tryconversiontypechange
	.word	atk91_givepaydaymoney
	.word	atk92_setlightscreen
	.word	atk93_tryKO
	.word	atk94_damagetohalftargethp
	.word	atk95_setsandstorm
	.word	atk96_weatherdamage
	.word	atk97_tryinfatuating
	.word	atk98_updatestatusicon
	.word	atk99_setmist
	.word	atk9A_setfocusenergy
	.word	atk9B_transformdataexecution
	.word	atk9C_setsubstitute
	.word	atk9D_mimicattackcopy
	.word	atk9E_metronome
	.word	atk9F_dmgtolevel
	.word	atkA0_psywavedamageeffect
	.word	atkA1_counterdamagecalculator
	.word	atkA2_mirrorcoatdamagecalculator
	.word	atkA3_disablelastusedattack
	.word	atkA4_trysetencore
	.word	atkA5_painsplitdmgcalc
	.word	atkA6_settypetorandomresistance
	.word	atkA7_setalwayshitflag
	.word	atkA8_copymovepermanently
	.word	atkA9_trychoosesleeptalkmove
	.word	atkAA_setdestinybond
	.word	atkAB_trysetdestinybondtohappen
	.word	atkAC_remaininghptopower
	.word	atkAD_tryspiteppreduce
	.word	atkAE_healpartystatus
	.word	atkAF_cursetarget
	.word	atkB0_trysetspikes
	.word	atkB1_setforesight
	.word	atkB2_trysetperishsong
	.word	atkB3_rolloutdamagecalculation
	.word	atkB4_jumpifconfusedandstatmaxed
	.word	atkB5_furycuttercalc
	.word	atkB6_happinesstodamagecalculation
	.word	atkB7_presentdamagecalculation
	.word	atkB8_setsafeguard
	.word	atkB9_magnitudedamagecalculation
	.word	atkBA_jumpifnopursuitswitchdmg
	.word	atkBB_setsunny
	.word	atkBC_maxattackhalvehp
	.word	atkBD_copyfoestats
	.word	atkBE_rapidspinfree
	.word	atkBF_setdefensecurlbit
	.word	atkC0_recoverbasedonsunlight
	.word	atkC1_hiddenpowercalc
	.word	atkC2_selectfirstvalidtarget
	.word	atkC3_trysetfutureattack
	.word	atkC4_trydobeatup
	.word	atkC5_setsemiinvulnerablebit
	.word	atkC6_clearsemiinvulnerablebit
	.word	atkC7_setminimize
	.word	atkC8_sethail
	.word	atkC9_jumpifattackandspecialattackcannotfall
	.word	atkCA_setforcedtarget
	.word	atkCB_setcharge
	.word	atkCC_callterrainattack
	.word	atkCD_cureifburnedparalysedorpoisoned
	.word	atkCE_settorment
	.word	atkCF_jumpifnodamage
	.word	atkD0_settaunt
	.word	atkD1_trysethelpinghand
	.word	atkD2_tryswapitems
	.word	atkD3_trycopyability
	.word	atkD4_trywish
	.word	atkD5_trysetroots
	.word	atkD6_doubledamagedealtifdamaged
	.word	atkD7_setyawn
	.word	atkD8_setdamagetohealthdifference
	.word	atkD9_scaledamagebyhealthratio
	.word	atkDA_tryswapabilities
	.word	atkDB_tryimprison
	.word	atkDC_trysetgrudge
	.word	atkDD_weightdamagecalculation
	.word	atkDE_assistattackselect
	.word	atkDF_trysetmagiccoat
	.word	atkE0_trysetsnatch
	.word	atkE1_trygetintimidatetarget
	.word	atkE2_switchoutabilities
	.word	atkE3_jumpifhasnohp
	.word	atkE4_getsecretpowereffect
	.word	atkE5_pickup
	.word	atkE6_docastformchangeanimation
	.word	atkE7_trycastformdatachange
	.word	atkE8_settypebasedhalvers
	.word	atkE9_setweatherballtype
	.word	atkEA_tryrecycleitem
	.word	atkEB_settypetoterrain
	.word	atkEC_pursuitrelated
	.word	atkEF_snatchsetbattlers
	.word	atkEE_removelightscreenreflect
	.word	atkEF_handleballthrow
	.word	atkF0_givecaughtmon
	.word	atkF1_trysetcaughtmondexflags
	.word	atkF2_displaydexinfo
	.word	atkF3_trygivecaughtmonnick
	.word	atkF4_subattackerhpbydmg
	.word	atkF5_removeattackerstatus1
	.word	atkF6_finishaction
	.word	atkF7_finishturn
	.word	atkF8_trainerslideout
	.size	 gBattleScriptingCommandsTable,996
	.align	2, 0
	.type	 sAccuracyStageRatios,object
sAccuracyStageRatios:
	.byte	0x21
	.byte	0x64
	.space	2
	.byte	0x24
	.byte	0x64
	.space	2
	.byte	0x2b
	.byte	0x64
	.space	2
	.byte	0x32
	.byte	0x64
	.space	2
	.byte	0x3c
	.byte	0x64
	.space	2
	.byte	0x4b
	.byte	0x64
	.space	2
	.byte	0x1
	.byte	0x1
	.space	2
	.byte	0x85
	.byte	0x64
	.space	2
	.byte	0xa6
	.byte	0x64
	.space	2
	.byte	0x2
	.byte	0x1
	.space	2
	.byte	0xe9
	.byte	0x64
	.space	2
	.byte	0x85
	.byte	0x32
	.space	2
	.byte	0x3
	.byte	0x1
	.space	2
	.size	 sAccuracyStageRatios,52
	.align	1, 0
	.type	 sCriticalHitChance,object
sCriticalHitChance:
	.short	0x10
	.short	0x8
	.short	0x4
	.short	0x3
	.short	0x2
	.size	 sCriticalHitChance,10
	.align	2, 0
	.type	 sStatusFlagsForMoveEffects,object
sStatusFlagsForMoveEffects:
	.word	0x0
	.word	0x7
	.word	0x8
	.word	0x10
	.word	0x20
	.word	0x40
	.word	0x80
	.word	0x7
	.word	0x8
	.word	0x0
	.word	0x70
	.word	0x0
	.word	0x1000
	.word	0xe000
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x400000
	.word	0x0
	.word	0x0
	.word	0x4000000
	.word	0x8000000
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0xc00
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.size	 sStatusFlagsForMoveEffects,240
	.align	2, 0
	.type	 sMoveEffectBS_Ptrs,object
sMoveEffectBS_Ptrs:
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectPoison
	.word	BattleScript_MoveEffectBurn
	.word	BattleScript_MoveEffectFreeze
	.word	BattleScript_MoveEffectParalysis
	.word	BattleScript_MoveEffectToxic
	.word	BattleScript_MoveEffectConfusion
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectUproar
	.word	BattleScript_MoveEffectPayDay
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectWrap
	.word	BattleScript_MoveEffectRecoil
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectSleep
	.word	BattleScript_MoveEffectRecoil
	.size	 sMoveEffectBS_Ptrs,156
	.align	2, 0
	.type	 sUnusedWinTemplate,object
	.size	 sUnusedWinTemplate,8
sUnusedWinTemplate:
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.byte	0x7
	.byte	0xf
	.byte	0x1f
	.short	0x3f
	.align	1, 0
	.type	 sUnknown_0831C2C8,object
sUnknown_0831C2C8:
	.short	0x7fff
	.short	0x7fff
	.short	0x396d
	.short	0x0
	.short	0x7f9a
	.short	0x7737
	.short	0x7fbd
	.short	0x62ad
	.short	0x5a2b
	.short	0x670f
	.short	0x0
	.short	0x0
	.short	0x7f0f
	.short	0x4400
	.short	0x421f
	.short	0x14
	.size	 sUnknown_0831C2C8,32
	.align	2, 0
	.type	 sUnknown_0831C2E8,object
sUnknown_0831C2E8:
	.word	0x48010
	.word	0x33333000
	.word	-0x6666cccd
	.word	0x79930399
	.word	0x77937777
	.word	0x1e4003f0
	.word	0xa00997f
	.word	0x1ff001f0
	.word	0x1ff01ff0
	.word	0x1ff01ff0
	.word	-0xfe00f01
	.word	-0xfe00fe6
	.word	-0xfe00fff
	.word	-0xfe00fe1
	.word	0x1ff0f51f
	.word	0x1f01ff0
	.word	0x31f30
	.word	0xa00331e
	.word	0x3f03848
	.word	0x6fd13877
	.word	0x7f444463
	.word	-0x2ffc6fbc
	.word	-0x5fedffb1
	.word	-0xfe00fff
	.word	-0xe00fe1
	.word	0x1ff01ff0
	.word	0x1ff01ff0
	.word	0x1ff01ff0
	.word	0x1ff01ff0
	.word	-0xfe00f02
	.word	-0xfe00fe1
	.word	-0x2ee00fe1
	.word	0x3512006f
	.word	-0x2efc6f1f
	.word	0x3303506f
	.word	0x13555555
	.word	0x4fd0ef1b
	.word	0x1e000150
	.word	-0xf04eeab
	.word	-0xfe00fe7
	.word	0x1ff0ff01
	.word	0x1ff01ff0
	.word	0x1ff01ff0
	.word	0x1f01ff0
	.word	-0xf01e010
	.word	-0xfe00fff
	.word	-0xfe00fe1
	.word	0x306fd11f
	.word	0x35405403
	.word	0x31e40
	.size	 sUnknown_0831C2E8,200
	.type	 sRubyLevelUpStatBoxStats,object
sRubyLevelUpStatBoxStats:
	.byte	0x3a
	.byte	0x3e
	.byte	0x3b
	.byte	0x3f
	.byte	0x3c
	.byte	0x3d
	.size	 sRubyLevelUpStatBoxStats,6
	.align	2, 0
	.type	 sOamData_MonIconOnLvlUpBox,object
	.size	 sOamData_MonIconOnLvlUpBox,8
sOamData_MonIconOnLvlUpBox:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sSpriteTemplate_MonIconOnLvlUpBox,object
	.size	 sSpriteTemplate_MonIconOnLvlUpBox,24
sSpriteTemplate_MonIconOnLvlUpBox:
	.short	0xd75a
	.short	0xd75a
	.word	sOamData_MonIconOnLvlUpBox
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_MonIconOnLvlUpBox
	.align	1, 0
	.type	 sProtectSuccessRates,object
sProtectSuccessRates:
	.short	0xffff
	.short	0x7fff
	.short	0x3fff
	.short	0x1fff
	.size	 sProtectSuccessRates,8
	.align	1, 0
	.type	 sMovesForbiddenToCopy,object
sMovesForbiddenToCopy:
	.short	0x76
	.short	0xa5
	.short	0xa6
	.short	0x66
	.short	0xfffe
	.short	0x44
	.short	0xf3
	.short	0xb6
	.short	0xc5
	.short	0xcb
	.short	0xc2
	.short	0xd6
	.short	0xa8
	.short	0x10a
	.short	0x121
	.short	0x10e
	.short	0x157
	.short	0x10f
	.short	0x108
	.short	0xffff
	.size	 sMovesForbiddenToCopy,40
	.type	 sFlailHpScaleToPowerTable,object
sFlailHpScaleToPowerTable:
	.byte	0x1
	.byte	0xc8
	.byte	0x4
	.byte	0x96
	.byte	0x9
	.byte	0x64
	.byte	0x10
	.byte	0x50
	.byte	0x20
	.byte	0x28
	.byte	0x30
	.byte	0x14
	.size	 sFlailHpScaleToPowerTable,12
	.align	1, 0
	.type	 sNaturePowerMoves,object
sNaturePowerMoves:
	.short	0x4e
	.short	0x4b
	.short	0x59
	.short	0x38
	.short	0x39
	.short	0x3d
	.short	0x9d
	.short	0xf7
	.short	0x81
	.short	0x81
	.size	 sNaturePowerMoves,20
	.align	1, 0
	.type	 sWeightToDamageTable,object
sWeightToDamageTable:
	.short	0x64
	.short	0x14
	.short	0xfa
	.short	0x28
	.short	0x1f4
	.short	0x3c
	.short	0x3e8
	.short	0x50
	.short	0x7d0
	.short	0x64
	.short	0xffff
	.short	0xffff
	.size	 sWeightToDamageTable,24
	.align	1, 0
	.type	 sPickupItems,object
sPickupItems:
	.short	0xd
	.short	0xe
	.short	0x16
	.short	0x3
	.short	0x56
	.short	0x55
	.short	0x4b
	.short	0x17
	.short	0x2
	.short	0x15
	.short	0x44
	.short	0x40
	.short	0x18
	.short	0x3f
	.short	0x13
	.short	0x19
	.short	0x45
	.short	0x25
	.size	 sPickupItems,36
	.align	1, 0
	.type	 sRarePickupItems,object
sRarePickupItems:
	.short	0x15
	.short	0x6e
	.short	0xbb
	.short	0x13
	.short	0x22
	.short	0xb4
	.short	0x14c
	.short	0x24
	.short	0x121
	.short	0xc8
	.short	0x13a
	.size	 sRarePickupItems,22
	.type	 sPickupProbabilities,object
sPickupProbabilities:
	.byte	0x1e
	.byte	0x28
	.byte	0x32
	.byte	0x3c
	.byte	0x46
	.byte	0x50
	.byte	0x5a
	.byte	0x5e
	.byte	0x62
	.size	 sPickupProbabilities,9
	.type	 sTerrainToType,object
sTerrainToType:
	.byte	0xc
	.byte	0xc
	.byte	0x4
	.byte	0xb
	.byte	0xb
	.byte	0xb
	.byte	0x5
	.byte	0x5
	.byte	0x0
	.byte	0x0
	.size	 sTerrainToType,10
	.type	 sBallCatchBonuses,object
sBallCatchBonuses:
	.byte	0x14
	.byte	0xf
	.byte	0xa
	.byte	0xf
	.size	 sBallCatchBonuses,4
	.globl	gUnknown_0831C494
	.align	2, 0
	.type	 gUnknown_0831C494,object
gUnknown_0831C494:
	.byte	0x3d
	.byte	0x44
	.byte	0x3d
	.byte	0x44
	.byte	0x14
	.byte	0x2d
	.byte	0x54
	.byte	0x5c
	.byte	0x46
	.byte	0x55
	.byte	0x20
	.byte	0x5c
	.byte	0x26
	.byte	0x45
	.byte	0x46
	.byte	0x55
	.byte	0x14
	.byte	0x5a
	.byte	0x46
	.byte	0x5c
	.byte	0x1e
	.byte	0x32
	.byte	0x20
	.byte	0x5a
	.byte	0x38
	.byte	0x4e
	.byte	0x38
	.byte	0x4e
	.byte	0x19
	.byte	0x28
	.byte	0x4b
	.byte	0x5a
	.byte	0x45
	.byte	0x4b
	.byte	0x1c
	.byte	0x53
	.byte	0x23
	.byte	0x2d
	.byte	0x1d
	.byte	0x23
	.byte	0x3e
	.byte	0x48
	.byte	0x1e
	.byte	0x32
	.byte	0x3a
	.byte	0x5f
	.byte	0x58
	.byte	0x5e
	.byte	0x22
	.byte	0x2d
	.byte	0x1d
	.byte	0x28
	.byte	0x23
	.byte	0x28
	.byte	0x23
	.byte	0x5f
	.byte	0x38
	.byte	0x4e
	.byte	0x38
	.byte	0x4e
	.byte	0x23
	.byte	0x50
	.byte	0x22
	.byte	0x5e
	.byte	0x2c
	.byte	0x5e
	.byte	0x22
	.byte	0x28
	.byte	0x38
	.byte	0x4e
	.byte	0x38
	.byte	0x4e
	.byte	0x1e
	.byte	0x58
	.byte	0x1e
	.byte	0x58
	.byte	0x1e
	.byte	0x2b
	.byte	0x1b
	.byte	0x21
	.byte	0x28
	.byte	0x5a
	.byte	0x19
	.byte	0x57
	.byte	0x12
	.byte	0x58
	.byte	0x5a
	.byte	0x5f
	.byte	0x58
	.byte	0x5e
	.byte	0x16
	.byte	0x2a
	.byte	0x2a
	.byte	0x5c
	.byte	0x2a
	.byte	0x2f
	.byte	0x38
	.byte	0x4e
	.byte	0x38
	.byte	0x4e
	.size	 gUnknown_0831C494,100
	.type	 sUnknown_0831C4F8,object
sUnknown_0831C4F8:
	.byte	0x3
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x0
	.byte	0x3
	.byte	0x1
	.byte	0x3
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.byte	0x3
	.byte	0x2
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 sUnknown_0831C4F8,28
.text
	.align	2, 0
	.type	 atk00_attackcanceler,function
	.thumb_func
atk00_attackcanceler:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	ldr	r0, .L29
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L3	@cond_branch
	ldr	r1, .L29+0x4
	mov	r0, #0xc
	strb	r0, [r1]
	b	.L2
.L30:
	.align	2, 0
.L29:
	.word	gBattleOutcome
	.word	gCurrentActionFuncId
.L3:
	ldr	r2, .L31
	ldr	r0, .L31+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.L4	@cond_branch
	ldr	r2, .L31+0x8
	ldr	r1, [r2]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xc
	orr	r1, r1, r0
	str	r1, [r2]
	ldr	r1, .L31+0xc
	ldr	r0, .L31+0x10
	b	.L28
.L32:
	.align	2, 0
.L31:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gHitMarker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveEnd
.L4:
	bl	AtkCanceller_UnableToUseMove
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.LCB70
	b	.L2	@long jump
.LCB70:
	ldr	r0, .L33
	ldrb	r1, [r0]
	str	r2, [sp]
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB83
	b	.L2	@long jump
.LCB83:
	ldr	r4, .L33+0x4
	ldr	r0, .L33+0x8
	ldrb	r1, [r0]
	ldr	r3, .L33+0xc
	ldrb	r2, [r3]
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r1, r1, r2
	add	r0, r4, #0
	add	r0, r0, #0x24
	add	r1, r1, r0
	ldrb	r0, [r1]
	ldr	r5, .L33+0x10
	cmp	r0, #0
	bne	.L7	@cond_branch
	ldr	r0, .L33+0x14
	ldrh	r0, [r0]
	cmp	r0, #0xa5
	beq	.L7	@cond_branch
	ldr	r0, [r5]
	ldr	r1, .L33+0x18
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L7	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L7	@cond_branch
	ldr	r1, .L33+0x1c
	ldr	r0, .L33+0x20
	str	r0, [r1]
	ldr	r2, .L33+0x24
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	b	.L2
.L34:
	.align	2, 0
.L33:
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gCurrMovePos
	.word	gBattlerAttacker
	.word	gHitMarker
	.word	gCurrentMove
	.word	0x800200
	.word	gBattlescriptCurrInstr
	.word	BattleScript_NoPPForMove
	.word	gMoveResultFlags
.L7:
	ldr	r0, [r5]
	ldr	r1, .L35
	and	r0, r0, r1
	str	r0, [r5]
	mov	r6, #0x80
	lsl	r6, r6, #0x12
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L8	@cond_branch
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r4, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L8	@cond_branch
	bl	IsMonDisobedient
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L8	@cond_branch
	cmp	r2, #0x2
	bne	.L12	@cond_branch
	ldr	r0, [r5]
	orr	r0, r0, r6
	str	r0, [r5]
	b	.L2
.L36:
	.align	2, 0
.L35:
	.word	-0x800001
.L12:
	ldr	r0, .L37
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L2
.L38:
	.align	2, 0
.L37:
	.word	gMoveResultFlags
.L8:
	ldr	r2, .L39
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r2, .L39+0x4
	ldr	r1, .L39+0x8
	ldrb	r3, [r1]
	lsl	r0, r3, #0x4
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	mov	r8, r1
	mov	r9, r2
	cmp	r0, #0
	bge	.L14	@cond_branch
	ldr	r2, .L39+0xc
	ldr	r0, .L39+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L14	@cond_branch
	ldr	r0, .L39+0x14
	ldrb	r0, [r0]
	ldr	r2, .L39+0x18
	add	r1, r3, #0
	bl	PressurePPLose
	mov	r0, r8
	ldrb	r1, [r0]
	lsl	r1, r1, #0x4
	add	r1, r1, r9
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	bl	BattleScriptPushCursor
	ldr	r1, .L39+0x1c
	ldr	r0, .L39+0x20
	b	.L28
.L40:
	.align	2, 0
.L39:
	.word	gHitMarker
	.word	gProtectStructs
	.word	gBattlerTarget
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattlerAttacker
	.word	0x115
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MagicCoatBounce
.L14:
	mov	r2, #0x0
	ldr	r0, .L41
	ldrb	r0, [r0]
	cmp	r2, r0
	bge	.L16	@cond_branch
	ldr	r6, .L41+0x4
	ldr	r1, .L41+0x8
	mov	ip, r1
	add	r5, r0, #0
	ldr	r7, .L41+0xc
.L18:
	add	r4, r2, r7
	ldrb	r3, [r4]
	lsl	r0, r3, #0x4
	add	r0, r0, r6
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	bge	.L17	@cond_branch
	ldr	r0, .L41+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB320
	b	.L27	@long jump
.LCB320:
.L17:
	add	r2, r2, #0x1
	cmp	r2, r5
	blt	.L18	@cond_branch
.L16:
	ldr	r0, .L41+0x14
	mov	r1, r8
	ldrb	r2, [r1]
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r3, [r1]
	lsl	r0, r3, #0x1e
	cmp	r0, #0
	bge	.L21	@cond_branch
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r3
	strb	r0, [r1]
	ldr	r4, .L41+0x18
	mov	r0, #0x1f
	strb	r0, [r4]
	bl	BattleScriptPushCursor
	ldr	r1, .L41+0x1c
	ldr	r0, .L41+0x20
	str	r0, [r1]
	mov	r1, r8
	ldrb	r0, [r1]
	ldrb	r1, [r4]
	bl	RecordAbilityBattle
	b	.L2
.L42:
	.align	2, 0
.L41:
	.word	gBattlersCount
	.word	gProtectStructs
	.word	gBattleMoves
	.word	gBattlerByTurnOrder
	.word	gCurrentMove
	.word	gSpecialStatuses
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_TookAttack
.L21:
	lsl	r0, r2, #0x4
	add	r0, r0, r9
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.LCB387
	b	.L23	@long jump
.LCB387:
	ldr	r1, .L43
	ldr	r2, .L43+0x4
	ldrh	r3, [r2]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x2
	and	r0, r0, r1
	add	r4, r2, #0
	cmp	r0, #0
	beq	.L23	@cond_branch
	cmp	r3, #0xae
	bne	.L24	@cond_branch
	ldr	r2, .L43+0x8
	ldr	r0, .L43+0xc
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0x7
	beq	.L24	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x7
	bne	.L23	@cond_branch
.L24:
	ldrh	r0, [r4]
	bl	IsTwoTurnsMove
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L25	@cond_branch
	ldr	r1, .L43+0x8
	ldr	r0, .L43+0xc
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L23	@cond_branch
.L25:
	ldr	r0, .L43+0xc
	ldrb	r0, [r0]
	bl	CancelMultiTurnMoves
	ldr	r2, .L43+0x10
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L43+0x14
	ldr	r3, .L43+0x18
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r2, #0x0
	strh	r2, [r0]
	ldr	r1, .L43+0x1c
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r2, [r0]
	ldr	r1, .L43+0x20
	mov	r0, #0x1
	strb	r0, [r1, #0x6]
	b	.L23
.L44:
	.align	2, 0
.L43:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gMoveResultFlags
	.word	gLastLandedMoves
	.word	gBattlerTarget
	.word	gLastHitByType
	.word	gBattleCommunication
.L27:
	ldr	r0, .L45
	ldrb	r0, [r0]
	ldr	r2, .L45+0x4
	add	r1, r3, #0
	bl	PressurePPLose
	ldrb	r1, [r4]
	lsl	r1, r1, #0x4
	add	r1, r1, r6
	ldrb	r2, [r1]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L45+0x8
	ldrb	r0, [r4]
	strb	r0, [r1, #0x17]
	bl	BattleScriptPushCursor
	ldr	r1, .L45+0xc
	ldr	r0, .L45+0x10
	b	.L28
.L46:
	.align	2, 0
.L45:
	.word	gBattlerAttacker
	.word	0x121
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SnatchedMove
.L23:
	ldr	r1, .L47
	ldr	r0, [r1]
	add	r0, r0, #0x1
.L28:
	str	r0, [r1]
.L2:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L48:
	.align	2, 0
.L47:
	.word	gBattlescriptCurrInstr
.Lfe1:
	.size	 atk00_attackcanceler,.Lfe1-atk00_attackcanceler
	.align	2, 0
	.type	 JumpIfMoveFailed,function
	.thumb_func
JumpIfMoveFailed:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	ldr	r1, .L53
	ldr	r5, [r1]
	add	r4, r5, r0
	ldr	r0, .L53+0x4
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L50	@cond_branch
	ldr	r1, .L53+0x8
	ldr	r3, .L53+0xc
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r2, #0x0
	strh	r2, [r0]
	ldr	r1, .L53+0x10
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r2, [r0]
	ldrb	r4, [r5, #0x1]
	ldrb	r0, [r5, #0x2]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r0, [r5, #0x3]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	ldrb	r0, [r5, #0x4]
	lsl	r0, r0, #0x18
	orr	r4, r4, r0
	b	.L51
.L54:
	.align	2, 0
.L53:
	.word	gBattlescriptCurrInstr
	.word	gMoveResultFlags
	.word	gLastLandedMoves
	.word	gBattlerTarget
	.word	gLastHitByType
.L50:
	bl	TrySetDestinyBondToHappen
	ldr	r0, .L55
	ldrb	r1, [r0]
	str	r6, [sp]
	mov	r0, #0x3
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L49	@cond_branch
.L51:
	ldr	r0, .L55+0x4
	str	r4, [r0]
.L49:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L56:
	.align	2, 0
.L55:
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.Lfe2:
	.size	 JumpIfMoveFailed,.Lfe2-JumpIfMoveFailed
	.align	2, 0
	.type	 atk40_jumpifaffectedbyprotect,function
	.thumb_func
atk40_jumpifaffectedbyprotect:
	push	{lr}
	ldr	r1, .L60
	ldr	r0, .L60+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L58	@cond_branch
	ldr	r2, .L60+0x8
	ldr	r0, .L60+0xc
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L58	@cond_branch
	ldr	r2, .L60+0x10
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x5
	mov	r1, #0x0
	bl	JumpIfMoveFailed
	ldr	r1, .L60+0x14
	mov	r0, #0x1
	strb	r0, [r1, #0x6]
	b	.L59
.L61:
	.align	2, 0
.L60:
	.word	gProtectStructs
	.word	gBattlerTarget
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L58:
	ldr	r1, .L62
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L59:
	pop	{r0}
	bx	r0
.L63:
	.align	2, 0
.L62:
	.word	gBattlescriptCurrInstr
.Lfe3:
	.size	 atk40_jumpifaffectedbyprotect,.Lfe3-atk40_jumpifaffectedbyprotect
	.align	2, 0
	.globl	JumpIfMoveAffectedByProtect
	.type	 JumpIfMoveAffectedByProtect,function
	.thumb_func
JumpIfMoveAffectedByProtect:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	mov	r4, #0x0
	ldr	r1, .L66
	ldr	r0, .L66+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L65	@cond_branch
	ldr	r2, .L66+0x8
	ldr	r0, .L66+0xc
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L65	@cond_branch
	ldr	r2, .L66+0x10
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x7
	add	r1, r3, #0
	bl	JumpIfMoveFailed
	ldr	r1, .L66+0x14
	mov	r0, #0x1
	strb	r0, [r1, #0x6]
	mov	r4, #0x1
.L65:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L67:
	.align	2, 0
.L66:
	.word	gProtectStructs
	.word	gBattlerTarget
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gMoveResultFlags
	.word	gBattleCommunication
.Lfe4:
	.size	 JumpIfMoveAffectedByProtect,.Lfe4-JumpIfMoveAffectedByProtect
	.align	2, 0
	.type	 AccuracyCalcHelper,function
	.thumb_func
AccuracyCalcHelper:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r2, .L78
	ldr	r3, .L78+0x4
	ldrb	r4, [r3]
	lsl	r0, r4, #0x2
	add	r0, r0, r2
	ldr	r1, [r0]
	mov	r0, #0x18
	and	r1, r1, r0
	add	r6, r2, #0
	cmp	r1, #0
	beq	.L69	@cond_branch
	ldr	r1, .L78+0x8
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L78+0xc
	ldrb	r0, [r0, #0x15]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L74	@cond_branch
.L69:
	ldr	r0, .L78+0x10
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x9
	and	r1, r1, r2
	add	r2, r0, #0
	cmp	r1, #0
	bne	.L70	@cond_branch
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L70	@cond_branch
.L77:
	ldr	r0, .L78+0x14
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L74
.L79:
	.align	2, 0
.L78:
	.word	gStatuses3
	.word	gBattlerTarget
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gHitMarker
	.word	gMoveResultFlags
.L70:
	ldr	r0, [r2]
	ldr	r1, .L80
	and	r0, r0, r1
	str	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L71	@cond_branch
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L77	@cond_branch
.L71:
	ldr	r0, [r2]
	ldr	r1, .L80+0x4
	and	r0, r0, r1
	str	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L72	@cond_branch
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L77	@cond_branch
.L72:
	ldr	r0, [r2]
	ldr	r1, .L80+0x8
	and	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r5, #0x1
	cmp	r0, #0
	bne	.L75	@cond_branch
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L75	@cond_branch
	ldr	r0, .L80+0xc
	ldrh	r1, [r0]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L75	@cond_branch
	ldr	r0, .L80+0x10
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0x98
	beq	.L74	@cond_branch
.L75:
	ldr	r1, .L80+0x10
	add	r0, r4, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x11
	beq	.L74	@cond_branch
	cmp	r0, #0x4e
	bne	.L73	@cond_branch
.L74:
	mov	r0, #0x7
	add	r1, r5, #0
	bl	JumpIfMoveFailed
	mov	r0, #0x1
	b	.L76
.L81:
	.align	2, 0
.L80:
	.word	-0x10001
	.word	-0x20001
	.word	-0x40001
	.word	gBattleWeather
	.word	gBattleMoves
.L73:
	mov	r0, #0x0
.L76:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 AccuracyCalcHelper,.Lfe5-AccuracyCalcHelper
	.align	2, 0
	.type	 atk01_accuracycheck,function
	.thumb_func
atk01_accuracycheck:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r0, .L111
	ldr	r5, [r0]
	ldrb	r6, [r5, #0x5]
	ldrb	r1, [r5, #0x6]
	lsl	r1, r1, #0x8
	orr	r6, r6, r1
	add	r1, r6, #0x2
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r7, r0, #0
	cmp	r1, #0x1
	bhi	.L83	@cond_branch
	ldr	r2, .L111+0x4
	ldr	r3, .L111+0x8
	ldrb	r4, [r3]
	lsl	r0, r4, #0x2
	add	r0, r0, r2
	ldr	r1, [r0]
	mov	r0, #0x18
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L84	@cond_branch
	ldr	r0, .L111+0xc
	cmp	r6, r0
	bne	.L84	@cond_branch
	ldr	r1, .L111+0x10
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L111+0x14
	ldrb	r0, [r0, #0x15]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L84	@cond_branch
	add	r0, r5, #0x7
	str	r0, [r7]
	b	.L82
.L112:
	.align	2, 0
.L111:
	.word	gBattlescriptCurrInstr
	.word	gStatuses3
	.word	gBattlerTarget
	.word	0xffff
	.word	gDisableStructs
	.word	gBattlerAttacker
.L84:
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	ldr	r1, .L113
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L86	@cond_branch
	ldr	r2, [r7]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r7]
	b	.L82
.L114:
	.align	2, 0
.L113:
	.word	0x400c0
.L86:
	mov	r0, #0x0
	bl	JumpIfMoveAffectedByProtect
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1098
	b	.L82	@long jump
.LCB1098:
	ldr	r1, .L115
	ldr	r0, [r1]
	add	r0, r0, #0x7
	str	r0, [r1]
	b	.L82
.L116:
	.align	2, 0
.L115:
	.word	gBattlescriptCurrInstr
.L83:
	cmp	r6, #0
	bne	.L90	@cond_branch
	ldr	r0, .L117
	ldrh	r6, [r0]
.L90:
	ldr	r0, .L117+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0
	beq	.L91	@cond_branch
	mov	r1, #0x3f
	mov	sl, r1
	mov	r2, sl
	and	r2, r2, r0
	mov	sl, r2
	b	.L92
.L118:
	.align	2, 0
.L117:
	.word	gCurrentMove
	.word	gBattleStruct
.L91:
	ldr	r1, .L119
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	mov	sl, r0
.L92:
	add	r0, r6, #0
	bl	JumpIfMoveAffectedByProtect
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1157
	b	.L82	@long jump
.LCB1157:
	add	r0, r6, #0
	bl	AccuracyCalcHelper
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1164
	b	.L82	@long jump
.LCB1164:
	ldr	r3, .L119+0x4
	ldr	r0, .L119+0x8
	ldrb	r0, [r0]
	mov	r2, #0x58
	mov	r4, r0
	mul	r4, r4, r2
	add	r0, r3, #0
	add	r0, r0, #0x50
	add	r0, r4, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x16
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L95	@cond_branch
	ldr	r0, .L119+0xc
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	ldrb	r5, [r0, #0x1e]
	b	.L96
.L120:
	.align	2, 0
.L119:
	.word	gBattleMoves
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlerAttacker
.L95:
	ldr	r0, .L121
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x1e]
	add	r0, r0, #0x6
	add	r1, r4, r3
	ldrb	r1, [r1, #0x1f]
	sub	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L96:
	lsl	r0, r5, #0x18
	cmp	r0, #0
	bge	.L97	@cond_branch
	mov	r5, #0x0
.L97:
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0xc
	ble	.L98	@cond_branch
	mov	r5, #0xc
.L98:
	ldr	r1, .L121+0x4
	lsl	r4, r6, #0x1
	add	r0, r4, r6
	lsl	r0, r0, #0x2
	add	r7, r0, r1
	ldrb	r3, [r7, #0x3]
	mov	r8, r3
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r4, [sp, #0x4]
	cmp	r0, #0
	bne	.L99	@cond_branch
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L99	@cond_branch
	ldr	r0, .L121+0x8
	ldrh	r1, [r0]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L99	@cond_branch
	ldrb	r0, [r7]
	cmp	r0, #0x98
	bne	.L99	@cond_branch
	mov	r0, #0x32
	mov	r8, r0
.L99:
	ldr	r1, .L121+0xc
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x16
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r4, r8
	mul	r4, r4, r1
	ldrb	r1, [r0, #0x1]
	add	r0, r4, #0
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r7, .L121+0x10
	ldr	r0, .L121
	ldrb	r0, [r0]
	mov	r5, #0x58
	mul	r0, r0, r5
	add	r0, r0, r7
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0xe
	bne	.L100	@cond_branch
	lsl	r0, r4, #0x6
	add	r0, r0, r4
	lsl	r0, r0, #0x1
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L100:
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L101	@cond_branch
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L101	@cond_branch
	ldr	r0, .L121+0x14
	ldrb	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r7
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x8
	bne	.L101	@cond_branch
	ldr	r0, .L121+0x8
	ldrh	r1, [r0]
	mov	r0, #0x18
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L101	@cond_branch
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x4
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L101:
	ldr	r2, .L121+0x10
	ldr	r0, .L121
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	mov	r9, r2
	cmp	r0, #0x37
	bne	.L102	@cond_branch
	mov	r1, sl
	cmp	r1, #0x8
	bhi	.L102	@cond_branch
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x4
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L102:
	ldr	r2, .L121+0x14
	mov	r8, r2
	ldrb	r2, [r2]
	mov	r7, #0x58
	mov	r0, r2
	mul	r0, r0, r7
	mov	r3, r9
	add	r1, r0, r3
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0xaf
	bne	.L103	@cond_branch
	ldr	r1, .L121+0x18
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r5, [r0, #0x7]
	ldrb	r2, [r0, #0x1a]
	b	.L104
.L122:
	.align	2, 0
.L121:
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gBattleWeather
	.word	sAccuracyStageRatios
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gEnigmaBerries
.L103:
	ldrh	r0, [r1, #0x2e]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r1, r8
	ldrb	r0, [r1]
	mul	r0, r0, r7
	add	r0, r0, r9
	ldrh	r0, [r0, #0x2e]
	bl	ItemId_GetHoldEffectParam
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L104:
	ldr	r0, .L123
	ldr	r1, .L123+0x4
	ldrb	r1, [r1]
	strb	r1, [r0]
	cmp	r5, #0x16
	bne	.L105	@cond_branch
	mov	r0, #0x64
	sub	r0, r0, r2
	mul	r0, r0, r4
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L105:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r0, r0, #0x1
	cmp	r0, r4
	ble	.L106	@cond_branch
	ldr	r2, .L123+0x8
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L123+0xc
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L107	@cond_branch
	ldr	r1, .L123+0x10
	ldr	r2, [sp, #0x4]
	add	r0, r2, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0x8
	beq	.L108	@cond_branch
	cmp	r0, #0x20
	bne	.L107	@cond_branch
.L108:
	ldr	r1, .L123+0x14
	mov	r0, #0x2
	b	.L110
.L124:
	.align	2, 0
.L123:
	.word	gPotentialItemEffectBattler
	.word	gBattlerTarget
	.word	gMoveResultFlags
	.word	gBattleTypeFlags
	.word	gBattleMoves
	.word	gBattleCommunication
.L107:
	ldr	r1, .L125
	mov	r0, #0x0
.L110:
	strb	r0, [r1, #0x6]
	bl	CheckWonderGuardAndLevitate
.L106:
	mov	r0, #0x7
	add	r1, r6, #0
	bl	JumpIfMoveFailed
.L82:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L126:
	.align	2, 0
.L125:
	.word	gBattleCommunication
.Lfe6:
	.size	 atk01_accuracycheck,.Lfe6-atk01_accuracycheck
	.align	2, 0
	.type	 atk02_attackstring,function
	.thumb_func
atk02_attackstring:
	push	{r4, r5, lr}
	ldr	r0, .L130
	ldr	r5, [r0]
	cmp	r5, #0
	bne	.L127	@cond_branch
	ldr	r4, .L130+0x4
	ldr	r0, [r4]
	mov	r1, #0xc0
	lsl	r1, r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L129	@cond_branch
	ldr	r0, .L130+0x8
	ldrb	r1, [r0]
	mov	r0, #0x4
	bl	PrepareStringBattle
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	orr	r0, r0, r1
	str	r0, [r4]
.L129:
	ldr	r0, .L130+0xc
	ldr	r1, [r0]
	add	r1, r1, #0x1
	str	r1, [r0]
	ldr	r0, .L130+0x10
	strb	r5, [r0, #0x7]
.L127:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L131:
	.align	2, 0
.L130:
	.word	gBattleControllerExecFlags
	.word	gHitMarker
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	gBattleCommunication
.Lfe7:
	.size	 atk02_attackstring,.Lfe7-atk02_attackstring
	.align	2, 0
	.type	 atk03_ppreduce,function
	.thumb_func
atk03_ppreduce:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r6, #0x1
	ldr	r0, .L147
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB1598
	b	.L132	@long jump
.LCB1598:
	ldr	r1, .L147+0x4
	ldr	r2, .L147+0x8
	ldrb	r3, [r2]
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r4, r0, #0x1f
	mov	r9, r2
	cmp	r4, #0
	bne	.L134	@cond_branch
	ldr	r2, .L147+0xc
	ldr	r0, .L147+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0x20
	beq	.L136	@cond_branch
	cmp	r0, #0x20
	bgt	.L142	@cond_branch
	cmp	r0, #0x8
	beq	.L138	@cond_branch
	b	.L139
.L148:
	.align	2, 0
.L147:
	.word	gBattleControllerExecFlags
	.word	gSpecialStatuses
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gCurrentMove
.L142:
	cmp	r0, #0x40
	beq	.L138	@cond_branch
	b	.L139
.L136:
	str	r4, [sp]
	mov	r0, #0x12
	add	r1, r3, #0
	mov	r2, #0x2e
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0x1
	b	.L134
.L138:
	mov	r0, r9
	ldrb	r1, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x10
	mov	r2, #0x2e
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r6, r0
	b	.L134
.L139:
	ldr	r1, .L149
	mov	r2, r9
	ldrb	r0, [r2]
	ldrb	r7, [r1]
	cmp	r0, r7
	beq	.L134	@cond_branch
	ldr	r2, .L149+0x4
	ldrb	r1, [r1]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x2e
	bne	.L134	@cond_branch
	add	r6, r6, #0x1
.L134:
	ldr	r0, .L149+0x8
	ldr	r4, [r0]
	mov	r0, #0xa0
	lsl	r0, r0, #0x4
	and	r4, r4, r0
	cmp	r4, #0
	bne	.L143	@cond_branch
	ldr	r2, .L149+0x4
	ldr	r3, .L149+0xc
	ldr	r1, .L149+0x10
	ldrb	r5, [r1]
	mov	r0, #0x58
	mov	r8, r0
	mov	r0, r8
	mul	r0, r0, r5
	ldrb	r7, [r3]
	add	r0, r0, r7
	mov	r7, #0x24
	add	r7, r7, r2
	mov	ip, r7
	add	r0, r0, ip
	ldrb	r0, [r0]
	mov	r9, r1
	mov	sl, r2
	add	r7, r3, #0
	cmp	r0, #0
	beq	.L143	@cond_branch
	ldr	r0, .L149+0x14
	lsl	r1, r5, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	mov	r2, #0x8
	orr	r0, r0, r2
	strb	r0, [r1, #0x2]
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	ldrb	r1, [r7]
	add	r0, r0, r1
	mov	r1, ip
	add	r2, r0, r1
	ldrb	r0, [r2]
	cmp	r0, r6
	ble	.L144	@cond_branch
	sub	r0, r0, r6
	strb	r0, [r2]
	b	.L145
.L150:
	.align	2, 0
.L149:
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gHitMarker
	.word	gCurrMovePos
	.word	gBattlerAttacker
	.word	gProtectStructs
.L144:
	strb	r4, [r2]
.L145:
	mov	r2, r9
	ldrb	r3, [r2]
	mov	r4, #0x58
	mov	r0, r3
	mul	r0, r0, r4
	mov	r1, sl
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L143	@cond_branch
	ldr	r1, .L151
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x18]
	lsr	r1, r1, #0x4
	ldr	r2, .L151+0x4
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L143	@cond_branch
	ldr	r0, .L151+0x8
	strb	r3, [r0]
	ldrb	r1, [r7]
	add	r1, r1, #0x9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, r9
	ldrb	r0, [r2]
	mul	r0, r0, r4
	mov	r2, sl
	add	r2, r2, #0x24
	add	r0, r0, r2
	ldrb	r7, [r7]
	add	r0, r0, r7
	str	r0, [sp]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	BtlController_EmitSetMonData
	mov	r7, r9
	ldrb	r0, [r7]
	bl	MarkBattlerForControllerExec
.L143:
	ldr	r2, .L151+0xc
	ldr	r0, [r2]
	ldr	r1, .L151+0x10
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L151+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L132:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L152:
	.align	2, 0
.L151:
	.word	gDisableStructs
	.word	gBitTable
	.word	gActiveBattler
	.word	gHitMarker
	.word	-0x801
	.word	gBattlescriptCurrInstr
.Lfe8:
	.size	 atk03_ppreduce,.Lfe8-atk03_ppreduce
	.align	2, 0
	.type	 atk04_critcalc,function
	.thumb_func
atk04_critcalc:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L171
	ldr	r0, .L171+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2e]
	cmp	r0, #0xaf
	bne	.L154	@cond_branch
	ldr	r1, .L171+0x8
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r6, [r0, #0x7]
	b	.L155
.L172:
	.align	2, 0
.L171:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gEnigmaBerries
.L154:
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L155:
	ldr	r1, .L173
	ldr	r3, .L173+0x4
	ldrb	r0, [r3]
	strb	r0, [r1]
	ldr	r4, .L173+0x8
	ldrb	r1, [r3]
	mov	r0, #0x58
	mov	r7, r1
	mul	r7, r7, r0
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r0, r7, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xd
	and	r0, r0, r1
	neg	r0, r0
	asr	r5, r0, #0x1f
	mov	r0, #0x2
	and	r5, r5, r0
	ldr	r2, .L173+0xc
	ldr	r0, .L173+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	ip, r3
	cmp	r1, #0x2b
	bne	.L158	@cond_branch
	add	r5, r5, #0x1
.L158:
	add	r0, r5, #0
	cmp	r1, #0x4b
	bne	.L159	@cond_branch
	add	r0, r0, #0x1
.L159:
	cmp	r1, #0xc8
	bne	.L160	@cond_branch
	add	r0, r0, #0x1
.L160:
	add	r2, r0, #0
	cmp	r1, #0xd1
	bne	.L161	@cond_branch
	add	r2, r2, #0x1
.L161:
	mov	r1, #0x0
	cmp	r6, #0x3f
	bne	.L162	@cond_branch
	add	r0, r7, r4
	ldrh	r0, [r0]
	cmp	r0, #0x71
	bne	.L162	@cond_branch
	mov	r1, #0x1
.L162:
	lsl	r5, r1, #0x1
	mov	r3, #0x0
	cmp	r6, #0x42
	bne	.L163	@cond_branch
	mov	r0, ip
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0]
	cmp	r0, #0x53
	bne	.L163	@cond_branch
	mov	r3, #0x1
.L163:
	lsl	r1, r3, #0x1
	cmp	r6, #0x29
	bne	.L164	@cond_branch
	add	r0, r5, #0x1
	add	r0, r2, r0
	b	.L169
.L174:
	.align	2, 0
.L173:
	.word	gPotentialItemEffectBattler
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gBattleMoves
	.word	gCurrentMove
.L164:
	add	r0, r2, r5
.L169:
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r5, r0, #0
	cmp	r5, #0x4
	bls	.L166	@cond_branch
	mov	r5, #0x4
.L166:
	ldr	r0, .L175
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r4
	add	r0, r0, #0x20
	ldrb	r4, [r0]
	cmp	r4, #0x4
	beq	.L167	@cond_branch
	cmp	r4, #0x4b
	beq	.L167	@cond_branch
	ldr	r1, .L175+0x4
	mov	r2, ip
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L167	@cond_branch
	ldr	r0, .L175+0x8
	ldr	r0, [r0]
	mov	r1, #0x84
	lsl	r1, r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L167	@cond_branch
	bl	Random
	ldr	r2, .L175+0xc
	lsl	r1, r5, #0x1
	add	r1, r1, r2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrh	r1, [r1]
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L167	@cond_branch
	ldr	r1, .L175+0x10
	mov	r0, #0x2
	b	.L170
.L176:
	.align	2, 0
.L175:
	.word	gBattlerTarget
	.word	gStatuses3
	.word	gBattleTypeFlags
	.word	sCriticalHitChance
	.word	gCritMultiplier
.L167:
	ldr	r1, .L177
	mov	r0, #0x1
.L170:
	strb	r0, [r1]
	ldr	r1, .L177+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L178:
	.align	2, 0
.L177:
	.word	gCritMultiplier
	.word	gBattlescriptCurrInstr
.Lfe9:
	.size	 atk04_critcalc,.Lfe9-atk04_critcalc
	.align	2, 0
	.type	 atk05_damagecalc,function
	.thumb_func
atk05_damagecalc:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x10
	ldr	r4, .L182
	ldr	r5, .L182+0x4
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r3, [r1]
	ldr	r6, .L182+0x8
	ldrb	r0, [r6]
	mov	r4, #0x58
	mul	r0, r0, r4
	ldr	r2, .L182+0xc
	add	r0, r0, r2
	ldrb	r1, [r5]
	mul	r1, r1, r4
	add	r1, r1, r2
	ldr	r7, .L182+0x10
	ldrh	r2, [r7]
	ldr	r4, .L182+0x14
	ldrh	r4, [r4]
	str	r4, [sp]
	ldr	r4, .L182+0x18
	ldr	r4, [r4]
	ldrb	r4, [r4, #0x13]
	str	r4, [sp, #0x4]
	ldrb	r4, [r6]
	str	r4, [sp, #0x8]
	ldrb	r4, [r5]
	str	r4, [sp, #0xc]
	bl	CalculateBaseDamage
	ldr	r4, .L182+0x1c
	ldr	r1, .L182+0x20
	ldrb	r1, [r1]
	mul	r1, r1, r0
	ldr	r0, .L182+0x24
	ldrb	r0, [r0, #0xe]
	mov	r3, r1
	mul	r3, r3, r0
	str	r3, [r4]
	ldr	r1, .L182+0x28
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L180	@cond_branch
	ldr	r2, .L182+0x2c
	ldrh	r1, [r7]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0xd
	bne	.L180	@cond_branch
	lsl	r0, r3, #0x1
	str	r0, [r4]
.L180:
	ldr	r1, .L182+0x30
	ldr	r0, .L182+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.L181	@cond_branch
	ldr	r4, .L182+0x1c
	ldr	r1, [r4]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	mov	r1, #0xa
	bl	__divsi3
	str	r0, [r4]
.L181:
	ldr	r1, .L182+0x34
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x10
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L183:
	.align	2, 0
.L182:
	.word	gSideStatuses
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gCurrentMove
	.word	gDynamicBasePower
	.word	gBattleStruct
	.word	gBattleMoveDamage
	.word	gCritMultiplier
	.word	gBattleScripting
	.word	gStatuses3
	.word	gBattleMoves
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
.Lfe10:
	.size	 atk05_damagecalc,.Lfe10-atk05_damagecalc
	.align	2, 0
	.globl	AI_CalcDmg
	.type	 AI_CalcDmg,function
	.thumb_func
AI_CalcDmg:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r4, .L187
	add	r0, r5, #0
	bl	GetBattlerPosition
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r3, [r1]
	mov	r1, #0x58
	mov	r0, r7
	mul	r0, r0, r1
	ldr	r2, .L187+0x4
	add	r0, r0, r2
	mul	r1, r1, r5
	add	r1, r1, r2
	ldr	r2, .L187+0x8
	mov	r8, r2
	ldrh	r2, [r2]
	ldr	r6, .L187+0xc
	ldrh	r4, [r6]
	str	r4, [sp]
	ldr	r4, .L187+0x10
	ldr	r4, [r4]
	ldrb	r4, [r4, #0x13]
	str	r4, [sp, #0x4]
	str	r7, [sp, #0x8]
	str	r5, [sp, #0xc]
	bl	CalculateBaseDamage
	ldr	r4, .L187+0x14
	mov	r1, #0x0
	strh	r1, [r6]
	ldr	r1, .L187+0x18
	ldrb	r1, [r1]
	mul	r1, r1, r0
	ldr	r0, .L187+0x1c
	ldrb	r0, [r0, #0xe]
	mov	r3, r1
	mul	r3, r3, r0
	str	r3, [r4]
	ldr	r1, .L187+0x20
	lsl	r0, r7, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L185	@cond_branch
	ldr	r2, .L187+0x24
	mov	r0, r8
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0xd
	bne	.L185	@cond_branch
	lsl	r0, r3, #0x1
	str	r0, [r4]
.L185:
	ldr	r0, .L187+0x28
	lsl	r1, r7, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.L186	@cond_branch
	ldr	r4, .L187+0x14
	ldr	r1, [r4]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	mov	r1, #0xa
	bl	__divsi3
	str	r0, [r4]
.L186:
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L188:
	.align	2, 0
.L187:
	.word	gSideStatuses
	.word	gBattleMons
	.word	gCurrentMove
	.word	gDynamicBasePower
	.word	gBattleStruct
	.word	gBattleMoveDamage
	.word	gCritMultiplier
	.word	gBattleScripting
	.word	gStatuses3
	.word	gBattleMoves
	.word	gProtectStructs
.Lfe11:
	.size	 AI_CalcDmg,.Lfe11-AI_CalcDmg
	.align	2, 0
	.type	 ModulateDmgByType,function
	.thumb_func
ModulateDmgByType:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r5, .L206
	ldr	r0, [r5]
	mul	r0, r0, r4
	mov	r1, #0xa
	bl	__divsi3
	str	r0, [r5]
	cmp	r0, #0
	bne	.L190	@cond_branch
	cmp	r4, #0
	beq	.L190	@cond_branch
	mov	r0, #0x1
	str	r0, [r5]
.L190:
	cmp	r4, #0x5
	beq	.L193	@cond_branch
	cmp	r4, #0x5
	bgt	.L203	@cond_branch
	cmp	r4, #0
	beq	.L192	@cond_branch
	b	.L191
.L207:
	.align	2, 0
.L206:
	.word	gBattleMoveDamage
.L203:
	cmp	r4, #0x14
	beq	.L197	@cond_branch
	b	.L191
.L192:
	ldr	r2, .L208
	ldrb	r0, [r2]
	mov	r1, #0x8
	orr	r0, r0, r1
	mov	r1, #0xfb
	and	r0, r0, r1
	mov	r1, #0xfd
	and	r0, r0, r1
	b	.L204
.L209:
	.align	2, 0
.L208:
	.word	gMoveResultFlags
.L193:
	ldr	r2, .L210
	ldr	r0, .L210+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	beq	.L191	@cond_branch
	ldr	r2, .L210+0x8
	ldrb	r1, [r2]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L191	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L195	@cond_branch
	mov	r0, #0xfd
	and	r0, r0, r1
	b	.L204
.L211:
	.align	2, 0
.L210:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gMoveResultFlags
.L195:
	mov	r0, #0x4
	b	.L205
.L197:
	ldr	r2, .L212
	ldr	r0, .L212+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	beq	.L191	@cond_branch
	ldr	r2, .L212+0x8
	ldrb	r1, [r2]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L191	@cond_branch
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L199	@cond_branch
	mov	r0, #0xfb
	and	r0, r0, r1
	b	.L204
.L213:
	.align	2, 0
.L212:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gMoveResultFlags
.L199:
	mov	r0, #0x2
.L205:
	orr	r0, r0, r1
.L204:
	strb	r0, [r2]
.L191:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 ModulateDmgByType,.Lfe12-ModulateDmgByType
	.align	2, 0
	.type	 atk06_typecalc,function
	.thumb_func
atk06_typecalc:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	mov	r3, #0x0
	ldr	r1, .L236
	ldrh	r0, [r1]
	cmp	r0, #0xa5
	bne	.LCB2515
	b	.L234	@long jump
.LCB2515:
	ldr	r0, .L236+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0
	beq	.L216	@cond_branch
	mov	r1, #0x3f
	mov	r8, r1
	and	r1, r1, r0
	mov	r8, r1
	b	.L217
.L237:
	.align	2, 0
.L236:
	.word	gCurrentMove
	.word	gBattleStruct
.L216:
	ldr	r2, .L238
	ldrh	r1, [r1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	mov	r8, r0
.L217:
	ldr	r2, .L238+0x4
	ldr	r0, .L238+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	add	r5, r2, #0
	cmp	r0, r8
	beq	.L219	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, r8
	bne	.L218	@cond_branch
.L219:
	ldr	r4, .L238+0xc
	ldr	r1, [r4]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	str	r0, [r4]
	mov	r1, #0xa
	str	r3, [sp, #0x4]
	bl	__divsi3
	str	r0, [r4]
	ldr	r3, [sp, #0x4]
.L218:
	ldr	r2, .L238+0x10
	ldrb	r1, [r2]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r5
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	add	r4, r2, #0
	cmp	r0, #0x1a
	bne	.L220	@cond_branch
	mov	r1, r8
	cmp	r1, #0x4
	bne	.L220	@cond_branch
	ldr	r3, .L238+0x14
	strb	r0, [r3]
	ldr	r2, .L238+0x18
	ldrb	r0, [r2]
	mov	r1, #0x9
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L238+0x1c
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r2, #0x0
	strh	r2, [r0]
	ldr	r1, .L238+0x20
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r2, [r0]
	ldr	r0, .L238+0x24
	mov	r1, r8
	strb	r1, [r0, #0x6]
	ldrb	r0, [r4]
	ldrb	r1, [r3]
	bl	RecordAbilityBattle
	b	.L221
.L239:
	.align	2, 0
.L238:
	.word	gBattleMoves
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattlerTarget
	.word	gLastUsedAbility
	.word	gMoveResultFlags
	.word	gLastLandedMoves
	.word	gLastHitByType
	.word	gBattleCommunication
.L220:
	ldr	r1, .L240
	add	r0, r3, r1
	ldrb	r0, [r0]
	add	r2, r1, #0
	b	.L235
.L241:
	.align	2, 0
.L240:
	.word	gTypeEffectiveness
.L226:
	add	r3, r3, #0x3
	b	.L222
.L225:
	ldr	r5, .L242
	add	r0, r3, r5
	ldrb	r0, [r0]
	cmp	r0, r8
	bne	.L227	@cond_branch
	add	r1, r3, #0x1
	add	r1, r1, r5
	ldr	r2, .L242+0x4
	ldr	r7, .L242+0x8
	ldrb	r0, [r7]
	mov	r6, #0x58
	mul	r0, r0, r6
	add	r0, r0, r2
	add	r0, r0, #0x21
	ldrb	r4, [r1]
	ldrb	r0, [r0]
	cmp	r4, r0
	bne	.L229	@cond_branch
	add	r0, r3, #0x2
	add	r0, r0, r5
	ldrb	r0, [r0]
	str	r2, [sp]
	str	r3, [sp, #0x4]
	bl	ModulateDmgByType
	ldr	r3, [sp, #0x4]
	ldr	r2, [sp]
.L229:
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r2
	add	r1, r0, #0
	add	r1, r1, #0x22
	ldrb	r1, [r1]
	cmp	r4, r1
	bne	.L227	@cond_branch
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, r4
	beq	.L227	@cond_branch
	add	r0, r3, #0x2
	add	r0, r0, r5
	ldrb	r0, [r0]
	str	r3, [sp, #0x4]
	bl	ModulateDmgByType
	ldr	r3, [sp, #0x4]
.L227:
	add	r3, r3, #0x3
	ldr	r5, .L242+0x4
	ldr	r4, .L242+0x8
	ldr	r2, .L242
.L222:
	add	r0, r3, r2
	ldrb	r0, [r0]
.L235:
	cmp	r0, #0xff
	beq	.L221	@cond_branch
	cmp	r0, #0xfe
	bne	.L225	@cond_branch
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r5, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x16
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L226	@cond_branch
.L221:
	ldr	r2, .L242+0x4
	ldr	r5, .L242+0x8
	ldrb	r1, [r5]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r6, [r0]
	cmp	r6, #0x19
	bne	.L232	@cond_branch
	ldr	r0, .L242+0xc
	ldrb	r0, [r0]
	ldr	r7, .L242+0x10
	ldrh	r1, [r7]
	bl	AttacksThisTurn
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L232	@cond_branch
	ldr	r1, .L242+0x14
	mov	r8, r1
	ldrb	r4, [r1]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L233	@cond_branch
	mov	r0, #0x6
	and	r0, r0, r4
	cmp	r0, #0x6
	bne	.L232	@cond_branch
.L233:
	ldr	r2, .L242+0x18
	ldrh	r1, [r7]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	beq	.L232	@cond_branch
	ldr	r3, .L242+0x1c
	strb	r6, [r3]
	mov	r0, #0x1
	orr	r0, r0, r4
	mov	r1, r8
	strb	r0, [r1]
	ldr	r1, .L242+0x20
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r2, #0x0
	strh	r2, [r0]
	ldr	r1, .L242+0x24
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r2, [r0]
	ldr	r1, .L242+0x28
	mov	r0, #0x3
	strb	r0, [r1, #0x6]
	ldrb	r0, [r5]
	ldrb	r1, [r3]
	bl	RecordAbilityBattle
.L232:
	ldr	r0, .L242+0x14
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L234	@cond_branch
	ldr	r2, .L242+0x2c
	ldr	r0, .L242+0xc
	ldrb	r1, [r0]
	lsl	r1, r1, #0x4
	add	r1, r1, r2
	ldrb	r0, [r1, #0x1]
	mov	r2, #0x2
	orr	r0, r0, r2
	strb	r0, [r1, #0x1]
.L234:
	ldr	r1, .L242+0x30
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L243:
	.align	2, 0
.L242:
	.word	gTypeEffectiveness
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gCurrentMove
	.word	gMoveResultFlags
	.word	gBattleMoves
	.word	gLastUsedAbility
	.word	gLastLandedMoves
	.word	gLastHitByType
	.word	gBattleCommunication
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
.Lfe13:
	.size	 atk06_typecalc,.Lfe13-atk06_typecalc
	.align	2, 0
	.type	 CheckWonderGuardAndLevitate,function
	.thumb_func
CheckWonderGuardAndLevitate:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r6, #0x0
	mov	r5, #0x0
	ldr	r0, .L266
	ldrh	r1, [r0]
	mov	r9, r0
	cmp	r1, #0xa5
	bne	.LCB2908
	b	.L244	@long jump
.LCB2908:
	ldr	r2, .L266+0x4
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.LCB2919
	b	.L244	@long jump
.LCB2919:
	ldr	r0, .L266+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0
	beq	.L247	@cond_branch
	mov	r1, #0x3f
	mov	ip, r1
	mov	r2, ip
	and	r2, r2, r0
	mov	ip, r2
	b	.L248
.L267:
	.align	2, 0
.L266:
	.word	gCurrentMove
	.word	gBattleMoves
	.word	gBattleStruct
.L247:
	ldrb	r1, [r1, #0x2]
	mov	ip, r1
.L248:
	ldr	r2, .L268
	ldr	r3, .L268+0x4
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r1, [r0]
	add	r7, r2, #0
	mov	r8, r3
	cmp	r1, #0x1a
	bne	.L249	@cond_branch
	mov	r0, ip
	cmp	r0, #0x4
	bne	.L249	@cond_branch
	ldr	r0, .L268+0x8
	strb	r1, [r0]
	ldr	r0, .L268+0xc
	mov	r1, ip
	strb	r1, [r0, #0x6]
	ldrb	r0, [r3]
	mov	r1, #0x1a
	bl	RecordAbilityBattle
	b	.L244
.L269:
	.align	2, 0
.L268:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gLastUsedAbility
	.word	gBattleCommunication
.L249:
	ldr	r1, .L270
	add	r0, r5, r1
	ldrb	r0, [r0]
	add	r4, r1, #0
	b	.L265
.L271:
	.align	2, 0
.L270:
	.word	gTypeEffectiveness
.L253:
	add	r0, r5, r4
	ldrb	r0, [r0]
	cmp	r0, ip
	beq	.LCB3012
	b	.L255	@long jump
.LCB3012:
	add	r2, r5, #0x1
	add	r3, r2, r4
	mov	r0, r8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r7
	add	r0, r0, #0x21
	ldrb	r1, [r3]
	add	r3, r2, #0
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L256	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L256	@cond_branch
	ldr	r2, .L272
	ldrb	r0, [r2]
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L272+0x4
	ldr	r0, .L272+0x8
	ldrb	r2, [r0]
	lsl	r2, r2, #0x4
	add	r2, r2, r1
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
.L256:
	add	r2, r3, r4
	mov	r0, r8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r7
	add	r1, r0, #0
	add	r1, r1, #0x22
	ldrb	r2, [r2]
	ldrb	r1, [r1]
	cmp	r2, r1
	bne	.L257	@cond_branch
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, r2
	beq	.L257	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L257	@cond_branch
	ldr	r2, .L272
	ldrb	r0, [r2]
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L272+0x4
	ldr	r0, .L272+0x8
	ldrb	r2, [r0]
	lsl	r2, r2, #0x4
	add	r2, r2, r1
	ldrb	r0, [r2, #0x1]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
.L257:
	add	r2, r3, r4
	mov	r0, r8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r7
	add	r0, r0, #0x21
	ldrb	r1, [r2]
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L258	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0x14
	bne	.L258	@cond_branch
	mov	r0, #0x1
	orr	r6, r6, r0
.L258:
	add	r2, r3, r4
	mov	r0, r8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r7
	add	r1, r0, #0
	add	r1, r1, #0x22
	ldrb	r2, [r2]
	ldrb	r1, [r1]
	cmp	r2, r1
	bne	.L259	@cond_branch
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, r2
	beq	.L259	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0x14
	bne	.L259	@cond_branch
	mov	r0, #0x1
	orr	r6, r6, r0
.L259:
	add	r2, r3, r4
	mov	r0, r8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r7
	add	r0, r0, #0x21
	ldrb	r1, [r2]
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L260	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0x5
	bne	.L260	@cond_branch
	mov	r0, #0x2
	orr	r6, r6, r0
	lsl	r0, r6, #0x18
	lsr	r6, r0, #0x18
.L260:
	add	r2, r3, r4
	mov	r0, r8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r7
	add	r1, r0, #0
	add	r1, r1, #0x22
	ldrb	r2, [r2]
	ldrb	r1, [r1]
	cmp	r2, r1
	bne	.L255	@cond_branch
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, r2
	beq	.L255	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0x5
	bne	.L255	@cond_branch
	mov	r0, #0x2
	orr	r6, r6, r0
	lsl	r0, r6, #0x18
	lsr	r6, r0, #0x18
.L255:
	add	r5, r5, #0x3
	add	r0, r5, r4
	ldrb	r0, [r0]
.L265:
	cmp	r0, #0xff
	beq	.L251	@cond_branch
	cmp	r0, #0xfe
	beq	.LCB3262
	b	.L253	@long jump
.LCB3262:
	mov	r2, r8
	ldrb	r1, [r2]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r7, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x16
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L255	@cond_branch
.L251:
	mov	r0, r8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r7
	add	r0, r0, #0x20
	ldrb	r4, [r0]
	cmp	r4, #0x19
	bne	.L244	@cond_branch
	ldr	r0, .L272+0x8
	ldrb	r0, [r0]
	mov	r2, r9
	ldrh	r1, [r2]
	bl	AttacksThisTurn
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L244	@cond_branch
	mov	r0, #0x3
	and	r6, r6, r0
	cmp	r6, #0x1
	beq	.L244	@cond_branch
	ldr	r2, .L272+0xc
	mov	r0, r9
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	beq	.L244	@cond_branch
	ldr	r0, .L272+0x10
	strb	r4, [r0]
	ldr	r1, .L272+0x14
	mov	r0, #0x3
	strb	r0, [r1, #0x6]
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, #0x19
	bl	RecordAbilityBattle
.L244:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L273:
	.align	2, 0
.L272:
	.word	gMoveResultFlags
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gLastUsedAbility
	.word	gBattleCommunication
.Lfe14:
	.size	 CheckWonderGuardAndLevitate,.Lfe14-CheckWonderGuardAndLevitate
	.align	2, 0
	.type	 ModulateDmgByType2,function
	.thumb_func
ModulateDmgByType2:
	push	{r4, r5, r6, r7, lr}
	add	r6, r2, #0
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	ldr	r7, .L291
	ldr	r0, [r7]
	mul	r0, r0, r4
	mov	r1, #0xa
	bl	__divsi3
	str	r0, [r7]
	cmp	r0, #0
	bne	.L275	@cond_branch
	cmp	r4, #0
	beq	.L275	@cond_branch
	mov	r0, #0x1
	str	r0, [r7]
.L275:
	cmp	r4, #0x5
	beq	.L278	@cond_branch
	cmp	r4, #0x5
	bgt	.L288	@cond_branch
	cmp	r4, #0
	beq	.L277	@cond_branch
	b	.L276
.L292:
	.align	2, 0
.L291:
	.word	gBattleMoveDamage
.L288:
	cmp	r4, #0x14
	beq	.L282	@cond_branch
	b	.L276
.L277:
	ldrb	r0, [r6]
	mov	r1, #0x8
	orr	r0, r0, r1
	mov	r1, #0xfb
	and	r0, r0, r1
	mov	r1, #0xfd
	and	r0, r0, r1
	b	.L289
.L278:
	ldr	r0, .L293
	lsl	r1, r5, #0x1
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	beq	.L276	@cond_branch
	ldrb	r1, [r6]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L276	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L280	@cond_branch
	mov	r0, #0xfd
	and	r0, r0, r1
	b	.L289
.L294:
	.align	2, 0
.L293:
	.word	gBattleMoves
.L280:
	mov	r0, #0x4
	b	.L290
.L282:
	ldr	r0, .L295
	lsl	r1, r5, #0x1
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	beq	.L276	@cond_branch
	ldrb	r1, [r6]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L276	@cond_branch
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L284	@cond_branch
	mov	r0, #0xfb
	and	r0, r0, r1
	b	.L289
.L296:
	.align	2, 0
.L295:
	.word	gBattleMoves
.L284:
	mov	r0, #0x2
.L290:
	orr	r0, r0, r1
.L289:
	strb	r0, [r6]
.L276:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 ModulateDmgByType2,.Lfe15-ModulateDmgByType2
	.align	2, 0
	.globl	TypeCalc
	.type	 TypeCalc,function
	.thumb_func
TypeCalc:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x4]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	mov	r0, #0x0
	mov	r8, r0
	mov	r0, sp
	mov	r1, r8
	strb	r1, [r0]
	mov	r2, sl
	cmp	r2, #0xa5
	bne	.L298	@cond_branch
	mov	r0, #0x0
	b	.L315
.L298:
	ldr	r1, .L317
	mov	r3, sl
	lsl	r2, r3, #0x1
	add	r0, r2, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	str	r0, [sp, #0x8]
	ldr	r1, .L317+0x4
	mov	r0, #0x58
	ldr	r3, [sp, #0x4]
	mul	r0, r0, r3
	add	r3, r0, r1
	add	r0, r3, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	str	r2, [sp, #0xc]
	add	r5, r1, #0
	ldr	r1, [sp, #0x8]
	cmp	r0, r1
	beq	.L300	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, r1
	bne	.L299	@cond_branch
.L300:
	ldr	r4, .L317+0x8
	ldr	r1, [r4]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	str	r0, [r4]
	mov	r1, #0xa
	bl	__divsi3
	str	r0, [r4]
.L299:
	mov	r0, #0x58
	mov	r2, r9
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r5
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x1a
	bne	.L301	@cond_branch
	ldr	r3, [sp, #0x8]
	cmp	r3, #0x4
	bne	.L301	@cond_branch
	mov	r1, #0x9
	mov	r0, sp
	ldrb	r0, [r0]
	orr	r0, r0, r1
	mov	r1, sp
	strb	r0, [r1]
	b	.L302
.L318:
	.align	2, 0
.L317:
	.word	gBattleMoves
	.word	gBattleMons
	.word	gBattleMoveDamage
.L301:
	ldr	r1, .L319
	mov	r2, r8
	add	r0, r2, r1
	ldrb	r0, [r0]
	add	r2, r1, #0
	cmp	r0, #0xff
	beq	.L302	@cond_branch
	cmp	r0, #0xfe
	bne	.L306	@cond_branch
	mov	r0, #0x58
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	b	.L316
.L320:
	.align	2, 0
.L319:
	.word	gTypeEffectiveness
.L307:
	mov	r0, #0x3
	add	r8, r8, r0
	b	.L303
.L306:
	ldr	r7, .L321
	mov	r1, r8
	add	r0, r1, r7
	ldrb	r0, [r0]
	ldr	r2, [sp, #0x8]
	cmp	r0, r2
	bne	.L308	@cond_branch
	add	r1, r1, #0x1
	add	r1, r1, r7
	ldr	r2, .L321+0x4
	mov	r0, #0x58
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r5, r0, r2
	add	r6, r5, #0
	add	r6, r6, #0x21
	ldrb	r4, [r1]
	ldrb	r0, [r6]
	cmp	r4, r0
	bne	.L310	@cond_branch
	mov	r0, r8
	add	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r0, [r0]
	mov	r1, sl
	mov	r2, sp
	bl	ModulateDmgByType2
.L310:
	add	r0, r5, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r4, r0
	bne	.L308	@cond_branch
	ldrb	r0, [r6]
	cmp	r0, r4
	beq	.L308	@cond_branch
	mov	r0, r8
	add	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r0, [r0]
	mov	r1, sl
	mov	r2, sp
	bl	ModulateDmgByType2
.L308:
	mov	r1, #0x3
	add	r8, r8, r1
	ldr	r5, .L321+0x4
	ldr	r2, .L321
.L303:
	mov	r3, r8
	add	r0, r3, r2
	ldrb	r0, [r0]
	cmp	r0, #0xff
	beq	.L302	@cond_branch
	cmp	r0, #0xfe
	bne	.L306	@cond_branch
	mov	r0, #0x58
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
.L316:
	add	r1, r5, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x16
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L307	@cond_branch
.L302:
	mov	r0, #0x58
	mov	r2, r9
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r5
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x19
	bne	.L313	@cond_branch
	mov	r0, sp
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L313	@cond_branch
	ldr	r0, [sp, #0x4]
	mov	r1, sl
	bl	AttacksThisTurn
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x2
	bne	.L313	@cond_branch
	mov	r0, sp
	ldrb	r3, [r0]
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L314	@cond_branch
	mov	r0, #0x6
	and	r0, r0, r3
	cmp	r0, #0x6
	bne	.L313	@cond_branch
.L314:
	ldr	r0, .L321+0x8
	ldr	r1, [sp, #0xc]
	add	r1, r1, sl
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	beq	.L313	@cond_branch
	mov	r0, sp
	mov	r1, #0x1
	orr	r1, r1, r3
	strb	r1, [r0]
.L313:
	mov	r0, sp
	ldrb	r0, [r0]
.L315:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L322:
	.align	2, 0
.L321:
	.word	gTypeEffectiveness
	.word	gBattleMons
	.word	gBattleMoves
.Lfe16:
	.size	 TypeCalc,.Lfe16-TypeCalc
	.align	2, 0
	.globl	AI_TypeCalc
	.type	 AI_TypeCalc,function
	.thumb_func
AI_TypeCalc:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x4]
	mov	r7, #0x0
	mov	r0, sp
	strb	r7, [r0]
	ldr	r2, .L338
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x6]
	mov	r9, r1
	ldrb	r0, [r0, #0x7]
	mov	r8, r0
	cmp	r6, #0xa5
	bne	.L324	@cond_branch
	mov	r0, #0x0
	b	.L337
.L339:
	.align	2, 0
.L338:
	.word	gBaseStats
.L324:
	ldr	r2, .L340
	lsl	r1, r6, #0x1
	add	r0, r1, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	mov	sl, r0
	str	r1, [sp, #0x8]
	ldr	r3, [sp, #0x4]
	cmp	r3, #0x1a
	bne	.L325	@cond_branch
	cmp	r0, #0x4
	bne	.L325	@cond_branch
	mov	r1, #0x9
	mov	r0, sp
	strb	r1, [r0]
	b	.L326
.L341:
	.align	2, 0
.L340:
	.word	gBattleMoves
.L325:
	ldr	r0, .L342
	add	r1, r7, r0
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L326	@cond_branch
	add	r4, r1, #0
.L329:
	ldrb	r0, [r4]
	cmp	r0, #0xfe
	beq	.L331	@cond_branch
	cmp	r0, sl
	bne	.L331	@cond_branch
	ldrb	r5, [r4, #0x1]
	cmp	r5, r9
	bne	.L332	@cond_branch
	ldrb	r0, [r4, #0x2]
	add	r1, r6, #0
	mov	r2, sp
	bl	ModulateDmgByType2
.L332:
	cmp	r5, r8
	bne	.L331	@cond_branch
	cmp	r9, r8
	beq	.L331	@cond_branch
	ldrb	r0, [r4, #0x2]
	add	r1, r6, #0
	mov	r2, sp
	bl	ModulateDmgByType2
.L331:
	add	r4, r4, #0x3
	add	r7, r7, #0x3
	ldr	r1, .L342
	add	r0, r7, r1
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L329	@cond_branch
.L326:
	ldr	r3, [sp, #0x4]
	cmp	r3, #0x19
	bne	.L335	@cond_branch
	mov	r0, sp
	ldrb	r2, [r0]
	mov	r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L336	@cond_branch
	mov	r0, #0x6
	and	r0, r0, r2
	cmp	r0, #0x6
	bne	.L335	@cond_branch
.L336:
	ldr	r0, .L342+0x4
	ldr	r3, [sp, #0x8]
	add	r1, r3, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	beq	.L335	@cond_branch
	mov	r0, sp
	mov	r1, #0x8
	orr	r1, r1, r2
	strb	r1, [r0]
.L335:
	mov	r0, sp
	ldrb	r0, [r0]
.L337:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L343:
	.align	2, 0
.L342:
	.word	gTypeEffectiveness
	.word	gBattleMoves
.Lfe17:
	.size	 AI_TypeCalc,.Lfe17-AI_TypeCalc
	.align	2, 0
	.type	 Unused_ApplyRandomDmgMultiplier,function
	.thumb_func
Unused_ApplyRandomDmgMultiplier:
	push	{r4, lr}
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xf
	and	r0, r0, r1
	mov	r1, #0x64
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r4, .L351
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L350	@cond_branch
	mul	r0, r0, r1
	str	r0, [r4]
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
	cmp	r0, #0
	bne	.L350	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
.L350:
	pop	{r4}
	pop	{r0}
	bx	r0
.L352:
	.align	2, 0
.L351:
	.word	gBattleMoveDamage
.Lfe18:
	.size	 Unused_ApplyRandomDmgMultiplier,.Lfe18-Unused_ApplyRandomDmgMultiplier
	.align	2, 0
	.type	 atk07_adjustnormaldamage,function
	.thumb_func
atk07_adjustnormaldamage:
	push	{r4, r5, r6, r7, lr}
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xf
	and	r0, r0, r1
	mov	r1, #0x64
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r4, .L367
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L356	@cond_branch
	mul	r0, r0, r1
	str	r0, [r4]
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
	cmp	r0, #0
	bne	.L356	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
.L356:
	ldr	r7, .L367+0x4
	ldr	r6, .L367+0x8
	ldrb	r2, [r6]
	mov	r5, #0x58
	mov	r0, r2
	mul	r0, r0, r5
	add	r1, r0, r7
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0xaf
	bne	.L357	@cond_branch
	ldr	r1, .L367+0xc
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r4, [r0, #0x7]
	ldrb	r6, [r0, #0x1a]
	b	.L358
.L368:
	.align	2, 0
.L367:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gEnigmaBerries
.L357:
	ldrh	r0, [r1, #0x2e]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r7
	ldrh	r0, [r0, #0x2e]
	bl	ItemId_GetHoldEffectParam
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L358:
	ldr	r1, .L369
	ldr	r5, .L369+0x4
	ldrb	r0, [r5]
	strb	r0, [r1]
	cmp	r4, #0x27
	bne	.L359	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r6
	bcs	.L359	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x27
	bl	RecordItemEffectBattle
	ldr	r2, .L369+0x8
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
.L359:
	ldr	r2, .L369+0xc
	ldr	r3, .L369+0x4
	ldrb	r4, [r3]
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r2, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	and	r1, r1, r0
	add	r5, r2, #0
	cmp	r1, #0
	bne	.L361	@cond_branch
	ldr	r2, .L369+0x10
	ldr	r0, .L369+0x14
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0x65
	beq	.L362	@cond_branch
	ldr	r0, .L369+0x18
	lsl	r1, r4, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	blt	.L362	@cond_branch
	ldr	r0, .L369+0x8
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	beq	.L361	@cond_branch
.L362:
	ldrb	r0, [r3]
	mov	r4, #0x58
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r1, [r0, #0x28]
	ldr	r2, .L369+0x1c
	ldr	r0, [r2]
	cmp	r1, r0
	bgt	.L361	@cond_branch
	sub	r0, r1, #0x1
	str	r0, [r2]
	ldr	r1, .L369+0x18
	ldrb	r3, [r3]
	lsl	r0, r3, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bge	.L364	@cond_branch
	ldr	r0, .L369+0x20
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L361
.L370:
	.align	2, 0
.L369:
	.word	gPotentialItemEffectBattler
	.word	gBattlerTarget
	.word	gSpecialStatuses
	.word	gBattleMons
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattleMoveDamage
	.word	gMoveResultFlags
.L364:
	ldr	r0, .L371
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	beq	.L361	@cond_branch
	ldr	r2, .L371+0x4
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L371+0x8
	mov	r0, r3
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r1]
.L361:
	ldr	r1, .L371+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L372:
	.align	2, 0
.L371:
	.word	gSpecialStatuses
	.word	gMoveResultFlags
	.word	gLastUsedItem
	.word	gBattlescriptCurrInstr
.Lfe19:
	.size	 atk07_adjustnormaldamage,.Lfe19-atk07_adjustnormaldamage
	.align	2, 0
	.type	 atk08_adjustnormaldamage2,function
	.thumb_func
atk08_adjustnormaldamage2:
	push	{r4, r5, r6, r7, lr}
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xf
	and	r0, r0, r1
	mov	r1, #0x64
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r4, .L387
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L376	@cond_branch
	mul	r0, r0, r1
	str	r0, [r4]
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
	cmp	r0, #0
	bne	.L376	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
.L376:
	ldr	r7, .L387+0x4
	ldr	r6, .L387+0x8
	ldrb	r2, [r6]
	mov	r5, #0x58
	mov	r0, r2
	mul	r0, r0, r5
	add	r1, r0, r7
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0xaf
	bne	.L377	@cond_branch
	ldr	r1, .L387+0xc
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r4, [r0, #0x7]
	ldrb	r6, [r0, #0x1a]
	b	.L378
.L388:
	.align	2, 0
.L387:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gEnigmaBerries
.L377:
	ldrh	r0, [r1, #0x2e]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r7
	ldrh	r0, [r0, #0x2e]
	bl	ItemId_GetHoldEffectParam
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L378:
	ldr	r1, .L389
	ldr	r5, .L389+0x4
	ldrb	r0, [r5]
	strb	r0, [r1]
	cmp	r4, #0x27
	bne	.L379	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r6
	bcs	.L379	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x27
	bl	RecordItemEffectBattle
	ldr	r2, .L389+0x8
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
.L379:
	ldr	r4, .L389+0xc
	ldr	r6, .L389+0x4
	ldrb	r2, [r6]
	mov	r7, #0x58
	mov	r3, r2
	mul	r3, r3, r7
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r0, r3, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L381	@cond_branch
	ldr	r5, .L389+0x10
	lsl	r0, r2, #0x4
	add	r0, r0, r5
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	blt	.L382	@cond_branch
	ldr	r0, .L389+0x8
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	beq	.L381	@cond_branch
.L382:
	add	r0, r3, r4
	ldrh	r1, [r0, #0x28]
	ldr	r2, .L389+0x14
	ldr	r0, [r2]
	cmp	r1, r0
	bgt	.L381	@cond_branch
	sub	r0, r1, #0x1
	str	r0, [r2]
	ldrb	r3, [r6]
	lsl	r0, r3, #0x4
	add	r0, r0, r5
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bge	.L384	@cond_branch
	ldr	r0, .L389+0x18
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L381
.L390:
	.align	2, 0
.L389:
	.word	gPotentialItemEffectBattler
	.word	gBattlerTarget
	.word	gSpecialStatuses
	.word	gBattleMons
	.word	gProtectStructs
	.word	gBattleMoveDamage
	.word	gMoveResultFlags
.L384:
	ldr	r0, .L391
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	beq	.L381	@cond_branch
	ldr	r2, .L391+0x4
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L391+0x8
	mov	r0, r3
	mul	r0, r0, r7
	add	r0, r0, r4
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r1]
.L381:
	ldr	r1, .L391+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L392:
	.align	2, 0
.L391:
	.word	gSpecialStatuses
	.word	gMoveResultFlags
	.word	gLastUsedItem
	.word	gBattlescriptCurrInstr
.Lfe20:
	.size	 atk08_adjustnormaldamage2,.Lfe20-atk08_adjustnormaldamage2
	.align	2, 0
	.type	 atk09_attackanimation,function
	.thumb_func
atk09_attackanimation:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x10
	ldr	r0, .L409
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB4549
	b	.L393	@long jump
.LCB4549:
	ldr	r0, .L409+0x4
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	ldr	r5, .L409+0x8
	cmp	r0, #0
	beq	.L395	@cond_branch
	ldrh	r0, [r5]
	cmp	r0, #0x90
	beq	.L395	@cond_branch
	cmp	r0, #0xa4
	beq	.L395	@cond_branch
	ldr	r4, .L409+0xc
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L409+0x10
	str	r0, [r4]
	ldr	r1, .L409+0x14
	ldrb	r0, [r1, #0x18]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x18]
	ldrb	r0, [r1, #0x19]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x19]
	b	.L393
.L410:
	.align	2, 0
.L409:
	.word	gBattleControllerExecFlags
	.word	gHitMarker
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	BattleScript_Pausex20
	.word	gBattleScripting
.L395:
	ldr	r2, .L411
	ldrh	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L398	@cond_branch
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L398	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L397	@cond_branch
.L398:
	ldr	r0, .L411+0x4
	ldrb	r0, [r0, #0x19]
	cmp	r0, #0
	bne	.L407	@cond_branch
.L397:
	ldr	r0, .L411+0x8
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L399	@cond_branch
	ldr	r1, .L411+0xc
	ldr	r3, .L411+0x10
	ldrb	r0, [r3]
	strb	r0, [r1]
	ldr	r2, .L411+0x14
	ldr	r0, .L411+0x18
	ldrb	r1, [r0]
	mov	r0, #0x58
	mov	r4, r1
	mul	r4, r4, r0
	add	r0, r2, #0
	add	r0, r0, #0x50
	add	r0, r4, r0
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	and	r1, r1, r0
	add	r7, r3, #0
	mov	ip, r2
	cmp	r1, #0
	beq	.L400	@cond_branch
	ldr	r0, .L411+0x1c
	ldrb	r6, [r0]
	b	.L408
.L412:
	.align	2, 0
.L411:
	.word	gBattleMoves
	.word	gBattleScripting
	.word	gMoveResultFlags
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gMultiHitCounter
.L400:
	ldr	r3, .L413
	ldrb	r0, [r3]
	cmp	r0, #0x1
	bls	.L402	@cond_branch
	mov	r1, ip
	add	r0, r4, r1
	ldrh	r2, [r0, #0x28]
	ldr	r0, .L413+0x4
	ldr	r1, [r0]
	mov	r6, #0x1
	add	r4, r0, #0
	cmp	r2, r1
	ble	.L401	@cond_branch
	ldrb	r6, [r3]
	b	.L401
.L414:
	.align	2, 0
.L413:
	.word	gMultiHitCounter
	.word	gBattleMoveDamage
.L402:
	ldrb	r6, [r3]
.L408:
	ldr	r4, .L415
.L401:
	ldrh	r1, [r5]
	ldr	r5, .L415+0x4
	ldrb	r2, [r5, #0x18]
	ldr	r0, .L415+0x8
	ldrh	r3, [r0]
	ldr	r0, [r4]
	str	r0, [sp]
	ldrb	r4, [r7]
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, ip
	add	r0, r0, #0x2b
	ldrb	r0, [r0]
	str	r0, [sp, #0x4]
	ldrb	r4, [r7]
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r4, .L415+0xc
	add	r0, r0, r4
	str	r0, [sp, #0x8]
	str	r6, [sp, #0xc]
	mov	r0, #0x0
	bl	BtlController_EmitMoveAnimation
	ldrb	r0, [r5, #0x18]
	add	r0, r0, #0x1
	strb	r0, [r5, #0x18]
	ldrb	r0, [r5, #0x19]
	add	r0, r0, #0x1
	strb	r0, [r5, #0x19]
	ldrb	r0, [r7]
	bl	MarkBattlerForControllerExec
.L407:
	ldr	r1, .L415+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	b	.L393
.L416:
	.align	2, 0
.L415:
	.word	gBattleMoveDamage
	.word	gBattleScripting
	.word	gBattleMovePower
	.word	gDisableStructs
	.word	gBattlescriptCurrInstr
.L399:
	ldr	r4, .L417
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L417+0x4
	str	r0, [r4]
.L393:
	add	sp, sp, #0x10
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L418:
	.align	2, 0
.L417:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_Pausex20
.Lfe21:
	.size	 atk09_attackanimation,.Lfe21-atk09_attackanimation
	.align	2, 0
	.type	 atk0A_waitanimation,function
	.thumb_func
atk0A_waitanimation:
	push	{lr}
	ldr	r0, .L421
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L420	@cond_branch
	ldr	r1, .L421+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L420:
	pop	{r0}
	bx	r0
.L422:
	.align	2, 0
.L421:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
.Lfe22:
	.size	 atk0A_waitanimation,.Lfe22-atk0A_waitanimation
	.align	2, 0
	.type	 atk0B_healthbarupdate,function
	.thumb_func
atk0B_healthbarupdate:
	push	{r4, lr}
	ldr	r0, .L431
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L423	@cond_branch
	ldr	r0, .L431+0x4
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L425	@cond_branch
	ldr	r0, .L431+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r2, .L431+0xc
	strb	r0, [r2]
	ldr	r1, .L431+0x10
	ldrb	r2, [r2]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L426	@cond_branch
	ldr	r0, .L431+0x14
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0xa]
	cmp	r0, #0
	beq	.L426	@cond_branch
	ldr	r0, .L431+0x18
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L426	@cond_branch
	mov	r0, #0x80
	add	r1, r2, #0
	bl	PrepareStringBattle
	b	.L425
.L432:
	.align	2, 0
.L431:
	.word	gBattleControllerExecFlags
	.word	gMoveResultFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleMons
	.word	gDisableStructs
	.word	gHitMarker
.L426:
	ldr	r0, .L433
	ldr	r0, [r0]
	ldr	r1, .L433+0x4
	cmp	r0, r1
	bgt	.L429	@cond_branch
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
.L429:
	mov	r0, #0x0
	bl	BtlController_EmitHealthBarUpdate
	ldr	r4, .L433+0x8
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L425	@cond_branch
	ldr	r0, .L433
	ldr	r0, [r0]
	cmp	r0, #0
	ble	.L425	@cond_branch
	ldr	r0, .L433+0xc
	ldrb	r1, [r0, #0x5]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
.L425:
	ldr	r1, .L433+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L423:
	pop	{r4}
	pop	{r0}
	bx	r0
.L434:
	.align	2, 0
.L433:
	.word	gBattleMoveDamage
	.word	0x2710
	.word	gActiveBattler
	.word	gBattleResults
	.word	gBattlescriptCurrInstr
.Lfe23:
	.size	 atk0B_healthbarupdate,.Lfe23-atk0B_healthbarupdate
	.align	2, 0
	.type	 atk0C_datahpupdate,function
	.thumb_func
atk0C_datahpupdate:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L472
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB4957
	b	.L435	@long jump
.LCB4957:
	ldr	r0, .L472+0x4
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x13]
	cmp	r1, #0
	beq	.L439	@cond_branch
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L439	@cond_branch
	mov	r6, #0x3f
	and	r6, r6, r1
	b	.L438
.L473:
	.align	2, 0
.L472:
	.word	gBattleControllerExecFlags
	.word	gBattleStruct
.L439:
	ldr	r2, .L474
	ldr	r0, .L474+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r6, [r0, #0x2]
.L438:
	ldr	r0, .L474+0x8
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB5001
	b	.L441	@long jump
.LCB5001:
	ldr	r0, .L474+0xc
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r7, .L474+0x10
	strb	r0, [r7]
	ldr	r1, .L474+0x14
	ldrb	r2, [r7]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L442	@cond_branch
	ldr	r0, .L474+0x18
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r4, r1, r0
	ldrb	r1, [r4, #0xa]
	mov	ip, r0
	cmp	r1, #0
	beq	.L442	@cond_branch
	ldr	r0, .L474+0x1c
	ldr	r3, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r3, r3, r0
	cmp	r3, #0
	bne	.L442	@cond_branch
	add	r5, r1, #0
	ldr	r6, .L474+0x20
	ldr	r4, [r6]
	cmp	r5, r4
	blt	.L443	@cond_branch
	ldr	r0, .L474+0x24
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r0, r0, #0x4
	add	r1, r1, r0
	ldr	r0, [r1]
	cmp	r0, #0
	bne	.L444	@cond_branch
	str	r4, [r1]
.L444:
	ldrb	r0, [r7]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	ldr	r2, [r6]
	ldrb	r0, [r1, #0xa]
	sub	r0, r0, r2
	strb	r0, [r1, #0xa]
	ldr	r1, .L474+0x28
	ldr	r0, [r6]
	str	r0, [r1]
	b	.L445
.L475:
	.align	2, 0
.L474:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gMoveResultFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleMons
	.word	gDisableStructs
	.word	gHitMarker
	.word	gBattleMoveDamage
	.word	gSpecialStatuses
	.word	gHpDealt
.L443:
	ldr	r0, .L476
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r0, r0, #0x4
	add	r1, r1, r0
	ldr	r0, [r1]
	cmp	r0, #0
	bne	.L446	@cond_branch
	str	r5, [r1]
.L446:
	ldr	r2, .L476+0x4
	ldrb	r1, [r7]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrb	r0, [r0, #0xa]
	str	r0, [r2]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	strb	r3, [r0, #0xa]
.L445:
	ldr	r0, .L476+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrb	r0, [r0, #0xa]
	cmp	r0, #0
	beq	.LCB5128
	b	.L466	@long jump
.LCB5128:
	ldr	r4, .L476+0xc
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	bl	BattleScriptPushCursor
	ldr	r0, .L476+0x10
	str	r0, [r4]
	b	.L435
.L477:
	.align	2, 0
.L476:
	.word	gSpecialStatuses
	.word	gHpDealt
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SubstituteFade
.L442:
	ldr	r0, .L478
	ldr	r2, [r0]
	ldr	r1, .L478+0x4
	and	r2, r2, r1
	str	r2, [r0]
	ldr	r1, .L478+0x8
	ldr	r5, [r1]
	mov	ip, r0
	add	r7, r1, #0
	cmp	r5, #0
	bge	.L449	@cond_branch
	ldr	r4, .L478+0xc
	ldr	r2, .L478+0x10
	ldrb	r0, [r2]
	mov	r3, #0x58
	mov	r1, r0
	mul	r1, r1, r3
	add	r1, r1, r4
	ldrh	r0, [r1, #0x28]
	sub	r0, r0, r5
	strh	r0, [r1, #0x28]
	ldrb	r0, [r2]
	mul	r0, r0, r3
	add	r1, r0, r4
	ldrh	r3, [r1, #0x2c]
	ldrh	r0, [r1, #0x28]
	add	r5, r2, #0
	cmp	r0, r3
	bhi	.LCB5183
	b	.L451	@long jump
.LCB5183:
	strh	r3, [r1, #0x28]
	b	.L451
.L479:
	.align	2, 0
.L478:
	.word	gHitMarker
	.word	-0x101
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gActiveBattler
.L449:
	mov	r0, #0x20
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L452	@cond_branch
	mov	r0, #0x21
	neg	r0, r0
	and	r2, r2, r0
	mov	r0, ip
	str	r2, [r0]
	ldr	r5, .L480
	b	.L453
.L481:
	.align	2, 0
.L480:
	.word	gActiveBattler
.L452:
	ldr	r0, .L482
	ldr	r2, .L482+0x4
	ldrb	r1, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	add	r0, r0, r5
	str	r0, [r1]
	ldr	r0, .L482+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	add	r5, r2, #0
	cmp	r0, #0
	bne	.L454	@cond_branch
	ldr	r1, .L482+0xc
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldr	r1, .L482+0x10
	b	.L469
.L483:
	.align	2, 0
.L482:
	.word	gTakenDmg
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	gTakenDmgByBattler
	.word	gBattlerAttacker
.L454:
	ldr	r1, .L484
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldr	r1, .L484+0x4
.L469:
	ldrb	r1, [r1]
	strb	r1, [r0]
.L453:
	ldr	r4, .L484+0x8
	ldrb	r0, [r5]
	mov	r3, #0x58
	mul	r0, r0, r3
	add	r2, r0, r4
	ldrh	r0, [r2, #0x28]
	ldr	r1, [r7]
	cmp	r0, r1
	ble	.L456	@cond_branch
	sub	r0, r0, r1
	strh	r0, [r2, #0x28]
	ldr	r0, .L484+0xc
	str	r1, [r0]
	add	r7, r0, #0
	b	.L457
.L485:
	.align	2, 0
.L484:
	.word	gTakenDmgByBattler
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gHpDealt
.L456:
	ldr	r2, .L486
	str	r0, [r2]
	ldrb	r0, [r5]
	mul	r0, r0, r3
	add	r0, r0, r4
	mov	r1, #0x0
	strh	r1, [r0, #0x28]
	add	r7, r2, #0
.L457:
	ldr	r2, .L486+0x4
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r2, #0x4
	add	r3, r0, r1
	ldr	r0, [r3]
	add	r4, r2, #0
	cmp	r0, #0
	bne	.L458	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	mov	r1, #0x80
	lsl	r1, r1, #0xd
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L458	@cond_branch
	ldr	r0, [r7]
	str	r0, [r3]
.L458:
	cmp	r6, #0x8
	bhi	.L468	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	mov	r1, #0x80
	lsl	r1, r1, #0xd
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L459	@cond_branch
	ldr	r0, .L486+0x8
	ldrh	r0, [r0]
	cmp	r0, #0xdc
	beq	.L459	@cond_branch
	ldr	r3, .L486+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r1, r3, #0x4
	add	r0, r0, r1
	ldr	r2, [r7]
	str	r2, [r0]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r4, #0
	add	r1, r1, #0x8
	add	r0, r0, r1
	str	r2, [r0]
	ldr	r0, .L486+0x10
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.L460	@cond_branch
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r0, r0, r3
	ldr	r2, .L486+0x14
	b	.L470
.L487:
	.align	2, 0
.L486:
	.word	gHpDealt
	.word	gSpecialStatuses
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
	.word	gBattlerAttacker
.L460:
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r0, r0, r3
	ldr	r2, .L488
.L470:
	ldrb	r1, [r2]
	strb	r1, [r0, #0xc]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r2]
	strb	r1, [r0, #0x10]
	b	.L451
.L489:
	.align	2, 0
.L488:
	.word	gBattlerTarget
.L459:
	cmp	r6, #0x8
	bls	.L451	@cond_branch
.L468:
	mov	r1, ip
	ldr	r0, [r1]
	mov	r1, #0x80
	lsl	r1, r1, #0xd
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L451	@cond_branch
	ldr	r3, .L490
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r1, r3, #0
	add	r1, r1, #0x8
	add	r0, r0, r1
	ldr	r2, [r7]
	str	r2, [r0]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r4, #0
	add	r1, r1, #0xc
	add	r0, r0, r1
	str	r2, [r0]
	ldr	r0, .L490+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.L464	@cond_branch
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r0, r0, r3
	ldr	r2, .L490+0x8
	b	.L471
.L491:
	.align	2, 0
.L490:
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
	.word	gBattlerAttacker
.L464:
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r0, r0, r3
	ldr	r2, .L492
.L471:
	ldrb	r1, [r2]
	strb	r1, [r0, #0xd]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r2]
	strb	r1, [r0, #0x11]
.L451:
	mov	r1, ip
	ldr	r0, [r1]
	ldr	r1, .L492+0x4
	and	r0, r0, r1
	mov	r1, ip
	str	r0, [r1]
	ldrb	r1, [r5]
	mov	r0, #0x58
	mul	r0, r0, r1
	ldr	r1, .L492+0x8
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2a
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	b	.L466
.L493:
	.align	2, 0
.L492:
	.word	gBattlerTarget
	.word	-0x100001
	.word	gBattleMons+0x28
.L441:
	ldr	r0, .L494
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r1, .L494+0x4
	strb	r0, [r1]
	ldr	r2, .L494+0x8
	ldrb	r1, [r1]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x4
	add	r1, r0, r2
	ldr	r0, [r1]
	cmp	r0, #0
	bne	.L466	@cond_branch
	ldr	r0, .L494+0xc
	str	r0, [r1]
.L466:
	ldr	r1, .L494
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L435:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L495:
	.align	2, 0
.L494:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gSpecialStatuses
	.word	0xffff
.Lfe24:
	.size	 atk0C_datahpupdate,.Lfe24-atk0C_datahpupdate
	.align	2, 0
	.type	 atk0D_critmessage,function
	.thumb_func
atk0D_critmessage:
	push	{lr}
	ldr	r0, .L499
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L497	@cond_branch
	ldr	r0, .L499+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L498	@cond_branch
	ldr	r0, .L499+0x8
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L498	@cond_branch
	ldr	r0, .L499+0xc
	ldrb	r1, [r0]
	mov	r0, #0xd9
	bl	PrepareStringBattle
	ldr	r1, .L499+0x10
	mov	r0, #0x1
	strb	r0, [r1, #0x7]
.L498:
	ldr	r1, .L499+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L497:
	pop	{r0}
	bx	r0
.L500:
	.align	2, 0
.L499:
	.word	gBattleControllerExecFlags
	.word	gCritMultiplier
	.word	gMoveResultFlags
	.word	gBattlerAttacker
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe25:
	.size	 atk0D_critmessage,.Lfe25-atk0D_critmessage
	.align	2, 0
	.type	 atk0E_effectivenesssound,function
	.thumb_func
atk0E_effectivenesssound:
	push	{r4, lr}
	ldr	r0, .L524
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L501	@cond_branch
	ldr	r4, .L524+0x4
	ldr	r0, .L524+0x8
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r1, .L524+0xc
	ldrb	r2, [r1]
	mov	r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L503	@cond_branch
	mov	r0, #0xfe
	and	r0, r0, r2
	cmp	r0, #0x10
	beq	.L512	@cond_branch
	cmp	r0, #0x10
	bgt	.L519	@cond_branch
	cmp	r0, #0x4
	beq	.L506	@cond_branch
	cmp	r0, #0x4
	bgt	.L520	@cond_branch
	cmp	r0, #0x2
	beq	.L505	@cond_branch
	b	.L512
.L525:
	.align	2, 0
.L524:
	.word	gBattleControllerExecFlags
	.word	gActiveBattler
	.word	gBattlerTarget
	.word	gMoveResultFlags
.L520:
	cmp	r0, #0x8
	beq	.L503	@cond_branch
	b	.L512
.L519:
	cmp	r0, #0x40
	beq	.L512	@cond_branch
	cmp	r0, #0x40
	bgt	.L512	@cond_branch
	cmp	r0, #0x20
	beq	.L503	@cond_branch
	b	.L512
.L505:
	mov	r0, #0x0
	mov	r1, #0xe
	b	.L522
.L506:
	mov	r0, #0x0
	mov	r1, #0xc
.L522:
	bl	BtlController_EmitPlaySE
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L503
.L512:
	ldrb	r1, [r1]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L513	@cond_branch
	mov	r0, #0x0
	mov	r1, #0xe
	b	.L523
.L513:
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L515	@cond_branch
	mov	r0, #0x0
	mov	r1, #0xc
.L523:
	bl	BtlController_EmitPlaySE
	ldr	r0, .L526
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	b	.L503
.L527:
	.align	2, 0
.L526:
	.word	gActiveBattler
.L515:
	mov	r0, #0x28
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L503	@cond_branch
	mov	r0, #0x0
	mov	r1, #0xd
	bl	BtlController_EmitPlaySE
	ldr	r0, .L528
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
.L503:
	ldr	r1, .L528+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L501:
	pop	{r4}
	pop	{r0}
	bx	r0
.L529:
	.align	2, 0
.L528:
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.Lfe26:
	.size	 atk0E_effectivenesssound,.Lfe26-atk0E_effectivenesssound
	.align	2, 0
	.type	 atk0F_resultmessage,function
	.thumb_func
atk0F_resultmessage:
	push	{r4, r5, r6, r7, lr}
	mov	r3, #0x0
	ldr	r0, .L563
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB5770
	b	.L530	@long jump
.LCB5770:
	ldr	r1, .L563+0x4
	ldrb	r2, [r1]
	mov	r4, #0x1
	add	r0, r4, #0
	and	r0, r0, r2
	add	r6, r1, #0
	ldr	r7, .L563+0x8
	cmp	r0, #0
	beq	.L532	@cond_branch
	mov	r0, #0x8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L533	@cond_branch
	ldrb	r0, [r7, #0x6]
	cmp	r0, #0x2
	bls	.L532	@cond_branch
.L533:
	ldr	r1, .L563+0xc
	ldrb	r0, [r7, #0x6]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r3, [r0]
	strb	r4, [r7, #0x7]
	b	.L534
.L564:
	.align	2, 0
.L563:
	.word	gBattleControllerExecFlags
	.word	gMoveResultFlags
	.word	gBattleCommunication
	.word	gMissStringIds
.L532:
	mov	r0, #0x1
	strb	r0, [r7, #0x7]
	ldrb	r5, [r6]
	mov	r0, #0xfe
	and	r0, r0, r5
	cmp	r0, #0x10
	beq	.L538	@cond_branch
	cmp	r0, #0x10
	bgt	.L555	@cond_branch
	cmp	r0, #0x4
	beq	.L537	@cond_branch
	cmp	r0, #0x4
	bgt	.L556	@cond_branch
	cmp	r0, #0x2
	beq	.L536	@cond_branch
	b	.L543
.L556:
	cmp	r0, #0x8
	beq	.L561	@cond_branch
	b	.L543
.L555:
	cmp	r0, #0x40
	beq	.L539	@cond_branch
	cmp	r0, #0x40
	bgt	.L557	@cond_branch
	cmp	r0, #0x20
	bne	.LCB5851
	b	.L560	@long jump
.LCB5851:
	b	.L543
.L557:
	cmp	r0, #0x80
	beq	.L542	@cond_branch
	b	.L543
.L536:
	mov	r3, #0xde
	b	.L559
.L537:
	mov	r3, #0xdd
	b	.L559
.L538:
	mov	r3, #0xda
	b	.L559
.L539:
	mov	r3, #0x99
	b	.L559
.L542:
	ldr	r4, .L565
	ldr	r2, .L565+0x4
	ldr	r3, .L565+0x8
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r4]
	ldr	r1, .L565+0xc
	ldrb	r0, [r3]
	strb	r0, [r1]
	mov	r0, #0x3f
	and	r0, r0, r5
	strb	r0, [r6]
	bl	BattleScriptPushCursor
	ldr	r1, .L565+0x10
	ldr	r0, .L565+0x14
	b	.L562
.L566:
	.align	2, 0
.L565:
	.word	gLastUsedItem
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gPotentialItemEffectBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_HangedOnMsg
.L543:
	add	r2, r6, #0
	ldrb	r5, [r2]
	mov	r0, #0x8
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L544	@cond_branch
.L561:
	mov	r3, #0x1b
	b	.L559
.L544:
	mov	r0, #0x10
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L546	@cond_branch
	mov	r0, #0xef
	and	r0, r0, r5
	mov	r1, #0xfd
	and	r0, r0, r1
	mov	r1, #0xfb
	and	r0, r0, r1
	strb	r0, [r2]
	bl	BattleScriptPushCursor
	ldr	r1, .L567
	ldr	r0, .L567+0x4
	b	.L562
.L568:
	.align	2, 0
.L567:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_OneHitKOMsg
.L546:
	mov	r0, #0x40
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L548	@cond_branch
	mov	r0, #0x3f
	and	r0, r0, r5
	strb	r0, [r2]
	bl	BattleScriptPushCursor
	ldr	r1, .L569
	ldr	r0, .L569+0x4
	b	.L562
.L570:
	.align	2, 0
.L569:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_EnduredMsg
.L548:
	mov	r0, #0x80
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L550	@cond_branch
	ldr	r4, .L571
	ldr	r2, .L571+0x4
	ldr	r3, .L571+0x8
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r4]
	ldr	r1, .L571+0xc
	ldrb	r0, [r3]
	strb	r0, [r1]
	mov	r0, #0x3f
	and	r0, r0, r5
	strb	r0, [r6]
	bl	BattleScriptPushCursor
	ldr	r1, .L571+0x10
	ldr	r0, .L571+0x14
	b	.L562
.L572:
	.align	2, 0
.L571:
	.word	gLastUsedItem
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gPotentialItemEffectBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_HangedOnMsg
.L550:
	mov	r0, #0x20
	and	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L552	@cond_branch
.L560:
	mov	r3, #0xe5
	b	.L559
.L552:
	strb	r0, [r7, #0x7]
.L534:
	cmp	r3, #0
	beq	.L558	@cond_branch
.L559:
	add	r0, r3, #0
	ldr	r1, .L573
	ldrb	r1, [r1]
	bl	PrepareStringBattle
.L558:
	ldr	r1, .L573+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
.L562:
	str	r0, [r1]
.L530:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L574:
	.align	2, 0
.L573:
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe27:
	.size	 atk0F_resultmessage,.Lfe27-atk0F_resultmessage
	.align	2, 0
	.type	 atk10_printstring,function
	.thumb_func
atk10_printstring:
	push	{r4, lr}
	ldr	r0, .L577
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L576	@cond_branch
	ldr	r4, .L577+0x4
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x1]
	ldrb	r1, [r1, #0x2]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldr	r1, .L577+0x8
	ldrb	r1, [r1]
	bl	PrepareStringBattle
	ldr	r0, [r4]
	add	r0, r0, #0x3
	str	r0, [r4]
	ldr	r1, .L577+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x7]
.L576:
	pop	{r4}
	pop	{r0}
	bx	r0
.L578:
	.align	2, 0
.L577:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gBattlerAttacker
	.word	gBattleCommunication
.Lfe28:
	.size	 atk10_printstring,.Lfe28-atk10_printstring
	.align	2, 0
	.type	 atk11_printselectionstring,function
	.thumb_func
atk11_printselectionstring:
	push	{r4, r5, lr}
	ldr	r5, .L580
	ldr	r0, .L580+0x4
	ldrb	r0, [r0]
	strb	r0, [r5]
	ldr	r4, .L580+0x8
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x1]
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	mov	r0, #0x0
	bl	BtlController_EmitPrintSelectionString
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r4]
	add	r0, r0, #0x3
	str	r0, [r4]
	ldr	r1, .L580+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x7]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L581:
	.align	2, 0
.L580:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	gBattleCommunication
.Lfe29:
	.size	 atk11_printselectionstring,.Lfe29-atk11_printselectionstring
	.align	2, 0
	.type	 atk12_waitmessage,function
	.thumb_func
atk12_waitmessage:
	push	{r4, r5, r6, lr}
	ldr	r0, .L587
	ldr	r4, [r0]
	cmp	r4, #0
	bne	.L583	@cond_branch
	ldr	r6, .L587+0x4
	ldrb	r0, [r6, #0x7]
	cmp	r0, #0
	bne	.L584	@cond_branch
	ldr	r1, .L587+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x3
	str	r0, [r1]
	b	.L583
.L588:
	.align	2, 0
.L587:
	.word	gBattleControllerExecFlags
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.L584:
	ldr	r5, .L589
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldr	r3, .L589+0x4
	ldrh	r0, [r3]
	add	r0, r0, #0x1
	strh	r0, [r3]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r1
	bcc	.L583	@cond_branch
	mov	r1, #0x0
	strh	r4, [r3]
	add	r0, r2, #0x3
	str	r0, [r5]
	strb	r1, [r6, #0x7]
.L583:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L590:
	.align	2, 0
.L589:
	.word	gBattlescriptCurrInstr
	.word	gPauseCounterBattle
.Lfe30:
	.size	 atk12_waitmessage,.Lfe30-atk12_waitmessage
	.align	2, 0
	.type	 atk13_printfromtable,function
	.thumb_func
atk13_printfromtable:
	push	{r4, r5, lr}
	ldr	r0, .L593
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L592	@cond_branch
	ldr	r4, .L593+0x4
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r5, .L593+0x8
	ldrb	r0, [r5, #0x5]
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldr	r1, .L593+0xc
	ldrb	r1, [r1]
	bl	PrepareStringBattle
	ldr	r0, [r4]
	add	r0, r0, #0x5
	str	r0, [r4]
	mov	r0, #0x1
	strb	r0, [r5, #0x7]
.L592:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L594:
	.align	2, 0
.L593:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gBattleCommunication
	.word	gBattlerAttacker
.Lfe31:
	.size	 atk13_printfromtable,.Lfe31-atk13_printfromtable
	.align	2, 0
	.type	 atk14_printselectionstringfromtable,function
	.thumb_func
atk14_printselectionstringfromtable:
	push	{r4, r5, r6, lr}
	ldr	r0, .L597
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L596	@cond_branch
	ldr	r5, .L597+0x4
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r6, .L597+0x8
	ldrb	r0, [r6, #0x5]
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldr	r4, .L597+0xc
	ldr	r0, .L597+0x10
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldrh	r1, [r1]
	mov	r0, #0x0
	bl	BtlController_EmitPrintSelectionString
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x5
	str	r0, [r5]
	mov	r0, #0x1
	strb	r0, [r6, #0x7]
.L596:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L598:
	.align	2, 0
.L597:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gBattleCommunication
	.word	gActiveBattler
	.word	gBattlerAttacker
.Lfe32:
	.size	 atk14_printselectionstringfromtable,.Lfe32-atk14_printselectionstringfromtable
	.align	2, 0
	.globl	GetBattlerTurnOrderNum
	.type	 GetBattlerTurnOrderNum,function
	.thumb_func
GetBattlerTurnOrderNum:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r1, #0x0
	ldr	r0, .L606
	ldrb	r3, [r0]
	cmp	r1, r3
	bge	.L601	@cond_branch
	ldr	r4, .L606+0x4
	ldrb	r0, [r4]
	cmp	r0, r2
	beq	.L601	@cond_branch
.L602:
	add	r1, r1, #0x1
	cmp	r1, r3
	bge	.L601	@cond_branch
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.L602	@cond_branch
.L601:
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	pop	{r4}
	pop	{r1}
	bx	r1
.L607:
	.align	2, 0
.L606:
	.word	gBattlersCount
	.word	gBattlerByTurnOrder
.Lfe33:
	.size	 GetBattlerTurnOrderNum,.Lfe33-GetBattlerTurnOrderNum
	.align	2, 0
	.globl	SetMoveEffect
	.type	 SetMoveEffect,function
	.thumb_func
SetMoveEffect:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	mov	r0, #0x0
	mov	sl, r0
	mov	r7, #0x0
	mov	r1, #0x1
	str	r1, [sp, #0x4]
	ldr	r1, .L813
	ldrb	r3, [r1, #0x3]
	mov	r0, #0x40
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L609	@cond_branch
	ldr	r2, .L813+0x4
	ldr	r0, .L813+0x8
	ldrb	r0, [r0]
	strb	r0, [r2]
	mov	r0, #0xbf
	and	r0, r0, r3
	add	r3, r1, #0
	strb	r0, [r3, #0x3]
	mov	r7, #0x40
	ldr	r1, .L813+0xc
	ldr	r0, .L813+0x10
	b	.L806
.L814:
	.align	2, 0
.L813:
	.word	gBattleCommunication
	.word	gEffectBattler
	.word	gBattlerAttacker
	.word	gBattleScripting
	.word	gBattlerTarget
.L609:
	ldr	r2, .L815
	ldr	r0, .L815+0x4
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldr	r1, .L815+0x8
	ldr	r0, .L815+0xc
.L806:
	ldrb	r0, [r0]
	strb	r0, [r1, #0x17]
	mov	r9, r2
	ldr	r2, .L815+0x10
	mov	r4, r9
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x13
	bne	.L611	@cond_branch
	ldr	r0, .L815+0x14
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L611	@cond_branch
	cmp	r5, #0
	bne	.L611	@cond_branch
	ldr	r1, .L815+0x18
	ldrb	r0, [r1, #0x3]
	cmp	r0, #0x9
	bhi	.L611	@cond_branch
	ldr	r1, .L815+0x1c
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	ldr	r2, .L815+0x18
	strb	r5, [r2, #0x3]
	bl	.L608	@ far jump
.L816:
	.align	2, 0
.L815:
	.word	gEffectBattler
	.word	gBattlerTarget
	.word	gBattleScripting
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gHitMarker
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.L611:
	mov	r3, r9
	ldrb	r0, [r3]
	bl	GetBattlerPosition
	ldr	r2, .L817
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r1, [r1]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L612	@cond_branch
	ldr	r0, .L817+0x4
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L612	@cond_branch
	cmp	r5, #0
	bne	.L612	@cond_branch
	ldr	r0, .L817+0x8
	ldrb	r1, [r0, #0x3]
	cmp	r1, #0x7
	bhi	.L612	@cond_branch
	ldr	r1, .L817+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	ldr	r4, .L817+0x8
	strb	r5, [r4, #0x3]
	bl	.L608	@ far jump
.L818:
	.align	2, 0
.L817:
	.word	gSideStatuses
	.word	gHitMarker
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.L612:
	ldr	r3, .L819
	ldr	r2, .L819+0x4
	ldrb	r1, [r2]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r3
	ldrh	r4, [r0, #0x28]
	mov	r9, r2
	mov	r8, r3
	cmp	r4, #0
	bne	.L613	@cond_branch
	ldr	r1, .L819+0x8
	ldrb	r0, [r1, #0x3]
	cmp	r0, #0xb
	beq	.L613	@cond_branch
	cmp	r0, #0x1f
	beq	.L613	@cond_branch
	ldr	r1, .L819+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	ldr	r2, .L819+0x8
	strb	r4, [r2, #0x3]
	bl	.L608	@ far jump
.L820:
	.align	2, 0
.L819:
	.word	gBattleMons
	.word	gEffectBattler
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.L613:
	mov	r3, r9
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	mov	r1, r8
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L614	@cond_branch
	cmp	r7, #0x40
	beq	.L614	@cond_branch
	ldr	r0, .L821
	ldr	r1, [r0]
	add	r1, r1, #0x1
	str	r1, [r0]
	mov	r0, #0x0
	ldr	r4, .L821+0x4
	strb	r0, [r4, #0x3]
	bl	.L608	@ far jump
.L822:
	.align	2, 0
.L821:
	.word	gBattlescriptCurrInstr
	.word	gBattleCommunication
.L614:
	ldr	r1, .L823
	ldrb	r0, [r1, #0x3]
	cmp	r0, #0x6
	bls	.LCB6639
	b	.L615	@long jump
.LCB6639:
	ldr	r1, .L823+0x4
	ldr	r2, .L823
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	cmp	r0, #0x10
	bne	.LCB6648
	b	.L644	@long jump
.LCB6648:
	cmp	r0, #0x10
	bhi	.L685	@cond_branch
	cmp	r0, #0x7
	beq	.L617	@cond_branch
	cmp	r0, #0x8
	beq	.L630	@cond_branch
	b	.L616
.L824:
	.align	2, 0
.L823:
	.word	gBattleCommunication
	.word	sStatusFlagsForMoveEffects
.L685:
	cmp	r0, #0x40
	bne	.LCB6666
	b	.L663	@long jump
.LCB6666:
	cmp	r0, #0x40
	bhi	.L686	@cond_branch
	cmp	r0, #0x20
	bne	.LCB6670
	b	.L656	@long jump
.LCB6670:
	b	.L616
.L686:
	cmp	r0, #0x80
	bne	.LCB6675
	b	.L671	@long jump
.LCB6675:
	b	.L616
.L617:
	mov	r3, r9
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r8
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x2b
	beq	.L618	@cond_branch
	ldr	r0, .L825
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r1, .L825+0x4
	ldrb	r3, [r1]
	add	r7, r0, #0
	mov	ip, r1
	cmp	r3, #0
	beq	.L625	@cond_branch
	mov	r4, r8
	ldr	r0, [r4, #0x50]
	mov	r1, #0x70
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L625	@cond_branch
	add	r1, r7, #0
	mov	r6, r8
	add	r6, r6, #0x50
	mov	r5, #0x58
	mov	r4, #0x70
.L621:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r3
	bcs	.L625	@cond_branch
	ldrb	r0, [r7]
	mul	r0, r0, r5
	add	r0, r0, r6
	ldr	r0, [r0]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L621	@cond_branch
	b	.L625
.L826:
	.align	2, 0
.L825:
	.word	gActiveBattler
	.word	gBattlersCount
.L618:
	ldr	r0, .L827
	ldr	r2, .L827+0x4
	ldrb	r1, [r2]
	strb	r1, [r0]
	add	r7, r0, #0
	mov	ip, r2
.L625:
	mov	r0, r9
	ldrb	r2, [r0]
	mov	r0, #0x58
	mov	r1, r2
	mul	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0x4c
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB6770
	b	.L616	@long jump
.LCB6770:
	ldrb	r0, [r7]
	mov	r3, ip
	ldrb	r3, [r3]
	cmp	r0, r3
	beq	.LCB6782
	b	.L616	@long jump
.LCB6782:
	mov	r4, r8
	add	r0, r1, r4
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x48
	bne	.LCB6790
	b	.L616	@long jump
.LCB6790:
	cmp	r0, #0xf
	bne	.LCB6792
	b	.L616	@long jump
.LCB6792:
	add	r0, r2, #0
	bl	CancelMultiTurnMoves
	b	.L807
.L828:
	.align	2, 0
.L827:
	.word	gActiveBattler
	.word	gBattlersCount
.L630:
	mov	r2, r9
	ldrb	r1, [r2]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r8
	add	r0, r0, #0x20
	ldrb	r1, [r0]
	cmp	r1, #0x11
	bne	.L631	@cond_branch
	cmp	r5, #0x1
	beq	.L632	@cond_branch
	cmp	r6, #0x80
	bne	.L631	@cond_branch
.L632:
	ldr	r0, .L829
	strb	r1, [r0]
	mov	r3, r9
	ldrb	r0, [r3]
	mov	r1, #0x11
	bl	RecordAbilityBattle
	ldr	r4, .L829+0x4
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L829+0x8
	str	r0, [r4]
	ldr	r2, .L829+0xc
	ldr	r1, [r2]
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB6844
	b	.L674	@long jump
.LCB6844:
.L811:
	mov	r0, #0x1
	ldr	r4, .L829+0x10
	strb	r0, [r4, #0x5]
.L812:
	ldr	r0, .L829+0x14
	and	r1, r1, r0
	str	r1, [r2]
	bl	.L696	@ far jump
.L830:
	.align	2, 0
.L829:
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PSNPrevention
	.word	gHitMarker
	.word	gBattleCommunication
	.word	-0x2001
.L631:
	mov	r2, r9
	ldrb	r0, [r2]
	mov	r1, #0x58
	mul	r0, r0, r1
	add	r0, r0, r8
	add	r1, r0, #0
	add	r1, r1, #0x21
	ldrb	r1, [r1]
	cmp	r1, #0x3
	beq	.L636	@cond_branch
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x3
	beq	.L636	@cond_branch
	cmp	r1, #0x8
	beq	.L636	@cond_branch
	cmp	r0, #0x8
	bne	.L635	@cond_branch
.L636:
	ldr	r0, .L831
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L635	@cond_branch
	cmp	r5, #0x1
	bne	.LCB6903
	b	.L678	@long jump
.LCB6903:
	cmp	r6, #0x80
	bne	.LCB6905
	b	.L678	@long jump
.LCB6905:
.L635:
	mov	r3, r9
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r1, r1, r0
	mov	r4, r8
	add	r3, r1, r4
	add	r0, r3, #0
	add	r0, r0, #0x21
	ldrb	r4, [r0]
	cmp	r4, #0x3
	bne	.LCB6924
	b	.L616	@long jump
.LCB6924:
	add	r0, r0, #0x1
	ldrb	r0, [r0]
	cmp	r0, #0x3
	bne	.LCB6931
	b	.L616	@long jump
.LCB6931:
	cmp	r4, #0x8
	bne	.LCB6933
	b	.L616	@long jump
.LCB6933:
	cmp	r0, #0x8
	bne	.LCB6935
	b	.L616	@long jump
.LCB6935:
	mov	r0, r8
	add	r0, r0, #0x4c
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB6941
	b	.L616	@long jump
.LCB6941:
	add	r0, r3, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x11
	bne	.LCB6948
	b	.L616	@long jump
.LCB6948:
	b	.L807
.L832:
	.align	2, 0
.L831:
	.word	gHitMarker
.L644:
	mov	r2, r9
	ldrb	r1, [r2]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r8
	add	r0, r0, #0x20
	ldrb	r1, [r0]
	cmp	r1, #0x29
	bne	.L645	@cond_branch
	cmp	r5, #0x1
	beq	.L646	@cond_branch
	cmp	r6, #0x80
	bne	.L645	@cond_branch
.L646:
	ldr	r0, .L833
	strb	r1, [r0]
	mov	r3, r9
	ldrb	r0, [r3]
	mov	r1, #0x29
	bl	RecordAbilityBattle
	ldr	r4, .L833+0x4
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L833+0x8
	str	r0, [r4]
	ldr	r2, .L833+0xc
	ldr	r1, [r2]
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB6997
	b	.L811	@long jump
.LCB6997:
	b	.L674
.L834:
	.align	2, 0
.L833:
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BRNPrevention
	.word	gHitMarker
.L645:
	mov	r2, r9
	ldrb	r1, [r2]
	mov	r0, #0x58
	mul	r0, r0, r1
	mov	r3, r8
	add	r1, r0, r3
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0xa
	beq	.L650	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xa
	bne	.L649	@cond_branch
.L650:
	ldr	r0, .L835
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L649	@cond_branch
	cmp	r5, #0x1
	beq	.L651	@cond_branch
	cmp	r6, #0x80
	bne	.L649	@cond_branch
.L651:
	ldr	r4, .L835+0x4
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L835+0x8
	b	.L808
.L836:
	.align	2, 0
.L835:
	.word	gHitMarker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_BRNPrevention
.L649:
	mov	r4, r9
	ldrb	r0, [r4]
	mov	r1, #0x58
	mov	r2, r0
	mul	r2, r2, r1
	mov	r0, r8
	add	r1, r2, r0
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0xa
	bne	.LCB7081
	b	.L616	@long jump
.LCB7081:
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xa
	bne	.LCB7088
	b	.L616	@long jump
.LCB7088:
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x29
	bne	.LCB7095
	b	.L616	@long jump
.LCB7095:
	mov	r0, r8
	add	r0, r0, #0x4c
	add	r0, r2, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB7101
	b	.L616	@long jump
.LCB7101:
	mov	r1, #0x1
	mov	sl, r1
	b	.L616
.L656:
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L657	@cond_branch
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L657	@cond_branch
	ldr	r0, .L837
	ldrh	r1, [r0]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L657	@cond_branch
	mov	r2, #0x0
	str	r2, [sp, #0x4]
.L657:
	ldr	r4, .L837+0x4
	ldr	r0, .L837+0x8
	ldrb	r3, [r0]
	mov	r0, #0x58
	mov	r2, r3
	mul	r2, r2, r0
	add	r1, r2, r4
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0xf
	bne	.LCB7153
	b	.L616	@long jump
.LCB7153:
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xf
	bne	.LCB7160
	b	.L616	@long jump
.LCB7160:
	add	r0, r4, #0
	add	r0, r0, #0x4c
	add	r0, r2, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB7166
	b	.L616	@long jump
.LCB7166:
	ldr	r4, [sp, #0x4]
	cmp	r4, #0
	bne	.LCB7169
	b	.L616	@long jump
.LCB7169:
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x28
	bne	.LCB7176
	b	.L616	@long jump
.LCB7176:
	add	r0, r3, #0
	bl	CancelMultiTurnMoves
	b	.L807
.L838:
	.align	2, 0
.L837:
	.word	gBattleWeather
	.word	gBattleMons
	.word	gEffectBattler
.L663:
	mov	r2, r9
	ldrb	r1, [r2]
	mov	r0, #0x58
	mul	r1, r1, r0
	mov	r3, r8
	add	r0, r1, r3
	add	r0, r0, #0x20
	ldrb	r2, [r0]
	cmp	r2, #0x7
	bne	.L664	@cond_branch
	cmp	r5, #0x1
	beq	.L666	@cond_branch
	cmp	r6, #0x80
	beq	.LCB7208
	b	.L616	@long jump
.LCB7208:
.L666:
	ldr	r0, .L839
	strb	r2, [r0]
	mov	r4, r9
	ldrb	r0, [r4]
	mov	r1, #0x7
	bl	RecordAbilityBattle
	ldr	r4, .L839+0x4
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L839+0x8
	str	r0, [r4]
	ldr	r2, .L839+0xc
	ldr	r1, [r2]
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L667	@cond_branch
	mov	r0, #0x1
	ldr	r3, .L839+0x10
	strb	r0, [r3, #0x5]
	b	.L812
.L840:
	.align	2, 0
.L839:
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PRLZPrevention
	.word	gHitMarker
	.word	gBattleCommunication
.L667:
	ldr	r4, .L841
	strb	r0, [r4, #0x5]
	bl	.L696	@ far jump
.L842:
	.align	2, 0
.L841:
	.word	gBattleCommunication
.L664:
	mov	r0, r8
	add	r0, r0, #0x4c
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L616	@cond_branch
	b	.L807
.L671:
	mov	r2, r9
	ldrb	r1, [r2]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r8
	add	r0, r0, #0x20
	ldrb	r1, [r0]
	cmp	r1, #0x11
	bne	.L672	@cond_branch
	cmp	r5, #0x1
	bne	.LCB7285
	b	.L632	@long jump
.LCB7285:
	cmp	r6, #0x80
	bne	.L672	@cond_branch
	b	.L632
.L674:
	ldr	r1, .L843
	strb	r0, [r1, #0x5]
	bl	.L696	@ far jump
.L844:
	.align	2, 0
.L843:
	.word	gBattleCommunication
.L672:
	mov	r2, r9
	ldrb	r0, [r2]
	mov	r1, #0x58
	mul	r0, r0, r1
	add	r0, r0, r8
	add	r1, r0, #0
	add	r1, r1, #0x21
	ldrb	r1, [r1]
	cmp	r1, #0x3
	beq	.L677	@cond_branch
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x3
	beq	.L677	@cond_branch
	cmp	r1, #0x8
	beq	.L677	@cond_branch
	cmp	r0, #0x8
	bne	.L676	@cond_branch
.L677:
	ldr	r0, .L845
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L676	@cond_branch
	cmp	r5, #0x1
	beq	.L678	@cond_branch
	cmp	r6, #0x80
	bne	.L676	@cond_branch
.L678:
	ldr	r4, .L845+0x4
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L845+0x8
.L808:
	str	r0, [r4]
	ldr	r1, .L845+0xc
	mov	r2, #0x0
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	strb	r2, [r1, #0x3]
	bl	.L608	@ far jump
.L846:
	.align	2, 0
.L845:
	.word	gHitMarker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PSNPrevention
	.word	gBattleCommunication
.L676:
	mov	r3, r9
	ldrb	r0, [r3]
	mov	r6, #0x58
	mul	r0, r0, r6
	mov	r2, r8
	add	r2, r2, #0x4c
	add	r5, r0, r2
	ldr	r4, [r5]
	cmp	r4, #0
	bne	.L616	@cond_branch
	mov	r3, r8
	add	r1, r0, r3
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r3, [r0]
	cmp	r3, #0x3
	beq	.L680	@cond_branch
	add	r0, r0, #0x1
	ldrb	r0, [r0]
	cmp	r0, #0x3
	beq	.L680	@cond_branch
	cmp	r3, #0x8
	beq	.L680	@cond_branch
	cmp	r0, #0x8
	beq	.L680	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x11
	beq	.L616	@cond_branch
	mov	r4, r9
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x9
	neg	r2, r2
	and	r0, r0, r2
	str	r0, [r1]
.L807:
	mov	r0, #0x1
	mov	sl, r0
	b	.L616
.L680:
	ldr	r0, .L847
	ldrb	r1, [r0]
	mov	r2, #0x8
	orr	r1, r1, r2
	strb	r1, [r0]
.L616:
	mov	r1, sl
	cmp	r1, #0x1
	beq	.LCB7437
	b	.L687	@long jump
.LCB7437:
	ldr	r0, .L847+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r1, .L847+0x8
	ldr	r0, .L847+0xc
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r3, [r0]
	cmp	r3, #0x7
	bne	.L688	@cond_branch
	bl	Random
	ldr	r2, .L847+0x10
	ldr	r1, .L847+0x14
	ldrb	r3, [r1]
	mov	r1, #0x58
	mul	r3, r3, r1
	add	r2, r2, #0x4c
	add	r3, r3, r2
	mov	r1, #0x3
	and	r1, r1, r0
	add	r1, r1, #0x2
	ldr	r0, [r3]
	orr	r0, r0, r1
	str	r0, [r3]
	b	.L689
.L848:
	.align	2, 0
.L847:
	.word	gMoveResultFlags
	.word	gBattlescriptCurrInstr
	.word	sStatusFlagsForMoveEffects
	.word	gBattleCommunication
	.word	gBattleMons
	.word	gEffectBattler
.L688:
	ldr	r2, .L849
	ldr	r0, .L849+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r2, r2, #0x4c
	add	r1, r1, r2
	ldr	r0, [r1]
	orr	r0, r0, r3
	str	r0, [r1]
.L689:
	ldr	r2, .L849+0x8
	ldr	r1, .L849+0xc
	ldr	r5, .L849+0x10
	ldrb	r0, [r5, #0x3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	str	r0, [r2]
	ldr	r4, .L849+0x14
	ldr	r1, .L849+0x4
	ldrb	r0, [r1]
	strb	r0, [r4]
	ldrb	r1, [r1]
	mov	r0, #0x58
	mul	r0, r0, r1
	ldr	r1, .L849+0x18
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r2, .L849+0x1c
	ldr	r1, [r2]
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L690	@cond_branch
	mov	r0, #0x1
	strb	r0, [r5, #0x5]
	ldr	r0, .L849+0x20
	and	r1, r1, r0
	str	r1, [r2]
	b	.L691
.L850:
	.align	2, 0
.L849:
	.word	gBattleMons
	.word	gEffectBattler
	.word	gBattlescriptCurrInstr
	.word	sMoveEffectBS_Ptrs
	.word	gBattleCommunication
	.word	gActiveBattler
	.word	gBattleMons+0x4c
	.word	gHitMarker
	.word	-0x2001
.L690:
	strb	r0, [r5, #0x5]
.L691:
	ldr	r0, .L851
	ldrb	r2, [r0, #0x3]
	cmp	r2, #0x2
	beq	.L693	@cond_branch
	cmp	r2, #0x6
	beq	.L693	@cond_branch
	cmp	r2, #0x5
	beq	.L693	@cond_branch
	cmp	r2, #0x3
	beq	.LCB7565
	bl	.L608	@far jump
.LCB7565:
.L693:
	ldr	r0, .L851+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb2
	ldr	r2, .L851
	ldrb	r1, [r2, #0x3]
	strb	r1, [r0]
	ldr	r2, .L851+0x8
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x7
	orr	r0, r0, r1
	str	r0, [r2]
	bl	.L608	@ far jump
.L852:
	.align	2, 0
.L851:
	.word	gBattleCommunication
	.word	gBattleStruct
	.word	gHitMarker
.L687:
	mov	r3, sl
	cmp	r3, #0
	beq	.LCB7595
	bl	.L608	@far jump
.LCB7595:
	ldr	r0, .L853
	strb	r3, [r0, #0x3]
	ldr	r1, .L853+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bl	.L608	@ far jump
.L854:
	.align	2, 0
.L853:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.L615:
	mov	r4, r9
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0x50
	add	r1, r1, r0
	ldr	r2, .L855
	ldr	r0, .L855+0x4
	ldrb	r3, [r0, #0x3]
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r1, [r1]
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.LCB7632
	bl	.L799	@far jump
.LCB7632:
	sub	r0, r3, #0x7
	cmp	r0, #0x34
	bls	.LCB7637
	bl	.L696	@far jump
.LCB7637:
	lsl	r0, r0, #0x2
	ldr	r1, .L855+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L856:
	.align	2, 0
.L855:
	.word	sStatusFlagsForMoveEffects
	.word	gBattleCommunication
	.word	.L802
	.align	2, 0
	.align	2, 0
.L802:
	.word	.L700
	.word	.L704
	.word	.L717
	.word	.L711
	.word	.L714
	.word	.L720
	.word	.L721
	.word	.L730
	.word	.L739
	.word	.L739
	.word	.L739
	.word	.L739
	.word	.L739
	.word	.L739
	.word	.L739
	.word	.L748
	.word	.L748
	.word	.L748
	.word	.L748
	.word	.L748
	.word	.L748
	.word	.L748
	.word	.L769
	.word	.L770
	.word	.L771
	.word	.L782
	.word	.L783
	.word	.L784
	.word	.L785
	.word	.L786
	.word	.L789
	.word	.L790
	.word	.L757
	.word	.L757
	.word	.L757
	.word	.L757
	.word	.L757
	.word	.L757
	.word	.L757
	.word	.L766
	.word	.L766
	.word	.L766
	.word	.L766
	.word	.L766
	.word	.L766
	.word	.L766
	.word	.L792
	.word	.L795
	.word	.L696
	.word	.L696
	.word	.L696
	.word	.L696
	.word	.L801
.L700:
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r5, #0x58
	mov	r1, r0
	mul	r1, r1, r5
	mov	r2, r8
	add	r0, r1, r2
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x14
	bne	.LCB7671
	bl	.L799	@far jump
.LCB7671:
	mov	r4, r8
	add	r4, r4, #0x50
	add	r0, r1, r4
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB7679
	bl	.L799	@far jump
.LCB7679:
	bl	Random
	mov	r3, r9
	ldrb	r1, [r3]
	mov	r2, r1
	mul	r2, r2, r5
	add	r2, r2, r4
	lsl	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	add	r1, r1, #0x2
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r4, .L857
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r1, .L857+0x4
	ldr	r0, .L857+0x8
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	.L809	@ far jump
.L858:
	.align	2, 0
.L857:
	.word	gBattlescriptCurrInstr
	.word	sMoveEffectBS_Ptrs
	.word	gBattleCommunication
.L704:
	mov	r4, r9
	ldrb	r2, [r4]
	mov	r4, #0x58
	mov	r0, r2
	mul	r0, r0, r4
	add	r0, r0, r8
	add	r0, r0, #0x20
	ldrb	r1, [r0]
	cmp	r1, #0x27
	bne	.L705	@cond_branch
	cmp	r5, #0x1
	beq	.L707	@cond_branch
	cmp	r6, #0x80
	beq	.LCB7738
	bl	.L799	@far jump
.LCB7738:
.L707:
	ldr	r0, .L859
	strb	r1, [r0]
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r1, #0x27
	bl	RecordAbilityBattle
	ldr	r1, .L859+0x4
	ldr	r0, .L859+0x8
	str	r0, [r1]
	bl	.L696	@ far jump
.L860:
	.align	2, 0
.L859:
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_FlinchPrevention
.L705:
	add	r0, r2, #0
	bl	GetBattlerTurnOrderNum
	ldr	r1, .L861
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bhi	.LCB7775
	bl	.L799	@far jump
.LCB7775:
	mov	r2, r9
	ldrb	r0, [r2]
	mov	r2, r0
	mul	r2, r2, r4
	mov	r0, r8
	add	r0, r0, #0x50
	add	r2, r2, r0
	ldr	r1, .L861+0x4
	ldr	r0, .L861+0x8
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	orr	r1, r1, r0
	str	r1, [r2]
	bl	.L799	@ far jump
.L862:
	.align	2, 0
.L861:
	.word	gCurrentTurnActionNumber
	.word	sStatusFlagsForMoveEffects
	.word	gBattleCommunication
.L711:
	mov	r3, r9
	ldrb	r0, [r3]
	mov	r5, #0x58
	mul	r0, r0, r5
	mov	r4, r8
	add	r4, r4, #0x50
	add	r2, r0, r4
	ldr	r1, [r2]
	mov	r0, #0x70
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB7815
	bl	.L799	@far jump
.LCB7815:
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	orr	r1, r1, r0
	str	r1, [r2]
	ldr	r1, .L863
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldr	r1, .L863+0x4
	ldrh	r1, [r1]
	strh	r1, [r0]
	bl	Random
	mov	r2, r9
	ldrb	r1, [r2]
	mov	r2, r1
	mul	r2, r2, r5
	add	r2, r2, r4
	mov	r1, #0x3
	and	r1, r1, r0
	add	r1, r1, #0x2
	lsl	r1, r1, #0x4
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r4, .L863+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r1, .L863+0xc
	ldr	r0, .L863+0x10
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	.L809	@ far jump
.L864:
	.align	2, 0
.L863:
	.word	gLockedMoves
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	sMoveEffectBS_Ptrs
	.word	gBattleCommunication
.L714:
	ldr	r5, .L865
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L715	@cond_branch
	ldr	r4, .L865+0x4
	ldrh	r3, [r4]
	ldr	r2, .L865+0x8
	ldrb	r1, [r5]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x2a
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	add	r0, r3, r0
	strh	r0, [r4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r3, r0
	bls	.L715	@cond_branch
	ldr	r3, .L865+0xc
	add	r0, r3, #0
	strh	r0, [r4]
.L715:
	ldr	r4, .L865+0x10
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r1, .L865+0x14
	ldr	r0, .L865+0x18
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	b	.L809
.L866:
	.align	2, 0
.L865:
	.word	gBattlerAttacker
	.word	gPaydayMoney
	.word	gBattleMons
	.word	0xffff
	.word	gBattlescriptCurrInstr
	.word	sMoveEffectBS_Ptrs
	.word	gBattleCommunication
.L717:
	mov	r4, r9
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	mov	r1, r8
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB7940
	b	.L799	@long jump
.LCB7940:
	bl	Random
	ldr	r4, .L867
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	add	r0, r0, #0x3
	strb	r0, [r4, #0x3]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetMoveEffect
	b	.L696
.L868:
	.align	2, 0
.L867:
	.word	gBattleCommunication
.L720:
	mov	r0, r9
	ldrb	r1, [r0]
	mov	r0, #0x58
	mov	r2, r1
	mul	r2, r2, r0
	mov	r0, r8
	add	r0, r0, #0x50
	add	r2, r2, r0
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L869
	mov	r2, r9
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldr	r1, .L869+0x4
	ldrh	r1, [r1]
	strh	r1, [r0]
	ldr	r0, .L869+0x8
	ldrb	r1, [r2]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1, #0x1]
	b	.L799
.L870:
	.align	2, 0
.L869:
	.word	gLockedMoves
	.word	gCurrentMove
	.word	gProtectStructs
.L721:
	mov	r3, r9
	ldrb	r0, [r3]
	mov	r6, #0x58
	mul	r0, r0, r6
	mov	r4, r8
	add	r4, r4, #0x50
	add	r0, r0, r4
	ldr	r5, [r0]
	mov	r0, #0xe0
	lsl	r0, r0, #0x8
	and	r5, r5, r0
	cmp	r5, #0
	beq	.LCB8021
	b	.L799	@long jump
.LCB8021:
	bl	Random
	mov	r2, r9
	ldrb	r1, [r2]
	mov	r2, r1
	mul	r2, r2, r6
	add	r2, r2, r4
	mov	r1, #0x3
	and	r1, r1, r0
	add	r1, r1, #0x3
	lsl	r1, r1, #0xd
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r3, r9
	ldrb	r1, [r3]
	ldr	r2, .L871
	ldr	r0, [r2]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldr	r6, .L871+0x4
	ldrh	r0, [r6]
	strb	r0, [r1, #0x4]
	ldrb	r1, [r3]
	ldr	r0, [r2]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r0, [r6]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x5]
	ldrb	r1, [r3]
	ldr	r0, [r2]
	add	r1, r1, r0
	ldr	r0, .L871+0x8
	ldrb	r0, [r0]
	strb	r0, [r1, #0x14]
	ldr	r4, .L871+0xc
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r1, .L871+0x10
	ldr	r2, .L871+0x14
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	str	r0, [r4]
	strb	r5, [r2, #0x5]
	ldr	r3, .L871+0x18
	ldrh	r0, [r3]
	ldrh	r4, [r6]
	cmp	r0, r4
	bne	.LCB8089
	b	.L696	@long jump
.LCB8089:
	add	r1, r2, #0
	add	r2, r6, #0
.L726:
	ldrb	r0, [r1, #0x5]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.LCB8105
	b	.L696	@long jump
.LCB8105:
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	ldrh	r4, [r2]
	cmp	r0, r4
	bne	.L726	@cond_branch
	b	.L696
.L872:
	.align	2, 0
.L871:
	.word	gBattleStruct
	.word	gCurrentMove
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	sMoveEffectBS_Ptrs
	.word	gBattleCommunication
	.word	gTrappingMoves
.L730:
	ldr	r1, .L873
	ldr	r0, .L873+0x4
	ldr	r0, [r0]
	cmp	r0, #0
	bge	.L731	@cond_branch
	add	r0, r0, #0x3
.L731:
	asr	r0, r0, #0x2
	str	r0, [r1]
	cmp	r0, #0
	bne	.L732	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L732:
	ldr	r4, .L873+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r1, .L873+0xc
	ldr	r0, .L873+0x10
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	b	.L809
.L874:
	.align	2, 0
.L873:
	.word	gBattleMoveDamage
	.word	gHpDealt
	.word	gBattlescriptCurrInstr
	.word	sMoveEffectBS_Ptrs
	.word	gBattleCommunication
.L739:
	ldr	r4, .L875
	ldrb	r1, [r4, #0x3]
	add	r1, r1, #0xf2
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x10
	add	r2, r7, #0
	mov	r3, #0x0
	bl	ChangeStatBuffs
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.LCB8187
	b	.L799	@long jump
.LCB8187:
	ldr	r2, .L875+0x4
	ldrb	r1, [r4, #0x3]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r2, #0x10]
	strb	r3, [r2, #0x11]
	ldr	r4, .L875+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L875+0xc
	b	.L809
.L876:
	.align	2, 0
.L875:
	.word	gBattleCommunication
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_StatUp
.L748:
	mov	r0, #0x70
	neg	r0, r0
	ldr	r4, .L877
	ldrb	r1, [r4, #0x3]
	add	r1, r1, #0xeb
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r2, r7, #0
	mov	r3, #0x0
	bl	ChangeStatBuffs
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.LCB8230
	b	.L799	@long jump
.LCB8230:
	ldr	r2, .L877+0x4
	ldrb	r1, [r4, #0x3]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r2, #0x10]
	strb	r3, [r2, #0x11]
	ldr	r4, .L877+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L877+0xc
	b	.L809
.L878:
	.align	2, 0
.L877:
	.word	gBattleCommunication
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_StatDown
.L757:
	ldr	r4, .L879
	ldrb	r1, [r4, #0x3]
	add	r1, r1, #0xda
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x20
	add	r2, r7, #0
	mov	r3, #0x0
	bl	ChangeStatBuffs
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.LCB8271
	b	.L799	@long jump
.LCB8271:
	ldr	r2, .L879+0x4
	ldrb	r1, [r4, #0x3]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r2, #0x10]
	strb	r3, [r2, #0x11]
	ldr	r4, .L879+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L879+0xc
	b	.L809
.L880:
	.align	2, 0
.L879:
	.word	gBattleCommunication
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_StatUp
.L766:
	mov	r0, #0x60
	neg	r0, r0
	ldr	r4, .L881
	ldrb	r1, [r4, #0x3]
	add	r1, r1, #0xd3
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r2, r7, #0
	mov	r3, #0x0
	bl	ChangeStatBuffs
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.LCB8314
	b	.L799	@long jump
.LCB8314:
	ldr	r2, .L881+0x4
	ldrb	r1, [r4, #0x3]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r2, #0x10]
	strb	r3, [r2, #0x11]
	ldr	r4, .L881+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L881+0xc
	b	.L809
.L882:
	.align	2, 0
.L881:
	.word	gBattleCommunication
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_StatDown
.L769:
	mov	r0, r9
	ldrb	r1, [r0]
	mov	r0, #0x58
	mov	r2, r1
	mul	r2, r2, r0
	mov	r0, r8
	add	r0, r0, #0x50
	add	r2, r2, r0
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xf
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r2, .L883
	mov	r3, r9
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x2
	strb	r1, [r0, #0x19]
	ldr	r1, .L883+0x4
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldr	r1, .L883+0x8
	ldrh	r1, [r1]
	strh	r1, [r0]
	b	.L799
.L884:
	.align	2, 0
.L883:
	.word	gDisableStructs
	.word	gLockedMoves
	.word	gCurrentMove
.L770:
	ldr	r0, .L885
	ldrb	r1, [r0]
	mov	r0, #0x58
	mov	r2, r1
	mul	r2, r2, r0
	mov	r0, r8
	add	r0, r0, #0x50
	add	r2, r2, r0
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x10
.L810:
	orr	r0, r0, r1
	str	r0, [r2]
	b	.L799
.L886:
	.align	2, 0
.L885:
	.word	gBattlerAttacker
.L771:
	ldr	r5, .L887
	ldr	r0, [r5]
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB8412
	b	.L799	@long jump
.LCB8412:
	ldr	r6, .L887+0x4
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L773	@cond_branch
	ldr	r0, [r5]
	ldr	r1, .L887+0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L775	@cond_branch
	b	.L799
.L888:
	.align	2, 0
.L887:
	.word	gBattleTypeFlags
	.word	gBattlerAttacker
	.word	0xa3f0902
.L773:
	ldr	r0, [r5]
	ldr	r1, .L889
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L775	@cond_branch
	ldr	r0, .L889+0x4
	add	r0, r0, #0x29
	add	r0, r4, r0
	ldrb	r1, [r0]
	ldr	r3, .L889+0x8
	ldr	r2, .L889+0xc
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.LCB8466
	b	.L799	@long jump
.LCB8466:
.L775:
	ldr	r2, .L889+0x10
	ldr	r1, .L889+0x14
	ldrb	r0, [r1]
	mov	r5, #0x58
	mul	r0, r0, r5
	add	r4, r0, r2
	ldrh	r0, [r4, #0x2e]
	add	r7, r1, #0
	mov	r8, r2
	cmp	r0, #0
	beq	.L777	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x3c
	bne	.L777	@cond_branch
	bl	BattleScriptPushCursor
	ldr	r1, .L889+0x18
	ldr	r0, .L889+0x1c
	str	r0, [r1]
	ldr	r1, .L889+0x20
	ldrb	r0, [r7]
	mul	r0, r0, r5
	add	r0, r0, r8
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	ldrb	r1, [r1]
	bl	RecordAbilityBattle
	b	.L696
.L890:
	.align	2, 0
.L889:
	.word	0xa3f0902
	.word	gWishFutureKnock
	.word	gBitTable
	.word	gBattlerPartyIndexes
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	BattleScript_NoItemSteal
	.word	gLastUsedAbility
.L777:
	ldr	r4, .L891
	mov	sl, r4
	ldrb	r2, [r4]
	mov	r0, #0x58
	mov	r9, r0
	mov	r0, r9
	mul	r0, r0, r2
	add	r0, r0, r8
	ldrh	r4, [r0, #0x2e]
	cmp	r4, #0
	beq	.LCB8535
	b	.L799	@long jump
.LCB8535:
	ldrb	r0, [r7]
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r8
	ldrh	r3, [r0, #0x2e]
	add	r1, r3, #0
	cmp	r1, #0xaf
	bne	.LCB8545
	b	.L799	@long jump
.LCB8545:
	add	r0, r3, #0
	sub	r0, r0, #0x79
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xb
	bhi	.LCB8551
	b	.L799	@long jump
.LCB8551:
	cmp	r1, #0
	bne	.LCB8553
	b	.L799	@long jump
.LCB8553:
	ldr	r5, .L891+0x4
	lsl	r0, r2, #0x1
	add	r0, r0, #0xd0
	ldr	r1, [r5]
	add	r1, r1, r0
	ldr	r2, .L891+0x8
	strh	r3, [r1]
	strh	r3, [r2]
	ldrb	r0, [r7]
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r0, r0, r8
	mov	r6, #0x0
	strh	r4, [r0, #0x2e]
	ldr	r4, .L891+0xc
	mov	r1, sl
	ldrb	r0, [r1]
	strb	r0, [r4]
	str	r2, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	mov	r2, sl
	ldrb	r0, [r2]
	bl	MarkBattlerForControllerExec
	ldrb	r0, [r7]
	strb	r0, [r4]
	ldrb	r0, [r7]
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	mov	r1, r8
	add	r1, r1, #0x2e
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r7]
	bl	MarkBattlerForControllerExec
	ldr	r4, .L891+0x10
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L891+0x14
	str	r0, [r4]
	ldrb	r0, [r7]
	ldr	r1, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0xc8
	strb	r6, [r0]
	ldrb	r0, [r7]
	ldr	r1, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0xc9
	strb	r6, [r0]
	b	.L696
.L892:
	.align	2, 0
.L891:
	.word	gBattlerAttacker
	.word	gBattleStruct
	.word	gLastUsedItem
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ItemSteal
.L782:
	ldr	r3, .L893
	ldrb	r1, [r3]
	mov	r0, #0x58
	mov	r2, r1
	mul	r2, r2, r0
	mov	r0, r8
	add	r0, r0, #0x50
	add	r2, r2, r0
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r2, .L893+0x4
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L893+0x8
	ldrb	r1, [r1]
	strb	r1, [r0, #0x14]
	b	.L799
.L894:
	.align	2, 0
.L893:
	.word	gBattlerTarget
	.word	gDisableStructs
	.word	gBattlerAttacker
.L783:
	ldr	r0, .L895
	ldrb	r1, [r0]
	mov	r0, #0x58
	mov	r2, r1
	mul	r2, r2, r0
	mov	r0, r8
	add	r0, r0, #0x50
	add	r2, r2, r0
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x14
	b	.L810
.L896:
	.align	2, 0
.L895:
	.word	gBattlerTarget
.L784:
	ldr	r4, .L897
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L897+0x4
	b	.L809
.L898:
	.align	2, 0
.L897:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AllStatsUp
.L785:
	ldr	r4, .L899
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L899+0x4
	b	.L809
.L900:
	.align	2, 0
.L899:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_RapidSpinAway
.L786:
	ldr	r6, .L901
	ldrb	r0, [r6]
	mov	r2, #0x58
	mul	r0, r0, r2
	mov	r1, r8
	add	r1, r1, #0x4c
	add	r5, r0, r1
	ldr	r4, [r5]
	mov	r0, #0x40
	and	r0, r0, r4
	cmp	r0, #0
	bne	.LCB8732
	b	.L799	@long jump
.LCB8732:
	mov	r0, #0x41
	neg	r0, r0
	and	r4, r4, r0
	str	r4, [r5]
	ldr	r4, .L901+0x4
	ldrb	r0, [r6]
	strb	r0, [r4]
	ldrb	r0, [r4]
	mul	r0, r0, r2
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r4, .L901+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L901+0xc
	b	.L809
.L902:
	.align	2, 0
.L901:
	.word	gBattlerTarget
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_TargetPRLZHeal
.L789:
	ldr	r4, .L903
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L903+0x4
	b	.L809
.L904:
	.align	2, 0
.L903:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AtkDefDown
.L790:
	ldr	r4, .L905
	ldr	r0, .L905+0x4
	ldr	r0, [r0]
	mov	r1, #0x3
	bl	__divsi3
	str	r0, [r4]
	cmp	r0, #0
	bne	.L791	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
.L791:
	ldr	r4, .L905+0x8
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r1, .L905+0xc
	ldr	r0, .L905+0x10
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	b	.L809
.L906:
	.align	2, 0
.L905:
	.word	gBattleMoveDamage
	.word	gHpDealt
	.word	gBattlescriptCurrInstr
	.word	sMoveEffectBS_Ptrs
	.word	gBattleCommunication
.L792:
	mov	r4, r9
	ldrb	r0, [r4]
	mov	r5, #0x58
	mul	r0, r0, r5
	mov	r4, r8
	add	r4, r4, #0x50
	add	r2, r0, r4
	ldr	r1, [r2]
	mov	r0, #0xc0
	lsl	r0, r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB8839
	b	.L799	@long jump
.LCB8839:
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	orr	r1, r1, r0
	str	r1, [r2]
	ldr	r1, .L907
	mov	r2, r9
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldr	r1, .L907+0x4
	ldrh	r1, [r1]
	strh	r1, [r0]
	bl	Random
	mov	r3, r9
	ldrb	r1, [r3]
	mov	r2, r1
	mul	r2, r2, r5
	add	r2, r2, r4
	mov	r1, #0x1
	and	r1, r1, r0
	add	r1, r1, #0x2
	lsl	r1, r1, #0xa
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	b	.L696
.L908:
	.align	2, 0
.L907:
	.word	gLockedMoves
	.word	gCurrentMove
.L795:
	mov	r4, r9
	ldrb	r3, [r4]
	mov	r5, #0x58
	mov	r0, r3
	mul	r0, r0, r5
	mov	r2, r8
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r2, [r0]
	cmp	r2, #0x3c
	bne	.L796	@cond_branch
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0
	beq	.L799	@cond_branch
	ldr	r0, .L909
	strb	r2, [r0]
	ldr	r1, .L909+0x4
	ldr	r0, .L909+0x8
	str	r0, [r1]
	ldrb	r0, [r4]
	mov	r1, #0x3c
	bl	RecordAbilityBattle
	b	.L696
.L910:
	.align	2, 0
.L909:
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_StickyHoldActivates
.L796:
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0
	beq	.L799	@cond_branch
	add	r0, r3, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L911
	mov	r3, r9
	ldrb	r0, [r3]
	mul	r0, r0, r5
	add	r0, r0, r8
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r1]
	ldrb	r0, [r3]
	mul	r0, r0, r5
	add	r0, r0, r8
	mov	r5, #0x0
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
	ldr	r2, .L911+0x4
	add	r2, r2, #0x29
	add	r2, r4, r2
	ldr	r3, .L911+0x8
	ldr	r1, .L911+0xc
	mov	r4, r9
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r4, .L911+0x10
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L911+0x14
	str	r0, [r4]
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r2, .L911+0x18
	ldr	r1, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0xc8
	strb	r5, [r0]
	mov	r3, r9
	ldrb	r0, [r3]
	ldr	r1, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0xc9
	strb	r5, [r0]
	b	.L696
.L912:
	.align	2, 0
.L911:
	.word	gLastUsedItem
	.word	gWishFutureKnock
	.word	gBitTable
	.word	gBattlerPartyIndexes
	.word	gBattlescriptCurrInstr
	.word	BattleScript_KnockedOff
	.word	gBattleStruct
.L799:
	ldr	r1, .L913
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	b	.L696
.L914:
	.align	2, 0
.L913:
	.word	gBattlescriptCurrInstr
.L801:
	ldr	r4, .L915
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L915+0x4
.L809:
	str	r0, [r4]
.L696:
	ldr	r1, .L915+0x8
	mov	r0, #0x0
	strb	r0, [r1, #0x3]
.L608:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L916:
	.align	2, 0
.L915:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SAtkDown2
	.word	gBattleCommunication
.Lfe34:
	.size	 SetMoveEffect,.Lfe34-SetMoveEffect
	.align	2, 0
	.type	 atk15_seteffectwithchance,function
	.thumb_func
atk15_seteffectwithchance:
	push	{r4, lr}
	ldr	r2, .L927
	ldr	r0, .L927+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x20
	bne	.L918	@cond_branch
	ldr	r2, .L927+0x8
	ldr	r0, .L927+0xc
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x5]
	lsl	r4, r0, #0x1
	b	.L919
.L928:
	.align	2, 0
.L927:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gCurrentMove
.L918:
	ldr	r2, .L929
	ldr	r0, .L929+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r4, [r0, #0x5]
.L919:
	ldr	r3, .L929+0x8
	ldrb	r2, [r3, #0x3]
	mov	r0, #0x80
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L920	@cond_branch
	ldr	r0, .L929+0xc
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L920	@cond_branch
	mov	r0, #0x7f
	and	r0, r0, r2
	strb	r0, [r3, #0x3]
	b	.L926
.L930:
	.align	2, 0
.L929:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleCommunication
	.word	gMoveResultFlags
.L920:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r4
	bcs	.L922	@cond_branch
	ldr	r0, .L931
	ldrb	r0, [r0, #0x3]
	cmp	r0, #0
	beq	.L922	@cond_branch
	ldr	r0, .L931+0x4
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L922	@cond_branch
	cmp	r4, #0x63
	bls	.L923	@cond_branch
.L926:
	mov	r0, #0x0
	mov	r1, #0x80
	bl	SetMoveEffect
	b	.L921
.L932:
	.align	2, 0
.L931:
	.word	gBattleCommunication
	.word	gMoveResultFlags
.L923:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetMoveEffect
	b	.L921
.L922:
	ldr	r1, .L933
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L921:
	ldr	r0, .L933+0x4
	mov	r1, #0x0
	strb	r1, [r0, #0x3]
	ldr	r0, .L933+0x8
	strb	r1, [r0, #0x16]
	pop	{r4}
	pop	{r0}
	bx	r0
.L934:
	.align	2, 0
.L933:
	.word	gBattlescriptCurrInstr
	.word	gBattleCommunication
	.word	gBattleScripting
.Lfe35:
	.size	 atk15_seteffectwithchance,.Lfe35-atk15_seteffectwithchance
	.align	2, 0
	.type	 atk16_seteffectprimary,function
	.thumb_func
atk16_seteffectprimary:
	push	{lr}
	mov	r0, #0x1
	mov	r1, #0x0
	bl	SetMoveEffect
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 atk16_seteffectprimary,.Lfe36-atk16_seteffectprimary
	.align	2, 0
	.type	 atk17_seteffectsecondary,function
	.thumb_func
atk17_seteffectsecondary:
	push	{lr}
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetMoveEffect
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 atk17_seteffectsecondary,.Lfe37-atk17_seteffectsecondary
	.align	2, 0
	.type	 atk18_clearstatusfromeffect,function
	.thumb_func
atk18_clearstatusfromeffect:
	push	{lr}
	ldr	r0, .L941
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r2, .L941+0x4
	strb	r0, [r2]
	ldr	r3, .L941+0x8
	ldrb	r0, [r3, #0x3]
	cmp	r0, #0x6
	bhi	.L938	@cond_branch
	ldr	r1, .L941+0xc
	ldrb	r2, [r2]
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r1, r1, #0x4c
	b	.L940
.L942:
	.align	2, 0
.L941:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleCommunication
	.word	gBattleMons
.L938:
	ldr	r1, .L943
	ldrb	r2, [r2]
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r1, r1, #0x50
.L940:
	add	r2, r2, r1
	ldr	r1, .L943+0x4
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L943+0x8
	mov	r2, #0x0
	strb	r2, [r0, #0x3]
	ldr	r1, .L943+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	ldr	r0, .L943+0x10
	strb	r2, [r0, #0x16]
	pop	{r0}
	bx	r0
.L944:
	.align	2, 0
.L943:
	.word	gBattleMons
	.word	sStatusFlagsForMoveEffects
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	gBattleScripting
.Lfe38:
	.size	 atk18_clearstatusfromeffect,.Lfe38-atk18_clearstatusfromeffect
	.align	2, 0
	.type	 atk19_tryfaintmon,function
	.thumb_func
atk19_tryfaintmon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	ldr	r0, .L961
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x2]
	add	r6, r0, #0
	cmp	r1, #0
	beq	.L946	@cond_branch
	ldrb	r0, [r2, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r5, .L961+0x4
	strb	r0, [r5]
	ldr	r2, .L961+0x8
	ldr	r1, .L961+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB9324
	b	.L952	@long jump
.LCB9324:
	ldr	r1, [r6]
	ldrb	r4, [r1, #0x3]
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	ldrb	r0, [r1, #0x6]
	lsl	r0, r0, #0x18
	orr	r4, r4, r0
	bl	BattleScriptPop
	str	r4, [r6]
	ldrb	r0, [r5]
	bl	GetBattlerSide
	ldr	r1, .L961+0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r1
	ldrh	r2, [r0]
	ldr	r1, .L961+0x14
	and	r1, r1, r2
	strh	r1, [r0]
	b	.L949
.L962:
	.align	2, 0
.L961:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gHitMarker
	.word	gBitTable
	.word	gSideStatuses
	.word	0xfdff
.L946:
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0x1
	bne	.L950	@cond_branch
	ldr	r1, .L963
	ldr	r0, .L963+0x4
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r0, .L963+0x8
	ldrb	r0, [r0]
	mov	r9, r0
	ldr	r4, .L963+0xc
	b	.L960
.L964:
	.align	2, 0
.L963:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	BattleScript_FaintAttacker
.L950:
	ldr	r1, .L965
	ldr	r0, .L965+0x4
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r0, .L965+0x8
	ldrb	r0, [r0]
	mov	r9, r0
	ldr	r4, .L965+0xc
.L960:
	mov	r8, r1
	ldr	r0, .L965+0x10
	ldrb	r1, [r0]
	ldr	r2, .L965+0x14
	mov	r7, r8
	ldrb	r3, [r7]
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r2, [r0]
	and	r1, r1, r2
	cmp	r1, #0
	beq	.LCB9416
	b	.L952	@long jump
.LCB9416:
	ldr	r1, .L965+0x18
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.LCB9425
	b	.L952	@long jump
.LCB9425:
	ldr	r5, .L965+0x1c
	lsl	r1, r2, #0x1c
	ldr	r0, [r5]
	orr	r0, r0, r1
	str	r0, [r5]
	ldr	r0, [r6]
	add	r0, r0, #0x7
	bl	BattleScriptPush
	str	r4, [r6]
	ldrb	r0, [r7]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L953	@cond_branch
	ldr	r0, .L965+0x20
	bl	ZeroMonData
	ldr	r0, [r5]
	mov	r1, #0x80
	lsl	r1, r1, #0xf
	orr	r0, r0, r1
	str	r0, [r5]
	ldr	r1, .L965+0x24
	ldrb	r0, [r1]
	cmp	r0, #0xfe
	bhi	.L954	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1]
.L954:
	ldrb	r0, [r7]
	bl	AdjustFriendshipOnBattleFaint
	b	.L955
.L966:
	.align	2, 0
.L965:
	.word	gActiveBattler
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	BattleScript_FaintTarget
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattleMons
	.word	gHitMarker
	.word	gPlayerParty
	.word	gBattleResults
.L953:
	ldr	r4, .L967
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0xfe
	bhi	.L956	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r4, #0x1]
.L956:
	ldr	r1, .L967+0x4
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L967+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	strh	r0, [r4, #0x20]
.L955:
	ldr	r2, .L967+0xc
	ldr	r1, [r2]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L957	@cond_branch
	ldr	r6, .L967+0x10
	ldr	r0, .L967+0x14
	ldrb	r0, [r0]
	mov	r5, #0x58
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L957	@cond_branch
	mov	r0, #0x41
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r2]
	ldr	r4, .L967+0x18
	ldr	r0, [r4]
	bl	BattleScriptPush
	ldr	r1, .L967+0x1c
	mov	r0, r9
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r0, [r0, #0x28]
	str	r0, [r1]
	ldr	r0, .L967+0x20
	str	r0, [r4]
.L957:
	ldr	r1, .L967+0x24
	ldr	r6, .L967+0x28
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB9556
	b	.L949	@long jump
.LCB9556:
	ldr	r0, .L967+0xc
	ldr	r5, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	and	r5, r5, r0
	cmp	r5, #0
	beq	.LCB9563
	b	.L949	@long jump
.LCB9563:
	ldr	r3, .L967+0x14
	mov	r8, r3
	ldrb	r0, [r3]
	bl	GetBattlerSide
	add	r4, r0, #0
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	beq	.L949	@cond_branch
	ldr	r0, .L967+0x10
	mov	r9, r0
	mov	r2, r8
	ldrb	r1, [r2]
	mov	r7, #0x58
	mov	r2, r1
	mul	r2, r2, r7
	add	r0, r2, r0
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L949	@cond_branch
	ldr	r0, .L967+0x2c
	ldrh	r0, [r0]
	cmp	r0, #0xa5
	beq	.L949	@cond_branch
	ldr	r0, .L967+0x30
	ldr	r0, [r0]
	add	r0, r1, r0
	add	r0, r0, #0x80
	ldrb	r4, [r0]
	add	r0, r4, r2
	mov	r6, r9
	add	r6, r6, #0x24
	add	r0, r0, r6
	strb	r5, [r0]
	ldr	r5, .L967+0x18
	ldr	r0, [r5]
	bl	BattleScriptPush
	ldr	r0, .L967+0x34
	str	r0, [r5]
	ldr	r5, .L967+0x38
	mov	r3, r8
	ldrb	r0, [r3]
	strb	r0, [r5]
	add	r1, r4, #0
	add	r1, r1, #0x9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r0, [r5]
	mul	r0, r0, r7
	add	r0, r0, r6
	add	r0, r0, r4
	str	r0, [sp]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L967+0x3c
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	lsl	r4, r4, #0x1
	mov	r2, r8
	ldrb	r0, [r2]
	mul	r0, r0, r7
	add	r0, r4, r0
	mov	r2, r9
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	mov	r3, r8
	ldrb	r0, [r3]
	mul	r0, r0, r7
	add	r4, r4, r0
	add	r4, r4, r2
	ldrh	r0, [r4]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	b	.L949
.L968:
	.align	2, 0
.L967:
	.word	gBattleResults
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gHitMarker
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	gBattleMoveDamage
	.word	BattleScript_DestinyBondTakesLife
	.word	gStatuses3
	.word	gBattlerTarget
	.word	gCurrentMove
	.word	gBattleStruct
	.word	BattleScript_GrudgeTakesPp
	.word	gActiveBattler
	.word	gBattleTextBuff1
.L952:
	ldr	r0, [r6]
	add	r0, r0, #0x7
	str	r0, [r6]
.L949:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 atk19_tryfaintmon,.Lfe39-atk19_tryfaintmon
	.align	2, 0
	.type	 atk1A_dofaintanimation,function
	.thumb_func
atk1A_dofaintanimation:
	push	{r4, r5, lr}
	ldr	r0, .L971
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L970	@cond_branch
	ldr	r5, .L971+0x4
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L971+0x8
	strb	r0, [r4]
	mov	r0, #0x0
	bl	BtlController_EmitFaintAnimation
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
.L970:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L972:
	.align	2, 0
.L971:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.Lfe40:
	.size	 atk1A_dofaintanimation,.Lfe40-atk1A_dofaintanimation
	.align	2, 0
	.type	 atk1B_cleareffectsonfaint,function
	.thumb_func
atk1B_cleareffectsonfaint:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L977
	ldr	r5, [r0]
	cmp	r5, #0
	bne	.L974	@cond_branch
	ldr	r0, .L977+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L977+0x8
	strb	r0, [r4]
	ldr	r0, .L977+0xc
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L976	@cond_branch
	ldr	r2, .L977+0x10
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.L975	@cond_branch
.L976:
	ldr	r1, .L977+0x10
	ldrb	r0, [r4]
	mov	r2, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x4c
	add	r0, r0, r1
	str	r5, [r0]
	ldrb	r0, [r4]
	mul	r0, r0, r2
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L975:
	bl	FaintClearSetData
	ldr	r1, .L977+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L974:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L978:
	.align	2, 0
.L977:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	gBattleMons
.Lfe41:
	.size	 atk1B_cleareffectsonfaint,.Lfe41-atk1B_cleareffectsonfaint
	.align	2, 0
	.type	 atk1C_jumpifstatus,function
	.thumb_func
atk1C_jumpifstatus:
	push	{r4, r5, lr}
	ldr	r5, .L982
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, [r5]
	ldrb	r4, [r2, #0x2]
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x8
	add	r4, r4, r1
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x10
	add	r4, r4, r1
	ldrb	r1, [r2, #0x5]
	lsl	r1, r1, #0x18
	add	r4, r4, r1
	ldrb	r3, [r2, #0x6]
	ldrb	r1, [r2, #0x7]
	lsl	r1, r1, #0x8
	add	r3, r3, r1
	ldrb	r1, [r2, #0x8]
	lsl	r1, r1, #0x10
	add	r3, r3, r1
	ldrb	r1, [r2, #0x9]
	lsl	r1, r1, #0x18
	add	r3, r3, r1
	ldr	r2, .L982+0x4
	mov	r1, #0x58
	mul	r1, r1, r0
	add	r0, r2, #0
	add	r0, r0, #0x4c
	add	r0, r1, r0
	ldr	r0, [r0]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L980	@cond_branch
	add	r0, r1, r2
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L980	@cond_branch
	str	r3, [r5]
	b	.L981
.L983:
	.align	2, 0
.L982:
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
.L980:
	ldr	r1, .L984
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
.L981:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L985:
	.align	2, 0
.L984:
	.word	gBattlescriptCurrInstr
.Lfe42:
	.size	 atk1C_jumpifstatus,.Lfe42-atk1C_jumpifstatus
	.align	2, 0
	.type	 atk1D_jumpifstatus2,function
	.thumb_func
atk1D_jumpifstatus2:
	push	{r4, r5, lr}
	ldr	r5, .L989
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, [r5]
	ldrb	r4, [r2, #0x2]
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x8
	add	r4, r4, r1
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x10
	add	r4, r4, r1
	ldrb	r1, [r2, #0x5]
	lsl	r1, r1, #0x18
	add	r4, r4, r1
	ldrb	r3, [r2, #0x6]
	ldrb	r1, [r2, #0x7]
	lsl	r1, r1, #0x8
	add	r3, r3, r1
	ldrb	r1, [r2, #0x8]
	lsl	r1, r1, #0x10
	add	r3, r3, r1
	ldrb	r1, [r2, #0x9]
	lsl	r1, r1, #0x18
	add	r3, r3, r1
	ldr	r2, .L989+0x4
	mov	r1, #0x58
	mul	r1, r1, r0
	add	r0, r2, #0
	add	r0, r0, #0x50
	add	r0, r1, r0
	ldr	r0, [r0]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L987	@cond_branch
	add	r0, r1, r2
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L987	@cond_branch
	str	r3, [r5]
	b	.L988
.L990:
	.align	2, 0
.L989:
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
.L987:
	ldr	r1, .L991
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
.L988:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L992:
	.align	2, 0
.L991:
	.word	gBattlescriptCurrInstr
.Lfe43:
	.size	 atk1D_jumpifstatus2,.Lfe43-atk1D_jumpifstatus2
	.align	2, 0
	.type	 atk1E_jumpifability,function
	.thumb_func
atk1E_jumpifability:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	ldr	r6, .L1005
	ldr	r2, [r6]
	ldrb	r5, [r2, #0x2]
	mov	r8, r5
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	add	r7, r1, r0
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0x8
	bne	.L994	@cond_branch
	ldr	r0, .L1005+0x4
	ldrb	r1, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0xd
	add	r2, r5, #0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.L1002	@cond_branch
	ldr	r1, .L1005+0x8
	strb	r5, [r1]
	str	r7, [r6]
	sub	r4, r4, #0x1
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	b	.L1004
.L1006:
	.align	2, 0
.L1005:
	.word	gBattlescriptCurrInstr
	.word	gBattlerAttacker
	.word	gLastUsedAbility
.L994:
	cmp	r0, #0x9
	bne	.L998	@cond_branch
	ldr	r0, .L1007
	ldrb	r1, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0xc
	add	r2, r5, #0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.L1002	@cond_branch
	ldr	r1, .L1007+0x4
	strb	r5, [r1]
	str	r7, [r6]
	sub	r4, r4, #0x1
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	b	.L1004
.L1008:
	.align	2, 0
.L1007:
	.word	gBattlerAttacker
	.word	gLastUsedAbility
.L998:
	ldrb	r0, [r2, #0x1]
	bl	GetBattlerForBattleScript
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L1009
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r1, [r0]
	cmp	r1, r8
	bne	.L1002	@cond_branch
	ldr	r0, .L1009+0x4
	strb	r1, [r0]
	str	r7, [r6]
	ldrb	r1, [r0]
	add	r0, r4, #0
.L1004:
	bl	RecordAbilityBattle
	ldr	r0, .L1009+0x8
	strb	r4, [r0, #0x15]
	b	.L997
.L1010:
	.align	2, 0
.L1009:
	.word	gBattleMons
	.word	gLastUsedAbility
	.word	gBattleScripting
.L1002:
	ldr	r0, [r6]
	add	r0, r0, #0x7
	str	r0, [r6]
.L997:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 atk1E_jumpifability,.Lfe44-atk1E_jumpifability
	.align	2, 0
	.type	 atk1F_jumpifsideaffecting,function
	.thumb_func
atk1F_jumpifsideaffecting:
	push	{r4, r5, r6, lr}
	ldr	r0, .L1017
	ldr	r0, [r0]
	ldrb	r4, [r0, #0x1]
	cmp	r4, #0x1
	bne	.L1012	@cond_branch
	ldr	r0, .L1017+0x4
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	b	.L1016
.L1018:
	.align	2, 0
.L1017:
	.word	gBattlescriptCurrInstr
	.word	gBattlerAttacker
.L1012:
	ldr	r0, .L1019
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	mov	r4, #0x1
.L1016:
	and	r4, r4, r0
	ldr	r6, .L1019+0x4
	ldr	r3, [r6]
	ldrb	r2, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r1, [r3, #0x4]
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x18
	add	r5, r1, r0
	ldr	r1, .L1019+0x8
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L1014	@cond_branch
	str	r5, [r6]
	b	.L1015
.L1020:
	.align	2, 0
.L1019:
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	gSideStatuses
.L1014:
	add	r0, r3, #0
	add	r0, r0, #0x8
	str	r0, [r6]
.L1015:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 atk1F_jumpifsideaffecting,.Lfe45-atk1F_jumpifsideaffecting
	.align	2, 0
	.type	 atk20_jumpifstat,function
	.thumb_func
atk20_jumpifstat:
	push	{r4, r5, lr}
	mov	r5, #0x0
	ldr	r4, .L1040
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1040+0x4
	ldr	r3, [r4]
	mov	r1, #0x58
	mul	r0, r0, r1
	ldrb	r1, [r3, #0x3]
	add	r0, r0, r1
	add	r2, r2, #0x18
	add	r0, r0, r2
	ldrb	r2, [r0]
	ldrb	r0, [r3, #0x2]
	cmp	r0, #0x5
	bhi	.L1022	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L1040+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1041:
	.align	2, 0
.L1040:
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
	.word	.L1035
	.align	2, 0
	.align	2, 0
.L1035:
	.word	.L1023
	.word	.L1025
	.word	.L1027
	.word	.L1029
	.word	.L1031
	.word	.L1033
.L1023:
	ldr	r0, .L1042
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	cmp	r2, r0
	bne	.L1022	@cond_branch
	b	.L1039
.L1043:
	.align	2, 0
.L1042:
	.word	gBattlescriptCurrInstr
.L1025:
	ldr	r0, .L1044
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	cmp	r2, r0
	beq	.L1022	@cond_branch
	b	.L1039
.L1045:
	.align	2, 0
.L1044:
	.word	gBattlescriptCurrInstr
.L1027:
	ldr	r0, .L1046
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	cmp	r2, r0
	bls	.L1022	@cond_branch
	b	.L1039
.L1047:
	.align	2, 0
.L1046:
	.word	gBattlescriptCurrInstr
.L1029:
	ldr	r0, .L1048
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	cmp	r2, r0
	bcs	.L1022	@cond_branch
	b	.L1039
.L1049:
	.align	2, 0
.L1048:
	.word	gBattlescriptCurrInstr
.L1031:
	ldr	r0, .L1050
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L1022	@cond_branch
	b	.L1039
.L1051:
	.align	2, 0
.L1050:
	.word	gBattlescriptCurrInstr
.L1033:
	ldr	r0, .L1052
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L1022	@cond_branch
.L1039:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L1022:
	cmp	r5, #0
	beq	.L1037	@cond_branch
	ldr	r3, .L1052
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	str	r1, [r3]
	b	.L1038
.L1053:
	.align	2, 0
.L1052:
	.word	gBattlescriptCurrInstr
.L1037:
	ldr	r1, .L1054
	ldr	r0, [r1]
	add	r0, r0, #0x9
	str	r0, [r1]
.L1038:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1055:
	.align	2, 0
.L1054:
	.word	gBattlescriptCurrInstr
.Lfe46:
	.size	 atk20_jumpifstat,.Lfe46-atk20_jumpifstat
	.align	2, 0
	.type	 atk21_jumpifstatus3condition,function
	.thumb_func
atk21_jumpifstatus3condition:
	push	{r4, r5, r6, lr}
	ldr	r4, .L1064
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r5, .L1064+0x4
	strb	r0, [r5]
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	add	r6, r1, r0
	ldrb	r1, [r2, #0x7]
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0xa]
	lsl	r0, r0, #0x18
	add	r3, r1, r0
	ldrb	r0, [r2, #0x6]
	cmp	r0, #0
	beq	.L1057	@cond_branch
	ldr	r0, .L1064+0x8
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L1061	@cond_branch
	b	.L1063
.L1065:
	.align	2, 0
.L1064:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gStatuses3
.L1057:
	ldr	r0, .L1066
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L1061	@cond_branch
.L1063:
	str	r3, [r4]
	b	.L1060
.L1067:
	.align	2, 0
.L1066:
	.word	gStatuses3
.L1061:
	add	r0, r2, #0
	add	r0, r0, #0xb
	str	r0, [r4]
.L1060:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe47:
	.size	 atk21_jumpifstatus3condition,.Lfe47-atk21_jumpifstatus3condition
	.align	2, 0
	.type	 atk22_jumpiftype,function
	.thumb_func
atk22_jumpiftype:
	push	{r4, r5, r6, lr}
	ldr	r4, .L1072
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, [r4]
	ldrb	r5, [r3, #0x2]
	ldrb	r2, [r3, #0x3]
	ldrb	r1, [r3, #0x4]
	lsl	r1, r1, #0x8
	add	r2, r2, r1
	ldrb	r1, [r3, #0x5]
	lsl	r1, r1, #0x10
	add	r2, r2, r1
	ldrb	r1, [r3, #0x6]
	lsl	r1, r1, #0x18
	add	r6, r2, r1
	ldr	r2, .L1072+0x4
	mov	r1, #0x58
	mul	r0, r0, r1
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, r5
	beq	.L1070	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, r5
	bne	.L1069	@cond_branch
.L1070:
	str	r6, [r4]
	b	.L1071
.L1073:
	.align	2, 0
.L1072:
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
.L1069:
	add	r0, r3, #0x7
	str	r0, [r4]
.L1071:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 atk22_jumpiftype,.Lfe48-atk22_jumpiftype
	.align	2, 0
	.type	 atk23_getexp,function
	.thumb_func
atk23_getexp:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r6, #0x0
	ldr	r0, .L1144
	ldr	r0, [r0]
	add	r0, r0, #0x50
	mov	r9, r0
	ldr	r0, .L1144+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r1, .L1144+0x8
	strb	r0, [r1]
	ldr	r2, .L1144+0xc
	mov	r1, #0x2
	and	r1, r1, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x19
	add	r1, r1, r2
	ldrb	r1, [r1]
	mov	r8, r1
	ldr	r0, .L1144+0x10
	ldrb	r0, [r0, #0x1c]
	cmp	r0, #0x6
	bls	.LCB10589
	bl	.L1075	@far jump
.LCB10589:
	lsl	r0, r0, #0x2
	ldr	r1, .L1144+0x14
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1145:
	.align	2, 0
.L1144:
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
	.word	gBattlerFainted
	.word	gSentPokesToOpponent
	.word	gBattleScripting
	.word	.L1139
	.align	2, 0
	.align	2, 0
.L1139:
	.word	.L1076
	.word	.L1080
	.word	.L1097
	.word	.L1122
	.word	.L1125
	.word	.L1132
	.word	.L1137
.L1076:
	ldr	r4, .L1146
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.LCB10621
	bl	.L1135	@far jump
.LCB10621:
	ldr	r0, .L1146+0x4
	ldr	r0, [r0]
	ldr	r1, .L1146+0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB10627
	bl	.L1135	@far jump
.LCB10627:
	ldr	r1, .L1146+0xc
	ldrb	r0, [r1, #0x1c]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1c]
	ldr	r0, .L1146+0x10
	ldr	r2, [r0]
	add	r2, r2, #0xdf
	ldr	r3, .L1146+0x14
	ldr	r1, .L1146+0x18
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	bl	.L1075	@ far jump
.L1147:
	.align	2, 0
.L1146:
	.word	gBattlerFainted
	.word	gBattleTypeFlags
	.word	0x63f0982
	.word	gBattleScripting
	.word	gBattleStruct
	.word	gBitTable
	.word	gBattlerPartyIndexes
.L1080:
	mov	r5, #0x0
	mov	r7, #0x0
.L1084:
	mov	r0, #0x64
	mov	r1, r7
	mul	r1, r1, r0
	ldr	r0, .L1148
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1083	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L1083	@cond_branch
	ldr	r0, .L1148+0x4
	lsl	r1, r7, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	mov	r1, r8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1087	@cond_branch
	add	r5, r5, #0x1
.L1087:
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xaf
	bne	.L1088	@cond_branch
	ldr	r0, .L1148+0x8
	ldr	r0, [r0]
	ldr	r2, .L1148+0xc
	add	r0, r0, r2
	ldrb	r4, [r0]
	b	.L1089
.L1149:
	.align	2, 0
.L1148:
	.word	gPlayerParty
	.word	gBitTable
	.word	gSaveBlock1Ptr
	.word	0x3226
.L1088:
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L1089:
	cmp	r4, #0x19
	bne	.L1083	@cond_branch
	add	r6, r6, #0x1
.L1083:
	add	r7, r7, #0x1
	cmp	r7, #0x5
	ble	.L1084	@cond_branch
	ldr	r3, .L1150
	ldr	r2, .L1150+0x4
	ldr	r0, .L1150+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r2, [r1]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r2, [r0, #0x9]
	add	r1, r1, #0x2a
	ldrb	r0, [r1]
	mul	r0, r0, r2
	mov	r1, #0x7
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r6, #0
	beq	.L1092	@cond_branch
	lsr	r4, r0, #0x11
	add	r0, r4, #0
	add	r1, r5, #0
	bl	__divsi3
	mov	r1, r9
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1093	@cond_branch
	mov	r0, #0x1
	strh	r0, [r1]
.L1093:
	ldr	r5, .L1150+0xc
	add	r0, r4, #0
	add	r1, r6, #0
	bl	__divsi3
	strh	r0, [r5]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1095	@cond_branch
	mov	r0, #0x1
	strh	r0, [r5]
	b	.L1095
.L1151:
	.align	2, 0
.L1150:
	.word	gBaseStats
	.word	gBattleMons
	.word	gBattlerFainted
	.word	gExpShareExp
.L1092:
	add	r0, r1, #0
	add	r1, r5, #0
	bl	__divsi3
	mov	r2, r9
	strh	r0, [r2]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1096	@cond_branch
	mov	r0, #0x1
	strh	r0, [r2]
.L1096:
	ldr	r0, .L1152
	strh	r6, [r0]
.L1095:
	ldr	r1, .L1152+0x4
	ldrb	r0, [r1, #0x1c]
	add	r0, r0, #0x1
	mov	r2, #0x0
	strb	r0, [r1, #0x1c]
	ldr	r1, .L1152+0x8
	ldr	r0, [r1]
	strb	r2, [r0, #0x10]
	ldr	r0, [r1]
	add	r0, r0, #0x53
	mov	r4, r8
	strb	r4, [r0]
.L1097:
	ldr	r0, .L1152+0xc
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB10843
	b	.L1075	@long jump
.LCB10843:
	ldr	r0, .L1152+0x8
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1152+0x10
	add	r0, r0, r1
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xaf
	bne	.L1099	@cond_branch
	ldr	r0, .L1152+0x14
	ldr	r0, [r0]
	ldr	r1, .L1152+0x18
	add	r0, r0, r1
	ldrb	r4, [r0]
	b	.L1100
.L1153:
	.align	2, 0
.L1152:
	.word	gExpShareExp
	.word	gBattleScripting
	.word	gBattleStruct
	.word	gBattleControllerExecFlags
	.word	gPlayerParty
	.word	gSaveBlock1Ptr
	.word	0x3226
.L1099:
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L1100:
	ldr	r5, .L1154
	cmp	r4, #0x19
	beq	.L1101	@cond_branch
	ldr	r0, [r5]
	add	r1, r0, #0
	add	r1, r1, #0x53
	ldrb	r0, [r1]
	mov	r2, #0x1
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L1101	@cond_branch
	lsr	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L1154+0x4
	b	.L1141
.L1155:
	.align	2, 0
.L1154:
	.word	gBattleStruct
	.word	gBattleScripting
.L1101:
	ldr	r0, [r5]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1156
	add	r0, r0, r1
	mov	r1, #0x38
	bl	GetMonData
	cmp	r0, #0x64
	bne	.L1103	@cond_branch
	ldr	r1, [r5]
	add	r1, r1, #0x53
	ldrb	r0, [r1]
	lsr	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L1156+0x4
	mov	r2, #0x0
.L1141:
	mov	r0, #0x5
	strb	r0, [r1, #0x1c]
	ldr	r0, .L1156+0x8
	str	r2, [r0]
	b	.L1075
.L1157:
	.align	2, 0
.L1156:
	.word	gPlayerParty
	.word	gBattleScripting
	.word	gBattleMoveDamage
.L1103:
	ldr	r0, .L1158
	ldr	r0, [r0]
	mov	r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1105	@cond_branch
	ldr	r0, .L1158+0x4
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L1105	@cond_branch
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x12]
	cmp	r0, #0
	bne	.L1105	@cond_branch
	bl	BattleStopLowHpSound
	ldr	r0, .L1158+0x8
	bl	PlayBGM
	ldr	r1, [r5]
	ldrb	r0, [r1, #0x12]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x12]
.L1105:
	ldr	r5, .L1158+0xc
	ldr	r0, [r5]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1158+0x10
	add	r0, r0, r1
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	bne	.LCB10996
	b	.L1106	@long jump
.LCB10996:
	ldr	r0, [r5]
	add	r0, r0, #0x53
	ldrb	r0, [r0]
	mov	r3, #0x1
	and	r3, r3, r0
	cmp	r3, #0
	beq	.L1107	@cond_branch
	ldr	r1, .L1158+0x14
	mov	r2, r9
	ldrh	r0, [r2]
	str	r0, [r1]
	mov	r9, r1
	b	.L1108
.L1159:
	.align	2, 0
.L1158:
	.word	gBattleTypeFlags
	.word	gBattleMons
	.word	0x161
	.word	gBattleStruct
	.word	gPlayerParty
	.word	gBattleMoveDamage
.L1107:
	ldr	r0, .L1160
	str	r3, [r0]
	mov	r9, r0
.L1108:
	cmp	r4, #0x19
	bne	.L1109	@cond_branch
	ldr	r0, .L1160+0x4
	ldrh	r1, [r0]
	mov	r2, r9
	ldr	r0, [r2]
	add	r0, r0, r1
	str	r0, [r2]
.L1109:
	cmp	r4, #0x28
	bne	.L1110	@cond_branch
	mov	r4, r9
	ldr	r1, [r4]
	mov	r0, #0x96
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
.L1110:
	ldr	r5, .L1160+0x8
	ldr	r0, [r5]
	mov	r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1111	@cond_branch
	ldr	r4, .L1160
	ldr	r1, [r4]
	mov	r0, #0x96
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
.L1111:
	ldr	r4, .L1160+0xc
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1160+0x10
	add	r0, r0, r1
	bl	IsTradedMon
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1112	@cond_branch
	ldr	r0, [r5]
	mov	r1, #0x80
	lsl	r1, r1, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1113	@cond_branch
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0x2
	bls	.L1113	@cond_branch
	ldr	r7, .L1160+0x14
	ldr	r0, .L1160
	mov	r9, r0
	b	.L1115
.L1161:
	.align	2, 0
.L1160:
	.word	gBattleMoveDamage
	.word	gExpShareExp
	.word	gBattleTypeFlags
	.word	gBattleStruct
	.word	gPlayerParty
	.word	0x149
.L1113:
	ldr	r4, .L1162
	ldr	r1, [r4]
	mov	r0, #0x96
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
	mov	r7, #0xa5
	lsl	r7, r7, #0x1
	mov	r9, r4
	b	.L1115
.L1163:
	.align	2, 0
.L1162:
	.word	gBattleMoveDamage
.L1112:
	ldr	r7, .L1164
	ldr	r1, .L1164+0x4
	mov	r9, r1
.L1115:
	ldr	r0, .L1164+0x8
	ldr	r1, [r0]
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1116	@cond_branch
	ldr	r0, .L1164+0xc
	ldr	r1, .L1164+0x10
	ldr	r4, [r1]
	ldrh	r0, [r0, #0x4]
	add	r5, r1, #0
	ldr	r3, .L1164+0x14
	ldr	r2, .L1164+0x18
	ldrb	r1, [r4, #0x10]
	cmp	r0, r1
	bne	.L1117	@cond_branch
	ldrb	r1, [r2]
	ldr	r0, [r3, #0x8]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1117	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x8f
	mov	r0, #0x2
	strb	r0, [r1]
	b	.L1121
.L1165:
	.align	2, 0
.L1164:
	.word	0x149
	.word	gBattleMoveDamage
	.word	gBattleTypeFlags
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gBitTable
	.word	gAbsentBattlerFlags
.L1117:
	ldrb	r2, [r2]
	ldr	r0, [r3]
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L1119	@cond_branch
	ldr	r0, [r5]
	add	r0, r0, #0x8f
	strb	r2, [r0]
	b	.L1121
.L1119:
	ldr	r0, [r5]
	add	r0, r0, #0x8f
	mov	r1, #0x2
	b	.L1142
.L1116:
	ldr	r0, .L1166
	ldr	r0, [r0]
	add	r0, r0, #0x8f
.L1142:
	strb	r1, [r0]
.L1121:
	ldr	r1, .L1166+0x4
	mov	r2, #0x0
	mov	ip, r2
	mov	r3, #0xfd
	strb	r3, [r1]
	mov	r5, #0x4
	strb	r5, [r1, #0x1]
	ldr	r6, .L1166
	ldr	r2, [r6]
	mov	r4, #0x8f
	add	r4, r4, r2
	mov	r8, r4
	ldrb	r0, [r4]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r2, #0x10]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L1166+0x8
	strb	r3, [r1]
	mov	r0, ip
	strb	r0, [r1, #0x1]
	strb	r7, [r1, #0x2]
	mov	r4, #0xff
	lsl	r4, r4, #0x8
	and	r7, r7, r4
	asr	r0, r7, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r1, #0x4]
	ldr	r1, .L1166+0xc
	strb	r3, [r1]
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	strb	r5, [r1, #0x2]
	mov	r0, #0x5
	strb	r0, [r1, #0x3]
	mov	r0, r9
	ldr	r2, [r0]
	strb	r2, [r1, #0x4]
	add	r0, r2, #0
	and	r0, r0, r4
	asr	r0, r0, #0x8
	strb	r0, [r1, #0x5]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r2
	asr	r0, r0, #0x10
	strb	r0, [r1, #0x6]
	lsr	r2, r2, #0x18
	strb	r2, [r1, #0x7]
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r1, #0x8]
	mov	r2, r8
	ldrb	r1, [r2]
	mov	r0, #0xd
	bl	PrepareStringBattle
	ldr	r0, [r6]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1166+0x10
	add	r0, r0, r1
	ldr	r3, .L1166+0x14
	ldr	r1, .L1166+0x18
	ldrb	r2, [r1]
	mov	r1, #0x58
	mul	r1, r1, r2
	add	r1, r1, r3
	ldrh	r1, [r1]
	bl	MonGainEVs
.L1106:
	ldr	r0, .L1166
	ldr	r1, [r0]
	add	r1, r1, #0x53
	ldrb	r0, [r1]
	lsr	r0, r0, #0x1
	strb	r0, [r1]
	b	.L1124
.L1167:
	.align	2, 0
.L1166:
	.word	gBattleStruct
	.word	gBattleTextBuff1
	.word	gBattleTextBuff2
	.word	gBattleTextBuff3
	.word	gPlayerParty
	.word	gBattleMons
	.word	gBattlerFainted
.L1122:
	ldr	r0, .L1168
	ldr	r2, [r0]
	cmp	r2, #0
	beq	.LCB11335
	b	.L1075	@long jump
.LCB11335:
	ldr	r1, .L1168+0x4
	ldr	r7, .L1168+0x8
	ldr	r0, [r7]
	add	r0, r0, #0x8f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r0, r0, r1
	strb	r2, [r0]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L1168+0xc
	add	r0, r0, r5
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L1124	@cond_branch
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x38
	bl	GetMonData
	cmp	r0, #0x64
	beq	.L1124	@cond_branch
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x3a
	bl	GetMonData
	ldr	r4, .L1168+0x10
	ldr	r1, [r4]
	ldr	r1, [r1, #0x10]
	strh	r0, [r1]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x3b
	bl	GetMonData
	ldr	r1, [r4]
	ldr	r1, [r1, #0x10]
	strh	r0, [r1, #0x2]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x3c
	bl	GetMonData
	ldr	r1, [r4]
	ldr	r1, [r1, #0x10]
	strh	r0, [r1, #0x4]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x3d
	bl	GetMonData
	ldr	r1, [r4]
	ldr	r1, [r1, #0x10]
	strh	r0, [r1, #0x6]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x3e
	bl	GetMonData
	ldr	r1, [r4]
	ldr	r1, [r1, #0x10]
	strh	r0, [r1, #0x8]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x3f
	bl	GetMonData
	ldr	r1, [r4]
	ldr	r1, [r1, #0x10]
	strh	r0, [r1, #0xa]
	ldr	r4, .L1168+0x14
	ldr	r1, [r7]
	add	r0, r1, #0
	add	r0, r0, #0x8f
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldrb	r1, [r1, #0x10]
	ldr	r0, .L1168+0x18
	ldrh	r2, [r0]
	mov	r0, #0x0
	bl	BtlController_EmitExpUpdate
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L1124:
	ldr	r1, .L1168+0x1c
	ldrb	r0, [r1, #0x1c]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1c]
	b	.L1075
.L1169:
	.align	2, 0
.L1168:
	.word	gBattleControllerExecFlags
	.word	gBattleBufferB
	.word	gBattleStruct
	.word	gPlayerParty
	.word	gBattleResources
	.word	gActiveBattler
	.word	gBattleMoveDamage
	.word	gBattleScripting
.L1125:
	ldr	r0, .L1170
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB11479
	b	.L1075	@long jump
.LCB11479:
	ldr	r1, .L1170+0x4
	ldr	r0, .L1170+0x8
	ldr	r4, [r0]
	add	r0, r4, #0
	add	r0, r0, #0x8f
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r3, .L1170+0xc
	ldrb	r2, [r1]
	lsl	r1, r2, #0x9
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, #0x21
	beq	.LCB11496
	b	.L1127	@long jump
.LCB11496:
	add	r0, r3, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	cmp	r0, #0xb
	beq	.LCB11503
	b	.L1127	@long jump
.LCB11503:
	ldr	r0, .L1170+0x10
	ldr	r0, [r0]
	mov	r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1128	@cond_branch
	ldr	r0, .L1170+0x14
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldrb	r4, [r4, #0x10]
	cmp	r0, r4
	bne	.L1128	@cond_branch
	add	r1, r0, #0
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1170+0x18
	add	r0, r0, r1
	add	r1, r2, #0
	bl	HandleLowHpMusicChange
.L1128:
	ldr	r1, .L1170+0x1c
	mov	r3, #0xfd
	strb	r3, [r1]
	mov	r0, #0x4
	strb	r0, [r1, #0x1]
	ldr	r6, .L1170+0x4
	ldrb	r0, [r6]
	strb	r0, [r1, #0x2]
	ldr	r4, .L1170+0x8
	mov	r9, r4
	ldr	r2, [r4]
	ldrb	r0, [r2, #0x10]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r4, .L1170+0x20
	strb	r3, [r4]
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	strb	r0, [r4, #0x2]
	mov	r0, #0x3
	strb	r0, [r4, #0x3]
	ldrb	r0, [r2, #0x10]
	mov	r1, #0x64
	mov	r8, r1
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	ldr	r7, .L1170+0x18
	add	r0, r0, r7
	mov	r1, #0x38
	bl	GetMonData
	strb	r0, [r4, #0x4]
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r4, #0x5]
	bl	BattleScriptPushCursor
	ldr	r2, .L1170+0x24
	ldr	r1, .L1170+0x28
	mov	r4, r9
	ldr	r5, [r4]
	ldrb	r0, [r5, #0x10]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L1170+0x2c
	ldr	r0, .L1170+0x30
	str	r0, [r1]
	ldr	r4, .L1170+0x34
	ldr	r2, .L1170+0xc
	ldrb	r1, [r6]
	lsl	r1, r1, #0x9
	add	r0, r2, #0x2
	add	r0, r1, r0
	ldrb	r3, [r0]
	add	r2, r2, #0x3
	add	r1, r1, r2
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	str	r3, [r4]
	ldrb	r0, [r5, #0x10]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r7
	mov	r1, #0x0
	bl	AdjustFriendship
	ldr	r1, .L1170+0x14
	mov	r2, r9
	ldr	r0, [r2]
	ldrb	r2, [r0, #0x10]
	ldrh	r0, [r1]
	cmp	r0, r2
	bne	.L1129	@cond_branch
	ldr	r4, .L1170+0x38
	ldrh	r0, [r4, #0x28]
	cmp	r0, #0
	beq	.L1129	@cond_branch
	mov	r0, r8
	mul	r0, r0, r2
	add	r0, r0, r7
	mov	r1, #0x38
	bl	GetMonData
	add	r1, r4, #0
	add	r1, r1, #0x2a
	strb	r0, [r1]
	mov	r1, r9
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x10]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r7
	mov	r1, #0x39
	bl	GetMonData
	strh	r0, [r4, #0x28]
	mov	r1, r9
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x10]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r7
	mov	r1, #0x3a
	bl	GetMonData
	strh	r0, [r4, #0x2c]
	mov	r1, r9
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x10]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r7
	mov	r1, #0x3b
	bl	GetMonData
	strh	r0, [r4, #0x2]
	mov	r1, r9
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x10]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r7
	mov	r1, #0x3c
	bl	GetMonData
	strh	r0, [r4, #0x4]
	mov	r1, r9
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x10]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r7
	mov	r1, #0x3d
	bl	GetMonData
	strh	r0, [r4, #0x6]
	mov	r1, r9
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x10]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r7
	mov	r1, #0x3d
	bl	GetMonData
	strh	r0, [r4, #0x6]
	mov	r1, r9
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x10]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r7
	mov	r1, #0x3e
	bl	GetMonData
	strh	r0, [r4, #0x8]
	mov	r1, r9
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x10]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r7
	mov	r1, #0x3f
	bl	GetMonData
	strh	r0, [r4, #0xa]
.L1129:
	ldr	r0, .L1170+0x14
	ldr	r7, .L1170+0x8
	ldr	r1, [r7]
	ldrb	r2, [r1, #0x10]
	ldrh	r0, [r0, #0x4]
	cmp	r0, r2
	beq	.LCB11740
	b	.L1143	@long jump
.LCB11740:
	ldr	r6, .L1170+0x38
	mov	r4, #0xd8
	add	r4, r4, r6
	mov	r8, r4
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L1143	@cond_branch
	ldr	r0, .L1170+0x10
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1143	@cond_branch
	mov	r5, #0x64
	mov	r0, r2
	mul	r0, r0, r5
	ldr	r4, .L1170+0x18
	add	r0, r0, r4
	mov	r1, #0x38
	bl	GetMonData
	add	r1, r6, #0
	add	r1, r1, #0xda
	strb	r0, [r1]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x39
	bl	GetMonData
	mov	r1, r8
	strh	r0, [r1]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x3a
	bl	GetMonData
	add	r1, r6, #0
	add	r1, r1, #0xdc
	strh	r0, [r1]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x3b
	bl	GetMonData
	add	r1, r6, #0
	add	r1, r1, #0xb2
	strh	r0, [r1]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x3c
	bl	GetMonData
	add	r1, r6, #0
	add	r1, r1, #0xb4
	strh	r0, [r1]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x3d
	bl	GetMonData
	mov	r2, #0xb6
	add	r2, r2, r6
	mov	r8, r2
	strh	r0, [r2]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x3d
	bl	GetMonData
	mov	r1, r8
	strh	r0, [r1]
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x3e
	bl	GetMonData
	add	r1, r6, #0
	add	r1, r1, #0xb8
	strh	r0, [r1]
	b	.L1143
.L1171:
	.align	2, 0
.L1170:
	.word	gBattleControllerExecFlags
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattleBufferB
	.word	gBattleTypeFlags
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattleTextBuff1
	.word	gBattleTextBuff2
	.word	gLeveledUpInBattle
	.word	gBitTable
	.word	gBattlescriptCurrInstr
	.word	BattleScript_LevelUp
	.word	gBattleMoveDamage
	.word	gBattleMons
.L1127:
	ldr	r1, .L1172
	mov	r0, #0x0
	str	r0, [r1]
.L1143:
	ldr	r1, .L1172+0x4
	mov	r0, #0x5
	strb	r0, [r1, #0x1c]
	b	.L1075
.L1173:
	.align	2, 0
.L1172:
	.word	gBattleMoveDamage
	.word	gBattleScripting
.L1132:
	ldr	r0, .L1174
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L1133	@cond_branch
	ldr	r1, .L1174+0x4
	mov	r0, #0x3
	strb	r0, [r1, #0x1c]
	b	.L1075
.L1175:
	.align	2, 0
.L1174:
	.word	gBattleMoveDamage
	.word	gBattleScripting
.L1133:
	ldr	r2, .L1176
	ldr	r1, [r2]
	ldrb	r0, [r1, #0x10]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x10]
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0x5
	bhi	.L1135	@cond_branch
	ldr	r1, .L1176+0x4
	mov	r0, #0x2
	strb	r0, [r1, #0x1c]
	b	.L1075
.L1177:
	.align	2, 0
.L1176:
	.word	gBattleStruct
	.word	gBattleScripting
.L1135:
	ldr	r1, .L1178
	mov	r0, #0x6
	strb	r0, [r1, #0x1c]
	b	.L1075
.L1179:
	.align	2, 0
.L1178:
	.word	gBattleScripting
.L1137:
	ldr	r0, .L1180
	ldr	r5, [r0]
	cmp	r5, #0
	bne	.L1075	@cond_branch
	ldr	r4, .L1180+0x4
	ldr	r2, .L1180+0x8
	ldrb	r0, [r2]
	mov	r1, #0x58
	mul	r0, r0, r1
	add	r0, r0, r4
	mov	r3, #0x0
	strh	r5, [r0, #0x2e]
	ldrb	r0, [r2]
	mul	r0, r0, r1
	add	r0, r0, r4
	add	r0, r0, #0x20
	strb	r3, [r0]
	ldr	r1, .L1180+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L1075:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1181:
	.align	2, 0
.L1180:
	.word	gBattleControllerExecFlags
	.word	gBattleMons
	.word	gBattlerFainted
	.word	gBattlescriptCurrInstr
.Lfe49:
	.size	 atk23_getexp,.Lfe49-atk23_getexp
	.align	2, 0
	.type	 atk24,function
	.thumb_func
atk24:
	
        .syntax unified
        push {r4-r7,lr}
        mov r7, r8
        push {r7}
        movs r6, 0
        ldr r0, =gBattleControllerExecFlags
        ldr r0, [r0]
        cmp r0, 0
        beq _0804ACE2
        b _0804AF22
    _0804ACE2:
        ldr r0, =gBattleTypeFlags
        ldr r0, [r0]
        movs r1, 0x80
        lsls r1, 15
        ands r0, r1
        cmp r0, 0
        beq _0804AD48
        ldr r0, =gPartnerTrainerId
        ldrh r1, [r0]
        ldr r0, =0x00000c03
        cmp r1, r0
        bne _0804AD48
        movs r5, 0
    _0804ACFC:
        movs r0, 0x64
        adds r1, r5, 0
        muls r1, r0
        ldr r0, =gPlayerParty
        adds r4, r1, r0
        adds r0, r4, 0
        movs r1, 0xB
        bl GetMonData
        cmp r0, 0
        beq _0804AD2C
        adds r0, r4, 0
        movs r1, 0x2D
        bl GetMonData
        cmp r0, 0
        bne _0804AD2C
        adds r0, r4, 0
        movs r1, 0x39
        bl GetMonData
        adds r0, r6, r0
        lsls r0, 16
        lsrs r6, r0, 16
    _0804AD2C:
        adds r5, 0x1
        cmp r5, 0x2
        ble _0804ACFC
        b _0804ADA8
        .pool
    _0804AD48:
        movs r5, 0
    _0804AD4A:
        movs r0, 0x64
        adds r1, r5, 0
        muls r1, r0
        ldr r0, =gPlayerParty
        adds r4, r1, r0
        adds r0, r4, 0
        movs r1, 0xB
        bl GetMonData
        cmp r0, 0
        beq _0804ADA2
        adds r0, r4, 0
        movs r1, 0x2D
        bl GetMonData
        cmp r0, 0
        bne _0804ADA2
        ldr r0, =gBattleTypeFlags
        ldr r0, [r0]
        movs r1, 0x80
        lsls r1, 11
        ands r0, r1
        cmp r0, 0
        beq _0804AD94
        ldr r0, =gBattleStruct
        ldr r0, [r0]
        movs r1, 0xA8
        lsls r1, 2
        adds r0, r1
        ldrb r1, [r0]
        ldr r2, =gBitTable
        lsls r0, r5, 2
        adds r0, r2
        ldr r0, [r0]
        ands r1, r0
        cmp r1, 0
        bne _0804ADA2
    _0804AD94:
        adds r0, r4, 0
        movs r1, 0x39
        bl GetMonData
        adds r0, r6, r0
        lsls r0, 16
        lsrs r6, r0, 16
    _0804ADA2:
        adds r5, 0x1
        cmp r5, 0x5
        ble _0804AD4A
    _0804ADA8:
        cmp r6, 0
        bne _0804ADB6
        ldr r0, =gBattleOutcome
        ldrb r1, [r0]
        movs r2, 0x2
        orrs r1, r2
        strb r1, [r0]
    _0804ADB6:
        movs r6, 0
        movs r5, 0
    _0804ADBA:
        movs r0, 0x64
        adds r1, r5, 0
        muls r1, r0
        ldr r0, =gEnemyParty
        adds r4, r1, r0
        adds r0, r4, 0
        movs r1, 0xB
        bl GetMonData
        cmp r0, 0
        beq _0804AE10
        adds r0, r4, 0
        movs r1, 0x2D
        bl GetMonData
        cmp r0, 0
        bne _0804AE10
        ldr r0, =gBattleTypeFlags
        ldr r0, [r0]
        movs r1, 0x80
        lsls r1, 11
        ands r0, r1
        cmp r0, 0
        beq _0804AE02
        ldr r0, =gBattleStruct
        ldr r0, [r0]
        ldr r1, =0x000002a1
        adds r0, r1
        ldrb r1, [r0]
        ldr r2, =gBitTable
        lsls r0, r5, 2
        adds r0, r2
        ldr r0, [r0]
        ands r1, r0
        cmp r1, 0
        bne _0804AE10
    _0804AE02:
        adds r0, r4, 0
        movs r1, 0x39
        bl GetMonData
        adds r0, r6, r0
        lsls r0, 16
        lsrs r6, r0, 16
    _0804AE10:
        adds r5, 0x1
        cmp r5, 0x5
        ble _0804ADBA
        ldr r2, =gBattleOutcome
        cmp r6, 0
        bne _0804AE24
        ldrb r0, [r2]
        movs r1, 0x1
        orrs r0, r1
        strb r0, [r2]
    _0804AE24:
        ldrb r0, [r2]
        cmp r0, 0
        bne _0804AF1A
        ldr r0, =gBattleTypeFlags
        ldr r1, [r0]
        ldr r2, =0x02000002
        ands r1, r2
        mov r8, r0
        cmp r1, 0
        beq _0804AF1A
        movs r3, 0
        movs r5, 0
        ldr r0, =gBattlersCount
        ldrb r1, [r0]
        mov r12, r0
        ldr r7, =gBattlescriptCurrInstr
        cmp r3, r1
        bge _0804AE70
        ldr r0, =gHitMarker
        movs r6, 0x80
        lsls r6, 21
        ldr r4, [r0]
        adds r2, r1, 0
        ldr r1, =gSpecialStatuses
    _0804AE54:
        adds r0, r6, 0
        lsls r0, r5
        ands r0, r4
        cmp r0, 0
        beq _0804AE68
        ldrb r0, [r1]
        lsls r0, 25
        cmp r0, 0
        blt _0804AE68
        adds r3, 0x1
    _0804AE68:
        adds r1, 0x28
        adds r5, 0x2
        cmp r5, r2
        blt _0804AE54
    _0804AE70:
        movs r2, 0
        movs r5, 0x1
        mov r4, r12
        ldrb r1, [r4]
        cmp r5, r1
        bge _0804AEAA
        ldr r0, =gHitMarker
        movs r4, 0x80
        lsls r4, 21
        mov r12, r4
        ldr r6, [r0]
        ldr r0, =gSpecialStatuses
        adds r4, r1, 0
        adds r1, r0, 0
        adds r1, 0x14
    _0804AE8E:
        mov r0, r12
        lsls r0, r5
        ands r0, r6
        cmp r0, 0
        beq _0804AEA2
        ldrb r0, [r1]
        lsls r0, 25
        cmp r0, 0
        blt _0804AEA2
        adds r2, 0x1
    _0804AEA2:
        adds r1, 0x28
        adds r5, 0x2
        cmp r5, r4
        blt _0804AE8E
    _0804AEAA:
        mov r1, r8
        ldr r0, [r1]
        movs r1, 0x40
        ands r0, r1
        cmp r0, 0
        beq _0804AEF0
        adds r0, r2, r3
        cmp r0, 0x1
        bgt _0804AEF8
        b _0804AF12
        .pool
    _0804AEF0:
        cmp r2, 0
        beq _0804AF12
        cmp r3, 0
        beq _0804AF12
    _0804AEF8:
        ldr r2, [r7]
        ldrb r1, [r2, 0x1]
        ldrb r0, [r2, 0x2]
        lsls r0, 8
        adds r1, r0
        ldrb r0, [r2, 0x3]
        lsls r0, 16
        adds r1, r0
        ldrb r0, [r2, 0x4]
        lsls r0, 24
        adds r1, r0
        str r1, [r7]
        b _0804AF22
    _0804AF12:
        ldr r0, [r7]
        adds r0, 0x5
        str r0, [r7]
        b _0804AF22
    _0804AF1A:
        ldr r1, =gBattlescriptCurrInstr
        ldr r0, [r1]
        adds r0, 0x5
        str r0, [r1]
    _0804AF22:
        pop {r3}
        mov r8, r3
        pop {r4-r7}
        pop {r0}
        bx r0
        .pool
        .syntax divided
	.code	16
.Lfe50:
	.size	 atk24,.Lfe50-atk24
	.align	2, 0
	.type	 MoveValuesCleanUp,function
	.thumb_func
MoveValuesCleanUp:
	ldr	r1, .L1184
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L1184+0x4
	mov	r2, #0x0
	mov	r1, #0x1
	strb	r1, [r0, #0xe]
	ldr	r0, .L1184+0x8
	strb	r1, [r0]
	ldr	r0, .L1184+0xc
	strb	r2, [r0, #0x3]
	strb	r2, [r0, #0x6]
	ldr	r2, .L1184+0x10
	ldr	r0, [r2]
	sub	r1, r1, #0x42
	and	r0, r0, r1
	ldr	r1, .L1184+0x14
	and	r0, r0, r1
	str	r0, [r2]
	bx	lr
.L1185:
	.align	2, 0
.L1184:
	.word	gMoveResultFlags
	.word	gBattleScripting
	.word	gCritMultiplier
	.word	gBattleCommunication
	.word	gHitMarker
	.word	-0x4001
.Lfe51:
	.size	 MoveValuesCleanUp,.Lfe51-MoveValuesCleanUp
	.align	2, 0
	.type	 atk25_movevaluescleanup,function
	.thumb_func
atk25_movevaluescleanup:
	push	{lr}
	bl	MoveValuesCleanUp
	ldr	r1, .L1187
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1188:
	.align	2, 0
.L1187:
	.word	gBattlescriptCurrInstr
.Lfe52:
	.size	 atk25_movevaluescleanup,.Lfe52-atk25_movevaluescleanup
	.align	2, 0
	.type	 atk26_setmultihit,function
	.thumb_func
atk26_setmultihit:
	ldr	r3, .L1190
	ldr	r2, .L1190+0x4
	ldr	r0, [r2]
	ldrb	r1, [r0, #0x1]
	strb	r1, [r3]
	add	r0, r0, #0x2
	str	r0, [r2]
	bx	lr
.L1191:
	.align	2, 0
.L1190:
	.word	gMultiHitCounter
	.word	gBattlescriptCurrInstr
.Lfe53:
	.size	 atk26_setmultihit,.Lfe53-atk26_setmultihit
	.align	2, 0
	.type	 atk27_decrementmultihit,function
	.thumb_func
atk27_decrementmultihit:
	push	{lr}
	ldr	r1, .L1195
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1193	@cond_branch
	ldr	r1, .L1195+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L1194
.L1196:
	.align	2, 0
.L1195:
	.word	gMultiHitCounter
	.word	gBattlescriptCurrInstr
.L1193:
	ldr	r3, .L1197
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	str	r1, [r3]
.L1194:
	pop	{r0}
	bx	r0
.L1198:
	.align	2, 0
.L1197:
	.word	gBattlescriptCurrInstr
.Lfe54:
	.size	 atk27_decrementmultihit,.Lfe54-atk27_decrementmultihit
	.align	2, 0
	.type	 atk28_goto,function
	.thumb_func
atk28_goto:
	ldr	r3, .L1200
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	str	r1, [r3]
	bx	lr
.L1201:
	.align	2, 0
.L1200:
	.word	gBattlescriptCurrInstr
.Lfe55:
	.size	 atk28_goto,.Lfe55-atk28_goto
	.align	2, 0
	.type	 atk29_jumpifbyte,function
	.thumb_func
atk29_jumpifbyte:
	push	{r4, r5, r6, lr}
	ldr	r3, .L1219
	ldr	r1, [r3]
	ldrb	r6, [r1, #0x1]
	ldrb	r2, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	add	r5, r2, r0
	ldrb	r4, [r1, #0x6]
	ldrb	r2, [r1, #0x7]
	ldrb	r0, [r1, #0x8]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x9]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0xa]
	lsl	r0, r0, #0x18
	add	r2, r2, r0
	add	r1, r1, #0xb
	str	r1, [r3]
	cmp	r6, #0x5
	bhi	.L1203	@cond_branch
	lsl	r0, r6, #0x2
	ldr	r1, .L1219+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1220:
	.align	2, 0
.L1219:
	.word	gBattlescriptCurrInstr
	.word	.L1216
	.align	2, 0
	.align	2, 0
.L1216:
	.word	.L1204
	.word	.L1206
	.word	.L1208
	.word	.L1210
	.word	.L1212
	.word	.L1214
.L1204:
	ldrb	r0, [r5]
	cmp	r0, r4
	bne	.L1203	@cond_branch
	b	.L1218
.L1206:
	ldrb	r0, [r5]
	cmp	r0, r4
	beq	.L1203	@cond_branch
	b	.L1218
.L1208:
	ldrb	r0, [r5]
	cmp	r0, r4
	bls	.L1203	@cond_branch
	b	.L1218
.L1210:
	ldrb	r0, [r5]
	cmp	r0, r4
	bcs	.L1203	@cond_branch
	b	.L1218
.L1212:
	ldrb	r0, [r5]
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L1203	@cond_branch
	b	.L1218
.L1214:
	ldrb	r0, [r5]
	and	r4, r4, r0
	cmp	r4, #0
	bne	.L1203	@cond_branch
.L1218:
	str	r2, [r3]
.L1203:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 atk29_jumpifbyte,.Lfe56-atk29_jumpifbyte
	.align	2, 0
	.type	 atk2A_jumpifhalfword,function
	.thumb_func
atk2A_jumpifhalfword:
	push	{r4, r5, r6, lr}
	ldr	r3, .L1238
	ldr	r1, [r3]
	ldrb	r6, [r1, #0x1]
	ldrb	r2, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	add	r5, r2, r0
	ldrb	r4, [r1, #0x6]
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r2, [r1, #0x8]
	ldrb	r0, [r1, #0x9]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0xa]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0xb]
	lsl	r0, r0, #0x18
	add	r2, r2, r0
	add	r1, r1, #0xc
	str	r1, [r3]
	cmp	r6, #0x5
	bhi	.L1222	@cond_branch
	lsl	r0, r6, #0x2
	ldr	r1, .L1238+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1239:
	.align	2, 0
.L1238:
	.word	gBattlescriptCurrInstr
	.word	.L1235
	.align	2, 0
	.align	2, 0
.L1235:
	.word	.L1223
	.word	.L1225
	.word	.L1227
	.word	.L1229
	.word	.L1231
	.word	.L1233
.L1223:
	ldrh	r0, [r5]
	cmp	r0, r4
	bne	.L1222	@cond_branch
	b	.L1237
.L1225:
	ldrh	r0, [r5]
	cmp	r0, r4
	beq	.L1222	@cond_branch
	b	.L1237
.L1227:
	ldrh	r0, [r5]
	cmp	r0, r4
	bls	.L1222	@cond_branch
	b	.L1237
.L1229:
	ldrh	r0, [r5]
	cmp	r0, r4
	bcs	.L1222	@cond_branch
	b	.L1237
.L1231:
	ldrh	r0, [r5]
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L1222	@cond_branch
	b	.L1237
.L1233:
	ldrh	r0, [r5]
	and	r4, r4, r0
	cmp	r4, #0
	bne	.L1222	@cond_branch
.L1237:
	str	r2, [r3]
.L1222:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 atk2A_jumpifhalfword,.Lfe57-atk2A_jumpifhalfword
	.align	2, 0
	.type	 atk2B_jumpifword,function
	.thumb_func
atk2B_jumpifword:
	push	{r4, r5, r6, lr}
	ldr	r3, .L1257
	ldr	r1, [r3]
	ldrb	r6, [r1, #0x1]
	ldrb	r2, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	add	r5, r2, r0
	ldrb	r4, [r1, #0x6]
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r0, [r1, #0x8]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	ldrb	r0, [r1, #0x9]
	lsl	r0, r0, #0x18
	orr	r4, r4, r0
	ldrb	r2, [r1, #0xa]
	ldrb	r0, [r1, #0xb]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0xc]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0xd]
	lsl	r0, r0, #0x18
	add	r2, r2, r0
	add	r1, r1, #0xe
	str	r1, [r3]
	cmp	r6, #0x5
	bhi	.L1241	@cond_branch
	lsl	r0, r6, #0x2
	ldr	r1, .L1257+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1258:
	.align	2, 0
.L1257:
	.word	gBattlescriptCurrInstr
	.word	.L1254
	.align	2, 0
	.align	2, 0
.L1254:
	.word	.L1242
	.word	.L1244
	.word	.L1246
	.word	.L1248
	.word	.L1250
	.word	.L1252
.L1242:
	ldr	r0, [r5]
	cmp	r0, r4
	bne	.L1241	@cond_branch
	b	.L1256
.L1244:
	ldr	r0, [r5]
	cmp	r0, r4
	beq	.L1241	@cond_branch
	b	.L1256
.L1246:
	ldr	r0, [r5]
	cmp	r0, r4
	bls	.L1241	@cond_branch
	b	.L1256
.L1248:
	ldr	r0, [r5]
	cmp	r0, r4
	bcs	.L1241	@cond_branch
	b	.L1256
.L1250:
	ldr	r0, [r5]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L1241	@cond_branch
	b	.L1256
.L1252:
	ldr	r0, [r5]
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L1241	@cond_branch
.L1256:
	str	r2, [r3]
.L1241:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 atk2B_jumpifword,.Lfe58-atk2B_jumpifword
	.align	2, 0
	.type	 atk2C_jumpifarrayequal,function
	.thumb_func
atk2C_jumpifarrayequal:
	push	{r4, r5, r6, r7, lr}
	ldr	r2, .L1268
	ldr	r3, [r2]
	ldrb	r1, [r3, #0x1]
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x18
	add	r5, r1, r0
	ldrb	r1, [r3, #0x5]
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x18
	add	r4, r1, r0
	ldrb	r6, [r3, #0x9]
	ldrb	r1, [r3, #0xa]
	ldrb	r0, [r3, #0xb]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r3, #0xc]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r3, #0xd]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	mov	ip, r1
	mov	r1, #0x0
	cmp	r1, r6
	bcs	.L1261	@cond_branch
	ldrb	r0, [r5]
	ldrb	r7, [r4]
	cmp	r0, r7
	beq	.L1264	@cond_branch
	add	r0, r3, #0
	b	.L1267
.L1269:
	.align	2, 0
.L1268:
	.word	gBattlescriptCurrInstr
.L1264:
	add	r5, r5, #0x1
	add	r4, r4, #0x1
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r6
	bcs	.L1261	@cond_branch
	ldrb	r0, [r5]
	ldrb	r3, [r4]
	cmp	r0, r3
	beq	.L1264	@cond_branch
	ldr	r0, [r2]
.L1267:
	add	r0, r0, #0xe
	str	r0, [r2]
.L1261:
	cmp	r1, r6
	bne	.L1266	@cond_branch
	mov	r7, ip
	str	r7, [r2]
.L1266:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 atk2C_jumpifarrayequal,.Lfe59-atk2C_jumpifarrayequal
	.align	2, 0
	.type	 atk2D_jumpifarraynotequal,function
	.thumb_func
atk2D_jumpifarraynotequal:
	push	{r4, r5, r6, r7, lr}
	mov	r7, #0x0
	ldr	r3, .L1280
	ldr	r1, [r3]
	ldrb	r2, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	add	r5, r2, r0
	ldrb	r2, [r1, #0x5]
	ldrb	r0, [r1, #0x6]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x8]
	lsl	r0, r0, #0x18
	add	r4, r2, r0
	ldrb	r6, [r1, #0x9]
	ldrb	r2, [r1, #0xa]
	ldrb	r0, [r1, #0xb]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0xc]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0xd]
	lsl	r0, r0, #0x18
	add	r2, r2, r0
	mov	ip, r2
	mov	r1, #0x0
	cmp	r7, r6
	bcs	.L1272	@cond_branch
.L1274:
	ldrb	r0, [r5]
	ldrb	r2, [r4]
	cmp	r0, r2
	bne	.L1275	@cond_branch
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
.L1275:
	add	r5, r5, #0x1
	add	r4, r4, #0x1
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r6
	bcc	.L1274	@cond_branch
.L1272:
	cmp	r7, r6
	beq	.L1277	@cond_branch
	mov	r0, ip
	b	.L1279
.L1281:
	.align	2, 0
.L1280:
	.word	gBattlescriptCurrInstr
.L1277:
	ldr	r0, [r3]
	add	r0, r0, #0xe
.L1279:
	str	r0, [r3]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 atk2D_jumpifarraynotequal,.Lfe60-atk2D_jumpifarraynotequal
	.align	2, 0
	.type	 atk2E_setbyte,function
	.thumb_func
atk2E_setbyte:
	ldr	r3, .L1283
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	strb	r0, [r1]
	ldr	r0, [r3]
	add	r0, r0, #0x6
	str	r0, [r3]
	bx	lr
.L1284:
	.align	2, 0
.L1283:
	.word	gBattlescriptCurrInstr
.Lfe61:
	.size	 atk2E_setbyte,.Lfe61-atk2E_setbyte
	.align	2, 0
	.type	 atk2F_addbyte,function
	.thumb_func
atk2F_addbyte:
	ldr	r3, .L1286
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	ldrb	r2, [r1]
	add	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r3]
	add	r0, r0, #0x6
	str	r0, [r3]
	bx	lr
.L1287:
	.align	2, 0
.L1286:
	.word	gBattlescriptCurrInstr
.Lfe62:
	.size	 atk2F_addbyte,.Lfe62-atk2F_addbyte
	.align	2, 0
	.type	 atk30_subbyte,function
	.thumb_func
atk30_subbyte:
	ldr	r3, .L1289
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldrb	r0, [r1]
	ldrb	r2, [r2, #0x5]
	sub	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r3]
	add	r0, r0, #0x6
	str	r0, [r3]
	bx	lr
.L1290:
	.align	2, 0
.L1289:
	.word	gBattlescriptCurrInstr
.Lfe63:
	.size	 atk30_subbyte,.Lfe63-atk30_subbyte
	.align	2, 0
	.type	 atk31_copyarray,function
	.thumb_func
atk31_copyarray:
	push	{r4, r5, r6, lr}
	ldr	r3, .L1297
	ldr	r1, [r3]
	ldrb	r2, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	add	r6, r2, r0
	ldrb	r2, [r1, #0x5]
	ldrb	r0, [r1, #0x6]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x8]
	lsl	r0, r0, #0x18
	add	r5, r2, r0
	ldrb	r4, [r1, #0x9]
	mov	r2, #0x0
	cmp	r2, r4
	bge	.L1293	@cond_branch
.L1295:
	add	r0, r6, r2
	add	r1, r5, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, r4
	blt	.L1295	@cond_branch
.L1293:
	ldr	r0, [r3]
	add	r0, r0, #0xa
	str	r0, [r3]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1298:
	.align	2, 0
.L1297:
	.word	gBattlescriptCurrInstr
.Lfe64:
	.size	 atk31_copyarray,.Lfe64-atk31_copyarray
	.align	2, 0
	.type	 atk32_copyarraywithindex,function
	.thumb_func
atk32_copyarraywithindex:
	push	{r4, r5, r6, r7, lr}
	ldr	r3, .L1305
	ldr	r1, [r3]
	ldrb	r2, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	add	r7, r2, r0
	ldrb	r2, [r1, #0x5]
	ldrb	r0, [r1, #0x6]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0x8]
	lsl	r0, r0, #0x18
	add	r6, r2, r0
	ldrb	r2, [r1, #0x9]
	ldrb	r0, [r1, #0xa]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r1, #0xb]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r1, #0xc]
	lsl	r0, r0, #0x18
	add	r5, r2, r0
	ldrb	r4, [r1, #0xd]
	mov	r2, #0x0
	cmp	r2, r4
	bge	.L1301	@cond_branch
.L1303:
	add	r0, r7, r2
	ldrb	r1, [r5]
	add	r1, r2, r1
	add	r1, r6, r1
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, r4
	blt	.L1303	@cond_branch
.L1301:
	ldr	r0, [r3]
	add	r0, r0, #0xe
	str	r0, [r3]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1306:
	.align	2, 0
.L1305:
	.word	gBattlescriptCurrInstr
.Lfe65:
	.size	 atk32_copyarraywithindex,.Lfe65-atk32_copyarraywithindex
	.align	2, 0
	.type	 atk33_orbyte,function
	.thumb_func
atk33_orbyte:
	ldr	r3, .L1308
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldrb	r0, [r1]
	ldrb	r2, [r2, #0x5]
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r3]
	add	r0, r0, #0x6
	str	r0, [r3]
	bx	lr
.L1309:
	.align	2, 0
.L1308:
	.word	gBattlescriptCurrInstr
.Lfe66:
	.size	 atk33_orbyte,.Lfe66-atk33_orbyte
	.align	2, 0
	.type	 atk34_orhalfword,function
	.thumb_func
atk34_orhalfword:
	push	{r4, lr}
	ldr	r4, .L1311
	ldr	r3, [r4]
	ldrb	r2, [r3, #0x1]
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x8
	add	r2, r2, r0
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x10
	add	r2, r2, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x18
	add	r2, r2, r0
	ldrb	r1, [r3, #0x5]
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrh	r0, [r2]
	orr	r1, r1, r0
	strh	r1, [r2]
	ldr	r0, [r4]
	add	r0, r0, #0x7
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1312:
	.align	2, 0
.L1311:
	.word	gBattlescriptCurrInstr
.Lfe67:
	.size	 atk34_orhalfword,.Lfe67-atk34_orhalfword
	.align	2, 0
	.type	 atk35_orword,function
	.thumb_func
atk35_orword:
	push	{r4, lr}
	ldr	r4, .L1314
	ldr	r2, [r4]
	ldrb	r3, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r3, r3, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r3, r3, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r3, r3, r0
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldr	r0, [r3]
	orr	r0, r0, r1
	str	r0, [r3]
	ldr	r0, [r4]
	add	r0, r0, #0x9
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1315:
	.align	2, 0
.L1314:
	.word	gBattlescriptCurrInstr
.Lfe68:
	.size	 atk35_orword,.Lfe68-atk35_orword
	.align	2, 0
	.type	 atk36_bicbyte,function
	.thumb_func
atk36_bicbyte:
	ldr	r3, .L1317
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldrb	r2, [r2, #0x5]
	ldrb	r0, [r1]
	bic	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r3]
	add	r0, r0, #0x6
	str	r0, [r3]
	bx	lr
.L1318:
	.align	2, 0
.L1317:
	.word	gBattlescriptCurrInstr
.Lfe69:
	.size	 atk36_bicbyte,.Lfe69-atk36_bicbyte
	.align	2, 0
	.type	 atk37_bichalfword,function
	.thumb_func
atk37_bichalfword:
	push	{r4, lr}
	ldr	r4, .L1320
	ldr	r3, [r4]
	ldrb	r1, [r3, #0x1]
	ldrb	r0, [r3, #0x2]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldrb	r2, [r3, #0x5]
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrh	r0, [r1]
	bic	r0, r0, r2
	strh	r0, [r1]
	ldr	r0, [r4]
	add	r0, r0, #0x7
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1321:
	.align	2, 0
.L1320:
	.word	gBattlescriptCurrInstr
.Lfe70:
	.size	 atk37_bichalfword,.Lfe70-atk37_bichalfword
	.align	2, 0
	.type	 atk38_bicword,function
	.thumb_func
atk38_bicword:
	push	{r4, lr}
	ldr	r4, .L1323
	ldr	r2, [r4]
	ldrb	r3, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	add	r3, r3, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	add	r3, r3, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	add	r3, r3, r0
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	ldr	r0, [r3]
	bic	r0, r0, r1
	str	r0, [r3]
	ldr	r0, [r4]
	add	r0, r0, #0x9
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1324:
	.align	2, 0
.L1323:
	.word	gBattlescriptCurrInstr
.Lfe71:
	.size	 atk38_bicword,.Lfe71-atk38_bicword
	.align	2, 0
	.type	 atk39_pause,function
	.thumb_func
atk39_pause:
	push	{r4, r5, lr}
	ldr	r0, .L1328
	ldr	r4, [r0]
	cmp	r4, #0
	bne	.L1326	@cond_branch
	ldr	r5, .L1328+0x4
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldr	r3, .L1328+0x8
	ldrh	r0, [r3]
	add	r0, r0, #0x1
	strh	r0, [r3]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r1
	bcc	.L1326	@cond_branch
	strh	r4, [r3]
	add	r0, r2, #0x3
	str	r0, [r5]
.L1326:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1329:
	.align	2, 0
.L1328:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gPauseCounterBattle
.Lfe72:
	.size	 atk39_pause,.Lfe72-atk39_pause
	.align	2, 0
	.type	 atk3A_waitstate,function
	.thumb_func
atk3A_waitstate:
	push	{lr}
	ldr	r0, .L1332
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1331	@cond_branch
	ldr	r1, .L1332+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L1331:
	pop	{r0}
	bx	r0
.L1333:
	.align	2, 0
.L1332:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
.Lfe73:
	.size	 atk3A_waitstate,.Lfe73-atk3A_waitstate
	.align	2, 0
	.type	 atk3B_healthbar_update,function
	.thumb_func
atk3B_healthbar_update:
	push	{lr}
	ldr	r0, .L1338
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.L1335	@cond_branch
	ldr	r0, .L1338+0x4
	ldr	r1, .L1338+0x8
	b	.L1337
.L1339:
	.align	2, 0
.L1338:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattlerTarget
.L1335:
	ldr	r0, .L1340
	ldr	r1, .L1340+0x4
.L1337:
	ldrb	r1, [r1]
	strb	r1, [r0]
	ldr	r0, .L1340+0x8
	ldrh	r1, [r0]
	mov	r0, #0x0
	bl	BtlController_EmitHealthBarUpdate
	ldr	r0, .L1340
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L1340+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1341:
	.align	2, 0
.L1340:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
.Lfe74:
	.size	 atk3B_healthbar_update,.Lfe74-atk3B_healthbar_update
	.align	2, 0
	.type	 atk3C_return,function
	.thumb_func
atk3C_return:
	push	{lr}
	bl	BattleScriptPop
	pop	{r0}
	bx	r0
.Lfe75:
	.size	 atk3C_return,.Lfe75-atk3C_return
	.align	2, 0
	.type	 atk3D_end,function
	.thumb_func
atk3D_end:
	push	{lr}
	ldr	r0, .L1345
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1344	@cond_branch
	ldr	r0, .L1345+0x4
	ldrb	r0, [r0]
	bl	BattleArena_AddSkillPoints
.L1344:
	ldr	r0, .L1345+0x8
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L1345+0xc
	strb	r1, [r0]
	ldr	r1, .L1345+0x10
	mov	r0, #0xb
	strb	r0, [r1]
	pop	{r0}
	bx	r0
.L1346:
	.align	2, 0
.L1345:
	.word	gBattleTypeFlags
	.word	gBattlerAttacker
	.word	gMoveResultFlags
	.word	gActiveBattler
	.word	gCurrentActionFuncId
.Lfe76:
	.size	 atk3D_end,.Lfe76-atk3D_end
	.align	2, 0
	.type	 atk3E_end2,function
	.thumb_func
atk3E_end2:
	ldr	r1, .L1348
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L1348+0x4
	mov	r0, #0xb
	strb	r0, [r1]
	bx	lr
.L1349:
	.align	2, 0
.L1348:
	.word	gActiveBattler
	.word	gCurrentActionFuncId
.Lfe77:
	.size	 atk3E_end2,.Lfe77-atk3E_end2
	.align	2, 0
	.type	 atk3F_end3,function
	.thumb_func
atk3F_end3:
	push	{lr}
	bl	BattleScriptPop
	ldr	r3, .L1352
	ldr	r0, [r3]
	ldr	r0, [r0, #0xc]
	add	r1, r0, #0
	add	r1, r1, #0x20
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L1351	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
.L1351:
	ldr	r2, .L1352+0x4
	ldr	r0, [r3]
	ldr	r1, [r0, #0xc]
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	str	r0, [r2]
	pop	{r0}
	bx	r0
.L1353:
	.align	2, 0
.L1352:
	.word	gBattleResources
	.word	gBattleMainFunc
.Lfe78:
	.size	 atk3F_end3,.Lfe78-atk3F_end3
	.align	2, 0
	.type	 atk41_call,function
	.thumb_func
atk41_call:
	push	{r4, lr}
	ldr	r4, .L1355
	ldr	r0, [r4]
	add	r0, r0, #0x5
	bl	BattleScriptPush
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1356:
	.align	2, 0
.L1355:
	.word	gBattlescriptCurrInstr
.Lfe79:
	.size	 atk41_call,.Lfe79-atk41_call
	.align	2, 0
	.type	 atk42_jumpiftype2,function
	.thumb_func
atk42_jumpiftype2:
	push	{r4, lr}
	ldr	r4, .L1361
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, [r4]
	ldr	r2, .L1361+0x4
	mov	r1, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r1, r0, #0
	add	r1, r1, #0x21
	ldrb	r2, [r3, #0x2]
	ldrb	r1, [r1]
	cmp	r2, r1
	beq	.L1359	@cond_branch
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r2, r0
	bne	.L1358	@cond_branch
.L1359:
	ldrb	r1, [r3, #0x3]
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1360
.L1362:
	.align	2, 0
.L1361:
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
.L1358:
	add	r0, r3, #0x7
	str	r0, [r4]
.L1360:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe80:
	.size	 atk42_jumpiftype2,.Lfe80-atk42_jumpiftype2
	.align	2, 0
	.type	 atk43_jumpifabilitypresent,function
	.thumb_func
atk43_jumpifabilitypresent:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r4, .L1366
	ldr	r0, [r4]
	ldrb	r2, [r0, #0x1]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1364	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1365
.L1367:
	.align	2, 0
.L1366:
	.word	gBattlescriptCurrInstr
.L1364:
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
.L1365:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe81:
	.size	 atk43_jumpifabilitypresent,.Lfe81-atk43_jumpifabilitypresent
	.align	2, 0
	.type	 atk44_endselectionscript,function
	.thumb_func
atk44_endselectionscript:
	ldr	r0, .L1369
	ldrb	r0, [r0]
	ldr	r1, .L1369+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	add	r0, r0, #0x54
	mov	r1, #0x1
	strb	r1, [r0]
	bx	lr
.L1370:
	.align	2, 0
.L1369:
	.word	gBattlerAttacker
	.word	gBattleStruct
.Lfe82:
	.size	 atk44_endselectionscript,.Lfe82-atk44_endselectionscript
	.align	2, 0
	.type	 atk45_playanimation,function
	.thumb_func
atk45_playanimation:
	push	{r4, r5, r6, lr}
	ldr	r5, .L1382
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r6, .L1382+0x4
	strb	r0, [r6]
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	add	r3, r1, r0
	ldrb	r4, [r2, #0x2]
	add	r0, r4, #0
	cmp	r0, #0x1
	beq	.L1373	@cond_branch
	cmp	r0, #0x11
	beq	.L1373	@cond_branch
	cmp	r0, #0x2
	bne	.L1372	@cond_branch
.L1373:
	ldr	r4, .L1382
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x2]
	ldrh	r2, [r3]
	mov	r0, #0x0
	bl	BtlController_EmitBattleAnimation
	ldr	r0, .L1382+0x4
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r4]
	add	r0, r0, #0x7
	str	r0, [r4]
	b	.L1374
.L1383:
	.align	2, 0
.L1382:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.L1372:
	ldr	r0, .L1384
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1375	@cond_branch
	add	r0, r2, #0x7
	bl	BattleScriptPush
	ldr	r0, .L1384+0x4
	b	.L1381
.L1385:
	.align	2, 0
.L1384:
	.word	gHitMarker
	.word	BattleScript_Pausex20
.L1375:
	add	r0, r4, #0
	sub	r0, r0, #0xa
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bls	.L1379	@cond_branch
	ldr	r1, .L1386
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L1386+0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1379	@cond_branch
	add	r0, r2, #0x7
	b	.L1381
.L1387:
	.align	2, 0
.L1386:
	.word	gStatuses3
	.word	0x400c0
.L1379:
	ldrb	r1, [r2, #0x2]
	ldrh	r2, [r3]
	mov	r0, #0x0
	bl	BtlController_EmitBattleAnimation
	ldrb	r0, [r6]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x7
.L1381:
	str	r0, [r5]
.L1374:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe83:
	.size	 atk45_playanimation,.Lfe83-atk45_playanimation
	.align	2, 0
	.type	 atk46_playanimation2,function
	.thumb_func
atk46_playanimation2:
	push	{r4, r5, r6, r7, lr}
	ldr	r6, .L1399
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r7, .L1399+0x4
	strb	r0, [r7]
	ldr	r2, [r6]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	add	r3, r1, r0
	ldrb	r1, [r2, #0x6]
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x8
	add	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	add	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x18
	add	r4, r1, r0
	ldrb	r5, [r3]
	add	r0, r5, #0
	cmp	r0, #0x1
	beq	.L1390	@cond_branch
	cmp	r0, #0x11
	beq	.L1390	@cond_branch
	cmp	r0, #0x2
	bne	.L1389	@cond_branch
.L1390:
	ldrb	r1, [r3]
	ldrh	r2, [r4]
	mov	r0, #0x0
	bl	BtlController_EmitBattleAnimation
	ldr	r0, .L1399+0x4
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L1399
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
	b	.L1391
.L1400:
	.align	2, 0
.L1399:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.L1389:
	ldr	r0, .L1401
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1392	@cond_branch
	add	r0, r2, #0
	b	.L1398
.L1402:
	.align	2, 0
.L1401:
	.word	gHitMarker
.L1392:
	add	r0, r5, #0
	sub	r0, r0, #0xa
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bls	.L1396	@cond_branch
	ldr	r1, .L1403
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L1403+0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1396	@cond_branch
	add	r0, r2, #0
	b	.L1398
.L1404:
	.align	2, 0
.L1403:
	.word	gStatuses3
	.word	0x400c0
.L1396:
	ldrb	r1, [r3]
	ldrh	r2, [r4]
	mov	r0, #0x0
	bl	BtlController_EmitBattleAnimation
	ldrb	r0, [r7]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r6]
.L1398:
	add	r0, r0, #0xa
	str	r0, [r6]
.L1391:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe84:
	.size	 atk46_playanimation2,.Lfe84-atk46_playanimation2
	.align	2, 0
	.type	 atk47_setgraphicalstatchangevalues,function
	.thumb_func
atk47_setgraphicalstatchangevalues:
	push	{r4, lr}
	mov	r3, #0x0
	ldr	r1, .L1414
	ldrb	r0, [r1, #0x1a]
	mov	r2, #0xf0
	and	r2, r2, r0
	add	r4, r1, #0
	cmp	r2, #0x20
	beq	.L1408	@cond_branch
	cmp	r2, #0x20
	bgt	.L1413	@cond_branch
	cmp	r2, #0x10
	beq	.L1407	@cond_branch
	b	.L1406
.L1415:
	.align	2, 0
.L1414:
	.word	gBattleScripting
.L1413:
	cmp	r2, #0x90
	beq	.L1409	@cond_branch
	cmp	r2, #0xa0
	beq	.L1410	@cond_branch
	b	.L1406
.L1407:
	mov	r3, #0xf
	b	.L1406
.L1408:
	mov	r3, #0x27
	b	.L1406
.L1409:
	mov	r3, #0x16
	b	.L1406
.L1410:
	mov	r3, #0x2e
.L1406:
	ldrb	r1, [r4, #0x1a]
	mov	r0, #0xf
	and	r0, r0, r1
	add	r0, r3, r0
	sub	r0, r0, #0x1
	mov	r1, #0x0
	strb	r0, [r4, #0x10]
	strb	r1, [r4, #0x11]
	ldr	r1, .L1416
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1417:
	.align	2, 0
.L1416:
	.word	gBattlescriptCurrInstr
.Lfe85:
	.size	 atk47_setgraphicalstatchangevalues,.Lfe85-atk47_setgraphicalstatchangevalues
	.align	2, 0
	.type	 atk48_playstatchangeanimation,function
	.thumb_func
atk48_playstatchangeanimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r7, #0x0
	mov	r0, #0x0
	mov	r8, r0
	mov	r3, #0x0
	ldr	r5, .L1459
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	str	r3, [sp]
	bl	GetBattlerForBattleScript
	ldr	r2, .L1459+0x4
	strb	r0, [r2]
	ldr	r0, [r5]
	ldrb	r4, [r0, #0x2]
	ldrb	r1, [r0, #0x3]
	mov	r0, #0x1
	and	r0, r0, r1
	ldr	r3, [sp]
	cmp	r0, #0
	beq	.L1419	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	mov	r1, #0x15
	cmp	r0, #0
	beq	.L1420	@cond_branch
	mov	r1, #0x2d
.L1420:
	cmp	r4, #0
	beq	.L1453	@cond_branch
	mov	r0, #0x1
	mov	sl, r0
	ldr	r0, .L1459+0x8
	mov	r9, r0
	lsl	r5, r1, #0x10
.L1424:
	add	r0, r4, #0
	mov	r1, sl
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1425	@cond_branch
	ldr	r0, .L1459
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x3]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1426	@cond_branch
	ldr	r0, .L1459+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r7, r0
	b	.L1455
.L1460:
	.align	2, 0
.L1459:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleMons+0x18
.L1426:
	ldr	r6, .L1461
	ldrb	r0, [r6]
	str	r3, [sp]
	bl	GetBattlerPosition
	mov	r1, sl
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1461+0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x4]
	ldr	r3, [sp]
	cmp	r0, #0
	bne	.L1425	@cond_branch
	ldr	r0, .L1461+0x8
	ldrb	r2, [r6]
	mov	r1, #0x58
	mul	r2, r2, r1
	add	r0, r2, r0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x1d
	beq	.L1425	@cond_branch
	cmp	r0, #0x49
	beq	.L1425	@cond_branch
	cmp	r0, #0x33
	bne	.L1430	@cond_branch
	cmp	r7, #0x6
	beq	.L1425	@cond_branch
.L1430:
	cmp	r0, #0x34
	bne	.L1431	@cond_branch
	cmp	r7, #0x1
	beq	.L1425	@cond_branch
.L1431:
	add	r0, r7, r2
.L1455:
	add	r0, r0, r9
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	ble	.L1425	@cond_branch
	lsr	r0, r5, #0x10
	mov	r8, r0
	add	r3, r3, #0x1
.L1425:
	lsr	r4, r4, #0x1
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r5, r5, r1
	add	r7, r7, #0x1
	cmp	r4, #0
	bne	.L1424	@cond_branch
.L1453:
	ldr	r0, .L1461+0xc
	mov	r9, r0
	cmp	r3, #0x1
	ble	.L1437	@cond_branch
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x3]
	mov	r0, #0x2
	and	r0, r0, r1
	mov	r1, #0x39
	mov	r8, r1
	cmp	r0, #0
	beq	.L1437	@cond_branch
	mov	r0, #0x3a
	b	.L1456
.L1462:
	.align	2, 0
.L1461:
	.word	gActiveBattler
	.word	gSideTimers
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
.L1419:
	mov	r0, #0x2
	and	r0, r0, r1
	mov	r1, #0xe
	cmp	r0, #0
	beq	.L1438	@cond_branch
	mov	r1, #0x26
.L1438:
	mov	r9, r5
	cmp	r4, #0
	beq	.L1454	@cond_branch
	ldr	r6, .L1463
	add	r5, r2, #0
	lsl	r2, r1, #0x10
.L1442:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L1443	@cond_branch
	ldrb	r1, [r5]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r7, r0
	add	r0, r0, r6
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0xb
	bgt	.L1443	@cond_branch
	lsr	r1, r2, #0x10
	mov	r8, r1
	add	r3, r3, #0x1
.L1443:
	lsr	r4, r4, #0x1
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	add	r2, r2, r0
	add	r7, r7, #0x1
	cmp	r4, #0
	bne	.L1442	@cond_branch
.L1454:
	cmp	r3, #0x1
	ble	.L1437	@cond_branch
	mov	r1, r9
	ldr	r0, [r1]
	ldrb	r1, [r0, #0x3]
	mov	r0, #0x2
	and	r0, r0, r1
	mov	r1, #0x37
	mov	r8, r1
	cmp	r0, #0
	beq	.L1437	@cond_branch
	mov	r0, #0x38
.L1456:
	mov	r8, r0
.L1437:
	mov	r1, r9
	ldr	r2, [r1]
	ldrb	r1, [r2, #0x3]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1448	@cond_branch
	cmp	r3, #0x1
	bgt	.L1448	@cond_branch
	add	r0, r2, #0x4
	mov	r1, r9
	b	.L1457
.L1464:
	.align	2, 0
.L1463:
	.word	gBattleMons+0x18
.L1448:
	cmp	r3, #0
	beq	.L1450	@cond_branch
	ldr	r4, .L1465
	ldrb	r0, [r4, #0x1b]
	cmp	r0, #0
	bne	.L1450	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r2, r8
	str	r3, [sp]
	bl	BtlController_EmitBattleAnimation
	ldr	r0, .L1465+0x4
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	ldr	r0, .L1465+0x8
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x3]
	mov	r0, #0x4
	and	r0, r0, r1
	ldr	r3, [sp]
	cmp	r0, #0
	beq	.L1451	@cond_branch
	cmp	r3, #0x1
	ble	.L1451	@cond_branch
	mov	r0, #0x1
	strb	r0, [r4, #0x1b]
.L1451:
	ldr	r1, .L1465+0x8
	b	.L1458
.L1466:
	.align	2, 0
.L1465:
	.word	gBattleScripting
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.L1450:
	mov	r1, r9
.L1458:
	ldr	r0, [r1]
	add	r0, r0, #0x4
.L1457:
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe86:
	.size	 atk48_playstatchangeanimation,.Lfe86-atk48_playstatchangeanimation
	.align	2, 0
	.type	 atk49_moveend,function
	.thumb_func
atk49_moveend:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	mov	r0, #0x0
	mov	sl, r0
	ldr	r2, .L1567
	ldrh	r1, [r2]
	ldr	r0, .L1567+0x4
	mov	r3, #0x0
	str	r3, [sp, #0x18]
	cmp	r1, r0
	beq	.L1469	@cond_branch
	ldrh	r2, [r2]
	str	r2, [sp, #0x18]
.L1469:
	ldr	r0, .L1567+0x8
	ldr	r0, [r0]
	ldrb	r4, [r0, #0x1]
	str	r4, [sp, #0x10]
	ldrb	r0, [r0, #0x2]
	str	r0, [sp, #0x14]
	ldr	r1, .L1567+0xc
	ldr	r0, .L1567+0x10
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0xaf
	bne	.L1470	@cond_branch
	ldr	r1, .L1567+0x14
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x7]
	b	.L1561
.L1568:
	.align	2, 0
.L1567:
	.word	gChosenMove
	.word	0xffff
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gEnigmaBerries
.L1470:
	ldrh	r0, [r1, #0x2e]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L1561:
	str	r0, [sp, #0x8]
	ldr	r1, .L1569
	ldr	r0, .L1569+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, #0xc8
	ldr	r1, [r1]
	add	r0, r1, r0
	str	r0, [sp, #0xc]
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	beq	.L1472	@cond_branch
	mov	r5, #0x3f
	and	r5, r5, r0
	str	r5, [sp, #0x4]
	b	.L1473
.L1570:
	.align	2, 0
.L1569:
	.word	gBattleStruct
	.word	gBattlerAttacker
.L1558:
	ldr	r4, .L1571
	strb	r2, [r4]
	mov	r0, #0x0
	mov	r1, #0x1
	bl	BtlController_EmitSpriteInvisibility
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L1562
.L1572:
	.align	2, 0
.L1571:
	.word	gActiveBattler
.L1559:
	ldr	r4, .L1573
	strb	r2, [r4]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitSpriteInvisibility
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldr	r0, [r1]
	ldr	r2, .L1573+0x4
	and	r0, r0, r2
	str	r0, [r1]
	b	.L1562
.L1574:
	.align	2, 0
.L1573:
	.word	gActiveBattler
	.word	-0x400c1
.L1560:
	strb	r2, [r7]
	ldr	r0, [r5]
	orr	r0, r0, r6
	str	r0, [r5]
	ldr	r0, .L1575
	strb	r4, [r0, #0x14]
	bl	MoveValuesCleanUp
	ldr	r2, .L1575+0x4
	mov	r0, r8
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	bl	BattleScriptPush
	ldr	r1, .L1575+0x8
	ldr	r0, .L1575+0xc
	bl	.L1563	@ far jump
.L1576:
	.align	2, 0
.L1575:
	.word	gBattleScripting
	.word	gBattleScriptsForMoveEffects
	.word	gBattlescriptCurrInstr
	.word	BattleScript_FlushMessageBox
.L1472:
	ldr	r2, .L1577
	ldr	r0, .L1577+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	str	r0, [sp, #0x4]
.L1473:
	ldr	r1, .L1577+0x8
	mov	ip, r1
	b	.L1474
.L1578:
	.align	2, 0
.L1577:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleScripting
.L1556:
	mov	r2, sl
	cmp	r2, #0
	beq	.LCB14507
	bl	.L1475	@far jump
.LCB14507:
.L1474:
	mov	r3, ip
	ldrb	r0, [r3, #0x14]
	cmp	r0, #0x11
	bls	.LCB14514
	bl	.L1477	@far jump
.LCB14514:
	lsl	r0, r0, #0x2
	ldr	r1, .L1579
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1580:
	.align	2, 0
.L1579:
	.word	.L1550
	.align	2, 0
	.align	2, 0
.L1550:
	.word	.L1478
	.word	.L1481
	.word	.L1483
	.word	.L1485
	.word	.L1487
	.word	.L1490
	.word	.L1492
	.word	.L1504
	.word	.L1516
	.word	.L1518
	.word	.L1521
	.word	.L1511
	.word	.L1514
	.word	.L1523
	.word	.L1530
	.word	.L1543
	.word	.L1545
	.word	.L1477
.L1478:
	ldr	r6, .L1581
	ldr	r5, .L1581+0x4
	ldrb	r3, [r5]
	mov	r7, #0x58
	mov	r2, r3
	mul	r2, r2, r7
	add	r0, r6, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB14546
	b	.L1519	@long jump
.LCB14546:
	add	r0, r2, r6
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.LCB14552
	b	.L1519	@long jump
.LCB14552:
	ldr	r0, .L1581+0x8
	ldrb	r1, [r0]
	cmp	r1, r3
	bne	.LCB14562
	b	.L1519	@long jump
.LCB14562:
	add	r0, r1, #0
	bl	GetBattlerSide
	add	r4, r0, #0
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.LCB14576
	b	.L1519	@long jump
.LCB14576:
	ldr	r0, .L1581+0xc
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB14584
	b	.L1519	@long jump
.LCB14584:
	ldr	r2, .L1581+0x10
	ldrb	r3, [r5]
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r1, r0, #0x2
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1480	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LCB14601
	b	.L1519	@long jump
.LCB14601:
.L1480:
	ldr	r2, .L1581+0x14
	ldr	r0, .L1581+0x18
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.LCB14614
	b	.L1519	@long jump
.LCB14614:
	mov	r0, r3
	mul	r0, r0, r7
	add	r1, r0, r6
	ldrb	r2, [r1, #0x19]
	mov	r0, #0x19
	ldrsb	r0, [r1, r0]
	cmp	r0, #0xb
	ble	.LCB14621
	b	.L1519	@long jump
.LCB14621:
	add	r0, r2, #0x1
	strb	r0, [r1, #0x19]
	bl	BattleScriptPushCursor
	ldr	r1, .L1581+0x1c
	ldr	r0, .L1581+0x20
	str	r0, [r1]
	b	.L1565
.L1582:
	.align	2, 0
.L1581:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gMoveResultFlags
	.word	gSpecialStatuses
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	BattleScript_RageIsBuilding
.L1481:
	ldr	r4, .L1583
	ldr	r6, .L1583+0x4
	ldrb	r2, [r6]
	mov	r5, #0x58
	mov	ip, r5
	mov	r1, ip
	mul	r1, r1, r2
	add	r7, r4, #0
	add	r7, r7, #0x4c
	add	r5, r1, r7
	ldr	r3, [r5]
	mov	r0, #0x20
	and	r0, r0, r3
	cmp	r0, #0
	bne	.LCB14659
	b	.L1519	@long jump
.LCB14659:
	add	r0, r1, r4
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.LCB14665
	b	.L1519	@long jump
.LCB14665:
	ldr	r0, .L1583+0x8
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.LCB14675
	b	.L1519	@long jump
.LCB14675:
	ldr	r0, .L1583+0xc
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r0, r0, #0xc
	add	r1, r1, r0
	ldr	r0, [r1]
	cmp	r0, #0
	bne	.LCB14684
	b	.L1519	@long jump
.LCB14684:
	ldr	r0, .L1583+0x10
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB14692
	b	.L1519	@long jump
.LCB14692:
	ldr	r0, [sp, #0x4]
	cmp	r0, #0xa
	beq	.LCB14695
	b	.L1519	@long jump
.LCB14695:
	mov	r0, #0x21
	neg	r0, r0
	and	r3, r3, r0
	str	r3, [r5]
	ldr	r4, .L1583+0x14
	ldrb	r0, [r6]
	strb	r0, [r4]
	ldrb	r0, [r6]
	mov	r1, ip
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r7
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	bl	BattleScriptPushCursor
	ldr	r1, .L1583+0x18
	ldr	r0, .L1583+0x1c
	str	r0, [r1]
	mov	r2, #0x1
	mov	sl, r2
	b	.L1519
.L1584:
	.align	2, 0
.L1583:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gSpecialStatuses
	.word	gMoveResultFlags
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_DefrostedViaFireMove
.L1483:
	ldr	r0, .L1585
	ldrb	r1, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x7
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB14752
	b	.L1519	@long jump
.LCB14752:
	mov	r3, #0x1
	mov	sl, r3
	b	.L1519
.L1586:
	.align	2, 0
.L1585:
	.word	gBattlerTarget
.L1485:
	ldr	r0, .L1587
	ldrb	r1, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x4
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	b	.L1566
.L1588:
	.align	2, 0
.L1587:
	.word	gBattlerTarget
.L1487:
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x5
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB14795
	b	.L1519	@long jump
.LCB14795:
	mov	r5, #0x1
	mov	sl, r5
	ldr	r0, .L1589
	mov	ip, r0
	b	.L1477
.L1590:
	.align	2, 0
.L1589:
	.word	gBattleScripting
.L1490:
	ldr	r0, .L1591
	ldrb	r1, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x8
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB14823
	b	.L1519	@long jump
.LCB14823:
	mov	r1, #0x1
	mov	sl, r1
	b	.L1519
.L1592:
	.align	2, 0
.L1591:
	.word	gBattlerAttacker
.L1492:
	ldr	r0, .L1593
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1495	@cond_branch
	ldr	r2, [sp, #0x8]
	cmp	r2, #0x1d
	bne	.L1495	@cond_branch
	ldr	r0, .L1593+0x4
	ldrh	r2, [r0]
	add	r3, r0, #0
	cmp	r2, #0xa5
	beq	.L1495	@cond_branch
	ldr	r4, [sp, #0xc]
	ldrh	r1, [r4]
	cmp	r1, #0
	beq	.L1493	@cond_branch
	ldr	r0, .L1593+0x8
	cmp	r1, r0
	bne	.L1495	@cond_branch
.L1493:
	cmp	r2, #0xe2
	bne	.L1496	@cond_branch
	ldr	r0, .L1593+0xc
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB14873
	b	.L1544	@long jump
.LCB14873:
.L1496:
	ldrh	r0, [r3]
	ldr	r1, [sp, #0xc]
	strh	r0, [r1]
.L1495:
	mov	r4, #0x0
	ldr	r2, .L1593+0x10
	ldr	r3, .L1593+0x14
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldrh	r0, [r0]
	ldr	r5, [sp, #0xc]
	ldrh	r1, [r5]
	mov	r9, r3
	cmp	r0, r1
	beq	.L1498	@cond_branch
	mov	r6, r9
	mov	r3, #0x58
	add	r5, r1, #0
.L1499:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L1498	@cond_branch
	lsl	r0, r4, #0x1
	ldrb	r1, [r6]
	mul	r1, r1, r3
	add	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0]
	cmp	r0, r5
	bne	.L1499	@cond_branch
.L1498:
	cmp	r4, #0x4
	bne	.L1503	@cond_branch
	mov	r0, #0x0
	ldr	r1, [sp, #0xc]
	strh	r0, [r1]
.L1503:
	mov	r2, ip
	ldrb	r0, [r2, #0x14]
	add	r0, r0, #0x1
	strb	r0, [r2, #0x14]
	b	.L1477
.L1594:
	.align	2, 0
.L1593:
	.word	gHitMarker
	.word	gChosenMove
	.word	0xffff
	.word	gMoveResultFlags
	.word	gBattleMons
	.word	gBattlerAttacker
.L1504:
	mov	r4, #0x0
	ldr	r0, .L1595
	ldrb	r3, [r0]
	cmp	r4, r3
	blt	.LCB14961
	b	.L1525	@long jump
.LCB14961:
	ldr	r7, .L1595+0x4
	mov	r6, #0x0
	mov	r3, #0xd0
	add	r5, r0, #0
	ldr	r2, .L1595+0x8
.L1508:
	ldr	r0, [r7]
	add	r0, r0, r3
	ldrh	r1, [r0]
	cmp	r1, #0
	beq	.L1507	@cond_branch
	strh	r1, [r2, #0x2e]
	strh	r6, [r0]
.L1507:
	add	r3, r3, #0x2
	add	r2, r2, #0x58
	add	r4, r4, #0x1
	ldrb	r0, [r5]
	cmp	r4, r0
	blt	.L1508	@cond_branch
	b	.L1525
.L1596:
	.align	2, 0
.L1595:
	.word	gBattlersCount
	.word	gBattleStruct
	.word	gBattleMons
.L1511:
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ItemBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1519	@cond_branch
	mov	r2, #0x1
	mov	sl, r2
	ldr	r3, .L1597
	mov	ip, r3
	b	.L1477
.L1598:
	.align	2, 0
.L1597:
	.word	gBattleScripting
.L1514:
	mov	r0, #0x4
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ItemBattleEffects
.L1566:
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1519	@cond_branch
.L1565:
	mov	r4, #0x1
	mov	sl, r4
	b	.L1519
.L1516:
	ldr	r1, .L1599
	ldr	r0, .L1599+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L1599+0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB15054
	b	.L1544	@long jump
.LCB15054:
	ldr	r0, .L1599+0xc
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB15060
	b	.L1558	@long jump
.LCB15060:
	b	.L1544
.L1600:
	.align	2, 0
.L1599:
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	0x400c0
	.word	gHitMarker
.L1518:
	ldr	r0, .L1601
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1520	@cond_branch
	ldr	r1, .L1601+0x4
	ldr	r0, .L1601+0x8
	ldrb	r2, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L1601+0xc
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1520	@cond_branch
	add	r0, r2, #0
	bl	WasUnableToUseMove
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1519	@cond_branch
.L1520:
	ldr	r4, .L1601+0x10
	ldr	r5, .L1601+0x8
	ldrb	r0, [r5]
	strb	r0, [r4]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitSpriteInvisibility
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, .L1601+0x4
	ldrb	r2, [r5]
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldr	r0, [r2]
	ldr	r1, .L1601+0x14
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r2, .L1601+0x18
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L1562:
	ldr	r1, .L1601+0x1c
	ldrb	r0, [r1, #0x14]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x14]
	b	.L1467
.L1602:
	.align	2, 0
.L1601:
	.word	gMoveResultFlags
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	0x400c0
	.word	gActiveBattler
	.word	-0x400c1
	.word	gSpecialStatuses
	.word	gBattleScripting
.L1519:
	ldr	r1, .L1603
	ldrb	r0, [r1, #0x14]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x14]
	mov	ip, r1
	b	.L1477
.L1604:
	.align	2, 0
.L1603:
	.word	gBattleScripting
.L1521:
	ldr	r0, .L1605
	ldr	r6, .L1605+0x4
	ldrb	r2, [r6]
	lsl	r3, r2, #0x2
	add	r1, r3, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.L1525	@cond_branch
	ldr	r0, .L1605+0x8
	ldrb	r0, [r0]
	cmp	r2, r0
	bcs	.L1525	@cond_branch
	ldr	r5, .L1605+0xc
	add	r0, r3, r5
	ldr	r0, [r0]
	ldr	r1, .L1605+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB15194
	b	.L1559	@long jump
.LCB15194:
	b	.L1525
.L1606:
	.align	2, 0
.L1605:
	.word	gSpecialStatuses
	.word	gBattlerTarget
	.word	gBattlersCount
	.word	gStatuses3
	.word	0x400c0
.L1523:
	mov	r4, #0x0
	ldr	r0, .L1607
	ldrb	r2, [r0]
	cmp	r4, r2
	bge	.L1525	@cond_branch
	ldr	r2, .L1607+0x4
	ldr	r5, .L1607+0x8
	add	r3, r0, #0
	ldr	r1, .L1607+0xc
.L1527:
	ldrb	r0, [r2, #0xa]
	cmp	r0, #0
	bne	.L1526	@cond_branch
	ldr	r0, [r1]
	and	r0, r0, r5
	str	r0, [r1]
.L1526:
	add	r2, r2, #0x1c
	add	r1, r1, #0x58
	add	r4, r4, #0x1
	ldrb	r0, [r3]
	cmp	r4, r0
	blt	.L1527	@cond_branch
.L1525:
	mov	r1, ip
	ldrb	r0, [r1, #0x14]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x14]
	b	.L1477
.L1608:
	.align	2, 0
.L1607:
	.word	gBattlersCount
	.word	gDisableStructs
	.word	-0x1000001
	.word	gBattleMons+0x50
.L1530:
	ldr	r1, .L1609
	ldr	r3, [r1]
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	and	r0, r0, r3
	ldr	r2, .L1609+0x4
	mov	r9, r2
	add	r5, r1, #0
	cmp	r0, #0
	beq	.L1531	@cond_branch
	ldr	r0, .L1609+0x8
	ldrb	r2, [r2]
	strb	r2, [r0]
	ldr	r1, .L1609+0xc
	ldrb	r0, [r1]
	mov	r4, r9
	strb	r0, [r4]
	strb	r2, [r1]
	ldr	r0, .L1609+0x10
	and	r3, r3, r0
	str	r3, [r5]
.L1531:
	ldr	r0, [r5]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1532	@cond_branch
	ldr	r0, .L1609+0x14
	mov	r2, r9
	ldrb	r1, [r2]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldr	r0, .L1609+0x18
	ldrh	r0, [r0]
	strh	r0, [r1]
.L1532:
	ldr	r0, .L1609+0x1c
	ldrb	r1, [r0]
	ldr	r2, .L1609+0x20
	mov	r3, r9
	ldrb	r4, [r3]
	lsl	r0, r4, #0x2
	add	r0, r0, r2
	ldr	r3, [r0]
	and	r1, r1, r3
	add	r6, r2, #0
	cmp	r1, #0
	beq	.LCB15321
	b	.L1533	@long jump
.LCB15321:
	ldr	r0, .L1609+0x24
	ldr	r1, [r0]
	add	r1, r1, #0x91
	ldrb	r1, [r1]
	and	r1, r1, r3
	add	r7, r0, #0
	cmp	r1, #0
	beq	.LCB15329
	b	.L1533	@long jump
.LCB15329:
	ldr	r0, .L1609+0x28
	ldr	r2, [sp, #0x18]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r1, [r1]
	mov	r8, r0
	cmp	r1, #0x7f
	bne	.LCB15341
	b	.L1533	@long jump
.LCB15341:
	ldr	r0, [r5]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1534	@cond_branch
	ldr	r0, .L1609+0x2c
	lsl	r1, r4, #0x1
	add	r1, r1, r0
	ldr	r0, .L1609+0x18
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r0, .L1609+0x30
	mov	r3, r9
	ldrb	r1, [r3]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldr	r0, .L1609+0x34
	ldrh	r0, [r0]
	strh	r0, [r1]
	b	.L1535
.L1610:
	.align	2, 0
.L1609:
	.word	gHitMarker
	.word	gBattlerAttacker
	.word	gActiveBattler
	.word	gBattlerTarget
	.word	-0x1001
	.word	gLastPrintedMoves
	.word	gChosenMove
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattleStruct
	.word	gBattleMoves
	.word	gLastMoves
	.word	gLastResultingMoves
	.word	gCurrentMove
.L1534:
	ldr	r1, .L1611
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldr	r1, .L1611+0x4
	strh	r1, [r0]
	ldr	r1, .L1611+0x8
	mov	r4, r9
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r1, #0x1
	neg	r1, r1
	strh	r1, [r0]
.L1535:
	ldr	r2, .L1611+0xc
	ldrb	r3, [r2]
	lsl	r0, r3, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	lsl	r0, r0, #0x1c
	ldr	r1, [r5]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1536	@cond_branch
	ldr	r0, .L1611+0x10
	add	r0, r3, r0
	mov	r3, r9
	ldrb	r1, [r3]
	strb	r1, [r0]
.L1536:
	ldr	r0, [r5]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1537	@cond_branch
	ldr	r0, .L1611+0x14
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1537	@cond_branch
	ldr	r0, .L1611+0x18
	ldrh	r3, [r0]
	ldr	r0, .L1611+0x4
	cmp	r3, r0
	bne	.L1538	@cond_branch
	ldr	r1, .L1611+0x1c
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r3, [r0]
	b	.L1533
.L1612:
	.align	2, 0
.L1611:
	.word	gLastMoves
	.word	0xffff
	.word	gLastResultingMoves
	.word	gBattlerTarget
	.word	gLastHitBy
	.word	gMoveResultFlags
	.word	gChosenMove
	.word	gLastLandedMoves
.L1538:
	ldr	r0, .L1613
	ldrb	r1, [r2]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldr	r4, .L1613+0x4
	ldrh	r0, [r4]
	strh	r0, [r1]
	ldr	r0, [r7]
	ldrb	r3, [r0, #0x13]
	cmp	r3, #0
	beq	.L1540	@cond_branch
	ldr	r0, .L1613+0x8
	ldrb	r1, [r2]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	mov	r0, #0x3f
	and	r0, r0, r3
	b	.L1564
.L1614:
	.align	2, 0
.L1613:
	.word	gLastLandedMoves
	.word	gCurrentMove
	.word	gLastHitByType
.L1540:
	ldr	r0, .L1615
	ldrb	r2, [r2]
	lsl	r2, r2, #0x1
	add	r2, r2, r0
	ldrh	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrb	r0, [r0, #0x2]
	strh	r0, [r2]
	b	.L1533
.L1616:
	.align	2, 0
.L1615:
	.word	gLastHitByType
.L1537:
	ldr	r0, .L1617
	ldrb	r1, [r2]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldr	r0, .L1617+0x4
.L1564:
	strh	r0, [r1]
.L1533:
	mov	r4, ip
	ldrb	r0, [r4, #0x14]
	add	r0, r0, #0x1
	strb	r0, [r4, #0x14]
	b	.L1477
.L1618:
	.align	2, 0
.L1617:
	.word	gLastLandedMoves
	.word	0xffff
.L1543:
	ldr	r0, .L1619
	ldrb	r1, [r0]
	ldr	r7, .L1619+0x4
	ldr	r2, .L1619+0x8
	ldrb	r3, [r2]
	lsl	r0, r3, #0x2
	add	r0, r0, r7
	ldr	r4, [r0]
	and	r1, r1, r4
	mov	r9, r2
	cmp	r1, #0
	bne	.L1544	@cond_branch
	ldr	r6, .L1619+0xc
	ldr	r5, [r6]
	add	r0, r5, #0
	add	r0, r0, #0x91
	ldrb	r0, [r0]
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L1544	@cond_branch
	ldr	r1, .L1619+0x10
	ldr	r2, [sp, #0x18]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1544	@cond_branch
	ldr	r0, .L1619+0x14
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1544	@cond_branch
	ldr	r4, .L1619+0x18
	ldrb	r0, [r4]
	cmp	r3, r0
	beq	.L1544	@cond_branch
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r7
	ldr	r0, [r0]
	lsl	r0, r0, #0x1c
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1544	@cond_branch
	ldr	r0, .L1619+0x1c
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1544	@cond_branch
	lsl	r1, r2, #0x1
	add	r1, r1, r5
	add	r1, r1, #0x98
	ldr	r3, .L1619+0x20
	ldrh	r0, [r3]
	strb	r0, [r1]
	ldrb	r1, [r4]
	ldr	r0, [r6]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	add	r1, r1, #0x99
	ldrh	r0, [r3]
	lsr	r0, r0, #0x8
	strb	r0, [r1]
	ldrb	r0, [r4]
	mov	r2, r9
	ldrb	r1, [r2]
	ldr	r2, [r6]
	lsl	r0, r0, #0x3
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0xe0
	ldrh	r1, [r3]
	strb	r1, [r0]
	ldrb	r1, [r4]
	mov	r4, r9
	ldrb	r0, [r4]
	ldr	r2, [r6]
	lsl	r1, r1, #0x3
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r2
	add	r1, r1, #0xe1
	ldrh	r0, [r3]
	lsr	r0, r0, #0x8
	strb	r0, [r1]
.L1544:
	mov	r5, ip
	ldrb	r0, [r5, #0x14]
	add	r0, r0, #0x1
	strb	r0, [r5, #0x14]
	b	.L1477
.L1620:
	.align	2, 0
.L1619:
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattlerAttacker
	.word	gBattleStruct
	.word	gBattleMoves
	.word	gHitMarker
	.word	gBattlerTarget
	.word	gMoveResultFlags
	.word	gChosenMove
.L1545:
	ldr	r5, .L1621
	ldr	r2, [r5]
	mov	r0, #0x80
	lsl	r0, r0, #0xc
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L1546	@cond_branch
	ldr	r0, .L1621+0x4
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1546	@cond_branch
	ldr	r1, .L1621+0x8
	ldr	r0, .L1621+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.L1546	@cond_branch
	ldr	r0, .L1621+0x10
	mov	r9, r0
	ldr	r1, .L1621+0x14
	mov	r8, r1
	ldrh	r0, [r1]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0x8
	bne	.L1546	@cond_branch
	mov	r6, #0x80
	lsl	r6, r6, #0x2
	add	r4, r6, #0
	and	r4, r4, r2
	cmp	r4, #0
	bne	.L1546	@cond_branch
	ldr	r7, .L1621+0x18
	ldrb	r0, [r7]
	bl	GetBattlerPosition
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L1621+0x1c
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.LCB15749
	bl	.L1560	@far jump
.LCB15749:
	ldr	r0, [r5]
	orr	r0, r0, r6
	str	r0, [r5]
	ldr	r2, .L1621+0x20
	mov	ip, r2
.L1546:
	mov	r3, ip
	ldrb	r0, [r3, #0x14]
	add	r0, r0, #0x1
	strb	r0, [r3, #0x14]
.L1477:
	ldr	r4, [sp, #0x10]
	cmp	r4, #0x1
	bne	.L1552	@cond_branch
	mov	r5, sl
	cmp	r5, #0
	bne	.L1552	@cond_branch
	mov	r0, #0x11
	mov	r1, ip
	strb	r0, [r1, #0x14]
.L1552:
	ldr	r2, [sp, #0x10]
	cmp	r2, #0x2
	bne	.L1476	@cond_branch
	ldr	r4, [sp, #0x14]
	mov	r3, ip
	ldrb	r3, [r3, #0x14]
	cmp	r4, r3
	bne	.L1476	@cond_branch
	mov	r0, #0x11
	mov	r4, ip
	strb	r0, [r4, #0x14]
.L1476:
	mov	r5, ip
	ldrb	r0, [r5, #0x14]
	cmp	r0, #0x11
	beq	.LCB15797
	bl	.L1556	@far jump
.LCB15797:
.L1475:
	mov	r1, ip
	ldrb	r0, [r1, #0x14]
	cmp	r0, #0x11
	bne	.L1467	@cond_branch
	mov	r2, sl
	cmp	r2, #0
	bne	.L1467	@cond_branch
	ldr	r1, .L1621+0x24
	ldr	r0, [r1]
	add	r0, r0, #0x3
.L1563:
	str	r0, [r1]
.L1467:
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1622:
	.align	2, 0
.L1621:
	.word	gHitMarker
	.word	gBattleTypeFlags
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
.Lfe87:
	.size	 atk49_moveend,.Lfe87-atk49_moveend
	.align	2, 0
	.type	 atk4A_typecalc2,function
	.thumb_func
atk4A_typecalc2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r4, #0x0
	mov	r5, #0x0
	ldr	r2, .L1648
	ldr	r0, .L1648+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	mov	r8, r0
	ldr	r2, .L1648+0x8
	ldr	r3, .L1648+0xc
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	mov	ip, r2
	add	r7, r3, #0
	cmp	r0, #0x1a
	bne	.L1624	@cond_branch
	mov	r1, r8
	cmp	r1, #0x4
	bne	.L1624	@cond_branch
	ldr	r3, .L1648+0x10
	strb	r0, [r3]
	ldr	r2, .L1648+0x14
	ldrb	r0, [r2]
	mov	r1, #0x9
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L1648+0x18
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r4, [r0]
	ldr	r0, .L1648+0x1c
	mov	r2, r8
	strb	r2, [r0, #0x6]
	ldrb	r0, [r7]
	ldrb	r1, [r3]
	bl	RecordAbilityBattle
	b	.L1625
.L1649:
	.align	2, 0
.L1648:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gLastUsedAbility
	.word	gMoveResultFlags
	.word	gLastLandedMoves
	.word	gBattleCommunication
.L1645:
.L1646:
	ldr	r0, .L1650
	ldrb	r1, [r0]
	mov	r2, #0x8
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L1625
.L1651:
	.align	2, 0
.L1650:
	.word	gMoveResultFlags
.L1624:
	ldr	r1, .L1652
	add	r0, r5, r1
	ldrb	r0, [r0]
	add	r6, r1, #0
	b	.L1647
.L1653:
	.align	2, 0
.L1652:
	.word	gTypeEffectiveness
.L1629:
	add	r0, r5, r6
	ldrb	r0, [r0]
	cmp	r0, r8
	bne	.L1632	@cond_branch
	add	r2, r5, #0x1
	add	r3, r2, r6
	ldrb	r1, [r7]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, ip
	add	r0, r0, #0x21
	ldrb	r1, [r3]
	add	r3, r2, #0
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L1633	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r6
	ldrb	r1, [r0]
	cmp	r1, #0
	beq	.L1645	@cond_branch
	cmp	r1, #0x5
	bne	.L1635	@cond_branch
	mov	r0, #0x4
	orr	r4, r4, r0
.L1635:
	cmp	r1, #0x14
	bne	.L1633	@cond_branch
	mov	r0, #0x2
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L1633:
	add	r2, r3, r6
	ldrb	r1, [r7]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, ip
	add	r1, r0, #0
	add	r1, r1, #0x22
	ldrb	r2, [r2]
	ldrb	r1, [r1]
	cmp	r2, r1
	bne	.L1632	@cond_branch
	add	r0, r0, #0x21
	ldrb	r1, [r0]
	cmp	r1, r2
	beq	.L1638	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1646	@cond_branch
.L1638:
	cmp	r1, r2
	beq	.L1639	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0]
	cmp	r0, #0x5
	bne	.L1639	@cond_branch
	mov	r0, #0x4
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L1639:
	add	r2, r3, r6
	ldrb	r1, [r7]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, ip
	add	r1, r0, #0
	add	r1, r1, #0x22
	ldrb	r2, [r2]
	ldrb	r1, [r1]
	cmp	r2, r1
	bne	.L1632	@cond_branch
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, r2
	beq	.L1632	@cond_branch
	add	r0, r5, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0]
	cmp	r0, #0x14
	bne	.L1632	@cond_branch
	mov	r0, #0x2
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L1632:
	add	r5, r5, #0x3
	add	r0, r5, r6
	ldrb	r0, [r0]
.L1647:
	cmp	r0, #0xff
	beq	.L1625	@cond_branch
	cmp	r0, #0xfe
	bne	.L1629	@cond_branch
	ldrb	r1, [r7]
	mov	r0, #0x58
	mul	r0, r0, r1
	mov	r1, ip
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x16
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1632	@cond_branch
.L1625:
	ldr	r2, .L1654
	ldr	r0, .L1654+0x4
	mov	r8, r0
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r6, [r0]
	cmp	r6, #0x19
	bne	.L1642	@cond_branch
	mov	r5, #0x29
	and	r5, r5, r4
	cmp	r5, #0
	bne	.L1642	@cond_branch
	ldr	r0, .L1654+0x8
	ldrb	r0, [r0]
	ldr	r7, .L1654+0xc
	ldrh	r1, [r7]
	bl	AttacksThisTurn
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x2
	bne	.L1642	@cond_branch
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1643	@cond_branch
	mov	r0, #0x6
	and	r4, r4, r0
	cmp	r4, #0x6
	bne	.L1642	@cond_branch
.L1643:
	ldr	r2, .L1654+0x10
	ldrh	r1, [r7]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	beq	.L1642	@cond_branch
	ldr	r3, .L1654+0x14
	strb	r6, [r3]
	ldr	r2, .L1654+0x18
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L1654+0x1c
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	strh	r5, [r0]
	ldr	r1, .L1654+0x20
	mov	r0, #0x3
	strb	r0, [r1, #0x6]
	ldrb	r0, [r2]
	ldrb	r1, [r3]
	bl	RecordAbilityBattle
.L1642:
	ldr	r0, .L1654+0x18
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1644	@cond_branch
	ldr	r2, .L1654+0x24
	ldr	r0, .L1654+0x8
	ldrb	r1, [r0]
	lsl	r1, r1, #0x4
	add	r1, r1, r2
	ldrb	r0, [r1, #0x1]
	mov	r2, #0x2
	orr	r0, r0, r2
	strb	r0, [r1, #0x1]
.L1644:
	ldr	r1, .L1654+0x28
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1655:
	.align	2, 0
.L1654:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gCurrentMove
	.word	gBattleMoves
	.word	gLastUsedAbility
	.word	gMoveResultFlags
	.word	gLastLandedMoves
	.word	gBattleCommunication
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
.Lfe88:
	.size	 atk4A_typecalc2,.Lfe88-atk4A_typecalc2
	.align	2, 0
	.type	 atk4B_returnatktoball,function
	.thumb_func
atk4B_returnatktoball:
	push	{r4, lr}
	ldr	r4, .L1658
	ldr	r0, .L1658+0x4
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r2, .L1658+0x8
	ldr	r1, .L1658+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1657	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitReturnMonToBall
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L1657:
	ldr	r1, .L1658+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1659:
	.align	2, 0
.L1658:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gHitMarker
	.word	gBitTable
	.word	gBattlescriptCurrInstr
.Lfe89:
	.size	 atk4B_returnatktoball,.Lfe89-atk4B_returnatktoball
	.align	2, 0
	.type	 atk4C_getswitchedmondata,function
	.thumb_func
atk4C_getswitchedmondata:
	push	{r4, r5, lr}
	ldr	r0, .L1662
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1660	@cond_branch
	ldr	r5, .L1662+0x4
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L1662+0x8
	strb	r0, [r4]
	ldr	r3, .L1662+0xc
	ldrb	r0, [r4]
	lsl	r2, r0, #0x1
	add	r2, r2, r3
	ldr	r1, .L1662+0x10
	ldr	r1, [r1]
	add	r0, r0, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	strh	r0, [r2]
	ldr	r1, .L1662+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitGetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
.L1660:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1663:
	.align	2, 0
.L1662:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gBitTable
.Lfe90:
	.size	 atk4C_getswitchedmondata,.Lfe90-atk4C_getswitchedmondata
	.align	2, 0
	.type	 atk4D_switchindataupdate,function
	.thumb_func
atk4D_switchindataupdate:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x58
	ldr	r0, .L1679
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB16381
	b	.L1664	@long jump
.LCB16381:
	ldr	r0, .L1679+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L1679+0x8
	strb	r0, [r4]
	ldr	r6, .L1679+0xc
	ldrb	r0, [r4]
	mov	r5, #0x58
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r6
	mov	r0, sp
	mov	r2, #0x58
	bl	memcpy
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r3, r0, r6
	mov	r2, #0x0
	ldr	r5, .L1679+0x10
.L1669:
	add	r0, r3, r2
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x4
	add	r1, r2, r1
	add	r1, r1, r5
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x57
	bls	.L1669	@cond_branch
	ldr	r4, .L1679+0xc
	ldr	r6, .L1679+0x8
	ldrb	r0, [r6]
	mov	r7, #0x58
	mov	r2, r0
	mul	r2, r2, r7
	add	r2, r2, r4
	ldr	r3, .L1679+0x14
	ldrh	r1, [r2]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x6]
	add	r2, r2, #0x21
	strb	r0, [r2]
	ldrb	r0, [r6]
	mov	r1, r0
	mul	r1, r1, r7
	add	r1, r1, r4
	ldrh	r2, [r1]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x7]
	add	r1, r1, #0x22
	strb	r0, [r1]
	ldrb	r0, [r6]
	mov	r1, r0
	mul	r1, r1, r7
	add	r1, r1, r4
	ldrh	r0, [r1]
	ldrb	r1, [r1, #0x17]
	lsr	r1, r1, #0x7
	bl	GetAbilityBySpecies
	ldrb	r1, [r6]
	mul	r1, r1, r7
	add	r1, r1, r4
	add	r1, r1, #0x20
	strb	r0, [r1]
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L1679+0x18
	add	r0, r0, #0x29
	add	r0, r2, r0
	ldrb	r1, [r0]
	ldr	r3, .L1679+0x1c
	ldr	r2, .L1679+0x20
	ldrb	r5, [r6]
	lsl	r0, r5, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	and	r1, r1, r0
	mov	ip, r4
	cmp	r1, #0
	beq	.L1671	@cond_branch
	mov	r0, r5
	mul	r0, r0, r7
	add	r0, r0, ip
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
.L1671:
	ldr	r2, .L1679+0x24
	ldr	r0, .L1679+0x28
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0x7f
	bne	.L1672	@cond_branch
	mov	r2, #0x0
	add	r4, r6, #0
	mov	r6, #0x58
	mov	r5, ip
	add	r5, r5, #0x18
	add	r3, sp, #0x18
.L1676:
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r2, r1
	add	r1, r1, r5
	add	r0, r3, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r2, r2, #0x1
	cmp	r2, #0x7
	ble	.L1676	@cond_branch
	ldr	r0, .L1679+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	mov	r1, ip
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r1, [sp, #0x50]
	str	r1, [r0]
.L1672:
	bl	SwitchInClearSetData
	ldr	r0, .L1679+0x2c
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1678	@cond_branch
	ldr	r4, .L1679+0xc
	ldr	r0, .L1679+0x8
	ldrb	r3, [r0]
	mov	r0, #0x58
	mov	r2, r3
	mul	r2, r2, r0
	add	r1, r2, r4
	ldrh	r0, [r1, #0x2c]
	lsr	r0, r0, #0x1
	ldrh	r1, [r1, #0x28]
	cmp	r0, r1
	bcc	.L1678	@cond_branch
	cmp	r1, #0
	beq	.L1678	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x4c
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1678	@cond_branch
	ldr	r0, .L1679+0x30
	ldr	r2, [r0]
	add	r2, r2, #0x92
	ldr	r1, .L1679+0x1c
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
.L1678:
	ldr	r0, .L1679+0x34
	ldr	r3, .L1679+0x8
	ldrb	r2, [r3]
	strb	r2, [r0, #0x17]
	ldr	r1, .L1679+0x38
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x7
	strb	r0, [r1, #0x1]
	strb	r2, [r1, #0x2]
	ldr	r2, .L1679+0x20
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L1679+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L1664:
	add	sp, sp, #0x58
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1680:
	.align	2, 0
.L1679:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleMons
	.word	gBattleBufferB
	.word	gBaseStats
	.word	gWishFutureKnock
	.word	gBitTable
	.word	gBattlerPartyIndexes
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleTypeFlags
	.word	gBattleStruct
	.word	gBattleScripting
	.word	gBattleTextBuff1
.Lfe91:
	.size	 atk4D_switchindataupdate,.Lfe91-atk4D_switchindataupdate
	.align	2, 0
	.type	 atk4E_switchinanim,function
	.thumb_func
atk4E_switchinanim:
	push	{r4, r5, r6, lr}
	ldr	r0, .L1685
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1681	@cond_branch
	ldr	r0, .L1685+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r6, .L1685+0x8
	strb	r0, [r6]
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1683	@cond_branch
	ldr	r0, .L1685+0xc
	ldr	r0, [r0]
	ldr	r1, .L1685+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1683	@cond_branch
	ldr	r4, .L1685+0x14
	ldrb	r0, [r6]
	mov	r5, #0x58
	mul	r0, r0, r5
	add	r0, r0, r4
	ldrh	r0, [r0]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrb	r1, [r6]
	mul	r1, r1, r5
	add	r4, r4, #0x48
	add	r1, r1, r4
	ldr	r2, [r1]
	mov	r1, #0x2
	bl	HandleSetPokedexFlag
.L1683:
	ldr	r2, .L1685+0x18
	ldr	r1, .L1685+0x1c
	ldr	r5, .L1685+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldrb	r0, [r2]
	bic	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L1685+0x20
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r4, .L1685+0x4
	ldr	r0, [r4]
	ldrb	r2, [r0, #0x2]
	mov	r0, #0x0
	bl	BtlController_EmitSwitchInAnim
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r4]
	add	r0, r0, #0x3
	str	r0, [r4]
	ldr	r0, .L1685+0xc
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1681	@cond_branch
	bl	BattleArena_InitPoints
.L1681:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1686:
	.align	2, 0
.L1685:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	0x63f0902
	.word	gBattleMons
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattlerPartyIndexes
.Lfe92:
	.size	 atk4E_switchinanim,.Lfe92-atk4E_switchinanim
	.align	2, 0
	.type	 atk4F_jumpifcantswitch,function
	.thumb_func
atk4F_jumpifcantswitch:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r4, .L1751
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x1]
	mov	r0, #0x7f
	and	r0, r0, r1
	bl	GetBattlerForBattleScript
	ldr	r3, .L1751+0x4
	strb	r0, [r3]
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1688	@cond_branch
	ldr	r1, .L1751+0x8
	ldrb	r3, [r3]
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L1751+0xc
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1689	@cond_branch
	ldr	r1, .L1751+0x10
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1688	@cond_branch
.L1689:
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1690
.L1752:
	.align	2, 0
.L1751:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleMons
	.word	0x400e000
	.word	gStatuses3
.L1688:
	ldr	r0, .L1753
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1691	@cond_branch
	.code	16
	ldr	r5, .L1753+0x4
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1753+0x8
	mov	r8, r1
	cmp	r0, #0x1
	bne	.L1692	@cond_branch
	ldr	r0, .L1753+0xc
	mov	r8, r0
.L1692:
	mov	r4, #0x0
	ldrb	r1, [r5]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1694	@cond_branch
	mov	r4, #0x3
.L1694:
	add	r6, r4, #0x3
	cmp	r4, r6
	bge	.L1696	@cond_branch
	ldr	r7, .L1753+0x10
.L1698:
	mov	r0, #0x64
	mul	r0, r0, r4
	mov	r1, r8
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1697	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L1697	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L1697	@cond_branch
	ldr	r0, .L1753+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, r4
	bne	.L1696	@cond_branch
.L1697:
	add	r4, r4, #0x1
	cmp	r4, r6
	blt	.L1698	@cond_branch
.L1696:
	cmp	r4, r6
	bne	.LCB16909
	b	.L1749	@long jump
.LCB16909:
	b	.L1747
.L1754:
	.align	2, 0
.L1753:
	.word	gBattleTypeFlags
	.word	gActiveBattler
	.word	gPlayerParty
	.word	gEnemyParty
	.word	gBattlerPartyIndexes
.L1691:
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1704	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x10
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1705	@cond_branch
	ldr	r5, .L1755
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1706	@cond_branch
	ldr	r0, .L1755+0x4
	b	.L1750
.L1756:
	.align	2, 0
.L1755:
	.word	gActiveBattler
	.word	gPlayerParty
.L1706:
	ldr	r1, .L1757
	mov	r8, r1
	ldrb	r0, [r5]
	mov	r4, #0x3
	cmp	r0, #0x1
	bne	.L1711	@cond_branch
	mov	r4, #0x0
	b	.L1711
.L1758:
	.align	2, 0
.L1757:
	.word	gEnemyParty
.L1705:
	ldr	r5, .L1759
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1759+0x4
	mov	r8, r1
	cmp	r0, #0x1
	bne	.L1712	@cond_branch
	ldr	r0, .L1759+0x8
.L1750:
	mov	r8, r0
.L1712:
	mov	r4, #0x0
	ldrb	r0, [r5]
	bl	GetBattlerMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetLinkTrainerFlankId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L1711	@cond_branch
	mov	r4, #0x3
.L1711:
	add	r6, r4, #0x3
	cmp	r4, r6
	bge	.L1696	@cond_branch
	ldr	r7, .L1759+0xc
.L1718:
	mov	r0, #0x64
	mul	r0, r0, r4
	mov	r1, r8
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1717	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L1717	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L1717	@cond_branch
	ldr	r0, .L1759
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, r4
	bne	.L1696	@cond_branch
.L1717:
	add	r4, r4, #0x1
	cmp	r4, r6
	blt	.L1718	@cond_branch
	b	.L1696
.L1760:
	.align	2, 0
.L1759:
	.word	gActiveBattler
	.word	gPlayerParty
	.word	gEnemyParty
	.word	gBattlerPartyIndexes
.L1704:
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1724	@cond_branch
	ldr	r5, .L1761
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1724	@cond_branch
	ldr	r0, .L1761+0x4
	mov	r8, r0
	mov	r4, #0x0
	ldrb	r0, [r5]
	cmp	r0, #0x3
	bne	.L1725	@cond_branch
	mov	r4, #0x3
.L1725:
	add	r6, r4, #0x3
	cmp	r4, r6
	blt	.LCB17092
	b	.L1696	@long jump
.LCB17092:
	ldr	r7, .L1761+0x8
.L1729:
	mov	r0, #0x64
	mul	r0, r0, r4
	mov	r1, r8
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1728	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L1728	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L1728	@cond_branch
	ldr	r0, .L1761
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, r4
	beq	.LCB17125
	b	.L1696	@long jump
.LCB17125:
.L1728:
	add	r4, r4, #0x1
	cmp	r4, r6
	blt	.L1729	@cond_branch
	b	.L1696
.L1762:
	.align	2, 0
.L1761:
	.word	gActiveBattler
	.word	gEnemyParty
	.word	gBattlerPartyIndexes
.L1724:
	ldr	r0, .L1763
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1
	bne	.L1735	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L1763+0x4
	ldr	r0, [r0]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L1736	@cond_branch
	mov	r0, #0x3
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	b	.L1737
.L1764:
	.align	2, 0
.L1763:
	.word	gActiveBattler
	.word	gBattleTypeFlags
.L1736:
	add	r6, r7, #0
.L1737:
	ldr	r0, .L1765
	mov	r8, r0
	b	.L1738
.L1766:
	.align	2, 0
.L1765:
	.word	gEnemyParty
.L1735:
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L1767
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1739	@cond_branch
	mov	r0, #0x2
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	b	.L1740
.L1768:
	.align	2, 0
.L1767:
	.word	gBattleTypeFlags
.L1739:
	add	r6, r7, #0
.L1740:
	ldr	r1, .L1769
	mov	r8, r1
.L1738:
	mov	r4, #0x0
.L1744:
	mov	r0, #0x64
	mul	r0, r0, r4
	mov	r1, r8
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L1743	@cond_branch
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L1743	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L1743	@cond_branch
	ldr	r1, .L1769+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	beq	.L1743	@cond_branch
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	bne	.L1742	@cond_branch
.L1743:
	add	r4, r4, #0x1
	cmp	r4, #0x5
	ble	.L1744	@cond_branch
.L1742:
	cmp	r4, #0x6
	bne	.L1747	@cond_branch
.L1749:
	ldr	r3, .L1769+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1690
.L1770:
	.align	2, 0
.L1769:
	.word	gPlayerParty
	.word	gBattlerPartyIndexes
	.word	gBattlescriptCurrInstr
.L1747:
	ldr	r1, .L1771
	ldr	r0, [r1]
	add	r0, r0, #0x6
	str	r0, [r1]
.L1690:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1772:
	.align	2, 0
.L1771:
	.word	gBattlescriptCurrInstr
.Lfe93:
	.size	 atk4F_jumpifcantswitch,.Lfe93-atk4F_jumpifcantswitch
	.align	2, 0
	.type	 sub_804CF10,function
	.thumb_func
sub_804CF10:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r5, .L1774
	ldrb	r0, [r5]
	ldr	r4, .L1774+0x4
	ldr	r1, [r4]
	add	r1, r0, r1
	add	r1, r1, #0x58
	ldr	r3, .L1774+0x8
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r5]
	ldr	r1, [r4]
	add	r0, r0, r1
	add	r0, r0, #0x5c
	mov	r1, #0x6
	strb	r1, [r0]
	ldr	r1, [r4]
	add	r1, r1, #0x93
	ldr	r3, .L1774+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r3, [r0]
	ldrb	r0, [r1]
	bic	r0, r0, r3
	strb	r0, [r1]
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, #0x60
	ldr	r0, [r4]
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r3, #0x0
	bl	BtlController_EmitChoosePokemon
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1775:
	.align	2, 0
.L1774:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattlerPartyIndexes
	.word	gBitTable
.Lfe94:
	.size	 sub_804CF10,.Lfe94-sub_804CF10
	.align	2, 0
	.type	 atk50_openpartyscreen,function
	.thumb_func
atk50_openpartyscreen:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	mov	r7, #0x0
	mov	r0, #0x0
	mov	r9, r0
	ldr	r6, .L1860
	ldr	r2, [r6]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	mov	r8, r1
	ldrb	r1, [r2, #0x1]
	add	r0, r1, #0
	mov	ip, r6
	cmp	r0, #0x5
	beq	.LCB17414
	b	.L1777	@long jump
.LCB17414:
	ldr	r0, .L1860+0x4
	ldr	r0, [r0]
	mov	r1, #0x41
	and	r1, r1, r0
	cmp	r1, #0x1
	beq	.L1778	@cond_branch
	ldr	r1, .L1860+0x8
	strb	r7, [r1]
	ldr	r0, .L1860+0xc
	ldrb	r0, [r0]
	cmp	r7, r0
	bcc	.LCB17431
	b	.L1789	@long jump
.LCB17431:
	ldr	r7, .L1860+0x10
	ldr	r6, .L1860+0x14
	add	r4, r1, #0
	ldr	r2, .L1860+0x18
	mov	r8, r2
.L1782:
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r6
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r7]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1783	@cond_branch
	add	r0, r2, #0
	mov	r1, #0x6
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1784	@cond_branch
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	mov	r2, r8
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r7]
	bic	r0, r0, r1
	str	r0, [r7]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitLinkStandbyMsg
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L1781
.L1861:
	.align	2, 0
.L1860:
	.word	gBattlescriptCurrInstr
	.word	gBattleTypeFlags
	.word	gActiveBattler
	.word	gBattlersCount
	.word	gHitMarker
	.word	gBitTable
	.word	gAbsentBattlerFlags
.L1784:
	ldr	r5, .L1862
	ldrb	r0, [r4]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1781	@cond_branch
	mov	r0, #0x6
	bl	sub_804CF10
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L1781
.L1863:
	.align	2, 0
.L1862:
	.word	gSpecialStatuses
.L1783:
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitLinkStandbyMsg
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L1781:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L1864
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L1782	@cond_branch
	b	.L1789
.L1865:
	.align	2, 0
.L1864:
	.word	gBattlersCount
.L1778:
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB17570
	b	.L1789	@long jump
.LCB17570:
	ldr	r0, .L1866
	mov	r8, r0
	ldr	r0, [r0]
	lsr	r5, r0, #0x1c
	ldr	r6, .L1866+0x4
	ldr	r0, [r6]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1791	@cond_branch
	ldr	r4, .L1866+0x8
	strb	r7, [r4]
	mov	r0, #0x0
	mov	r1, #0x6
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1792	@cond_branch
	ldr	r2, .L1866+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	mov	r2, r8
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x0
	bl	BtlController_EmitCmd42
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L1791
.L1867:
	.align	2, 0
.L1866:
	.word	gHitMarker
	.word	gBitTable
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
.L1792:
	ldr	r6, .L1868
	ldrb	r0, [r4]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1794	@cond_branch
	ldr	r0, .L1868+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x5e
	ldrb	r0, [r0]
	bl	sub_804CF10
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L1791
.L1869:
	.align	2, 0
.L1868:
	.word	gSpecialStatuses
	.word	gBattleStruct
.L1794:
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitLinkStandbyMsg
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	mov	r0, #0x1
	mov	r9, r0
.L1791:
	ldr	r6, .L1870
	ldr	r0, [r6, #0x8]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1796	@cond_branch
	ldr	r0, [r6]
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L1796	@cond_branch
	ldr	r4, .L1870+0x4
	mov	r0, #0x2
	strb	r0, [r4]
	mov	r0, #0x2
	mov	r1, #0x6
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1797	@cond_branch
	ldr	r2, .L1870+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, .L1870+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x0
	bl	BtlController_EmitCmd42
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L1796
.L1871:
	.align	2, 0
.L1870:
	.word	gBitTable
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
	.word	gHitMarker
.L1797:
	ldr	r6, .L1872
	ldrb	r0, [r4]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1799	@cond_branch
	ldr	r0, .L1872+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	bl	sub_804CF10
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L1796
.L1873:
	.align	2, 0
.L1872:
	.word	gSpecialStatuses
	.word	gBattleStruct
.L1799:
	mov	r0, #0x1
	mov	r1, r9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1796	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitLinkStandbyMsg
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L1796:
	ldr	r6, .L1874
	ldr	r0, [r6, #0x4]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1802	@cond_branch
	ldr	r4, .L1874+0x4
	mov	r0, #0x1
	strb	r0, [r4]
	mov	r0, #0x1
	mov	r1, #0x6
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1803	@cond_branch
	ldr	r2, .L1874+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, .L1874+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x0
	bl	BtlController_EmitCmd42
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L1802
.L1875:
	.align	2, 0
.L1874:
	.word	gBitTable
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
	.word	gHitMarker
.L1803:
	ldr	r6, .L1876
	ldrb	r0, [r4]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1805	@cond_branch
	ldr	r0, .L1876+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x5f
	ldrb	r0, [r0]
	bl	sub_804CF10
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L1802
.L1877:
	.align	2, 0
.L1876:
	.word	gSpecialStatuses
	.word	gBattleStruct
.L1805:
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitLinkStandbyMsg
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	mov	r0, #0x2
	mov	r2, r9
	orr	r2, r2, r0
	mov	r9, r2
.L1802:
	ldr	r6, .L1878
	ldr	r0, [r6, #0xc]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1807	@cond_branch
	ldr	r0, [r6, #0x4]
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L1807	@cond_branch
	ldr	r4, .L1878+0x4
	mov	r0, #0x3
	strb	r0, [r4]
	mov	r0, #0x3
	mov	r1, #0x6
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1808	@cond_branch
	ldr	r2, .L1878+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, .L1878+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x0
	bl	BtlController_EmitCmd42
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L1807
.L1879:
	.align	2, 0
.L1878:
	.word	gBitTable
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
	.word	gHitMarker
.L1808:
	ldr	r6, .L1880
	ldrb	r0, [r4]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1810	@cond_branch
	ldr	r0, .L1880+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x5d
	ldrb	r0, [r0]
	bl	sub_804CF10
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L1807
.L1881:
	.align	2, 0
.L1880:
	.word	gSpecialStatuses
	.word	gBattleStruct
.L1810:
	mov	r0, #0x2
	mov	r1, r9
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1807	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitLinkStandbyMsg
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L1807:
	ldr	r1, .L1882
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1813	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x28
	ldrb	r0, [r0]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1813	@cond_branch
	cmp	r5, #0
	beq	.L1813	@cond_branch
	ldr	r0, .L1882+0x4
	ldrb	r1, [r0]
	ldr	r0, .L1882+0x8
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1815	@cond_branch
	ldr	r1, .L1882+0xc
	mov	r0, #0x2
	strb	r0, [r1]
	b	.L1816
.L1883:
	.align	2, 0
.L1882:
	.word	gSpecialStatuses
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gActiveBattler
.L1815:
	ldr	r0, .L1884
	strb	r1, [r0]
.L1816:
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitLinkStandbyMsg
	ldr	r0, .L1884
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
.L1813:
	ldr	r1, .L1884+0x4
	ldrb	r0, [r1, #0x14]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1789	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x3c
	ldrb	r0, [r0]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1789	@cond_branch
	cmp	r5, #0
	beq	.L1789	@cond_branch
	ldr	r0, .L1884+0x8
	ldrb	r0, [r0]
	ldr	r1, .L1884+0xc
	ldr	r1, [r1, #0x4]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1819	@cond_branch
	ldr	r1, .L1884
	mov	r0, #0x3
	b	.L1859
.L1885:
	.align	2, 0
.L1884:
	.word	gActiveBattler
	.word	gSpecialStatuses
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L1819:
	ldr	r1, .L1886
	mov	r0, #0x1
.L1859:
	strb	r0, [r1]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitLinkStandbyMsg
	ldr	r0, .L1886
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
.L1789:
	ldr	r1, .L1886+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x6
	str	r0, [r1]
	b	.L1821
.L1887:
	.align	2, 0
.L1886:
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.L1777:
	cmp	r0, #0x6
	beq	.LCB18140
	b	.L1822	@long jump
.LCB18140:
	ldr	r0, .L1888
	ldr	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB18147
	b	.L1823	@long jump
.LCB18147:
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	bne	.LCB18152
	b	.L1824	@long jump
.LCB18152:
	ldr	r7, .L1888+0x4
	ldr	r0, [r7]
	lsr	r5, r0, #0x1c
	ldr	r4, .L1888+0x8
	ldr	r0, [r4, #0x8]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1825	@cond_branch
	ldr	r0, [r4]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1825	@cond_branch
	ldr	r6, .L1888+0xc
	mov	r0, #0x2
	strb	r0, [r6]
	ldr	r0, .L1888+0x10
	ldrb	r1, [r0, #0x1]
	mov	r0, #0x2
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1826	@cond_branch
	ldr	r2, .L1888+0x14
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r7]
	bic	r0, r0, r1
	str	r0, [r7]
	mov	r0, #0x0
	bl	BtlController_EmitCmd42
	ldrb	r0, [r6]
	bl	MarkBattlerForControllerExec
	b	.L1825
.L1889:
	.align	2, 0
.L1888:
	.word	gBattleTypeFlags
	.word	gHitMarker
	.word	gBitTable
	.word	gActiveBattler
	.word	gBattleBufferB
	.word	gAbsentBattlerFlags
.L1826:
	ldr	r4, .L1890
	ldrb	r0, [r6]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1825	@cond_branch
	ldr	r0, .L1890+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	bl	sub_804CF10
	ldrb	r1, [r6]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
.L1825:
	ldr	r4, .L1890+0x8
	ldr	r0, [r4, #0xc]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1829	@cond_branch
	ldr	r0, [r4, #0x4]
	and	r5, r5, r0
	cmp	r5, #0
	beq	.L1829	@cond_branch
	ldr	r5, .L1890+0xc
	mov	r0, #0x3
	strb	r0, [r5]
	ldr	r0, .L1890+0x10
	ldr	r2, .L1890+0x14
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x3
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1830	@cond_branch
	ldr	r2, .L1890+0x18
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, .L1890+0x1c
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	mov	r0, #0x0
	bl	BtlController_EmitCmd42
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	b	.L1829
.L1891:
	.align	2, 0
.L1890:
	.word	gSpecialStatuses
	.word	gBattleStruct
	.word	gBitTable
	.word	gActiveBattler
	.word	gBattleBufferB
	.word	0x201
	.word	gAbsentBattlerFlags
	.word	gHitMarker
.L1830:
	ldr	r4, .L1892
	ldrb	r0, [r5]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r0, [r1]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	blt	.L1829	@cond_branch
	ldr	r0, .L1892+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x5d
	ldrb	r0, [r0]
	bl	sub_804CF10
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
.L1829:
	ldr	r1, .L1892+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x6
	str	r0, [r1]
	mov	ip, r1
	b	.L1834
.L1893:
	.align	2, 0
.L1892:
	.word	gSpecialStatuses
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
.L1824:
.L1823:
	add	r0, r2, #0x6
	str	r0, [r6]
.L1834:
	ldr	r0, .L1894
	ldr	r0, [r0]
	lsr	r5, r0, #0x1c
	ldr	r1, .L1894+0x4
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r4, .L1894+0x8
	ldr	r2, [r4]
	and	r2, r2, r5
	ldr	r6, .L1894+0xc
	cmp	r2, #0
	bne	.L1836	@cond_branch
	add	r7, r6, #0
	ldrb	r0, [r6]
	cmp	r2, r0
	bcs	.L1836	@cond_branch
	add	r3, r1, #0
.L1839:
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	ldrb	r2, [r3]
	lsl	r0, r2, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L1836	@cond_branch
	ldrb	r0, [r7]
	cmp	r2, r0
	bcc	.L1839	@cond_branch
.L1836:
	ldrb	r0, [r1]
	ldrb	r6, [r6]
	cmp	r0, r6
	beq	.LCB18430
	b	.L1821	@long jump
.LCB18430:
	mov	r1, r8
	mov	r2, ip
	str	r1, [r2]
	b	.L1821
.L1895:
	.align	2, 0
.L1894:
	.word	gHitMarker
	.word	gBattlerFainted
	.word	gBitTable
	.word	gBattlersCount
.L1822:
	mov	r0, #0x80
	and	r0, r0, r1
	mov	r5, #0x1
	cmp	r0, #0
	beq	.L1843	@cond_branch
	mov	r5, #0x0
.L1843:
	mov	r0, #0x7f
	and	r0, r0, r1
	bl	GetBattlerForBattleScript
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L1896
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	bge	.L1845	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, #0x6
	str	r0, [r6]
	b	.L1821
.L1897:
	.align	2, 0
.L1896:
	.word	gSpecialStatuses
.L1845:
	add	r0, r7, #0
	mov	r1, #0x6
	mov	r2, #0x6
	bl	HasNoMonsToSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1847	@cond_branch
	ldr	r2, .L1898
	strb	r7, [r2]
	ldr	r3, .L1898+0x4
	ldr	r4, .L1898+0x8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	ldrb	r1, [r3]
	orr	r0, r0, r1
	strb	r0, [r3]
	ldr	r3, .L1898+0xc
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	ldr	r0, [r3]
	bic	r0, r0, r1
	str	r0, [r3]
	mov	r0, r8
	str	r0, [r6]
	b	.L1821
.L1899:
	.align	2, 0
.L1898:
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gHitMarker
.L1847:
	ldr	r4, .L1900
	strb	r7, [r4]
	ldrb	r0, [r4]
	ldr	r3, .L1900+0x4
	ldr	r1, [r3]
	add	r1, r0, r1
	add	r1, r1, #0x58
	ldr	r2, .L1900+0x8
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r4]
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0x5c
	mov	r1, #0x6
	strb	r1, [r0]
	ldr	r1, [r3]
	add	r1, r1, #0x93
	ldr	r2, .L1900+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r2, [r0]
	ldrb	r0, [r1]
	bic	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r4]
	mov	r0, #0x2
	eor	r0, r0, r1
	ldr	r3, [r3]
	add	r0, r0, r3
	add	r0, r0, #0x5c
	ldrb	r2, [r0]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, #0x60
	add	r3, r3, r0
	str	r3, [sp]
	mov	r0, #0x0
	add	r1, r5, #0
	mov	r3, #0x0
	bl	BtlController_EmitChoosePokemon
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r6]
	add	r0, r0, #0x6
	str	r0, [r6]
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1849	@cond_branch
	ldr	r1, .L1900+0x10
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0xfe
	bhi	.L1849	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1, #0x2]
.L1849:
	ldr	r0, .L1900+0x14
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1850	@cond_branch
	ldr	r1, .L1900
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L1900+0x18
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1821	@cond_branch
	add	r4, r1, #0
.L1854:
	ldrb	r0, [r4]
	cmp	r0, r7
	beq	.L1853	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitLinkStandbyMsg
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L1853:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L1900+0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.L1854	@cond_branch
	b	.L1821
.L1901:
	.align	2, 0
.L1900:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattlerPartyIndexes
	.word	gBitTable
	.word	gBattleResults
	.word	gBattleTypeFlags
	.word	gBattlersCount
.L1850:
	add	r0, r7, #0
	bl	GetBattlerPosition
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r4, .L1902
	strb	r0, [r4]
	ldr	r0, .L1902+0x4
	ldrb	r1, [r0]
	ldr	r2, .L1902+0x8
	ldrb	r3, [r4]
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1858	@cond_branch
	mov	r0, #0x2
	eor	r3, r3, r0
	strb	r3, [r4]
.L1858:
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitLinkStandbyMsg
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L1821:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1903:
	.align	2, 0
.L1902:
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
	.word	gBitTable
.Lfe95:
	.size	 atk50_openpartyscreen,.Lfe95-atk50_openpartyscreen
	.align	2, 0
	.type	 atk51_switchhandleorder,function
	.thumb_func
atk51_switchhandleorder:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L1927
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB18735
	b	.L1904	@long jump
.LCB18735:
	ldr	r4, .L1927+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r5, .L1927+0x8
	strb	r0, [r5]
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0x1
	beq	.L1915	@cond_branch
	cmp	r0, #0x1
	bgt	.L1926	@cond_branch
	cmp	r0, #0
	beq	.L1907	@cond_branch
	b	.L1906
.L1928:
	.align	2, 0
.L1927:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.L1926:
	cmp	r0, #0x2
	beq	.L1917	@cond_branch
	cmp	r0, #0x3
	beq	.L1919	@cond_branch
	b	.L1906
.L1907:
	mov	r6, #0x0
	ldr	r0, .L1929
	ldrb	r0, [r0]
	cmp	r6, r0
	blt	.LCB18778
	b	.L1906	@long jump
.LCB18778:
	ldr	r7, .L1929+0x4
.L1911:
	ldrb	r0, [r7]
	cmp	r0, #0x22
	bne	.L1910	@cond_branch
	ldr	r5, .L1929+0x8
	ldr	r0, [r5]
	add	r0, r6, r0
	add	r0, r0, #0x5c
	ldrb	r1, [r7, #0x1]
	strb	r1, [r0]
	ldr	r0, [r5]
	add	r0, r0, #0x93
	ldrb	r1, [r0]
	ldr	r2, .L1929+0xc
	lsl	r0, r6, #0x2
	add	r0, r0, r2
	ldr	r4, [r0]
	and	r1, r1, r4
	cmp	r1, #0
	bne	.L1910	@cond_branch
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r7, #0x1]
	bl	RecordedBattle_SetBattlerAction
	ldr	r1, [r5]
	add	r1, r1, #0x93
	ldrb	r0, [r1]
	orr	r4, r4, r0
	strb	r4, [r1]
.L1910:
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	add	r7, r7, r0
	add	r6, r6, #0x1
	ldr	r0, .L1929
	ldrb	r0, [r0]
	cmp	r6, r0
	blt	.L1911	@cond_branch
	b	.L1906
.L1930:
	.align	2, 0
.L1929:
	.word	gBattlersCount
	.word	gBattleBufferB
	.word	gBattleStruct
	.word	gBitTable
.L1915:
	ldr	r0, .L1931
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB18852
	b	.L1906	@long jump
.LCB18852:
	ldrb	r0, [r5]
	bl	sub_803BDA0
	b	.L1906
.L1932:
	.align	2, 0
.L1931:
	.word	gBattleTypeFlags
.L1917:
	ldr	r4, .L1933
	ldr	r0, [r4]
	add	r0, r0, #0x93
	ldrb	r1, [r0]
	ldr	r6, .L1933+0x4
	ldrb	r2, [r5]
	lsl	r0, r2, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1919	@cond_branch
	ldr	r0, .L1933+0x8
	lsl	r1, r2, #0x9
	add	r0, r0, #0x1
	add	r1, r1, r0
	ldrb	r1, [r1]
	add	r0, r2, #0
	bl	RecordedBattle_SetBattlerAction
	ldr	r2, [r4]
	add	r2, r2, #0x93
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
.L1919:
	ldr	r1, .L1933+0xc
	ldr	r6, .L1933+0x8
	ldr	r7, .L1933+0x10
	ldrb	r0, [r7]
	lsl	r0, r0, #0x9
	add	r2, r6, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	ldr	r1, .L1933
	mov	ip, r1
	ldr	r1, [r1]
	add	r1, r0, r1
	add	r1, r1, #0x5c
	lsl	r0, r0, #0x9
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r0, .L1933+0x14
	ldr	r1, [r0]
	mov	r0, #0x42
	and	r0, r0, r1
	cmp	r0, #0x42
	bne	.L1920	@cond_branch
	ldrb	r0, [r7]
	mov	r3, ip
	ldr	r2, [r3]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r2
	add	r1, r1, #0x60
	ldrb	r2, [r1]
	mov	r0, #0xf
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r7]
	ldr	r2, [r3]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r2
	add	r1, r1, #0x60
	lsl	r0, r0, #0x9
	add	r5, r6, #0x2
	add	r0, r0, r5
	ldrb	r2, [r0]
	mov	r3, #0xf0
	add	r0, r3, #0
	and	r0, r0, r2
	ldrb	r2, [r1]
	orr	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r7]
	mov	r0, ip
	ldr	r2, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x61
	lsl	r1, r1, #0x9
	add	r6, r6, #0x3
	add	r1, r1, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	ldrb	r0, [r7]
	mov	r4, #0x2
	eor	r0, r0, r4
	mov	r1, ip
	ldr	r2, [r1]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r2
	add	r1, r1, #0x60
	ldrb	r2, [r1]
	add	r0, r3, #0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r7]
	eor	r0, r0, r4
	mov	r1, ip
	ldr	r2, [r1]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	add	r1, r1, r2
	add	r1, r1, #0x60
	ldrb	r0, [r7]
	lsl	r0, r0, #0x9
	add	r0, r0, r5
	ldrb	r0, [r0]
	and	r3, r3, r0
	lsr	r3, r3, #0x4
	ldrb	r0, [r1]
	orr	r3, r3, r0
	strb	r3, [r1]
	ldrb	r0, [r7]
	eor	r4, r4, r0
	mov	r2, ip
	ldr	r0, [r2]
	lsl	r1, r4, #0x1
	add	r1, r1, r4
	add	r1, r1, r0
	add	r1, r1, #0x62
	ldrb	r0, [r7]
	lsl	r0, r0, #0x9
	add	r0, r0, r6
	ldrb	r0, [r0]
	strb	r0, [r1]
	b	.L1921
.L1934:
	.align	2, 0
.L1933:
	.word	gBattleStruct
	.word	gBitTable
	.word	gBattleBufferB
	.word	gBattleCommunication
	.word	gActiveBattler
	.word	gBattleTypeFlags
.L1920:
	mov	r0, #0x80
	lsl	r0, r0, #0xf
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1922	@cond_branch
	ldrb	r0, [r7]
	mov	r3, ip
	ldr	r1, [r3]
	add	r1, r0, r1
	add	r1, r1, #0x5c
	ldrb	r1, [r1]
	bl	sub_80571DC
	b	.L1921
.L1922:
	ldrb	r0, [r7]
	bl	sub_803BDA0
.L1921:
	ldr	r1, .L1935
	mov	r5, #0xfd
	strb	r5, [r1]
	mov	r0, #0x6
	strb	r0, [r1, #0x1]
	ldr	r4, .L1935+0x4
	ldr	r3, .L1935+0x8
	ldrb	r0, [r3]
	mov	r2, #0x58
	mul	r0, r0, r2
	add	r0, r0, r4
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r3]
	mul	r0, r0, r2
	add	r0, r0, r4
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r2, .L1935+0xc
	strb	r5, [r2]
	mov	r0, #0x7
	strb	r0, [r2, #0x1]
	ldr	r3, .L1935+0x10
	ldrb	r0, [r3]
	strb	r0, [r2, #0x2]
	ldr	r1, .L1935+0x14
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2, #0x3]
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r2, #0x4]
.L1906:
	ldr	r1, .L1935+0x18
	ldr	r0, [r1]
	add	r0, r0, #0x3
	str	r0, [r1]
.L1904:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1936:
	.align	2, 0
.L1935:
	.word	gBattleTextBuff1
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleTextBuff2
	.word	gActiveBattler
	.word	gBattleBufferB
	.word	gBattlescriptCurrInstr
.Lfe96:
	.size	 atk51_switchhandleorder,.Lfe96-atk51_switchhandleorder
	.align	2, 0
	.type	 atk52_switchineffects,function
	.thumb_func
atk52_switchineffects:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r0, .L1966
	mov	r9, r0
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L1966+0x4
	strb	r0, [r4]
	ldrb	r0, [r4]
	bl	sub_803FA70
	ldr	r1, .L1966+0x8
	mov	r8, r1
	ldr	r1, .L1966+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r1, r1, #0x1c
	mov	r2, r8
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
	ldr	r2, .L1966+0x10
	ldrb	r0, [r4]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r2, [r1]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	ldr	r5, .L1966+0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r5
	ldrh	r1, [r0]
	mov	r7, #0x80
	lsl	r7, r7, #0x2
	mov	sl, r7
	mov	r0, sl
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB19184
	b	.L1938	@long jump
.LCB19184:
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r5
	ldrh	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB19199
	b	.L1938	@long jump
.LCB19199:
	ldr	r7, .L1966+0x18
	ldrb	r2, [r4]
	mov	r6, #0x58
	mov	r0, r2
	mul	r0, r0, r6
	add	r1, r0, r7
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.L1938	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.L1938	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x1a
	beq	.L1938	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r5
	ldrh	r2, [r0]
	mov	r1, sl
	orr	r1, r1, r2
	strh	r1, [r0]
	ldrb	r0, [r4]
	mov	r2, r0
	mul	r2, r2, r6
	add	r0, r7, #0
	add	r0, r0, #0x50
	add	r2, r2, r0
	ldr	r0, [r2]
	ldr	r1, .L1966+0x1c
	and	r0, r0, r1
	str	r0, [r2]
	mov	r1, r8
	ldr	r0, [r1]
	mov	r2, #0x41
	neg	r2, r2
	and	r0, r0, r2
	str	r0, [r1]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	ldr	r2, .L1966+0x20
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0xa]
	mov	r1, #0x5
	sub	r1, r1, r0
	lsl	r1, r1, #0x19
	lsr	r1, r1, #0x18
	ldr	r5, .L1966+0x24
	ldrb	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r0, [r0, #0x2c]
	bl	__divsi3
	str	r0, [r5]
	cmp	r0, #0
	bne	.L1939	@cond_branch
	mov	r0, #0x1
	str	r0, [r5]
.L1939:
	ldr	r0, .L1966+0x28
	ldrb	r1, [r4]
	strb	r1, [r0, #0x17]
	bl	BattleScriptPushCursor
	mov	r7, r9
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.L1940	@cond_branch
	ldr	r0, .L1966+0x2c
	str	r0, [r7]
	b	.L1944
.L1967:
	.align	2, 0
.L1966:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gHitMarker
	.word	gBitTable
	.word	gSpecialStatuses
	.word	gSideStatuses
	.word	gBattleMons
	.word	-0x2000001
	.word	gSideTimers
	.word	gBattleMoveDamage
	.word	gBattleScripting
	.word	BattleScript_SpikesOnTarget
.L1940:
	cmp	r0, #0x1
	bne	.L1942	@cond_branch
	ldr	r0, .L1968
	mov	r1, r9
	str	r0, [r1]
	b	.L1944
.L1969:
	.align	2, 0
.L1968:
	.word	BattleScript_SpikesOnAttacker
.L1942:
	ldr	r0, .L1970
	mov	r2, r9
	str	r0, [r2]
	b	.L1944
.L1971:
	.align	2, 0
.L1970:
	.word	BattleScript_SpikesOnFaintedBattler
.L1938:
	ldr	r2, .L1972
	ldr	r1, .L1972+0x4
	ldrb	r3, [r1]
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	add	r5, r1, #0
	ldr	r4, .L1972+0x8
	cmp	r0, #0x36
	bne	.L1945	@cond_branch
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r2, r0, r4
	ldrb	r1, [r2, #0x18]
	lsl	r0, r1, #0x1e
	cmp	r0, #0
	blt	.L1945	@cond_branch
	mov	r0, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x18]
.L1945:
	ldrb	r0, [r5]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r2, [r1, #0x18]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x18]
	ldrb	r1, [r5]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB19404
	b	.L1944	@long jump
.LCB19404:
	ldrb	r1, [r5]
	mov	r0, #0x0
	mov	r2, #0x0
	bl	ItemBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1944	@cond_branch
	ldrb	r0, [r5]
	bl	GetBattlerSide
	ldr	r1, .L1972+0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r1
	ldrh	r2, [r0]
	ldr	r1, .L1972+0x10
	and	r1, r1, r2
	strh	r1, [r0]
	mov	r4, #0x0
	ldr	r0, .L1972+0x14
	ldrb	r7, [r0]
	cmp	r4, r7
	bge	.L1948	@cond_branch
	ldr	r6, .L1972+0x18
	add	r1, r5, #0
	ldr	r5, .L1972+0x1c
	mov	r3, #0xc
	add	r2, r0, #0
.L1950:
	add	r0, r4, r6
	ldrb	r0, [r0]
	ldrb	r7, [r1]
	cmp	r0, r7
	bne	.L1949	@cond_branch
	add	r0, r4, r5
	strb	r3, [r0]
.L1949:
	add	r4, r4, #0x1
	ldrb	r0, [r2]
	cmp	r4, r0
	blt	.L1950	@cond_branch
.L1948:
	mov	r4, #0x0
	ldr	r0, .L1972+0x14
	ldrb	r0, [r0]
	cmp	r4, r0
	bge	.L1954	@cond_branch
	ldr	r6, .L1972+0x20
	ldr	r5, .L1972
.L1956:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, #0xa8
	ldr	r1, [r6]
	add	r1, r1, r0
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r0, [r0, #0x28]
	strh	r0, [r1]
	add	r4, r4, #0x1
	ldr	r0, .L1972+0x14
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.L1956	@cond_branch
.L1954:
	ldr	r0, .L1972+0x24
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r5, r0, #0
	cmp	r1, #0x5
	bne	.L1958	@cond_branch
	ldr	r0, .L1972+0x28
	ldr	r0, [r0]
	lsr	r4, r0, #0x1c
	ldr	r1, .L1972+0x2c
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r2, .L1972+0x30
	b	.L1965
.L1973:
	.align	2, 0
.L1972:
	.word	gBattleMons
	.word	gActiveBattler
	.word	gDisableStructs
	.word	gSideStatuses
	.word	0xfdff
	.word	gBattlersCount
	.word	gBattlerByTurnOrder
	.word	gActionsByTurnOrder
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
	.word	gHitMarker
	.word	gBattlerFainted
	.word	gBitTable
.L1962:
	ldr	r0, .L1974
	ldrb	r3, [r1]
	ldrb	r0, [r0]
	cmp	r3, r0
	bcs	.L1958	@cond_branch
	add	r0, r3, #0x1
	strb	r0, [r1]
.L1965:
	ldrb	r0, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r3, [r0]
	add	r0, r4, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1962	@cond_branch
	ldr	r0, .L1974+0x4
	ldrb	r0, [r0]
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L1962	@cond_branch
.L1958:
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
.L1944:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1975:
	.align	2, 0
.L1974:
	.word	gBattlersCount
	.word	gAbsentBattlerFlags
.Lfe97:
	.size	 atk52_switchineffects,.Lfe97-atk52_switchineffects
	.align	2, 0
	.type	 atk53_trainerslidein,function
	.thumb_func
atk53_trainerslidein:
	push	{r4, r5, lr}
	ldr	r5, .L1977
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerAtPosition
	ldr	r4, .L1977+0x4
	strb	r0, [r4]
	mov	r0, #0x0
	bl	BtlController_EmitTrainerSlide
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1978:
	.align	2, 0
.L1977:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.Lfe98:
	.size	 atk53_trainerslidein,.Lfe98-atk53_trainerslidein
	.align	2, 0
	.type	 atk54_playse,function
	.thumb_func
atk54_playse:
	push	{r4, r5, lr}
	ldr	r5, .L1980
	ldr	r0, .L1980+0x4
	ldrb	r0, [r0]
	strb	r0, [r5]
	ldr	r4, .L1980+0x8
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x1]
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	mov	r0, #0x0
	bl	BtlController_EmitPlaySE
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r4]
	add	r0, r0, #0x3
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1981:
	.align	2, 0
.L1980:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe99:
	.size	 atk54_playse,.Lfe99-atk54_playse
	.align	2, 0
	.type	 atk55_fanfare,function
	.thumb_func
atk55_fanfare:
	push	{r4, r5, lr}
	ldr	r5, .L1983
	ldr	r0, .L1983+0x4
	ldrb	r0, [r0]
	strb	r0, [r5]
	ldr	r4, .L1983+0x8
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x1]
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	mov	r0, #0x0
	mov	r2, #0x0
	bl	BtlController_EmitPlayFanfareOrBGM
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r4]
	add	r0, r0, #0x3
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1984:
	.align	2, 0
.L1983:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe100:
	.size	 atk55_fanfare,.Lfe100-atk55_fanfare
	.align	2, 0
	.type	 atk56_playfaintcry,function
	.thumb_func
atk56_playfaintcry:
	push	{r4, r5, lr}
	ldr	r5, .L1986
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L1986+0x4
	strb	r0, [r4]
	mov	r0, #0x0
	bl	BtlController_EmitFaintingCry
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1987:
	.align	2, 0
.L1986:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.Lfe101:
	.size	 atk56_playfaintcry,.Lfe101-atk56_playfaintcry
	.align	2, 0
	.type	 atk57,function
	.thumb_func
atk57:
	push	{r4, lr}
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r4, .L1989
	strb	r0, [r4]
	ldr	r0, .L1989+0x4
	ldrb	r1, [r0]
	mov	r0, #0x0
	bl	BtlController_EmitCmd55
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L1989+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1990:
	.align	2, 0
.L1989:
	.word	gActiveBattler
	.word	gBattleOutcome
	.word	gBattlescriptCurrInstr
.Lfe102:
	.size	 atk57,.Lfe102-atk57
	.align	2, 0
	.type	 atk58_returntoball,function
	.thumb_func
atk58_returntoball:
	push	{r4, r5, lr}
	ldr	r5, .L1992
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L1992+0x4
	strb	r0, [r4]
	mov	r0, #0x0
	mov	r1, #0x1
	bl	BtlController_EmitReturnMonToBall
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1993:
	.align	2, 0
.L1992:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.Lfe103:
	.size	 atk58_returntoball,.Lfe103-atk58_returntoball
	.align	2, 0
	.type	 atk59_handlelearnnewmove,function
	.thumb_func
atk59_handlelearnnewmove:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L2006
	ldr	r2, [r0]
	ldrb	r6, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r6, r6, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r6, r6, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r6, r6, r0
	ldrb	r4, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r4, r4, r0
	ldr	r0, .L2006+0x4
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L2006+0x8
	add	r0, r0, r1
	ldrb	r1, [r2, #0x9]
	bl	MonTryLearningNewMove
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, .L2006+0xc
	cmp	r5, r0
	bne	.L1996	@cond_branch
	add	r7, r5, #0
.L1997:
	ldr	r0, .L2006+0x4
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L2006+0x8
	add	r0, r0, r1
	mov	r1, #0x0
	bl	MonTryLearningNewMove
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, r7
	beq	.L1997	@cond_branch
.L1996:
	cmp	r5, #0
	bne	.L1999	@cond_branch
	ldr	r0, .L2006
	str	r4, [r0]
	b	.L2000
.L2007:
	.align	2, 0
.L2006:
	.word	gBattlescriptCurrInstr
	.word	gBattleStruct
	.word	gPlayerParty
	.word	0xfffe
.L1999:
	ldr	r0, .L2008
	cmp	r5, r0
	bne	.L2001	@cond_branch
	ldr	r1, .L2008+0x4
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
	b	.L2000
.L2009:
	.align	2, 0
.L2008:
	.word	0xffff
	.word	gBattlescriptCurrInstr
.L2001:
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r1, .L2010
	strb	r0, [r1]
	ldr	r2, .L2010+0x4
	ldrb	r3, [r1]
	lsl	r0, r3, #0x1
	add	r0, r0, r2
	ldr	r1, .L2010+0x8
	ldr	r1, [r1]
	ldrh	r0, [r0]
	ldrb	r1, [r1, #0x10]
	cmp	r0, r1
	bne	.L2003	@cond_branch
	ldr	r4, .L2010+0xc
	mov	r0, #0x58
	mov	r2, r3
	mul	r2, r2, r0
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2003	@cond_branch
	add	r0, r2, r4
	add	r1, r5, #0
	bl	GiveMoveToBattleMon
.L2003:
	ldr	r0, .L2010+0x10
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2004	@cond_branch
	mov	r0, #0x2
	bl	GetBattlerAtPosition
	ldr	r1, .L2010
	strb	r0, [r1]
	ldr	r2, .L2010+0x4
	ldrb	r3, [r1]
	lsl	r0, r3, #0x1
	add	r0, r0, r2
	ldr	r1, .L2010+0x8
	ldr	r1, [r1]
	ldrh	r0, [r0]
	ldrb	r1, [r1, #0x10]
	cmp	r0, r1
	bne	.L2004	@cond_branch
	ldr	r4, .L2010+0xc
	mov	r0, #0x58
	mov	r2, r3
	mul	r2, r2, r0
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2004	@cond_branch
	add	r0, r2, r4
	add	r1, r5, #0
	bl	GiveMoveToBattleMon
.L2004:
	ldr	r0, .L2010+0x14
	str	r6, [r0]
.L2000:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2011:
	.align	2, 0
.L2010:
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gBattleMons
	.word	gBattleTypeFlags
	.word	gBattlescriptCurrInstr
.Lfe104:
	.size	 atk59_handlelearnnewmove,.Lfe104-atk59_handlelearnnewmove
	.align	2, 0
	.type	 atk5A_yesnoboxlearnmove,function
	.thumb_func
atk5A_yesnoboxlearnmove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	ldr	r0, .L2043
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L2043+0x4
	ldrb	r1, [r0, #0x1f]
	add	r2, r0, #0
	cmp	r1, #0x6
	bls	.LCB20032
	b	.L2013	@long jump
.LCB20032:
	lsl	r0, r1, #0x2
	ldr	r1, .L2043+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2044:
	.align	2, 0
.L2043:
	.word	gActiveBattler
	.word	gBattleScripting
	.word	.L2038
	.align	2, 0
	.align	2, 0
.L2038:
	.word	.L2014
	.word	.L2015
	.word	.L2023
	.word	.L2025
	.word	.L2027
	.word	.L2035
	.word	.L2036
.L2014:
	mov	r4, #0x0
	str	r4, [sp]
	mov	r0, #0x18
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	ldr	r0, .L2045
	mov	r1, #0xc
	bl	BattlePutTextOnWindow
	ldr	r1, .L2045+0x4
	ldrb	r0, [r1, #0x1f]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1f]
	ldr	r0, .L2045+0x8
	strb	r4, [r0, #0x1]
	mov	r0, #0x0
	bl	BattleCreateYesNoCursorAt
	b	.L2013
.L2046:
	.align	2, 0
.L2045:
	.word	gText_BattleYesNoChoice
	.word	gBattleScripting
	.word	gBattleCommunication
.L2015:
	ldr	r0, .L2047
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2016	@cond_branch
	ldr	r4, .L2047+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	beq	.L2016	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4, #0x1]
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x0
	strb	r0, [r4, #0x1]
	bl	BattleCreateYesNoCursorAt
.L2016:
	ldr	r0, .L2047
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2017	@cond_branch
	ldr	r4, .L2047+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	bne	.L2017	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4, #0x1]
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	bl	BattleCreateYesNoCursorAt
.L2017:
	ldr	r0, .L2047
	ldrh	r1, [r0, #0x2e]
	mov	r5, #0x1
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2018	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L2047+0x4
	ldrb	r4, [r0, #0x1]
	cmp	r4, #0
	bne	.L2041	@cond_branch
	str	r5, [sp]
	mov	r0, #0x18
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	mov	r0, #0x1
	neg	r0, r0
	str	r4, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	b	.L2040
.L2048:
	.align	2, 0
.L2047:
	.word	gMain
	.word	gBattleCommunication
.L2018:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB20184
	b	.L2013	@long jump
.LCB20184:
	mov	r0, #0x5
	bl	PlaySE
	b	.L2041
.L2023:
	ldr	r0, .L2049
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB20198
	b	.L2013	@long jump
.LCB20198:
	bl	FreeAllWindowBuffers
	ldr	r0, .L2049+0x4
	ldr	r1, .L2049+0x8
	ldr	r1, [r1]
	ldrb	r1, [r1, #0x10]
	ldr	r2, .L2049+0xc
	ldrb	r2, [r2]
	sub	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r3, .L2049+0x10
	ldr	r4, .L2049+0x14
	ldrh	r4, [r4]
	str	r4, [sp]
	bl	ShowSelectMovePokemonSummaryScreen
.L2040:
	ldr	r1, .L2049+0x18
	ldrb	r0, [r1, #0x1f]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1f]
	b	.L2013
.L2050:
	.align	2, 0
.L2049:
	.word	gPaletteFade
	.word	gPlayerParty
	.word	gBattleStruct
	.word	gPlayerPartyCount
	.word	ReshowBattleScreenAfterMenu
	.word	gMoveToLearn
	.word	gBattleScripting
.L2025:
	ldr	r0, .L2051
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB20246
	b	.L2013	@long jump
.LCB20246:
	ldr	r0, .L2051+0x4
	ldr	r1, [r0, #0x4]
	ldr	r0, .L2051+0x8
	cmp	r1, r0
	beq	.LCB20251
	b	.L2013	@long jump
.LCB20251:
	ldrb	r0, [r2, #0x1f]
	add	r0, r0, #0x1
	b	.L2042
.L2052:
	.align	2, 0
.L2051:
	.word	gPaletteFade
	.word	gMain
	.word	BattleMainCB2
.L2027:
	ldr	r0, .L2053
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB20274
	b	.L2013	@long jump
.LCB20274:
	ldr	r0, .L2053+0x4
	ldr	r1, [r0, #0x4]
	ldr	r0, .L2053+0x8
	cmp	r1, r0
	beq	.LCB20279
	b	.L2013	@long jump
.LCB20279:
	bl	sub_81C1B94
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x4
	bne	.L2029	@cond_branch
.L2041:
	ldr	r1, .L2053+0xc
	mov	r0, #0x5
	strb	r0, [r1, #0x1f]
	b	.L2013
.L2054:
	.align	2, 0
.L2053:
	.word	gPaletteFade
	.word	gMain
	.word	BattleMainCB2
	.word	gBattleScripting
.L2029:
	ldr	r6, .L2055
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mov	r1, #0x64
	mov	r8, r1
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r7, .L2055+0x4
	add	r0, r0, r7
	add	r1, r5, #0
	add	r1, r1, #0xd
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r4, #0
	bl	IsHMMove2
	cmp	r0, #0
	beq	.L2031	@cond_branch
	ldr	r0, .L2055+0x8
	ldr	r1, .L2055+0xc
	ldrb	r1, [r1]
	bl	PrepareStringBattle
	ldr	r1, .L2055+0x10
	mov	r0, #0x6
	strb	r0, [r1, #0x1f]
	b	.L2013
.L2056:
	.align	2, 0
.L2055:
	.word	gBattleStruct
	.word	gPlayerParty
	.word	0x13f
	.word	gActiveBattler
	.word	gBattleScripting
.L2031:
	ldr	r3, .L2057
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	ldr	r1, .L2057+0x4
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	strb	r4, [r1, #0x2]
	lsr	r0, r4, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r7
	add	r1, r5, #0
	bl	RemoveMonPPBonus
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r7
	ldr	r7, .L2057+0x8
	ldrh	r1, [r7]
	add	r2, r5, #0
	bl	SetMonMoveSlot
	ldr	r0, .L2057+0xc
	ldr	r1, [r6]
	ldrh	r0, [r0]
	ldrb	r1, [r1, #0x10]
	cmp	r0, r1
	bne	.L2033	@cond_branch
	ldr	r4, .L2057+0x10
	ldr	r0, [r4, #0x50]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2033	@cond_branch
	ldr	r0, .L2057+0x14
	ldrb	r1, [r0, #0x18]
	lsr	r1, r1, #0x4
	ldr	r2, .L2057+0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L2033	@cond_branch
	add	r0, r4, #0
	add	r1, r5, #0
	bl	RemoveBattleMonPPBonus
	ldrh	r1, [r7]
	add	r0, r4, #0
	add	r2, r5, #0
	bl	SetBattleMonMoveSlot
.L2033:
	ldr	r0, .L2057+0x1c
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2013	@cond_branch
	ldr	r2, .L2057+0xc
	ldr	r0, .L2057+0x20
	ldr	r1, [r0]
	ldrh	r0, [r2, #0x4]
	ldrb	r1, [r1, #0x10]
	cmp	r0, r1
	bne	.L2013	@cond_branch
	ldr	r4, .L2057+0x10
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2013	@cond_branch
	ldr	r0, .L2057+0x14
	add	r0, r0, #0x50
	ldrb	r1, [r0]
	lsr	r1, r1, #0x4
	ldr	r2, .L2057+0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L2013	@cond_branch
	add	r4, r4, #0xb0
	add	r0, r4, #0
	add	r1, r5, #0
	bl	RemoveBattleMonPPBonus
	ldr	r0, .L2057+0x8
	ldrh	r1, [r0]
	add	r0, r4, #0
	add	r2, r5, #0
	bl	SetBattleMonMoveSlot
	b	.L2013
.L2058:
	.align	2, 0
.L2057:
	.word	gBattlescriptCurrInstr
	.word	gBattleTextBuff2
	.word	gMoveToLearn
	.word	gBattlerPartyIndexes
	.word	gBattleMons
	.word	gDisableStructs
	.word	gBitTable
	.word	gBattleTypeFlags
	.word	gBattleStruct
.L2035:
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x18
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	ldr	r1, .L2059
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L2013
.L2060:
	.align	2, 0
.L2059:
	.word	gBattlescriptCurrInstr
.L2036:
	ldr	r0, .L2061
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2013	@cond_branch
	mov	r0, #0x2
.L2042:
	strb	r0, [r2, #0x1f]
.L2013:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2062:
	.align	2, 0
.L2061:
	.word	gBattleControllerExecFlags
.Lfe105:
	.size	 atk5A_yesnoboxlearnmove,.Lfe105-atk5A_yesnoboxlearnmove
	.align	2, 0
	.type	 atk5B_yesnoboxstoplearningmove,function
	.thumb_func
atk5B_yesnoboxstoplearningmove:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	ldr	r5, .L2076
	ldrb	r4, [r5, #0x1f]
	cmp	r4, #0
	beq	.L2065	@cond_branch
	cmp	r4, #0x1
	beq	.L2066	@cond_branch
	b	.L2064
.L2077:
	.align	2, 0
.L2076:
	.word	gBattleScripting
.L2065:
	str	r4, [sp]
	mov	r0, #0x18
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	ldr	r0, .L2078
	mov	r1, #0xc
	bl	BattlePutTextOnWindow
	ldrb	r0, [r5, #0x1f]
	add	r0, r0, #0x1
	strb	r0, [r5, #0x1f]
	ldr	r0, .L2078+0x4
	strb	r4, [r0, #0x1]
	mov	r0, #0x0
	bl	BattleCreateYesNoCursorAt
	b	.L2064
.L2079:
	.align	2, 0
.L2078:
	.word	gText_BattleYesNoChoice
	.word	gBattleCommunication
.L2066:
	ldr	r0, .L2080
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2067	@cond_branch
	ldr	r4, .L2080+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	beq	.L2067	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4, #0x1]
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x0
	strb	r0, [r4, #0x1]
	bl	BattleCreateYesNoCursorAt
.L2067:
	ldr	r0, .L2080
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2068	@cond_branch
	ldr	r4, .L2080+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	bne	.L2068	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4, #0x1]
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	bl	BattleCreateYesNoCursorAt
.L2068:
	ldr	r0, .L2080
	ldrh	r1, [r0, #0x2e]
	mov	r4, #0x1
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2069	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L2080+0x4
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	beq	.L2070	@cond_branch
	ldr	r3, .L2080+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2071
.L2081:
	.align	2, 0
.L2080:
	.word	gMain
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.L2070:
	ldr	r1, .L2082
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2071:
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x18
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	b	.L2064
.L2083:
	.align	2, 0
.L2082:
	.word	gBattlescriptCurrInstr
.L2069:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2064	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r3, .L2084
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	str	r4, [sp]
	mov	r0, #0x18
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
.L2064:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2085:
	.align	2, 0
.L2084:
	.word	gBattlescriptCurrInstr
.Lfe106:
	.size	 atk5B_yesnoboxstoplearningmove,.Lfe106-atk5B_yesnoboxstoplearningmove
	.align	2, 0
	.type	 atk5C_hitanimation,function
	.thumb_func
atk5C_hitanimation:
	push	{r4, lr}
	ldr	r4, .L2092
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r2, .L2092+0x4
	strb	r0, [r2]
	ldr	r0, .L2092+0x8
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2089	@cond_branch
	ldr	r0, .L2092+0xc
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2090	@cond_branch
	ldr	r1, .L2092+0x10
	ldrb	r2, [r2]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2090	@cond_branch
	ldr	r0, .L2092+0x14
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0xa]
	cmp	r0, #0
	bne	.L2089	@cond_branch
.L2090:
	mov	r0, #0x0
	bl	BtlController_EmitHitAnimation
	ldr	r0, .L2092+0x4
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L2092
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	b	.L2088
.L2093:
	.align	2, 0
.L2092:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gMoveResultFlags
	.word	gHitMarker
	.word	gBattleMons
	.word	gDisableStructs
.L2089:
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
.L2088:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe107:
	.size	 atk5C_hitanimation,.Lfe107-atk5C_hitanimation
	.align	2, 0
	.type	 GetTrainerMoneyToGive,function
	.thumb_func
GetTrainerMoneyToGive:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r7, #0x0
	mov	r5, #0x0
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r6, r0
	bne	.L2095	@cond_branch
	ldr	r0, .L2117
	ldr	r0, [r0]
	ldr	r0, [r0]
	add	r0, r0, #0x94
	ldrb	r2, [r0]
	ldr	r0, .L2117+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x4a
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mul	r0, r0, r2
	b	.L2096
.L2118:
	.align	2, 0
.L2117:
	.word	gBattleResources
	.word	gBattleStruct
.L2095:
	ldr	r0, .L2119
	lsl	r2, r6, #0x2
	add	r1, r2, r6
	lsl	r1, r1, #0x3
	add	r4, r1, r0
	ldrb	r3, [r4]
	mov	ip, r0
	cmp	r3, #0x1
	beq	.L2101	@cond_branch
	cmp	r3, #0x1
	bgt	.L2104	@cond_branch
	cmp	r3, #0
	beq	.L2098	@cond_branch
	b	.L2097
.L2120:
	.align	2, 0
.L2119:
	.word	gTrainers
.L2104:
	cmp	r3, #0x2
	beq	.L2100	@cond_branch
	cmp	r3, #0x3
	beq	.L2101	@cond_branch
	b	.L2097
.L2098:
	mov	r0, ip
	add	r0, r0, #0x24
	add	r0, r1, r0
	ldr	r1, [r0]
	add	r0, r4, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	sub	r0, r0, #0x8
	b	.L2115
.L2100:
	mov	r0, ip
	add	r0, r0, #0x24
	add	r0, r1, r0
	ldr	r1, [r0]
	add	r0, r4, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	sub	r0, r0, #0x8
	b	.L2115
.L2101:
	mov	r0, ip
	add	r0, r0, #0x24
	add	r0, r1, r0
	ldr	r1, [r0]
	add	r0, r4, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	sub	r0, r0, #0x10
.L2115:
	ldrb	r5, [r0, #0x2]
.L2097:
	ldr	r1, .L2121
	lsl	r0, r7, #0x2
	add	r4, r0, r1
	ldrb	r3, [r4]
	ldr	r0, .L2121+0x4
	mov	r8, r0
	mov	r9, r1
	ldr	r1, .L2121+0x8
	mov	sl, r1
	cmp	r3, #0xff
	beq	.L2106	@cond_branch
	add	r0, r2, r6
	lsl	r0, r0, #0x3
	add	r0, r0, ip
	ldrb	r1, [r0, #0x1]
	cmp	r3, r1
	beq	.L2106	@cond_branch
	add	r2, r0, #0
	add	r0, r4, #0
.L2107:
	add	r0, r0, #0x4
	add	r7, r7, #0x1
	ldrb	r1, [r0]
	cmp	r1, #0xff
	beq	.L2106	@cond_branch
	ldrb	r3, [r2, #0x1]
	cmp	r1, r3
	bne	.L2107	@cond_branch
.L2106:
	mov	r0, sl
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2113	@cond_branch
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L2113	@cond_branch
	mov	r3, r8
	ldr	r0, [r3]
	add	r0, r0, #0x4a
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	mov	r1, r5
	mul	r1, r1, r0
	lsl	r0, r7, #0x2
	add	r0, r0, r9
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1
	b	.L2116
.L2122:
	.align	2, 0
.L2121:
	.word	gTrainerMoneyTable
	.word	gBattleStruct
	.word	gBattleTypeFlags
.L2113:
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, #0x4a
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	mov	r1, r5
	mul	r1, r1, r0
	lsl	r0, r7, #0x2
	add	r0, r0, r9
	ldrb	r0, [r0, #0x1]
.L2116:
	mul	r0, r0, r1
.L2096:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe108:
	.size	 GetTrainerMoneyToGive,.Lfe108-GetTrainerMoneyToGive
	.align	2, 0
	.type	 atk5D_getmoneyreward,function
	.thumb_func
atk5D_getmoneyreward:
	push	{r4, lr}
	ldr	r0, .L2125
	ldrh	r0, [r0]
	bl	GetTrainerMoneyToGive
	add	r4, r0, #0
	ldr	r0, .L2125+0x4
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2124	@cond_branch
	ldr	r0, .L2125+0x8
	ldrh	r0, [r0]
	bl	GetTrainerMoneyToGive
	add	r4, r4, r0
.L2124:
	ldr	r0, .L2125+0xc
	ldr	r0, [r0]
	mov	r1, #0x92
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	add	r1, r4, #0
	bl	AddMoney
	ldr	r1, .L2125+0x10
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	mov	r0, #0x4
	strb	r0, [r1, #0x2]
	mov	r0, #0x5
	strb	r0, [r1, #0x3]
	strb	r4, [r1, #0x4]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r4
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x5]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r4
	lsr	r0, r0, #0x10
	strb	r0, [r1, #0x6]
	lsr	r0, r4, #0x18
	strb	r0, [r1, #0x7]
	mov	r0, #0xff
	strb	r0, [r1, #0x8]
	ldr	r1, .L2125+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2126:
	.align	2, 0
.L2125:
	.word	gTrainerBattleOpponent_A
	.word	gBattleTypeFlags
	.word	gTrainerBattleOpponent_B
	.word	gSaveBlock1Ptr
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
.Lfe109:
	.size	 atk5D_getmoneyreward,.Lfe109-atk5D_getmoneyreward
	.align	2, 0
	.type	 atk5E,function
	.thumb_func
atk5E:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r4, .L2139
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r6, .L2139+0x4
	strb	r0, [r6]
	ldr	r5, .L2139+0x8
	ldrb	r0, [r5]
	mov	r8, r4
	cmp	r0, #0
	beq	.L2129	@cond_branch
	cmp	r0, #0x1
	beq	.L2130	@cond_branch
	b	.L2128
.L2140:
	.align	2, 0
.L2139:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleCommunication
.L2129:
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	BtlController_EmitGetMonData
	ldrb	r0, [r6]
	bl	MarkBattlerForControllerExec
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	b	.L2128
.L2130:
	ldr	r0, .L2141
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2128	@cond_branch
	ldrb	r0, [r6]
	lsl	r0, r0, #0x9
	ldr	r1, .L2141+0x4
	add	r0, r0, r1
	mov	ip, r0
	mov	r2, #0x0
	add	r4, r6, #0
	mov	r5, #0x58
	ldr	r6, .L2141+0x8
	add	r7, r6, #0
	sub	r7, r7, #0x18
	mov	r3, ip
	add	r3, r3, #0xc
.L2135:
	lsl	r1, r2, #0x1
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r1, r1, r0
	add	r1, r1, r7
	ldrh	r0, [r3]
	strh	r0, [r1]
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r2, r1
	add	r1, r1, r6
	mov	r0, ip
	add	r0, r0, #0x24
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r3, r3, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L2135	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L2128:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2142:
	.align	2, 0
.L2141:
	.word	gBattleControllerExecFlags
	.word	gBattleBufferB+0x4
	.word	gBattleMons+0x24
.Lfe110:
	.size	 atk5E,.Lfe110-atk5E
	.align	2, 0
	.type	 atk5F_swapattackerwithtarget,function
	.thumb_func
atk5F_swapattackerwithtarget:
	push	{lr}
	ldr	r0, .L2147
	ldr	r2, .L2147+0x4
	ldrb	r3, [r2]
	strb	r3, [r0]
	ldr	r1, .L2147+0x8
	ldrb	r0, [r1]
	strb	r0, [r2]
	strb	r3, [r1]
	ldr	r2, .L2147+0xc
	ldr	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0x5
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L2144	@cond_branch
	ldr	r0, .L2147+0x10
	and	r1, r1, r0
	b	.L2146
.L2148:
	.align	2, 0
.L2147:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gHitMarker
	.word	-0x1001
.L2144:
	orr	r1, r1, r3
.L2146:
	str	r1, [r2]
	ldr	r1, .L2149
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2150:
	.align	2, 0
.L2149:
	.word	gBattlescriptCurrInstr
.Lfe111:
	.size	 atk5F_swapattackerwithtarget,.Lfe111-atk5F_swapattackerwithtarget
	.align	2, 0
	.type	 atk60_incrementgamestat,function
	.thumb_func
atk60_incrementgamestat:
	push	{lr}
	ldr	r0, .L2153
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2152	@cond_branch
	ldr	r0, .L2153+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	IncrementGameStat
.L2152:
	ldr	r1, .L2153+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2154:
	.align	2, 0
.L2153:
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe112:
	.size	 atk60_incrementgamestat,.Lfe112-atk60_incrementgamestat
	.align	2, 0
	.type	 atk61_drawpartystatussummary,function
	.thumb_func
atk61_drawpartystatussummary:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x30
	ldr	r0, .L2168
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2155	@cond_branch
	ldr	r0, .L2168+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r1, .L2168+0x8
	strb	r0, [r1]
	ldrb	r0, [r1]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L2168+0xc
	mov	r8, r1
	cmp	r0, #0
	bne	.L2157	@cond_branch
	ldr	r0, .L2168+0x10
	mov	r8, r0
.L2157:
	mov	r7, #0x0
	add	r6, sp, #0x4
	mov	r5, sp
.L2162:
	mov	r0, #0x64
	mul	r0, r0, r7
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L2164	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bne	.L2163	@cond_branch
.L2164:
	ldr	r0, .L2168+0x14
	strh	r0, [r5]
	mov	r0, #0x0
	b	.L2167
.L2169:
	.align	2, 0
.L2168:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gEnemyParty
	.word	gPlayerParty
	.word	0xffff
.L2163:
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	strh	r0, [r5]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
.L2167:
	str	r0, [r6]
	add	r6, r6, #0x8
	add	r5, r5, #0x8
	add	r7, r7, #0x1
	cmp	r7, #0x5
	ble	.L2162	@cond_branch
	mov	r0, #0x0
	mov	r1, sp
	mov	r2, #0x1
	bl	BtlController_EmitDrawPartyStatusSummary
	ldr	r0, .L2170
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L2170+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L2155:
	add	sp, sp, #0x30
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2171:
	.align	2, 0
.L2170:
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.Lfe113:
	.size	 atk61_drawpartystatussummary,.Lfe113-atk61_drawpartystatussummary
	.align	2, 0
	.type	 atk62_hidepartystatussummary,function
	.thumb_func
atk62_hidepartystatussummary:
	push	{r4, r5, lr}
	ldr	r5, .L2173
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L2173+0x4
	strb	r0, [r4]
	mov	r0, #0x0
	bl	BtlController_EmitHidePartyStatusSummary
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2174:
	.align	2, 0
.L2173:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.Lfe114:
	.size	 atk62_hidepartystatussummary,.Lfe114-atk62_hidepartystatussummary
	.align	2, 0
	.type	 atk63_jumptocalledmove,function
	.thumb_func
atk63_jumptocalledmove:
	push	{r4, lr}
	ldr	r0, .L2178
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0
	beq	.L2176	@cond_branch
	ldr	r0, .L2178+0x4
	ldr	r1, .L2178+0x8
	ldrh	r1, [r1]
	strh	r1, [r0]
	b	.L2177
.L2179:
	.align	2, 0
.L2178:
	.word	gBattlescriptCurrInstr
	.word	gCurrentMove
	.word	gCalledMove
.L2176:
	ldr	r2, .L2180
	ldr	r1, .L2180+0x4
	ldr	r0, .L2180+0x8
	ldrh	r0, [r0]
	strh	r0, [r1]
	strh	r0, [r2]
	add	r0, r1, #0
.L2177:
	ldr	r3, .L2180+0xc
	ldr	r2, .L2180+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2181:
	.align	2, 0
.L2180:
	.word	gChosenMove
	.word	gCurrentMove
	.word	gCalledMove
	.word	gBattleScriptsForMoveEffects
	.word	gBattleMoves
.Lfe115:
	.size	 atk63_jumptocalledmove,.Lfe115-atk63_jumptocalledmove
	.align	2, 0
	.type	 atk64_statusanimation,function
	.thumb_func
atk64_statusanimation:
	push	{r4, lr}
	ldr	r0, .L2185
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2183	@cond_branch
	ldr	r0, .L2185+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L2185+0x8
	strb	r0, [r4]
	ldr	r1, .L2185+0xc
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L2185+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2184	@cond_branch
	ldr	r0, .L2185+0x14
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0xa]
	cmp	r0, #0
	bne	.L2184	@cond_branch
	ldr	r0, .L2185+0x18
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2184	@cond_branch
	ldr	r1, .L2185+0x1c
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r2, [r0]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitStatusAnimation
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L2184:
	ldr	r1, .L2185+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L2183:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2186:
	.align	2, 0
.L2185:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gStatuses3
	.word	0x400c0
	.word	gDisableStructs
	.word	gHitMarker
	.word	gBattleMons
.Lfe116:
	.size	 atk64_statusanimation,.Lfe116-atk64_statusanimation
	.align	2, 0
	.type	 atk65_status2animation,function
	.thumb_func
atk65_status2animation:
	push	{r4, r5, lr}
	ldr	r0, .L2190
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2188	@cond_branch
	ldr	r4, .L2190+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r5, .L2190+0x8
	strb	r0, [r5]
	ldr	r1, [r4]
	ldrb	r3, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldr	r1, .L2190+0xc
	ldrb	r2, [r5]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L2190+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2189	@cond_branch
	ldr	r0, .L2190+0x14
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0xa]
	cmp	r0, #0
	bne	.L2189	@cond_branch
	ldr	r0, .L2190+0x18
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2189	@cond_branch
	ldr	r1, .L2190+0x1c
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r2, [r0]
	and	r2, r2, r3
	mov	r0, #0x0
	mov	r1, #0x1
	bl	BtlController_EmitStatusAnimation
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
.L2189:
	ldr	r1, .L2190+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x6
	str	r0, [r1]
.L2188:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2191:
	.align	2, 0
.L2190:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gStatuses3
	.word	0x400c0
	.word	gDisableStructs
	.word	gHitMarker
	.word	gBattleMons
.Lfe117:
	.size	 atk65_status2animation,.Lfe117-atk65_status2animation
	.align	2, 0
	.type	 atk66_chosenstatusanimation,function
	.thumb_func
atk66_chosenstatusanimation:
	push	{r4, r5, lr}
	ldr	r0, .L2195
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L2193	@cond_branch
	ldr	r4, .L2195+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r5, .L2195+0x8
	strb	r0, [r5]
	ldr	r4, [r4]
	ldrb	r2, [r4, #0x3]
	ldrb	r0, [r4, #0x4]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r4, #0x5]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r4, #0x6]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldr	r1, .L2195+0xc
	ldrb	r3, [r5]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L2195+0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2194	@cond_branch
	ldr	r0, .L2195+0x14
	lsl	r1, r3, #0x3
	sub	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0xa]
	cmp	r0, #0
	bne	.L2194	@cond_branch
	ldr	r0, .L2195+0x18
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2194	@cond_branch
	ldrb	r1, [r4, #0x2]
	mov	r0, #0x0
	bl	BtlController_EmitStatusAnimation
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
.L2194:
	ldr	r1, .L2195+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x7
	str	r0, [r1]
.L2193:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2196:
	.align	2, 0
.L2195:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gStatuses3
	.word	0x400c0
	.word	gDisableStructs
	.word	gHitMarker
.Lfe118:
	.size	 atk66_chosenstatusanimation,.Lfe118-atk66_chosenstatusanimation
	.align	2, 0
	.type	 atk67_yesnobox,function
	.thumb_func
atk67_yesnobox:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	ldr	r5, .L2209
	ldrb	r4, [r5]
	cmp	r4, #0
	beq	.L2199	@cond_branch
	cmp	r4, #0x1
	beq	.L2200	@cond_branch
	b	.L2198
.L2210:
	.align	2, 0
.L2209:
	.word	gBattleCommunication
.L2199:
	str	r4, [sp]
	mov	r0, #0x18
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	ldr	r0, .L2211
	mov	r1, #0xc
	bl	BattlePutTextOnWindow
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	strb	r4, [r5, #0x1]
	mov	r0, #0x0
	bl	BattleCreateYesNoCursorAt
	b	.L2198
.L2212:
	.align	2, 0
.L2211:
	.word	gText_BattleYesNoChoice
.L2200:
	ldr	r0, .L2213
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2201	@cond_branch
	ldrb	r0, [r5, #0x1]
	cmp	r0, #0
	beq	.L2201	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r5, #0x1]
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x0
	strb	r0, [r5, #0x1]
	bl	BattleCreateYesNoCursorAt
.L2201:
	ldr	r0, .L2213
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2202	@cond_branch
	ldr	r4, .L2213+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	bne	.L2202	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4, #0x1]
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	bl	BattleCreateYesNoCursorAt
.L2202:
	ldr	r0, .L2213
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2203	@cond_branch
	ldr	r0, .L2213+0x4
	mov	r4, #0x1
	strb	r4, [r0, #0x1]
	b	.L2208
.L2214:
	.align	2, 0
.L2213:
	.word	gMain
	.word	gBattleCommunication
.L2203:
	mov	r4, #0x1
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2198	@cond_branch
.L2208:
	mov	r0, #0x5
	bl	PlaySE
	str	r4, [sp]
	mov	r0, #0x18
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	ldr	r1, .L2215
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L2198:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2216:
	.align	2, 0
.L2215:
	.word	gBattlescriptCurrInstr
.Lfe119:
	.size	 atk67_yesnobox,.Lfe119-atk67_yesnobox
	.align	2, 0
	.type	 atk68_cancelallactions,function
	.thumb_func
atk68_cancelallactions:
	push	{r4, r5, lr}
	mov	r1, #0x0
	ldr	r2, .L2223
	ldr	r5, .L2223+0x4
	ldrb	r0, [r2]
	cmp	r1, r0
	bge	.L2219	@cond_branch
	ldr	r4, .L2223+0x8
	mov	r3, #0xc
.L2221:
	add	r0, r1, r4
	strb	r3, [r0]
	add	r1, r1, #0x1
	ldrb	r0, [r2]
	cmp	r1, r0
	blt	.L2221	@cond_branch
.L2219:
	ldr	r0, [r5]
	add	r0, r0, #0x1
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2224:
	.align	2, 0
.L2223:
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
	.word	gActionsByTurnOrder
.Lfe120:
	.size	 atk68_cancelallactions,.Lfe120-atk68_cancelallactions
	.align	2, 0
	.type	 atk69_adjustsetdamage,function
	.thumb_func
atk69_adjustsetdamage:
	push	{r4, r5, r6, r7, lr}
	ldr	r7, .L2236
	ldr	r6, .L2236+0x4
	ldrb	r2, [r6]
	mov	r5, #0x58
	mov	r0, r2
	mul	r0, r0, r5
	add	r1, r0, r7
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0xaf
	bne	.L2226	@cond_branch
	ldr	r1, .L2236+0x8
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r4, [r0, #0x7]
	ldrb	r6, [r0, #0x1a]
	b	.L2227
.L2237:
	.align	2, 0
.L2236:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gEnigmaBerries
.L2226:
	ldrh	r0, [r1, #0x2e]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r7
	ldrh	r0, [r0, #0x2e]
	bl	ItemId_GetHoldEffectParam
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L2227:
	ldr	r1, .L2238
	ldr	r5, .L2238+0x4
	ldrb	r0, [r5]
	strb	r0, [r1]
	cmp	r4, #0x27
	bne	.L2228	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r6
	bcs	.L2228	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x27
	bl	RecordItemEffectBattle
	ldr	r2, .L2238+0x8
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
.L2228:
	ldr	r2, .L2238+0xc
	ldr	r3, .L2238+0x4
	ldrb	r4, [r3]
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r2, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	and	r1, r1, r0
	add	r5, r2, #0
	cmp	r1, #0
	bne	.L2230	@cond_branch
	ldr	r2, .L2238+0x10
	ldr	r0, .L2238+0x14
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0x65
	beq	.L2231	@cond_branch
	ldr	r0, .L2238+0x18
	lsl	r1, r4, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	blt	.L2231	@cond_branch
	ldr	r0, .L2238+0x8
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	beq	.L2230	@cond_branch
.L2231:
	ldrb	r0, [r3]
	mov	r4, #0x58
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r1, [r0, #0x28]
	ldr	r2, .L2238+0x1c
	ldr	r0, [r2]
	cmp	r1, r0
	bgt	.L2230	@cond_branch
	sub	r0, r1, #0x1
	str	r0, [r2]
	ldr	r1, .L2238+0x18
	ldrb	r3, [r3]
	lsl	r0, r3, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bge	.L2233	@cond_branch
	ldr	r0, .L2238+0x20
	ldrb	r1, [r0]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L2230
.L2239:
	.align	2, 0
.L2238:
	.word	gPotentialItemEffectBattler
	.word	gBattlerTarget
	.word	gSpecialStatuses
	.word	gBattleMons
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattleMoveDamage
	.word	gMoveResultFlags
.L2233:
	ldr	r0, .L2240
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	beq	.L2230	@cond_branch
	ldr	r2, .L2240+0x4
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L2240+0x8
	mov	r0, r3
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r1]
.L2230:
	ldr	r1, .L2240+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2241:
	.align	2, 0
.L2240:
	.word	gSpecialStatuses
	.word	gMoveResultFlags
	.word	gLastUsedItem
	.word	gBattlescriptCurrInstr
.Lfe121:
	.size	 atk69_adjustsetdamage,.Lfe121-atk69_adjustsetdamage
	.align	2, 0
	.type	 atk6A_removeitem,function
	.thumb_func
atk6A_removeitem:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r6, .L2243
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r5, .L2243+0x4
	strb	r0, [r5]
	ldr	r1, .L2243+0x8
	ldrb	r4, [r5]
	lsl	r0, r4, #0x1
	add	r0, r0, #0xb8
	ldr	r1, [r1]
	add	r1, r1, r0
	ldr	r2, .L2243+0xc
	mov	r3, #0x58
	mov	r0, r4
	mul	r0, r0, r3
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r1]
	ldrb	r0, [r5]
	mul	r0, r0, r3
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r5]
	mul	r0, r0, r3
	add	r2, r2, #0x2e
	add	r0, r0, r2
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r6]
	add	r0, r0, #0x2
	str	r0, [r6]
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2244:
	.align	2, 0
.L2243:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattleMons
.Lfe122:
	.size	 atk6A_removeitem,.Lfe122-atk6A_removeitem
	.align	2, 0
	.type	 atk6B_atknameinbuff1,function
	.thumb_func
atk6B_atknameinbuff1:
	ldr	r1, .L2246
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x7
	strb	r0, [r1, #0x1]
	ldr	r2, .L2246+0x4
	ldrb	r0, [r2]
	strb	r0, [r1, #0x2]
	ldr	r3, .L2246+0x8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L2246+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L2247:
	.align	2, 0
.L2246:
	.word	gBattleTextBuff1
	.word	gBattlerAttacker
	.word	gBattlerPartyIndexes
	.word	gBattlescriptCurrInstr
.Lfe123:
	.size	 atk6B_atknameinbuff1,.Lfe123-atk6B_atknameinbuff1
	.align	2, 0
	.type	 atk6C_drawlvlupbox,function
	.thumb_func
atk6C_drawlvlupbox:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L2273
	ldrb	r1, [r0, #0x1e]
	add	r4, r0, #0
	cmp	r1, #0
	bne	.L2249	@cond_branch
	bl	IsMonGettingExpSentOut
	cmp	r0, #0
	beq	.L2250	@cond_branch
	mov	r0, #0x3
	b	.L2271
.L2274:
	.align	2, 0
.L2273:
	.word	gBattleScripting
.L2250:
	mov	r0, #0x1
.L2271:
	strb	r0, [r4, #0x1e]
.L2249:
	ldrb	r0, [r4, #0x1e]
	sub	r0, r0, #0x1
	cmp	r0, #0x9
	bls	.LCB22435
	b	.L2252	@long jump
.LCB22435:
	lsl	r0, r0, #0x2
	ldr	r1, .L2275
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2276:
	.align	2, 0
.L2275:
	.word	.L2269
	.align	2, 0
	.align	2, 0
.L2269:
	.word	.L2253
	.word	.L2254
	.word	.L2256
	.word	.L2257
	.word	.L2259
	.word	.L2261
	.word	.L2259
	.word	.L2263
	.word	.L2265
	.word	.L2267
.L2253:
	ldr	r1, .L2277
	mov	r0, #0x60
	strh	r0, [r1]
	mov	r0, #0x2
	mov	r1, #0x7
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r0, #0x2
	bl	ShowBg
	bl	sub_804F17C
	ldr	r1, .L2277+0x4
	mov	r0, #0x2
	strb	r0, [r1, #0x1e]
	b	.L2252
.L2278:
	.align	2, 0
.L2277:
	.word	gBattle_BG2_Y
	.word	gBattleScripting
.L2254:
	bl	sub_804F1CC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB22482
	b	.L2252	@long jump
.LCB22482:
	ldr	r1, .L2279
	mov	r0, #0x3
	strb	r0, [r1, #0x1e]
	b	.L2252
.L2280:
	.align	2, 0
.L2279:
	.word	gBattleScripting
.L2256:
	ldr	r1, .L2281
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L2281+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	strh	r0, [r1]
	mov	r0, #0x0
	mov	r1, #0x7
	mov	r2, #0x1
	bl	SetBgAttribute
	mov	r0, #0x1
	mov	r1, #0x7
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x80
	str	r0, [sp]
	mov	r0, #0x12
	mov	r1, #0x7
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	HandleBattleWindow
	ldr	r1, .L2281+0x8
	mov	r0, #0x4
	strb	r0, [r1, #0x1e]
	b	.L2252
.L2282:
	.align	2, 0
.L2281:
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gBattleScripting
.L2257:
	bl	DrawLevelUpWindow1
	mov	r0, #0xd
	bl	PutWindowTilemap
	mov	r0, #0xd
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L2272
.L2259:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L2252	@cond_branch
	ldr	r0, .L2283
	strh	r1, [r0]
	b	.L2272
.L2284:
	.align	2, 0
.L2283:
	.word	gBattle_BG1_Y
.L2261:
	ldr	r0, .L2285
	ldrh	r0, [r0, #0x2e]
	cmp	r0, #0
	beq	.L2252	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	DrawLevelUpWindow2
	mov	r0, #0xd
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L2272
.L2286:
	.align	2, 0
.L2285:
	.word	gMain
.L2263:
	ldr	r0, .L2287
	ldrh	r0, [r0, #0x2e]
	cmp	r0, #0
	beq	.L2252	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x81
	str	r0, [sp]
	mov	r0, #0x12
	mov	r1, #0x7
	mov	r2, #0x1d
	mov	r3, #0x13
	bl	HandleBattleWindow
.L2272:
	ldr	r1, .L2287+0x4
	ldrb	r0, [r1, #0x1e]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1e]
	b	.L2252
.L2288:
	.align	2, 0
.L2287:
	.word	gMain
	.word	gBattleScripting
.L2265:
	bl	sub_804F344
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2252	@cond_branch
	mov	r0, #0xe
	bl	ClearWindowTilemap
	mov	r0, #0xe
	mov	r1, #0x1
	bl	CopyWindowToVram
	mov	r0, #0xd
	bl	ClearWindowTilemap
	mov	r0, #0xd
	mov	r1, #0x1
	bl	CopyWindowToVram
	mov	r0, #0x2
	mov	r1, #0x7
	mov	r2, #0x2
	bl	SetBgAttribute
	mov	r0, #0x2
	bl	ShowBg
	ldr	r1, .L2289
	mov	r0, #0xa
	strb	r0, [r1, #0x1e]
	b	.L2252
.L2290:
	.align	2, 0
.L2289:
	.word	gBattleScripting
.L2267:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2252	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x7
	mov	r2, #0x0
	bl	SetBgAttribute
	mov	r0, #0x1
	mov	r1, #0x7
	mov	r2, #0x1
	bl	SetBgAttribute
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	ldr	r1, .L2291
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L2252:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L2292:
	.align	2, 0
.L2291:
	.word	gBattlescriptCurrInstr
.Lfe124:
	.size	 atk6C_drawlvlupbox,.Lfe124-atk6C_drawlvlupbox
	.align	2, 0
	.type	 DrawLevelUpWindow1,function
	.thumb_func
DrawLevelUpWindow1:
	push	{lr}
	add	sp, sp, #-0x14
	ldr	r0, .L2294
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L2294+0x4
	add	r0, r0, r1
	add	r1, sp, #0x8
	bl	GetMonLevelUpWindowStats
	ldr	r0, .L2294+0x8
	ldr	r0, [r0]
	ldr	r1, [r0, #0x10]
	mov	r0, #0xd
	str	r0, [sp]
	mov	r0, #0xf
	str	r0, [sp, #0x4]
	mov	r0, #0xd
	add	r2, sp, #0x8
	mov	r3, #0xe
	bl	DrawLevelUpWindowPg1
	add	sp, sp, #0x14
	pop	{r0}
	bx	r0
.L2295:
	.align	2, 0
.L2294:
	.word	gBattleStruct
	.word	gPlayerParty
	.word	gBattleResources
.Lfe125:
	.size	 DrawLevelUpWindow1,.Lfe125-DrawLevelUpWindow1
	.align	2, 0
	.type	 DrawLevelUpWindow2,function
	.thumb_func
DrawLevelUpWindow2:
	push	{lr}
	add	sp, sp, #-0x10
	ldr	r0, .L2297
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L2297+0x4
	add	r0, r0, r1
	add	r1, sp, #0x4
	bl	GetMonLevelUpWindowStats
	mov	r0, #0xf
	str	r0, [sp]
	mov	r0, #0xd
	add	r1, sp, #0x4
	mov	r2, #0xe
	mov	r3, #0xd
	bl	DrawLevelUpWindowPg2
	add	sp, sp, #0x10
	pop	{r0}
	bx	r0
.L2298:
	.align	2, 0
.L2297:
	.word	gBattleStruct
	.word	gPlayerParty
.Lfe126:
	.size	 DrawLevelUpWindow2,.Lfe126-DrawLevelUpWindow2
	.align	2, 0
	.type	 sub_804F17C,function
	.thumb_func
sub_804F17C:
	push	{lr}
	ldr	r1, .L2300
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L2300+0x4
	mov	r2, #0xd0
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r0, .L2300+0x8
	mov	r1, #0x60
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r1, .L2300+0xc
	mov	r0, #0xe
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToWindowPixelBuffer
	mov	r0, #0xe
	bl	PutWindowTilemap
	mov	r0, #0xe
	mov	r1, #0x3
	bl	CopyWindowToVram
	bl	PutMonIconOnLvlUpBox
	pop	{r0}
	bx	r0
.L2301:
	.align	2, 0
.L2300:
	.word	gBattle_BG2_Y
	.word	gBattle_BG2_X
	.word	sUnknown_0831C2C8
	.word	sUnknown_0831C2E8
.Lfe127:
	.size	 sub_804F17C,.Lfe127-sub_804F17C
	.align	2, 0
	.type	 sub_804F1CC,function
	.thumb_func
sub_804F1CC:
	push	{r4, r5, lr}
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2303	@cond_branch
	mov	r0, #0x1
	b	.L2308
.L2303:
	ldr	r4, .L2309
	ldrh	r1, [r4]
	mov	r5, #0x80
	lsl	r5, r5, #0x2
	cmp	r1, r5
	bne	.L2304	@cond_branch
	mov	r0, #0x0
	b	.L2308
.L2310:
	.align	2, 0
.L2309:
	.word	gBattle_BG2_X
.L2304:
	mov	r0, #0xd0
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L2305	@cond_branch
	bl	PutLevelAndGenderOnLvlUpBox
.L2305:
	ldrh	r0, [r4]
	add	r0, r0, #0x8
	strh	r0, [r4]
	lsl	r0, r0, #0x10
	ldr	r1, .L2311
	cmp	r0, r1
	bls	.L2306	@cond_branch
	strh	r5, [r4]
.L2306:
	ldrh	r1, [r4]
	eor	r1, r1, r5
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
.L2308:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L2312:
	.align	2, 0
.L2311:
	.word	0x1ff0000
.Lfe128:
	.size	 sub_804F1CC,.Lfe128-sub_804F1CC
	.align	2, 0
	.type	 PutLevelAndGenderOnLvlUpBox,function
	.thumb_func
PutLevelAndGenderOnLvlUpBox:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	ldr	r6, .L2318
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L2318+0x4
	add	r0, r0, r4
	mov	r1, #0x38
	bl	GetMonData
	mov	r8, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	bl	GetMonGender
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r5
	add	r0, r0, r4
	ldr	r5, .L2318+0x8
	add	r1, r5, #0
	bl	GetMonNickname
	str	r5, [sp]
	mov	r2, sp
	mov	r1, #0x0
	mov	r0, #0xe
	strb	r0, [r2, #0x4]
	mov	r0, sp
	strb	r1, [r0, #0x5]
	mov	r4, #0x20
	strb	r4, [r0, #0x6]
	strb	r1, [r0, #0x7]
	strb	r4, [r0, #0x8]
	strb	r1, [r0, #0x9]
	strb	r1, [r0, #0xa]
	strb	r1, [r0, #0xb]
	mov	r3, sp
	ldrb	r2, [r3, #0xc]
	sub	r1, r1, #0x10
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3, #0xc]
	mov	r2, sp
	mov	r0, #0x10
	strb	r0, [r2, #0xc]
	ldrb	r0, [r2, #0xd]
	and	r1, r1, r0
	strb	r1, [r2, #0xd]
	mov	r0, sp
	strb	r4, [r0, #0xd]
	mov	r1, #0xff
	mov	r2, #0x0
	bl	AddTextPrinter
	mov	r0, #0xf9
	strb	r0, [r5]
	add	r5, r5, #0x1
	mov	r0, #0x5
	strb	r0, [r5]
	add	r5, r5, #0x1
	add	r4, r5, #0
	add	r0, r4, #0
	mov	r1, r8
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r5, r0, #0
	sub	r4, r5, r4
	mov	r2, #0x4
	sub	r2, r2, r4
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r1, #0x77
	bl	StringFill
	add	r5, r0, #0
	cmp	r7, #0xff
	beq	.L2314	@cond_branch
	cmp	r7, #0
	bne	.L2315	@cond_branch
	mov	r1, #0x0
	mov	r2, #0xc
	bl	WriteColorChangeControlCode
	add	r5, r0, #0
	mov	r1, #0x1
	mov	r2, #0xd
	bl	WriteColorChangeControlCode
	add	r5, r0, #0
	mov	r0, #0xb5
	b	.L2317
.L2319:
	.align	2, 0
.L2318:
	.word	gBattleStruct
	.word	gPlayerParty
	.word	gStringVar4
.L2315:
	add	r0, r5, #0
	mov	r1, #0x0
	mov	r2, #0xe
	bl	WriteColorChangeControlCode
	add	r5, r0, #0
	mov	r1, #0x1
	mov	r2, #0xf
	bl	WriteColorChangeControlCode
	add	r5, r0, #0
	mov	r0, #0xb6
.L2317:
	strb	r0, [r5]
	add	r5, r5, #0x1
	mov	r0, #0xff
	strb	r0, [r5]
.L2314:
	mov	r0, sp
	mov	r1, #0xa
	strb	r1, [r0, #0x7]
	strb	r1, [r0, #0x9]
	mov	r1, #0xff
	mov	r2, #0x0
	bl	AddTextPrinter
	mov	r0, #0xe
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe129:
	.size	 PutLevelAndGenderOnLvlUpBox,.Lfe129-PutLevelAndGenderOnLvlUpBox
	.align	2, 0
	.type	 sub_804F344,function
	.thumb_func
sub_804F344:
	push	{lr}
	ldr	r0, .L2326
	ldrh	r1, [r0]
	mov	r3, #0xd0
	lsl	r3, r3, #0x1
	add	r2, r0, #0
	cmp	r1, r3
	bne	.L2321	@cond_branch
	mov	r0, #0x0
	b	.L2325
.L2327:
	.align	2, 0
.L2326:
	.word	gBattle_BG2_X
.L2321:
	ldrh	r0, [r2]
	add	r1, r0, #0
	sub	r1, r1, #0x10
	ldr	r0, .L2328
	cmp	r1, r0
	bgt	.L2322	@cond_branch
	strh	r3, [r2]
	b	.L2323
.L2329:
	.align	2, 0
.L2328:
	.word	0x19f
.L2322:
	strh	r1, [r2]
.L2323:
	ldrh	r1, [r2]
	mov	r0, #0xd0
	lsl	r0, r0, #0x1
	eor	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
.L2325:
	pop	{r1}
	bx	r1
.Lfe130:
	.size	 sub_804F344,.Lfe130-sub_804F344
	.align	2, 0
	.type	 PutMonIconOnLvlUpBox,function
	.thumb_func
PutMonIconOnLvlUpBox:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x10
	ldr	r0, .L2331
	mov	r8, r0
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L2331+0x4
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r1, r8
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x10]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x0
	bl	GetMonData
	add	r1, r0, #0
	add	r0, r4, #0
	mov	r2, #0x1
	bl	GetMonIconPtr
	str	r0, [sp]
	ldr	r5, .L2331+0x8
	ldr	r0, [sp, #0x4]
	and	r0, r0, r5
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	orr	r0, r0, r1
	ldr	r1, .L2331+0xc
	and	r0, r0, r1
	ldr	r1, .L2331+0x10
	orr	r0, r0, r1
	str	r0, [sp, #0x4]
	add	r0, r4, #0
	bl	GetValidMonIconPalettePtr
	str	r0, [sp, #0x8]
	add	r4, sp, #0x8
	ldr	r0, [r4, #0x4]
	and	r0, r0, r5
	ldr	r1, .L2331+0x14
	orr	r0, r0, r1
	str	r0, [r4, #0x4]
	mov	r0, sp
	bl	LoadSpriteSheet
	add	r0, r4, #0
	bl	LoadSpritePalette
	ldr	r0, .L2331+0x18
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	mov	r2, #0xa
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L2331+0x1c
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x0
	strh	r0, [r1, #0x2e]
	ldr	r0, .L2331+0x20
	ldrh	r0, [r0]
	strh	r0, [r1, #0x30]
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2332:
	.align	2, 0
.L2331:
	.word	gBattleStruct
	.word	gPlayerParty
	.word	-0x10000
	.word	0xffff
	.word	-0x28a60000
	.word	0xd75a
	.word	sSpriteTemplate_MonIconOnLvlUpBox
	.word	gSprites
	.word	gBattle_BG2_X
.Lfe131:
	.size	 PutMonIconOnLvlUpBox,.Lfe131-PutMonIconOnLvlUpBox
	.align	2, 0
	.type	 SpriteCB_MonIconOnLvlUpBox,function
	.thumb_func
SpriteCB_MonIconOnLvlUpBox:
	push	{r4, lr}
	add	r2, r0, #0
	ldr	r0, .L2337
	ldrh	r1, [r2, #0x30]
	ldrh	r0, [r0]
	sub	r1, r1, r0
	strh	r1, [r2, #0x24]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	beq	.L2334	@cond_branch
	mov	r0, #0x1
	strh	r0, [r2, #0x2e]
	b	.L2335
.L2338:
	.align	2, 0
.L2337:
	.word	gBattle_BG2_X
.L2334:
	mov	r1, #0x2e
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	beq	.L2335	@cond_branch
	add	r0, r2, #0
	bl	DestroySprite
	ldr	r4, .L2339
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
.L2335:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2340:
	.align	2, 0
.L2339:
	.word	0xd75a
.Lfe132:
	.size	 SpriteCB_MonIconOnLvlUpBox,.Lfe132-SpriteCB_MonIconOnLvlUpBox
	.align	2, 0
	.type	 IsMonGettingExpSentOut,function
	.thumb_func
IsMonGettingExpSentOut:
	push	{lr}
	ldr	r3, .L2346
	ldr	r0, .L2346+0x4
	ldr	r0, [r0]
	ldrh	r1, [r3]
	ldrb	r2, [r0, #0x10]
	cmp	r1, r2
	beq	.L2345	@cond_branch
	ldr	r0, .L2346+0x8
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2343	@cond_branch
	ldrh	r0, [r3, #0x4]
	cmp	r0, r2
	bne	.L2343	@cond_branch
.L2345:
	mov	r0, #0x1
	b	.L2344
.L2347:
	.align	2, 0
.L2346:
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gBattleTypeFlags
.L2343:
	mov	r0, #0x0
.L2344:
	pop	{r1}
	bx	r1
.Lfe133:
	.size	 IsMonGettingExpSentOut,.Lfe133-IsMonGettingExpSentOut
	.align	2, 0
	.type	 atk6D_resetsentmonsvalue,function
	.thumb_func
atk6D_resetsentmonsvalue:
	push	{lr}
	bl	ResetSentPokesToOpponentValue
	ldr	r1, .L2349
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2350:
	.align	2, 0
.L2349:
	.word	gBattlescriptCurrInstr
.Lfe134:
	.size	 atk6D_resetsentmonsvalue,.Lfe134-atk6D_resetsentmonsvalue
	.align	2, 0
	.type	 atk6E_setatktoplayer0,function
	.thumb_func
atk6E_setatktoplayer0:
	push	{lr}
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r1, .L2352
	strb	r0, [r1]
	ldr	r1, .L2352+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2353:
	.align	2, 0
.L2352:
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe135:
	.size	 atk6E_setatktoplayer0,.Lfe135-atk6E_setatktoplayer0
	.align	2, 0
	.type	 atk6F_makevisible,function
	.thumb_func
atk6F_makevisible:
	push	{r4, r5, lr}
	ldr	r5, .L2355
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L2355+0x4
	strb	r0, [r4]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitSpriteInvisibility
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2356:
	.align	2, 0
.L2355:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.Lfe136:
	.size	 atk6F_makevisible,.Lfe136-atk6F_makevisible
	.align	2, 0
	.type	 atk70_recordlastability,function
	.thumb_func
atk70_recordlastability:
	push	{r4, lr}
	ldr	r4, .L2358
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r1, .L2358+0x4
	strb	r0, [r1]
	ldrb	r0, [r1]
	ldr	r1, .L2358+0x8
	ldrb	r1, [r1]
	bl	RecordAbilityBattle
	ldr	r0, [r4]
	add	r0, r0, #0x1
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2359:
	.align	2, 0
.L2358:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gLastUsedAbility
.Lfe137:
	.size	 atk70_recordlastability,.Lfe137-atk70_recordlastability
	.align	2, 0
	.globl	BufferMoveToLearnIntoBattleTextBuff2
	.type	 BufferMoveToLearnIntoBattleTextBuff2,function
	.thumb_func
BufferMoveToLearnIntoBattleTextBuff2:
	ldr	r2, .L2361
	mov	r0, #0xfd
	strb	r0, [r2]
	mov	r0, #0x2
	strb	r0, [r2, #0x1]
	ldr	r0, .L2361+0x4
	ldrh	r1, [r0]
	strb	r1, [r2, #0x2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r2, #0x3]
	mov	r0, #0xff
	strb	r0, [r2, #0x4]
	bx	lr
.L2362:
	.align	2, 0
.L2361:
	.word	gBattleTextBuff2
	.word	gMoveToLearn
.Lfe138:
	.size	 BufferMoveToLearnIntoBattleTextBuff2,.Lfe138-BufferMoveToLearnIntoBattleTextBuff2
	.align	2, 0
	.type	 atk71_buffermovetolearn,function
	.thumb_func
atk71_buffermovetolearn:
	push	{lr}
	bl	BufferMoveToLearnIntoBattleTextBuff2
	ldr	r1, .L2364
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2365:
	.align	2, 0
.L2364:
	.word	gBattlescriptCurrInstr
.Lfe139:
	.size	 atk71_buffermovetolearn,.Lfe139-atk71_buffermovetolearn
	.align	2, 0
	.type	 atk72_jumpifplayerran,function
	.thumb_func
atk72_jumpifplayerran:
	push	{lr}
	ldr	r0, .L2369
	ldrb	r0, [r0]
	bl	TryRunFromBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2367	@cond_branch
	ldr	r3, .L2369+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2368
.L2370:
	.align	2, 0
.L2369:
	.word	gBattlerFainted
	.word	gBattlescriptCurrInstr
.L2367:
	ldr	r1, .L2371
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2368:
	pop	{r0}
	bx	r0
.L2372:
	.align	2, 0
.L2371:
	.word	gBattlescriptCurrInstr
.Lfe140:
	.size	 atk72_jumpifplayerran,.Lfe140-atk72_jumpifplayerran
	.align	2, 0
	.type	 atk73_hpthresholds,function
	.thumb_func
atk73_hpthresholds:
	push	{r4, r5, r6, lr}
	ldr	r0, .L2384
	ldr	r4, [r0]
	mov	r6, #0x1
	and	r4, r4, r6
	cmp	r4, #0
	bne	.L2374	@cond_branch
	ldr	r0, .L2384+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r1, .L2384+0x8
	strb	r0, [r1]
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L2384+0xc
	mov	r1, #0x58
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r5, [r1, #0x28]
	mov	r0, #0x64
	mul	r0, r0, r5
	ldrh	r1, [r1, #0x2c]
	bl	__divsi3
	cmp	r0, #0
	bne	.L2375	@cond_branch
	mov	r0, #0x1
.L2375:
	cmp	r0, #0x45
	bgt	.L2377	@cond_branch
	cmp	r5, #0
	bne	.L2376	@cond_branch
.L2377:
	ldr	r0, .L2384+0x10
	ldr	r0, [r0]
	add	r0, r0, #0xb1
	strb	r4, [r0]
	b	.L2374
.L2385:
	.align	2, 0
.L2384:
	.word	gBattleTypeFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleMons
	.word	gBattleStruct
.L2376:
	cmp	r0, #0x27
	ble	.L2379	@cond_branch
	ldr	r0, .L2386
	ldr	r0, [r0]
	add	r0, r0, #0xb1
	strb	r6, [r0]
	b	.L2374
.L2387:
	.align	2, 0
.L2386:
	.word	gBattleStruct
.L2379:
	cmp	r0, #0x9
	ble	.L2381	@cond_branch
	ldr	r0, .L2388
	ldr	r0, [r0]
	add	r0, r0, #0xb1
	mov	r1, #0x2
	b	.L2383
.L2389:
	.align	2, 0
.L2388:
	.word	gBattleStruct
.L2381:
	ldr	r0, .L2390
	ldr	r0, [r0]
	add	r0, r0, #0xb1
	mov	r1, #0x3
.L2383:
	strb	r1, [r0]
.L2374:
	ldr	r1, .L2390+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2391:
	.align	2, 0
.L2390:
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
.Lfe141:
	.size	 atk73_hpthresholds,.Lfe141-atk73_hpthresholds
	.align	2, 0
	.type	 atk74_hpthresholds2,function
	.thumb_func
atk74_hpthresholds2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L2401
	ldr	r7, [r0]
	mov	r0, #0x1
	mov	r8, r0
	and	r7, r7, r0
	cmp	r7, #0
	bne	.L2393	@cond_branch
	ldr	r0, .L2401+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	add	r4, r0, #0
	ldr	r0, .L2401+0x8
	strb	r4, [r0]
	mov	r0, #0x1
	eor	r4, r4, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L2401+0xc
	ldr	r6, [r1]
	lsr	r0, r0, #0x17
	add	r0, r0, r6
	add	r0, r0, #0xa8
	ldrb	r5, [r0]
	ldr	r1, .L2401+0x10
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r0, r0, r1
	ldrh	r4, [r0, #0x28]
	sub	r1, r5, r4
	mov	r0, #0x64
	mul	r0, r0, r1
	add	r1, r5, #0
	bl	__divsi3
	add	r1, r0, #0
	cmp	r4, r5
	bcc	.L2394	@cond_branch
	add	r0, r6, #0
	add	r0, r0, #0xb1
	strb	r7, [r0]
	b	.L2393
.L2402:
	.align	2, 0
.L2401:
	.word	gBattleTypeFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattleMons
.L2394:
	cmp	r0, #0x1d
	bgt	.L2396	@cond_branch
	add	r0, r6, #0
	add	r0, r0, #0xb1
	mov	r1, r8
	strb	r1, [r0]
	b	.L2393
.L2396:
	cmp	r1, #0x45
	bgt	.L2398	@cond_branch
	add	r1, r6, #0
	add	r1, r1, #0xb1
	mov	r0, #0x2
	b	.L2400
.L2398:
	add	r1, r6, #0
	add	r1, r1, #0xb1
	mov	r0, #0x3
.L2400:
	strb	r0, [r1]
.L2393:
	ldr	r1, .L2403
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2404:
	.align	2, 0
.L2403:
	.word	gBattlescriptCurrInstr
.Lfe142:
	.size	 atk74_hpthresholds2,.Lfe142-atk74_hpthresholds2
	.align	2, 0
	.type	 atk75_useitemonopponent,function
	.thumb_func
atk75_useitemonopponent:
	push	{lr}
	add	sp, sp, #-0x4
	ldr	r2, .L2406
	ldr	r1, .L2406+0x4
	ldrb	r0, [r1]
	strb	r0, [r2]
	ldr	r2, .L2406+0x8
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r1, .L2406+0xc
	add	r0, r0, r1
	ldr	r1, .L2406+0x10
	ldrh	r1, [r1]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r3, #0x1
	str	r3, [sp]
	mov	r3, #0x0
	bl	PokemonUseItemEffects
	ldr	r1, .L2406+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L2407:
	.align	2, 0
.L2406:
	.word	gBattlerInMenuId
	.word	gBattlerAttacker
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gLastUsedItem
	.word	gBattlescriptCurrInstr
.Lfe143:
	.size	 atk75_useitemonopponent,.Lfe143-atk75_useitemonopponent
	.align	2, 0
	.type	 atk76_various,function
	.thumb_func
atk76_various:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r4, .L2470
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r1, .L2470+0x4
	strb	r0, [r1]
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0x1a
	bls	.LCB23841
	b	.L2409	@long jump
.LCB23841:
	lsl	r0, r0, #0x2
	ldr	r1, .L2470+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2471:
	.align	2, 0
.L2470:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	.L2463
	.align	2, 0
	.align	2, 0
.L2463:
	.word	.L2410
	.word	.L2411
	.word	.L2414
	.word	.L2415
	.word	.L2416
	.word	.L2419
	.word	.L2420
	.word	.L2432
	.word	.L2434
	.word	.L2436
	.word	.L2438
	.word	.L2439
	.word	.L2440
	.word	.L2441
	.word	.L2442
	.word	.L2443
	.word	.L2444
	.word	.L2445
	.word	.L2447
	.word	.L2449
	.word	.L2451
	.word	.L2454
	.word	.L2455
	.word	.L2456
	.word	.L2457
	.word	.L2459
	.word	.L2462
.L2410:
	ldr	r0, .L2472
	ldrb	r0, [r0]
	bl	CancelMultiTurnMoves
	b	.L2409
.L2473:
	.align	2, 0
.L2472:
	.word	gActiveBattler
.L2411:
	ldr	r1, .L2474
	ldr	r4, .L2474+0x4
	ldrb	r0, [r4]
	strb	r0, [r1]
	ldrb	r0, [r1]
	bl	GetBattlerSide
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L2474+0x8
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r1, r2
	ldrb	r0, [r2, #0x8]
	cmp	r0, #0
	beq	.L2412	@cond_branch
	ldr	r1, .L2474+0xc
	ldrb	r2, [r2, #0x9]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L2412	@cond_branch
	strb	r2, [r4]
	b	.L2409
.L2475:
	.align	2, 0
.L2474:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gSideTimers
	.word	gBattleMons
.L2412:
	ldr	r0, .L2476
	ldr	r1, .L2476+0x4
	ldrb	r1, [r1]
	strb	r1, [r0]
	b	.L2409
.L2477:
	.align	2, 0
.L2476:
	.word	gBattlerTarget
	.word	gActiveBattler
.L2414:
	bl	IsRunningFromBattleImpossible
	ldr	r1, .L2478
	strb	r0, [r1]
	b	.L2409
.L2479:
	.align	2, 0
.L2478:
	.word	gBattleCommunication
.L2415:
	ldr	r0, .L2480
	ldrh	r0, [r0]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L2480+0x4
	strb	r0, [r1]
	b	.L2409
.L2481:
	.align	2, 0
.L2480:
	.word	gCurrentMove
	.word	gBattlerTarget
.L2416:
	ldr	r2, .L2482
	ldr	r1, .L2482+0x4
	ldr	r0, .L2482+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	lsl	r0, r0, #0x1c
	ldr	r2, [r2]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L2417	@cond_branch
	ldr	r1, .L2482+0xc
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L2409
.L2483:
	.align	2, 0
.L2482:
	.word	gHitMarker
	.word	gBitTable
	.word	gActiveBattler
	.word	gBattleCommunication
.L2417:
	ldr	r0, .L2484
	strb	r2, [r0]
	b	.L2409
.L2485:
	.align	2, 0
.L2484:
	.word	gBattleCommunication
.L2419:
	ldr	r4, .L2486
	ldr	r3, .L2486+0x4
	ldrb	r0, [r3]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r2, [r1]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r3]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	b	.L2409
.L2487:
	.align	2, 0
.L2486:
	.word	gSpecialStatuses
	.word	gActiveBattler
.L2420:
	ldr	r4, .L2488
	ldr	r1, .L2488+0x4
	ldr	r0, [r1]
	ldrh	r3, [r4]
	ldrb	r2, [r0, #0x10]
	add	r6, r1, #0
	cmp	r3, r2
	beq	.L2465	@cond_branch
	ldrh	r0, [r4, #0x4]
	cmp	r0, r2
	beq	.LCB24054
	b	.L2409	@long jump
.LCB24054:
	cmp	r3, r0
	bne	.L2423	@cond_branch
.L2465:
	ldr	r1, .L2488+0x8
	mov	r0, #0x0
	b	.L2466
.L2489:
	.align	2, 0
.L2488:
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gActiveBattler
.L2423:
	ldr	r1, .L2490
	mov	r0, #0x2
.L2466:
	strb	r0, [r1]
	add	r5, r1, #0
	ldrb	r2, [r5]
	lsl	r0, r2, #0x1
	add	r0, r0, #0xc8
	ldr	r1, [r6]
	add	r4, r1, r0
	mov	r3, #0x0
	ldr	r1, .L2490+0x4
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
	ldrh	r2, [r4]
	cmp	r0, r2
	beq	.L2426	@cond_branch
	add	r6, r5, #0
	mov	r5, #0x58
	add	r2, r1, #0
.L2427:
	add	r3, r3, #0x1
	cmp	r3, #0x3
	bgt	.L2426	@cond_branch
	lsl	r1, r3, #0x1
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r1, r1, r0
	add	r1, r1, r2
	ldrh	r0, [r1]
	ldrh	r1, [r4]
	cmp	r0, r1
	bne	.L2427	@cond_branch
.L2426:
	cmp	r3, #0x4
	beq	.LCB24129
	b	.L2409	@long jump
.LCB24129:
	mov	r0, #0x0
	strh	r0, [r4]
	b	.L2409
.L2491:
	.align	2, 0
.L2490:
	.word	gActiveBattler
	.word	gBattleMons
.L2432:
	ldr	r0, .L2492
	ldr	r0, [r0]
	mov	r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0x8
	beq	.LCB24148
	b	.L2409	@long jump
.LCB24148:
	ldr	r1, .L2492+0x4
	ldrh	r0, [r1, #0x28]
	cmp	r0, #0
	bne	.LCB24154
	b	.L2409	@long jump
.LCB24154:
	add	r0, r1, #0
	add	r0, r0, #0x80
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.LCB24161
	b	.L2409	@long jump
.LCB24161:
	ldr	r0, .L2492+0x8
	ldr	r1, [r0]
	ldr	r2, .L2492+0xc
	and	r1, r1, r2
	str	r1, [r0]
	b	.L2409
.L2493:
	.align	2, 0
.L2492:
	.word	gBattleTypeFlags
	.word	gBattleMons
	.word	gHitMarker
	.word	-0x400001
.L2434:
	ldr	r2, .L2494
	mov	r8, r2
	mov	r0, #0x0
	strb	r0, [r2]
	ldr	r1, .L2494+0x4
	ldr	r6, .L2494+0x8
	ldrb	r0, [r2, #0x1]
	strb	r0, [r6]
	strb	r0, [r1, #0x17]
	ldr	r0, .L2494+0xc
	ldr	r0, [r0]
	add	r7, r0, #0
	add	r7, r7, #0x92
	ldrb	r3, [r7]
	ldr	r1, .L2494+0x10
	ldrb	r2, [r6]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r5, [r0]
	add	r0, r3, #0
	and	r0, r0, r5
	cmp	r0, #0
	beq	.LCB24202
	b	.L2409	@long jump
.LCB24202:
	ldr	r4, .L2494+0x14
	mov	r0, #0x58
	mov	ip, r0
	mov	r1, ip
	mul	r1, r1, r2
	add	r2, r1, #0
	add	r1, r2, r4
	ldrh	r0, [r1, #0x2c]
	lsr	r0, r0, #0x1
	ldrh	r1, [r1, #0x28]
	cmp	r0, r1
	bcs	.LCB24217
	b	.L2409	@long jump
.LCB24217:
	cmp	r1, #0
	bne	.LCB24219
	b	.L2409	@long jump
.LCB24219:
	add	r0, r4, #0
	add	r0, r0, #0x4c
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB24227
	b	.L2409	@long jump
.LCB24227:
	orr	r3, r3, r5
	strb	r3, [r7]
	mov	r0, #0x1
	mov	r2, r8
	strb	r0, [r2]
	ldrb	r0, [r6]
	mov	r1, ip
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r1, r4, #0
	add	r1, r1, #0x48
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	GetNatureFromPersonality
	ldr	r1, .L2494+0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r2, r8
	strb	r0, [r2, #0x5]
	b	.L2409
.L2495:
	.align	2, 0
.L2494:
	.word	gBattleCommunication
	.word	gBattleScripting
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBitTable
	.word	gBattleMons
	.word	sUnknown_0831C4F8
.L2436:
	ldr	r4, .L2496
	add	r0, r4, #0
	bl	BattleArena_ShowJudgmentWindow
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	bne	.LCB24273
	b	.L2408	@long jump
.LCB24273:
	strb	r3, [r4, #0x1]
	b	.L2409
.L2497:
	.align	2, 0
.L2496:
	.word	gBattleCommunication
.L2438:
	ldr	r0, .L2498
	add	r0, r0, #0x80
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r2, .L2498+0x4
	ldr	r3, .L2498+0x8
	ldr	r1, [r3, #0x4]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L2498+0xc
	ldr	r2, [r0]
	ldr	r0, .L2498+0x10
	add	r2, r2, r0
	ldr	r0, .L2498+0x14
	ldrh	r0, [r0, #0x2]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L2498+0x18
	add	r1, r1, #0x34
	ldrb	r0, [r1]
	mov	r2, #0x2
	b	.L2467
.L2499:
	.align	2, 0
.L2498:
	.word	gBattleMons
	.word	gHitMarker
	.word	gBitTable
	.word	gBattleStruct
	.word	0x2a1
	.word	gBattlerPartyIndexes
	.word	gDisableStructs
.L2439:
	ldr	r1, .L2500
	mov	r0, #0x0
	strh	r0, [r1, #0x28]
	ldr	r2, .L2500+0x4
	ldr	r3, .L2500+0x8
	ldr	r1, [r3]
	lsl	r1, r1, #0x1c
	ldr	r0, [r2]
	orr	r0, r0, r1
	mov	r1, #0x80
	lsl	r1, r1, #0xf
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L2500+0xc
	ldr	r2, [r0]
	mov	r1, #0xa8
	lsl	r1, r1, #0x2
	add	r2, r2, r1
	ldr	r0, .L2500+0x10
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, .L2500+0x14
	ldrb	r0, [r2, #0x18]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2, #0x18]
	b	.L2409
.L2501:
	.align	2, 0
.L2500:
	.word	gBattleMons
	.word	gHitMarker
	.word	gBitTable
	.word	gBattleStruct
	.word	gBattlerPartyIndexes
	.word	gDisableStructs
.L2440:
	ldr	r0, .L2502
	mov	r1, #0x0
	strh	r1, [r0, #0x28]
	add	r0, r0, #0x80
	strh	r1, [r0]
	ldr	r2, .L2502+0x4
	ldr	r3, .L2502+0x8
	ldr	r0, [r3]
	lsl	r0, r0, #0x1c
	ldr	r1, [r2]
	orr	r1, r1, r0
	ldr	r0, [r3, #0x4]
	lsl	r0, r0, #0x1c
	orr	r1, r1, r0
	mov	r0, #0x80
	lsl	r0, r0, #0xf
	orr	r1, r1, r0
	str	r1, [r2]
	ldr	r5, .L2502+0xc
	ldr	r2, [r5]
	mov	r0, #0xa8
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	ldr	r4, .L2502+0x10
	ldrh	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, [r5]
	ldr	r1, .L2502+0x14
	add	r2, r2, r1
	ldrh	r0, [r4, #0x2]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L2502+0x18
	ldrb	r0, [r1, #0x18]
	mov	r2, #0x2
	orr	r0, r0, r2
	strb	r0, [r1, #0x18]
	add	r1, r1, #0x34
	ldrb	r0, [r1]
.L2467:
	orr	r0, r0, r2
	strb	r0, [r1]
	b	.L2409
.L2503:
	.align	2, 0
.L2502:
	.word	gBattleMons
	.word	gHitMarker
	.word	gBitTable
	.word	gBattleStruct
	.word	gBattlerPartyIndexes
	.word	0x2a1
	.word	gDisableStructs
.L2441:
	mov	r0, #0x0
	bl	BtlController_EmitUnknownYesNoBox
	ldr	r0, .L2504
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	b	.L2409
.L2505:
	.align	2, 0
.L2504:
	.word	gActiveBattler
.L2442:
	bl	DrawArenaRefereeTextBox
	b	.L2409
.L2443:
	bl	RemoveArenaRefereeTextBox
	b	.L2409
.L2444:
	ldr	r1, .L2506
	ldr	r0, .L2506+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	BattleStringExpandPlaceholdersToDisplayedString
	ldr	r0, .L2506+0x8
	mov	r1, #0x16
	bl	BattlePutTextOnWindow
	b	.L2409
.L2507:
	.align	2, 0
.L2506:
	.word	gRefereeStringsTable
	.word	gBattlescriptCurrInstr
	.word	gDisplayedStringBattle
.L2445:
	mov	r0, #0x16
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	b	.L2468
.L2447:
	bl	IsCryFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB24504
	b	.L2408	@long jump
.LCB24504:
	b	.L2409
.L2449:
	ldr	r4, .L2508
	mov	r0, #0x1
	strb	r0, [r4]
	ldr	r0, .L2508+0x4
	add	r0, r0, #0x58
	b	.L2469
.L2509:
	.align	2, 0
.L2508:
	.word	gActiveBattler
	.word	gBattleMons
.L2451:
	ldr	r0, .L2510
	ldrb	r0, [r0]
	cmp	r0, #0x3
	bls	.L2409	@cond_branch
	ldr	r4, .L2510+0x4
	mov	r0, #0x3
	strb	r0, [r4]
	ldr	r0, .L2510+0x8
	mov	r2, #0x84
	lsl	r2, r2, #0x1
	add	r0, r0, r2
.L2469:
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L2409	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitReturnMonToBall
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L2409
.L2511:
	.align	2, 0
.L2510:
	.word	gBattlersCount
	.word	gActiveBattler
	.word	gBattleMons
.L2454:
	ldr	r0, .L2512
	ldr	r1, .L2512+0x4
	mov	r2, #0x55
	bl	m4aMPlayVolumeControl
	b	.L2409
.L2513:
	.align	2, 0
.L2512:
	.word	gMPlayInfo_BGM
	.word	0xffff
.L2455:
	ldr	r0, .L2514
	ldr	r1, .L2514+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
	b	.L2409
.L2515:
	.align	2, 0
.L2514:
	.word	gMPlayInfo_BGM
	.word	0xffff
.L2456:
	ldr	r0, .L2516
	ldr	r2, [r0]
	ldr	r0, .L2516+0x4
	add	r2, r2, r0
	ldr	r1, .L2516+0x8
	ldr	r0, .L2516+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrb	r1, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	b	.L2409
.L2517:
	.align	2, 0
.L2516:
	.word	gBattleStruct
	.word	0x2a2
	.word	gBitTable
	.word	gActiveBattler
.L2457:
	ldr	r0, .L2518
	ldrb	r0, [r0]
	bl	sub_805725C
.L2468:
	cmp	r0, #0
	bne	.L2408	@cond_branch
	b	.L2409
.L2519:
	.align	2, 0
.L2518:
	.word	gActiveBattler
.L2459:
	ldr	r0, .L2520
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2460	@cond_branch
	ldr	r1, .L2520+0x4
	mov	r0, #0x5
	strb	r0, [r1]
	b	.L2409
.L2521:
	.align	2, 0
.L2520:
	.word	gActiveBattler
	.word	gBattleOutcome
.L2460:
	ldr	r1, .L2522
	mov	r0, #0xa
	strb	r0, [r1]
	b	.L2409
.L2523:
	.align	2, 0
.L2522:
	.word	gBattleOutcome
.L2462:
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	mov	r0, #0x0
	mov	r2, #0x1
	bl	BtlController_EmitPlayFanfareOrBGM
	ldr	r0, .L2524
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
.L2409:
	ldr	r1, .L2524+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x3
	str	r0, [r1]
.L2408:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2525:
	.align	2, 0
.L2524:
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
.Lfe144:
	.size	 atk76_various,.Lfe144-atk76_various
	.align	2, 0
	.type	 atk77_setprotectlike,function
	.thumb_func
atk77_setprotectlike:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r6, #0x1
	ldr	r2, .L2533
	ldr	r1, .L2533+0x4
	ldrb	r3, [r1]
	lsl	r0, r3, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	mov	r8, r1
	ldr	r7, .L2533+0x8
	cmp	r0, #0xb6
	beq	.L2527	@cond_branch
	cmp	r0, #0xc5
	beq	.L2527	@cond_branch
	cmp	r0, #0xcb
	beq	.L2527	@cond_branch
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	mov	r1, #0x0
	strb	r1, [r0, #0x8]
.L2527:
	ldr	r0, .L2533+0xc
	ldrb	r1, [r0]
	ldr	r0, .L2533+0x10
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bne	.L2528	@cond_branch
	mov	r6, #0x0
.L2528:
	ldr	r2, .L2533+0x14
	mov	r5, r8
	ldrb	r1, [r5]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r4, [r0, #0x8]
	lsl	r4, r4, #0x1
	add	r4, r4, r2
	bl	Random
	ldrh	r1, [r4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r1, r0
	bcc	.L2529	@cond_branch
	cmp	r6, #0
	beq	.L2529	@cond_branch
	ldr	r4, .L2533+0x18
	ldr	r3, .L2533+0x1c
	ldrh	r0, [r3]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r0, [r1]
	cmp	r0, #0x6f
	bne	.L2530	@cond_branch
	ldr	r0, .L2533+0x20
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x1
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L2533+0x24
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
.L2530:
	ldrh	r0, [r3]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r0, [r1]
	cmp	r0, #0x74
	bne	.L2531	@cond_branch
	ldr	r0, .L2533+0x20
	ldrb	r1, [r5]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x2
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L2533+0x24
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
.L2531:
	mov	r1, r8
	ldrb	r0, [r1]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrb	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x8]
	b	.L2532
.L2534:
	.align	2, 0
.L2533:
	.word	gLastResultingMoves
	.word	gBattlerAttacker
	.word	gDisableStructs
	.word	gCurrentTurnActionNumber
	.word	gBattlersCount
	.word	sProtectSuccessRates
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gProtectStructs
	.word	gBattleCommunication
.L2529:
	ldr	r2, .L2535
	ldr	r0, .L2535+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x8]
	ldr	r1, .L2535+0x8
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	ldr	r2, .L2535+0xc
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
.L2532:
	ldr	r1, .L2535+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2536:
	.align	2, 0
.L2535:
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gBattleCommunication
	.word	gMoveResultFlags
	.word	gBattlescriptCurrInstr
.Lfe145:
	.size	 atk77_setprotectlike,.Lfe145-atk77_setprotectlike
	.align	2, 0
	.type	 atk78_faintifabilitynotdamp,function
	.thumb_func
atk78_faintifabilitynotdamp:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L2554
	ldr	r2, [r0]
	cmp	r2, #0
	bne	.L2537	@cond_branch
	ldr	r1, .L2554+0x4
	strb	r2, [r1]
	ldr	r0, .L2554+0x8
	ldrb	r3, [r0]
	add	r5, r1, #0
	mov	r8, r0
	ldr	r6, .L2554+0xc
	cmp	r2, r3
	bcs	.L2540	@cond_branch
	add	r0, r6, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x6
	beq	.L2540	@cond_branch
	add	r2, r3, #0
	add	r4, r6, #0
	mov	r3, #0x58
.L2541:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r2
	bcs	.L2540	@cond_branch
	ldrb	r0, [r5]
	mul	r0, r0, r3
	add	r0, r0, r4
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x6
	bne	.L2541	@cond_branch
.L2540:
	ldrb	r0, [r5]
	mov	r1, r8
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L2545	@cond_branch
	ldr	r4, .L2554+0x10
	ldr	r7, .L2554+0x14
	ldrb	r0, [r7]
	strb	r0, [r4]
	ldr	r2, .L2554+0x18
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r6
	ldrh	r0, [r0, #0x28]
	str	r0, [r2]
	ldr	r1, .L2554+0x1c
	mov	r0, #0x0
	bl	BtlController_EmitHealthBarUpdate
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L2554+0x20
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r5]
	mov	r2, r8
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L2537	@cond_branch
	add	r3, r5, #0
	ldrb	r5, [r7]
	ldr	r7, .L2554+0x24
	add	r4, r0, #0
	ldr	r6, .L2554+0x28
.L2549:
	ldrb	r2, [r3]
	cmp	r2, r5
	beq	.L2548	@cond_branch
	ldrb	r0, [r6]
	ldrb	r1, [r3]
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldr	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2537	@cond_branch
.L2548:
	add	r0, r2, #0x1
	strb	r0, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r4
	bcc	.L2549	@cond_branch
	b	.L2537
.L2555:
	.align	2, 0
.L2554:
	.word	gBattleControllerExecFlags
	.word	gBattlerTarget
	.word	gBattlersCount
	.word	gBattleMons
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	0x7fff
	.word	gBattlescriptCurrInstr
	.word	gBitTable
	.word	gAbsentBattlerFlags
.L2545:
	ldr	r1, .L2556
	mov	r0, #0x6
	strb	r0, [r1]
	ldrb	r0, [r5]
	mov	r1, #0x58
	mul	r1, r1, r0
	add	r1, r1, r6
	add	r1, r1, #0x20
	ldrb	r1, [r1]
	bl	RecordAbilityBattle
	ldr	r1, .L2556+0x4
	ldr	r0, .L2556+0x8
	str	r0, [r1]
.L2537:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2557:
	.align	2, 0
.L2556:
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_DampStopsExplosion
.Lfe146:
	.size	 atk78_faintifabilitynotdamp,.Lfe146-atk78_faintifabilitynotdamp
	.align	2, 0
	.type	 atk79_setatkhptozero,function
	.thumb_func
atk79_setatkhptozero:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L2560
	ldr	r3, [r0]
	cmp	r3, #0
	bne	.L2558	@cond_branch
	ldr	r4, .L2560+0x4
	ldr	r0, .L2560+0x8
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r1, .L2560+0xc
	ldrb	r0, [r4]
	mov	r2, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	strh	r3, [r0, #0x28]
	ldrb	r0, [r4]
	mul	r0, r0, r2
	add	r1, r1, #0x28
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2a
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L2560+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L2558:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L2561:
	.align	2, 0
.L2560:
	.word	gBattleControllerExecFlags
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
.Lfe147:
	.size	 atk79_setatkhptozero,.Lfe147-atk79_setatkhptozero
	.align	2, 0
	.type	 atk7A_jumpifnexttargetvalid,function
	.thumb_func
atk7A_jumpifnexttargetvalid:
	push	{r4, r5, r6, r7, lr}
	ldr	r3, .L2575
	ldr	r2, [r3]
	ldrb	r4, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r4, r4, r0
	ldr	r0, .L2575+0x4
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	add	r7, r3, #0
	cmp	r0, #0
	beq	.L2563	@cond_branch
	ldr	r0, .L2575+0x8
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	strb	r1, [r0]
	ldr	r2, .L2575+0xc
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r3, r0, #0
	ldr	r6, .L2575+0x10
	ldr	r5, .L2575+0x14
	ldr	r0, .L2575+0x18
	mov	ip, r0
	ldrb	r0, [r2]
	cmp	r1, r0
	bne	.L2574	@cond_branch
.L2566:
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r2]
	cmp	r0, r1
	beq	.L2566	@cond_branch
.L2574:
	ldrb	r0, [r6]
	ldrb	r1, [r3]
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldr	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2566	@cond_branch
	ldrb	r0, [r3]
	mov	r2, ip
	ldrb	r2, [r2]
	cmp	r0, r2
	bcc	.L2570	@cond_branch
	ldr	r0, [r7]
	add	r0, r0, #0x5
	str	r0, [r7]
	b	.L2572
.L2576:
	.align	2, 0
.L2575:
	.word	gBattlescriptCurrInstr
	.word	gBattleTypeFlags
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattlersCount
.L2570:
	str	r4, [r7]
	b	.L2572
.L2563:
	add	r0, r2, #0x5
	str	r0, [r3]
.L2572:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe148:
	.size	 atk7A_jumpifnexttargetvalid,.Lfe148-atk7A_jumpifnexttargetvalid
	.align	2, 0
	.type	 atk7B_tryhealhalfhealth,function
	.thumb_func
atk7B_tryhealhalfhealth:
	push	{r4, r5, r6, lr}
	ldr	r4, .L2582
	ldr	r1, [r4]
	ldrb	r2, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x5]
	ldr	r3, .L2582+0x4
	cmp	r0, #0x1
	bne	.L2578	@cond_branch
	ldr	r0, .L2582+0x8
	ldrb	r0, [r0]
	strb	r0, [r3]
.L2578:
	ldr	r1, .L2582+0xc
	ldr	r6, .L2582+0x10
	ldrb	r0, [r3]
	mov	r5, #0x58
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x1
	str	r0, [r1]
	cmp	r0, #0
	bne	.L2579	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L2579:
	ldr	r0, [r1]
	neg	r0, r0
	str	r0, [r1]
	ldrb	r0, [r3]
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r1, [r0, #0x28]
	ldrh	r0, [r0, #0x2c]
	cmp	r1, r0
	bne	.L2580	@cond_branch
	str	r2, [r4]
	b	.L2581
.L2583:
	.align	2, 0
.L2582:
	.word	gBattlescriptCurrInstr
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattleMons
.L2580:
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
.L2581:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe149:
	.size	 atk7B_tryhealhalfhealth,.Lfe149-atk7B_tryhealhalfhealth
	.align	2, 0
	.type	 atk7C_trymirrormove,function
	.thumb_func
atk7C_trymirrormove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r2, .L2602
	ldr	r0, .L2602+0x4
	mov	sl, r0
	mov	r1, #0x0
	add	r0, sp, #0x4
.L2588:
	strh	r1, [r0]
	sub	r0, r0, #0x2
	cmp	r0, sp
	bge	.L2588	@cond_branch
	mov	r1, #0x0
	mov	r8, r1
	mov	r5, #0x0
	ldrb	r1, [r2]
	cmp	r5, r1
	bge	.L2591	@cond_branch
	ldr	r0, .L2602+0x8
	ldrb	r6, [r0]
	ldr	r2, .L2602+0xc
	mov	r9, r2
	lsl	r4, r6, #0x3
	mov	r2, sp
	ldr	r0, .L2602+0x4
	mov	ip, r0
	add	r7, r1, #0
.L2593:
	cmp	r5, r6
	beq	.L2592	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	add	r0, r4, r0
	add	r1, r0, #0
	add	r1, r1, #0xe0
	ldrb	r3, [r1]
	add	r0, r0, #0xe1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	cmp	r3, #0
	beq	.L2592	@cond_branch
	cmp	r3, r9
	beq	.L2592	@cond_branch
	strh	r3, [r2]
	add	r2, r2, #0x2
	mov	r0, #0x1
	add	r8, r8, r0
.L2592:
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, r7
	blt	.L2593	@cond_branch
.L2591:
	ldr	r1, .L2602+0x8
	ldrb	r0, [r1]
	mov	r2, sl
	ldr	r1, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r1, r0, #0
	add	r1, r1, #0x98
	ldrb	r3, [r1]
	add	r0, r0, #0x99
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	cmp	r3, #0
	beq	.L2597	@cond_branch
	ldr	r0, .L2602+0xc
	cmp	r3, r0
	beq	.L2597	@cond_branch
	ldr	r2, .L2602+0x10
	ldr	r0, [r2]
	ldr	r1, .L2602+0x14
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r4, .L2602+0x18
	strh	r3, [r4]
	b	.L2601
.L2603:
	.align	2, 0
.L2602:
	.word	gBattlersCount
	.word	gBattleStruct
	.word	gBattlerAttacker
	.word	0xffff
	.word	gHitMarker
	.word	-0x401
	.word	gCurrentMove
.L2597:
	mov	r0, r8
	cmp	r0, #0
	beq	.L2599	@cond_branch
	ldr	r2, .L2604
	ldr	r0, [r2]
	ldr	r1, .L2604+0x4
	and	r0, r0, r1
	str	r0, [r2]
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, r8
	bl	__modsi3
	add	r5, r0, #0
	ldr	r4, .L2604+0x8
	lsl	r0, r5, #0x1
	add	r0, r0, sp
	ldrh	r0, [r0]
	strh	r0, [r4]
.L2601:
	ldrh	r0, [r4]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L2604+0xc
	strb	r0, [r1]
	ldr	r5, .L2604+0x10
	ldr	r3, .L2604+0x14
	ldr	r2, .L2604+0x18
	ldrh	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	str	r0, [r5]
	b	.L2598
.L2605:
	.align	2, 0
.L2604:
	.word	gHitMarker
	.word	-0x401
	.word	gCurrentMove
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	gBattleScriptsForMoveEffects
	.word	gBattleMoves
.L2599:
	ldr	r2, .L2606
	ldr	r0, .L2606+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r1, .L2606+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L2598:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2607:
	.align	2, 0
.L2606:
	.word	gSpecialStatuses
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe150:
	.size	 atk7C_trymirrormove,.Lfe150-atk7C_trymirrormove
	.align	2, 0
	.type	 atk7D_setrain,function
	.thumb_func
atk7D_setrain:
	push	{lr}
	ldr	r2, .L2611
	ldrh	r0, [r2]
	mov	r1, #0x7
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L2609	@cond_branch
	ldr	r2, .L2611+0x4
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L2611+0x8
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	b	.L2610
.L2612:
	.align	2, 0
.L2611:
	.word	gBattleWeather
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L2609:
	mov	r0, #0x1
	strh	r0, [r2]
	ldr	r0, .L2613
	strb	r1, [r0, #0x5]
	ldr	r0, .L2613+0x4
	add	r0, r0, #0x28
	mov	r1, #0x5
	strb	r1, [r0]
.L2610:
	ldr	r1, .L2613+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2614:
	.align	2, 0
.L2613:
	.word	gBattleCommunication
	.word	gWishFutureKnock
	.word	gBattlescriptCurrInstr
.Lfe151:
	.size	 atk7D_setrain,.Lfe151-atk7D_setrain
	.align	2, 0
	.type	 atk7E_setreflect,function
	.thumb_func
atk7E_setreflect:
	push	{r4, r5, r6, lr}
	ldr	r6, .L2621
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	ldr	r4, .L2621+0x4
	mov	r5, #0x1
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r1, [r1]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2616	@cond_branch
	ldr	r2, .L2621+0x8
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L2621+0xc
	mov	r0, #0x0
	b	.L2620
.L2622:
	.align	2, 0
.L2621:
	.word	gBattlerAttacker
	.word	gSideStatuses
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L2616:
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r0, [r1]
	mov	r2, #0x1
	orr	r0, r0, r2
	strh	r0, [r1]
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	ldr	r4, .L2623
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x5
	strb	r1, [r0]
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r6]
	strb	r1, [r0, #0x1]
	ldr	r0, .L2623+0x4
	ldr	r0, [r0]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L2618	@cond_branch
	mov	r0, #0x1
	bl	CountAliveMonsInBattle
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x2
	bne	.L2618	@cond_branch
	ldr	r0, .L2623+0x8
	strb	r1, [r0, #0x5]
	b	.L2617
.L2624:
	.align	2, 0
.L2623:
	.word	gSideTimers
	.word	gBattleTypeFlags
	.word	gBattleCommunication
.L2618:
	ldr	r1, .L2625
	mov	r0, #0x1
.L2620:
	strb	r0, [r1, #0x5]
.L2617:
	ldr	r1, .L2625+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2626:
	.align	2, 0
.L2625:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe152:
	.size	 atk7E_setreflect,.Lfe152-atk7E_setreflect
	.align	2, 0
	.type	 atk7F_setseeded,function
	.thumb_func
atk7F_setseeded:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r7, .L2634
	ldrb	r5, [r7]
	mov	r0, #0x29
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L2629	@cond_branch
	ldr	r0, .L2634+0x4
	mov	r9, r0
	ldr	r1, .L2634+0x8
	mov	r8, r1
	ldrb	r4, [r1]
	lsl	r0, r4, #0x2
	mov	r2, r9
	add	r6, r0, r2
	ldr	r2, [r6]
	mov	r0, #0x4
	mov	ip, r0
	add	r3, r2, #0
	and	r3, r3, r0
	cmp	r3, #0
	beq	.L2628	@cond_branch
.L2629:
	mov	r0, #0x1
	orr	r0, r0, r5
	strb	r0, [r7]
	ldr	r1, .L2634+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L2630
.L2635:
	.align	2, 0
.L2634:
	.word	gMoveResultFlags
	.word	gStatuses3
	.word	gBattlerTarget
	.word	gBattleCommunication
.L2628:
	ldr	r1, .L2636
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r0, r1
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0xc
	beq	.L2632	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xc
	bne	.L2631	@cond_branch
.L2632:
	mov	r0, #0x1
	orr	r0, r0, r5
	strb	r0, [r7]
	ldr	r1, .L2636+0x4
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	b	.L2630
.L2637:
	.align	2, 0
.L2636:
	.word	gBattleMons
	.word	gBattleCommunication
.L2631:
	ldr	r0, .L2638
	ldrb	r0, [r0]
	orr	r2, r2, r0
	str	r2, [r6]
	mov	r2, r8
	ldrb	r1, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	ldr	r0, [r1]
	mov	r2, ip
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r0, .L2638+0x4
	strb	r3, [r0, #0x5]
.L2630:
	ldr	r1, .L2638+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2639:
	.align	2, 0
.L2638:
	.word	gBattlerAttacker
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe153:
	.size	 atk7F_setseeded,.Lfe153-atk7F_setseeded
	.align	2, 0
	.type	 atk80_manipulatedamage,function
	.thumb_func
atk80_manipulatedamage:
	push	{r4, lr}
	ldr	r1, .L2651
	ldr	r0, [r1]
	ldrb	r2, [r0, #0x1]
	add	r4, r1, #0
	cmp	r2, #0x1
	beq	.L2643	@cond_branch
	cmp	r2, #0x1
	bgt	.L2649	@cond_branch
	cmp	r2, #0
	beq	.L2642	@cond_branch
	b	.L2641
.L2652:
	.align	2, 0
.L2651:
	.word	gBattlescriptCurrInstr
.L2649:
	cmp	r2, #0x2
	beq	.L2646	@cond_branch
	b	.L2641
.L2642:
	ldr	r1, .L2653
	ldr	r0, [r1]
	neg	r0, r0
	b	.L2650
.L2654:
	.align	2, 0
.L2653:
	.word	gBattleMoveDamage
.L2643:
	ldr	r3, .L2655
	ldr	r0, [r3]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	str	r0, [r3]
	cmp	r0, #0
	bne	.L2644	@cond_branch
	str	r2, [r3]
.L2644:
	ldr	r2, .L2655+0x4
	ldr	r0, .L2655+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2c]
	lsr	r1, r0, #0x1
	ldr	r0, [r3]
	cmp	r1, r0
	bge	.L2641	@cond_branch
	str	r1, [r3]
	b	.L2641
.L2656:
	.align	2, 0
.L2655:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlerTarget
.L2646:
	ldr	r1, .L2657
	ldr	r0, [r1]
	lsl	r0, r0, #0x1
.L2650:
	str	r0, [r1]
.L2641:
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2658:
	.align	2, 0
.L2657:
	.word	gBattleMoveDamage
.Lfe154:
	.size	 atk80_manipulatedamage,.Lfe154-atk80_manipulatedamage
	.align	2, 0
	.type	 atk81_trysetrest,function
	.thumb_func
atk81_trysetrest:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L2664
	mov	ip, r0
	ldr	r1, [r0]
	ldrb	r6, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r6, r6, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r6, r6, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r6, r6, r0
	ldr	r5, .L2664+0x4
	ldr	r2, .L2664+0x8
	ldr	r0, .L2664+0xc
	ldrb	r0, [r0]
	strb	r0, [r2]
	strb	r0, [r5]
	ldr	r4, .L2664+0x10
	ldr	r1, .L2664+0x14
	ldrb	r0, [r2]
	mov	r3, #0x58
	mul	r0, r0, r3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2c]
	neg	r0, r0
	str	r0, [r4]
	ldrb	r0, [r2]
	mov	r4, r0
	mul	r4, r4, r3
	add	r0, r4, r1
	ldrh	r3, [r0, #0x28]
	add	r7, r5, #0
	add	r5, r2, #0
	add	r2, r1, #0
	ldrh	r0, [r0, #0x2c]
	cmp	r3, r0
	bne	.L2660	@cond_branch
	mov	r0, ip
	str	r6, [r0]
	b	.L2661
.L2665:
	.align	2, 0
.L2664:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattleMons
.L2660:
	add	r0, r2, #0
	add	r0, r0, #0x4c
	add	r0, r4, r0
	ldr	r1, [r0]
	mov	r0, #0xf8
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L2662	@cond_branch
	ldr	r1, .L2666
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L2663
.L2667:
	.align	2, 0
.L2666:
	.word	gBattleCommunication
.L2662:
	ldr	r0, .L2668
	strb	r1, [r0, #0x5]
.L2663:
	ldrb	r0, [r5]
	mov	r3, #0x58
	mul	r0, r0, r3
	add	r2, r2, #0x4c
	add	r0, r0, r2
	mov	r1, #0x3
	str	r1, [r0]
	ldrb	r0, [r7]
	mul	r0, r0, r3
	add	r0, r0, r2
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r7]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L2668+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2661:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2669:
	.align	2, 0
.L2668:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe155:
	.size	 atk81_trysetrest,.Lfe155-atk81_trysetrest
	.align	2, 0
	.type	 atk82_jumpifnotfirstturn,function
	.thumb_func
atk82_jumpifnotfirstturn:
	push	{r4, r5, lr}
	ldr	r5, .L2673
	ldr	r4, [r5]
	ldrb	r3, [r4, #0x1]
	ldrb	r0, [r4, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r4, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldr	r2, .L2673+0x4
	ldr	r0, .L2673+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x16]
	cmp	r0, #0
	beq	.L2671	@cond_branch
	add	r0, r4, #0x5
	str	r0, [r5]
	b	.L2672
.L2674:
	.align	2, 0
.L2673:
	.word	gBattlescriptCurrInstr
	.word	gDisableStructs
	.word	gBattlerAttacker
.L2671:
	str	r3, [r5]
.L2672:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe156:
	.size	 atk82_jumpifnotfirstturn,.Lfe156-atk82_jumpifnotfirstturn
	.align	2, 0
	.type	 atk83_nop,function
	.thumb_func
atk83_nop:
	ldr	r1, .L2676
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L2677:
	.align	2, 0
.L2676:
	.word	gBattlescriptCurrInstr
.Lfe157:
	.size	 atk83_nop,.Lfe157-atk83_nop
	.align	2, 0
	.globl	UproarWakeUpCheck
	.type	 UproarWakeUpCheck,function
	.thumb_func
UproarWakeUpCheck:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r2, #0x0
	ldr	r0, .L2695
	ldrb	r1, [r0]
	mov	r8, r0
	cmp	r2, r1
	bge	.L2680	@cond_branch
	ldr	r0, .L2695+0x4
	mov	ip, r0
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r0, r0, ip
	add	r5, r0, #0
	add	r5, r5, #0x20
	add	r4, r1, #0
	mov	r3, #0x0
	ldr	r6, .L2695+0x8
	ldr	r7, .L2695+0xc
.L2682:
	mov	r0, ip
	add	r0, r0, #0x50
	add	r0, r3, r0
	ldr	r0, [r0]
	mov	r1, #0x70
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2681	@cond_branch
	ldrb	r0, [r5]
	cmp	r0, #0x2b
	beq	.L2681	@cond_branch
	mov	r3, #0x0
	strb	r2, [r6, #0x17]
	ldr	r1, .L2695+0x10
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L2693	@cond_branch
	cmp	r0, r2
	beq	.L2694	@cond_branch
	mov	r0, #0x1
	strb	r0, [r7, #0x5]
	b	.L2680
.L2696:
	.align	2, 0
.L2695:
	.word	gBattlersCount
	.word	gBattleMons
	.word	gBattleScripting
	.word	gBattleCommunication
	.word	gBattlerTarget
.L2681:
	add	r3, r3, #0x58
	add	r2, r2, #0x1
	cmp	r2, r4
	blt	.L2682	@cond_branch
.L2680:
	mov	r1, r8
	ldrb	r1, [r1]
	cmp	r2, r1
	beq	.L2690	@cond_branch
	mov	r0, #0x1
	b	.L2692
.L2694:
	ldr	r0, .L2697
	strb	r3, [r0, #0x5]
	b	.L2680
.L2698:
	.align	2, 0
.L2697:
	.word	gBattleCommunication
.L2693:
	strb	r2, [r1]
	b	.L2680
.L2690:
	mov	r0, #0x0
.L2692:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe158:
	.size	 UproarWakeUpCheck,.Lfe158-UproarWakeUpCheck
	.align	2, 0
	.type	 atk84_jumpifcantmakeasleep,function
	.thumb_func
atk84_jumpifcantmakeasleep:
	push	{r4, r5, r6, lr}
	ldr	r5, .L2705
	ldr	r1, [r5]
	ldrb	r4, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r4, r4, r0
	ldr	r6, .L2705+0x4
	ldrb	r0, [r6]
	bl	UproarWakeUpCheck
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2700	@cond_branch
	str	r4, [r5]
	b	.L2701
.L2706:
	.align	2, 0
.L2705:
	.word	gBattlescriptCurrInstr
	.word	gBattlerTarget
.L2700:
	ldr	r1, .L2707
	ldrb	r3, [r6]
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	add	r1, r0, #0
	cmp	r1, #0xf
	beq	.L2703	@cond_branch
	cmp	r1, #0x48
	bne	.L2702	@cond_branch
.L2703:
	ldr	r2, .L2707+0x4
	strb	r0, [r2]
	ldr	r1, .L2707+0x8
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	str	r4, [r5]
	ldrb	r1, [r2]
	add	r0, r3, #0
	bl	RecordAbilityBattle
	b	.L2701
.L2708:
	.align	2, 0
.L2707:
	.word	gBattleMons
	.word	gLastUsedAbility
	.word	gBattleCommunication
.L2702:
	ldr	r0, [r5]
	add	r0, r0, #0x5
	str	r0, [r5]
.L2701:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe159:
	.size	 atk84_jumpifcantmakeasleep,.Lfe159-atk84_jumpifcantmakeasleep
	.align	2, 0
	.type	 atk85_stockpile,function
	.thumb_func
atk85_stockpile:
	push	{r4, r5, lr}
	ldr	r5, .L2712
	ldr	r4, .L2712+0x4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r5
	ldrb	r0, [r1, #0x9]
	cmp	r0, #0x3
	bne	.L2710	@cond_branch
	ldr	r2, .L2712+0x8
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L2712+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L2711
.L2713:
	.align	2, 0
.L2712:
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L2710:
	add	r0, r0, #0x1
	mov	r3, #0x0
	strb	r0, [r1, #0x9]
	ldr	r2, .L2714
	mov	r0, #0xfd
	strb	r0, [r2]
	mov	r0, #0x1
	strb	r0, [r2, #0x1]
	strb	r0, [r2, #0x2]
	strb	r0, [r2, #0x3]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r0, [r0, #0x9]
	strb	r0, [r2, #0x4]
	mov	r0, #0xff
	strb	r0, [r2, #0x5]
	ldr	r0, .L2714+0x4
	strb	r3, [r0, #0x5]
.L2711:
	ldr	r1, .L2714+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2715:
	.align	2, 0
.L2714:
	.word	gBattleTextBuff1
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe160:
	.size	 atk85_stockpile,.Lfe160-atk85_stockpile
	.align	2, 0
	.type	 atk86_stockpiletobasedamage,function
	.thumb_func
atk86_stockpiletobasedamage:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	ldr	r3, .L2721
	ldr	r1, [r3]
	ldrb	r2, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldr	r7, .L2721+0x4
	ldr	r6, .L2721+0x8
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r0, [r0, #0x9]
	cmp	r0, #0
	bne	.L2717	@cond_branch
	str	r2, [r3]
	b	.L2718
.L2722:
	.align	2, 0
.L2721:
	.word	gBattlescriptCurrInstr
	.word	gDisableStructs
	.word	gBattlerAttacker
.L2717:
	ldr	r0, .L2723
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0x1
	beq	.L2719	@cond_branch
	ldr	r0, .L2723+0x4
	mov	r8, r0
	ldr	r4, .L2723+0x8
	ldr	r5, .L2723+0xc
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r3, [r1]
	ldrb	r0, [r6]
	mov	r4, #0x58
	mul	r0, r0, r4
	ldr	r2, .L2723+0x10
	add	r0, r0, r2
	ldrb	r1, [r5]
	mul	r1, r1, r4
	add	r1, r1, r2
	ldr	r2, .L2723+0x14
	ldrh	r2, [r2]
	mov	r4, #0x0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	ldrb	r4, [r6]
	str	r4, [sp, #0x8]
	ldrb	r4, [r5]
	str	r4, [sp, #0xc]
	bl	CalculateBaseDamage
	ldrb	r2, [r6]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrb	r1, [r1, #0x9]
	mov	r3, r0
	mul	r3, r3, r1
	mov	r1, r8
	str	r3, [r1]
	ldr	r2, .L2723+0x18
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r0, [r0, #0x9]
	strb	r0, [r2, #0x18]
	ldr	r1, .L2723+0x1c
	ldrb	r0, [r6]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.L2719	@cond_branch
	lsl	r0, r3, #0x4
	sub	r0, r0, r3
	mov	r1, #0xa
	bl	__divsi3
	mov	r1, r8
	str	r0, [r1]
.L2719:
	ldr	r2, .L2723+0x20
	ldr	r0, .L2723+0x24
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x9]
	ldr	r1, .L2723+0x28
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2718:
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2724:
	.align	2, 0
.L2723:
	.word	gBattleCommunication
	.word	gBattleMoveDamage
	.word	gSideStatuses
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gCurrentMove
	.word	gBattleScripting
	.word	gProtectStructs
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe161:
	.size	 atk86_stockpiletobasedamage,.Lfe161-atk86_stockpiletobasedamage
	.align	2, 0
	.type	 atk87_stockpiletohpheal,function
	.thumb_func
atk87_stockpiletohpheal:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r7, .L2731
	ldr	r1, [r7]
	ldrb	r2, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldr	r0, .L2731+0x4
	mov	r8, r0
	ldr	r6, .L2731+0x8
	ldrb	r3, [r6]
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	mov	r1, r8
	add	r4, r0, r1
	ldrb	r1, [r4, #0x9]
	cmp	r1, #0
	bne	.L2726	@cond_branch
	str	r2, [r7]
	ldr	r0, .L2731+0xc
	strb	r1, [r0, #0x5]
	b	.L2727
.L2732:
	.align	2, 0
.L2731:
	.word	gBattlescriptCurrInstr
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gBattleCommunication
.L2726:
	ldr	r1, .L2733
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2c]
	ldrh	r3, [r1, #0x28]
	cmp	r0, r3
	bne	.L2728	@cond_branch
	mov	r0, #0x0
	strb	r0, [r4, #0x9]
	str	r2, [r7]
	ldr	r1, .L2733+0x4
	ldrb	r0, [r6]
	strb	r0, [r1]
	ldr	r1, .L2733+0x8
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L2727
.L2734:
	.align	2, 0
.L2733:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattleCommunication
.L2728:
	ldr	r5, .L2735
	ldrh	r0, [r1, #0x2c]
	ldrb	r1, [r4, #0x9]
	mov	r2, #0x3
	sub	r2, r2, r1
	mov	r4, #0x1
	add	r1, r4, #0
	lsl	r1, r1, r2
	bl	__divsi3
	str	r0, [r5]
	cmp	r0, #0
	bne	.L2730	@cond_branch
	str	r4, [r5]
.L2730:
	ldr	r0, [r5]
	neg	r0, r0
	str	r0, [r5]
	ldr	r3, .L2735+0x4
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrb	r0, [r0, #0x9]
	mov	r2, #0x0
	strb	r0, [r3, #0x18]
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	strb	r2, [r0, #0x9]
	ldr	r0, [r7]
	add	r0, r0, #0x5
	str	r0, [r7]
	ldr	r1, .L2735+0x8
	ldrb	r0, [r6]
	strb	r0, [r1]
.L2727:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2736:
	.align	2, 0
.L2735:
	.word	gBattleMoveDamage
	.word	gBattleScripting
	.word	gBattlerTarget
.Lfe162:
	.size	 atk87_stockpiletohpheal,.Lfe162-atk87_stockpiletohpheal
	.align	2, 0
	.type	 atk88_negativedamage,function
	.thumb_func
atk88_negativedamage:
	push	{lr}
	ldr	r2, .L2739
	ldr	r0, .L2739+0x4
	ldr	r0, [r0]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	neg	r0, r0
	str	r0, [r2]
	cmp	r0, #0
	bne	.L2738	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [r2]
.L2738:
	ldr	r1, .L2739+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2740:
	.align	2, 0
.L2739:
	.word	gBattleMoveDamage
	.word	gHpDealt
	.word	gBattlescriptCurrInstr
.Lfe163:
	.size	 atk88_negativedamage,.Lfe163-atk88_negativedamage
	.align	2, 0
	.type	 ChangeStatBuffs,function
	.thumb_func
ChangeStatBuffs:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r8, r3
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	mov	r0, #0x0
	mov	r9, r0
	mov	sl, r0
	mov	r0, #0x40
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L2742	@cond_branch
	ldr	r0, .L2786
	ldr	r1, .L2786+0x4
	b	.L2782
.L2787:
	.align	2, 0
.L2786:
	.word	gActiveBattler
	.word	gBattlerAttacker
.L2742:
	ldr	r0, .L2788
	ldr	r1, .L2788+0x4
.L2782:
	ldrb	r1, [r1]
	strb	r1, [r0]
	mov	r0, #0xbf
	and	r5, r5, r0
	mov	r0, #0x80
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L2744	@cond_branch
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L2744:
	mov	r0, #0x7f
	and	r5, r5, r0
	mov	r0, #0x20
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L2745	@cond_branch
	mov	r0, sl
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
.L2745:
	mov	r0, #0xdf
	and	r5, r5, r0
	ldr	r1, .L2788+0x8
	mov	r4, #0x0
	mov	r2, #0xfd
	strb	r2, [r1]
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	strb	r7, [r1, #0x2]
	mov	r3, #0x1
	neg	r3, r3
	mov	ip, r3
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	lsl	r0, r6, #0x18
	cmp	r0, #0
	blt	.LCB26887
	b	.L2746	@long jump
.LCB26887:
	ldr	r4, .L2788+0xc
	ldr	r1, .L2788
	ldrb	r0, [r1]
	bl	GetBattlerPosition
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	beq	.L2747	@cond_branch
	mov	r2, r9
	cmp	r2, #0
	bne	.L2747	@cond_branch
	ldr	r0, .L2788+0x10
	ldrh	r0, [r0]
	cmp	r0, #0xae
	beq	.L2752	@cond_branch
	cmp	r5, #0x1
	bne	.L2785	@cond_branch
	ldr	r4, .L2788+0x14
	ldr	r3, .L2788
	ldrb	r0, [r3]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L2749	@cond_branch
	ldr	r0, .L2788+0x18
	mov	r4, r8
	str	r4, [r0]
	b	.L2785
.L2789:
	.align	2, 0
.L2788:
	.word	gActiveBattler
	.word	gBattlerTarget
	.word	gBattleTextBuff1
	.word	gSideTimers
	.word	gCurrentMove
	.word	gSpecialStatuses
	.word	gBattlescriptCurrInstr
.L2749:
	mov	r0, r8
	bl	BattleScriptPush
	ldr	r1, .L2790
	ldr	r6, .L2790+0x4
	ldrb	r0, [r6]
	strb	r0, [r1, #0x17]
	ldr	r1, .L2790+0x8
	ldr	r0, .L2790+0xc
	str	r0, [r1]
	ldrb	r1, [r6]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L2785
.L2791:
	.align	2, 0
.L2790:
	.word	gBattleScripting
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MistProtected
.L2747:
	ldr	r0, .L2792
	ldrh	r0, [r0]
	cmp	r0, #0xae
	beq	.L2752	@cond_branch
	mov	r0, sl
	cmp	r0, #0x1
	beq	.L2752	@cond_branch
	mov	r0, #0x0
	bl	JumpIfMoveAffectedByProtect
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2752	@cond_branch
	ldr	r1, .L2792+0x4
	ldr	r0, .L2792+0x8
	str	r0, [r1]
.L2785:
	mov	r0, #0x1
	b	.L2781
.L2793:
	.align	2, 0
.L2792:
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ButItFailed
.L2752:
	ldr	r2, .L2794
	ldr	r1, .L2794+0x4
	ldrb	r3, [r1]
	mov	r4, #0x58
	mov	r0, r3
	mul	r0, r0, r4
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	mov	sl, r2
	cmp	r0, #0x1d
	beq	.L2755	@cond_branch
	cmp	r0, #0x49
	bne	.L2754	@cond_branch
.L2755:
	mov	r0, r9
	cmp	r0, #0
	bne	.L2754	@cond_branch
	ldr	r0, .L2794+0x8
	ldrh	r0, [r0]
	cmp	r0, #0xae
	beq	.L2754	@cond_branch
	cmp	r5, #0x1
	bne	.L2785	@cond_branch
	ldr	r4, .L2794+0xc
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	beq	.L2757	@cond_branch
	ldr	r0, .L2794+0x10
	mov	r1, r8
	str	r1, [r0]
	b	.L2785
.L2795:
	.align	2, 0
.L2794:
	.word	gBattleMons
	.word	gActiveBattler
	.word	gCurrentMove
	.word	gSpecialStatuses
	.word	gBattlescriptCurrInstr
.L2757:
	mov	r0, r8
	bl	BattleScriptPush
	ldr	r1, .L2796
	ldr	r2, .L2796+0x4
	ldrb	r0, [r2]
	strb	r0, [r1, #0x17]
	ldr	r1, .L2796+0x8
	ldr	r0, .L2796+0xc
	str	r0, [r1]
	ldr	r1, .L2796+0x10
	ldrb	r0, [r2]
	mov	r3, #0x58
	mul	r0, r0, r3
	add	r0, r0, sl
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r2]
	ldrb	r1, [r1]
	bl	RecordAbilityBattle
	ldr	r6, .L2796+0x4
	ldrb	r1, [r6]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L2785
.L2797:
	.align	2, 0
.L2796:
	.word	gBattleScripting
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AbilityNoStatLoss
	.word	gLastUsedAbility
.L2754:
	ldr	r1, .L2798
	ldrb	r0, [r1]
	mov	r4, #0x58
	mul	r0, r0, r4
	add	r0, r0, sl
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x33
	bne	.L2760	@cond_branch
	mov	r2, r9
	cmp	r2, #0
	bne	.L2760	@cond_branch
	cmp	r7, #0x6
	bne	.L2760	@cond_branch
	cmp	r5, #0x1
	bne	.L2785	@cond_branch
	mov	r0, r8
	bl	BattleScriptPush
	ldr	r1, .L2798+0x4
	ldr	r3, .L2798
	ldrb	r0, [r3]
	strb	r0, [r1, #0x17]
	ldr	r1, .L2798+0x8
	ldr	r0, .L2798+0xc
	str	r0, [r1]
	ldr	r1, .L2798+0x10
	ldrb	r0, [r3]
	mul	r0, r0, r4
	add	r0, r0, sl
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r3]
	ldrb	r1, [r1]
	bl	RecordAbilityBattle
	b	.L2785
.L2799:
	.align	2, 0
.L2798:
	.word	gActiveBattler
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AbilityNoSpecificStatLoss
	.word	gLastUsedAbility
.L2760:
	ldr	r4, .L2800
	ldrb	r0, [r4]
	mov	r4, #0x58
	mul	r0, r0, r4
	add	r0, r0, sl
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x34
	bne	.L2763	@cond_branch
	mov	r0, r9
	cmp	r0, #0
	bne	.L2763	@cond_branch
	cmp	r7, #0x1
	bne	.L2763	@cond_branch
	cmp	r5, #0x1
	beq	.LCB27203
	b	.L2785	@long jump
.LCB27203:
	mov	r0, r8
	bl	BattleScriptPush
	ldr	r1, .L2800+0x4
	ldr	r2, .L2800
	ldrb	r0, [r2]
	strb	r0, [r1, #0x17]
	ldr	r1, .L2800+0x8
	ldr	r0, .L2800+0xc
	str	r0, [r1]
	ldr	r1, .L2800+0x10
	ldrb	r0, [r2]
	mul	r0, r0, r4
	add	r0, r0, sl
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r2]
	ldrb	r1, [r1]
	bl	RecordAbilityBattle
	b	.L2785
.L2801:
	.align	2, 0
.L2800:
	.word	gActiveBattler
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AbilityNoSpecificStatLoss
	.word	gLastUsedAbility
.L2763:
	ldr	r3, .L2802
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, sl
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x13
	bne	.L2766	@cond_branch
	cmp	r5, #0
	bne	.LCB27254
	b	.L2785	@long jump
.LCB27254:
.L2766:
	lsl	r0, r6, #0x18
	asr	r0, r0, #0x1c
	mov	r1, #0x7
	and	r0, r0, r1
	neg	r0, r0
	lsl	r0, r0, #0x18
	ldr	r3, .L2802+0x4
	mov	r4, #0x0
	mov	r1, #0xfd
	strb	r1, [r3]
	mov	r2, #0x1
	lsr	r6, r0, #0x18
	asr	r0, r0, #0x18
	sub	r1, r1, #0xff
	cmp	r0, r1
	bne	.L2768	@cond_branch
	strb	r4, [r3, #0x1]
	mov	r0, #0xd3
	strb	r0, [r3, #0x2]
	strb	r4, [r3, #0x3]
	mov	r2, #0x4
.L2768:
	add	r0, r2, r3
	strb	r4, [r0]
	add	r2, r2, #0x1
	add	r1, r2, r3
	mov	r0, #0xd4
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r0, r2, r3
	strb	r4, [r0]
	add	r2, r2, #0x1
	add	r1, r2, r3
	mov	r0, #0xff
	strb	r0, [r1]
	ldr	r4, .L2802
	ldrb	r2, [r4]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r7, r0
	mov	r1, sl
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	beq	.L2784	@cond_branch
	mov	r1, #0x0
	ldr	r0, .L2802+0x8
	ldrb	r0, [r0]
	ldr	r3, .L2802+0xc
	mov	r8, r3
	cmp	r0, r2
	bne	.L2771	@cond_branch
	mov	r1, #0x1
.L2771:
	mov	r4, r8
	strb	r1, [r4, #0x5]
	b	.L2772
.L2803:
	.align	2, 0
.L2802:
	.word	gActiveBattler
	.word	gBattleTextBuff2
	.word	gBattlerTarget
	.word	gBattleCommunication
.L2746:
	asr	r6, r0, #0x1c
	mov	r0, #0x7
	and	r6, r6, r0
	ldr	r3, .L2804
	strb	r2, [r3]
	mov	r2, #0x1
	cmp	r6, #0x2
	bne	.L2773	@cond_branch
	strb	r4, [r3, #0x1]
	mov	r0, #0xd1
	strb	r0, [r3, #0x2]
	strb	r4, [r3, #0x3]
	mov	r2, #0x4
.L2773:
	add	r0, r2, r3
	strb	r4, [r0]
	add	r2, r2, #0x1
	add	r1, r2, r3
	mov	r0, #0xd2
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r0, r2, r3
	strb	r4, [r0]
	add	r2, r2, #0x1
	add	r1, r2, r3
	ldrb	r0, [r1]
	mov	r2, ip
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r2, .L2804+0x4
	ldr	r4, .L2804+0x8
	ldrb	r3, [r4]
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r0, r7, r0
	add	r1, r2, #0
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	mov	sl, r2
	cmp	r0, #0xc
	bne	.L2774	@cond_branch
.L2784:
	ldr	r1, .L2804+0xc
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	mov	r8, r1
	b	.L2772
.L2805:
	.align	2, 0
.L2804:
	.word	gBattleTextBuff2
	.word	gBattleMons
	.word	gActiveBattler
	.word	gBattleCommunication
.L2774:
	mov	r1, #0x0
	ldr	r0, .L2806
	ldrb	r0, [r0]
	ldr	r2, .L2806+0x4
	mov	r8, r2
	cmp	r0, r3
	bne	.L2776	@cond_branch
	mov	r1, #0x1
.L2776:
	mov	r3, r8
	strb	r1, [r3, #0x5]
.L2772:
	ldr	r2, .L2806+0x8
	ldrb	r0, [r2]
	mov	r4, #0x58
	mov	r1, r0
	mul	r1, r1, r4
	add	r1, r7, r1
	mov	r3, sl
	add	r3, r3, #0x18
	add	r1, r1, r3
	lsl	r0, r6, #0x18
	asr	r0, r0, #0x18
	ldrb	r6, [r1]
	add	r0, r0, r6
	strb	r0, [r1]
	ldrb	r0, [r2]
	mul	r0, r0, r4
	add	r0, r7, r0
	add	r1, r0, r3
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0
	bge	.L2777	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1]
.L2777:
	ldr	r1, .L2806+0x8
	ldrb	r0, [r1]
	mul	r0, r0, r4
	add	r0, r7, r0
	add	r1, r0, r3
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0xc
	ble	.L2778	@cond_branch
	mov	r0, #0xc
	strb	r0, [r1]
.L2778:
	mov	r2, r8
	ldrb	r0, [r2, #0x5]
	cmp	r0, #0x2
	bne	.L2780	@cond_branch
	mov	r3, #0x1
	and	r3, r3, r5
	cmp	r3, #0
	beq	.L2779	@cond_branch
	ldr	r0, .L2806+0xc
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
.L2779:
	mov	r4, r8
	ldrb	r0, [r4, #0x5]
	cmp	r0, #0x2
	bne	.L2780	@cond_branch
	cmp	r3, #0
	bne	.LCB27498
	b	.L2785	@long jump
.LCB27498:
.L2780:
	mov	r0, #0x0
.L2781:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L2807:
	.align	2, 0
.L2806:
	.word	gBattlerTarget
	.word	gBattleCommunication
	.word	gActiveBattler
	.word	gMoveResultFlags
.Lfe164:
	.size	 ChangeStatBuffs,.Lfe164-ChangeStatBuffs
	.align	2, 0
	.type	 atk89_statbuffchange,function
	.thumb_func
atk89_statbuffchange:
	push	{r4, r5, lr}
	ldr	r5, .L2810
	ldr	r2, [r5]
	ldrb	r3, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldr	r0, .L2810+0x4
	ldrb	r4, [r0, #0x1a]
	mov	r0, #0xf0
	and	r0, r0, r4
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	mov	r1, #0xf
	and	r1, r1, r4
	ldrb	r2, [r2, #0x1]
	bl	ChangeStatBuffs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2809	@cond_branch
	ldr	r0, [r5]
	add	r0, r0, #0x6
	str	r0, [r5]
.L2809:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2811:
	.align	2, 0
.L2810:
	.word	gBattlescriptCurrInstr
	.word	gBattleScripting
.Lfe165:
	.size	 atk89_statbuffchange,.Lfe165-atk89_statbuffchange
	.align	2, 0
	.type	 atk8A_normalisebuffs,function
	.thumb_func
atk8A_normalisebuffs:
	push	{r4, r5, r6, r7, lr}
	mov	r2, #0x0
	ldr	r0, .L2823
	ldrb	r1, [r0]
	ldr	r0, .L2823+0x4
	mov	ip, r0
	cmp	r2, r1
	bge	.L2814	@cond_branch
	ldr	r0, .L2823+0x8
	mov	r4, #0x6
	add	r5, r1, #0
	mov	r7, #0x58
	add	r6, r0, #0
	add	r6, r6, #0x18
.L2816:
	add	r3, r2, #0x1
	mov	r1, #0x7
	mov	r0, r2
	mul	r0, r0, r7
	add	r0, r0, r6
	add	r0, r0, #0x7
.L2820:
	strb	r4, [r0]
	sub	r0, r0, #0x1
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L2820	@cond_branch
	add	r2, r3, #0
	cmp	r2, r5
	blt	.L2816	@cond_branch
.L2814:
	mov	r1, ip
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2824:
	.align	2, 0
.L2823:
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
.Lfe166:
	.size	 atk8A_normalisebuffs,.Lfe166-atk8A_normalisebuffs
	.align	2, 0
	.type	 atk8B_setbide,function
	.thumb_func
atk8B_setbide:
	push	{r4, r5, lr}
	ldr	r4, .L2826
	ldr	r3, .L2826+0x4
	ldrb	r0, [r3]
	mov	r5, #0x58
	mov	r2, r0
	mul	r2, r2, r5
	add	r4, r4, #0x50
	add	r2, r2, r4
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L2826+0x8
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldr	r1, .L2826+0xc
	ldrh	r1, [r1]
	mov	r2, #0x0
	strh	r1, [r0]
	ldr	r1, .L2826+0x10
	ldrb	r0, [r3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	str	r2, [r0]
	ldrb	r0, [r3]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r4
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r1, .L2826+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2827:
	.align	2, 0
.L2826:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gLockedMoves
	.word	gCurrentMove
	.word	gTakenDmg
	.word	gBattlescriptCurrInstr
.Lfe167:
	.size	 atk8B_setbide,.Lfe167-atk8B_setbide
	.align	2, 0
	.type	 atk8C_confuseifrepeatingattackends,function
	.thumb_func
atk8C_confuseifrepeatingattackends:
	push	{lr}
	ldr	r1, .L2830
	ldr	r0, .L2830+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0xc0
	lsl	r1, r1, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2829	@cond_branch
	ldr	r1, .L2830+0x8
	mov	r0, #0x75
	strb	r0, [r1, #0x3]
.L2829:
	ldr	r1, .L2830+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2831:
	.align	2, 0
.L2830:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe168:
	.size	 atk8C_confuseifrepeatingattackends,.Lfe168-atk8C_confuseifrepeatingattackends
	.align	2, 0
	.type	 atk8D_setmultihitcounter,function
	.thumb_func
atk8D_setmultihitcounter:
	push	{r4, r5, lr}
	ldr	r0, .L2837
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x1]
	cmp	r1, #0
	beq	.L2833	@cond_branch
	ldr	r0, .L2837+0x4
	strb	r1, [r0]
	b	.L2834
.L2838:
	.align	2, 0
.L2837:
	.word	gBattlescriptCurrInstr
	.word	gMultiHitCounter
.L2833:
	ldr	r4, .L2839
	bl	Random
	mov	r5, #0x3
	and	r0, r0, r5
	strb	r0, [r4]
	cmp	r0, #0x1
	bls	.L2835	@cond_branch
	bl	Random
	and	r0, r0, r5
.L2835:
	add	r0, r0, #0x2
	strb	r0, [r4]
.L2834:
	ldr	r1, .L2839+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2840:
	.align	2, 0
.L2839:
	.word	gMultiHitCounter
	.word	gBattlescriptCurrInstr
.Lfe169:
	.size	 atk8D_setmultihitcounter,.Lfe169-atk8D_setmultihitcounter
	.align	2, 0
	.type	 atk8E_initmultihitstring,function
	.thumb_func
atk8E_initmultihitstring:
	ldr	r1, .L2842
	mov	r2, #0x0
	mov	r0, #0xfd
	strb	r0, [r1, #0x8]
	mov	r0, #0x1
	strb	r0, [r1, #0x9]
	strb	r0, [r1, #0xa]
	strb	r0, [r1, #0xb]
	strb	r2, [r1, #0xc]
	mov	r0, #0xff
	strb	r0, [r1, #0xd]
	ldr	r1, .L2842+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L2843:
	.align	2, 0
.L2842:
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
.Lfe170:
	.size	 atk8E_initmultihitstring,.Lfe170-atk8E_initmultihitstring
	.align	2, 0
	.type	 TryDoForceSwitchOut,function
	.thumb_func
TryDoForceSwitchOut:
	push	{r4, r5, r6, r7, lr}
	ldr	r6, .L2850
	ldr	r7, .L2850+0x4
	ldrb	r0, [r7]
	mov	r5, #0x58
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r6
	add	r1, r1, #0x2a
	ldr	r4, .L2850+0x8
	ldrb	r3, [r4]
	mov	r0, r3
	mul	r0, r0, r5
	add	r0, r0, r6
	add	r0, r0, #0x2a
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bcc	.L2845	@cond_branch
	ldr	r0, .L2850+0xc
	ldr	r1, [r0]
	add	r1, r3, r1
	add	r1, r1, #0x58
	ldr	r2, .L2850+0x10
	lsl	r0, r3, #0x1
	b	.L2849
.L2851:
	.align	2, 0
.L2850:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattleStruct
	.word	gBattlerPartyIndexes
.L2845:
	bl	Random
	mov	r3, #0xff
	and	r3, r3, r0
	ldrb	r0, [r7]
	mul	r0, r0, r5
	add	r0, r0, r6
	add	r0, r0, #0x2a
	ldrb	r2, [r0]
	ldrb	r4, [r4]
	mov	r0, r4
	mul	r0, r0, r5
	add	r0, r0, r6
	add	r0, r0, #0x2a
	ldrb	r1, [r0]
	add	r2, r2, r1
	mov	r0, r3
	mul	r0, r0, r2
	asr	r0, r0, #0x8
	add	r0, r0, #0x1
	lsr	r1, r1, #0x2
	cmp	r0, r1
	bhi	.L2847	@cond_branch
	ldr	r3, .L2852
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	mov	r0, #0x0
	b	.L2848
.L2853:
	.align	2, 0
.L2852:
	.word	gBattlescriptCurrInstr
.L2847:
	ldr	r0, .L2854
	ldr	r1, [r0]
	add	r1, r4, r1
	add	r1, r1, #0x58
	ldr	r2, .L2854+0x4
	lsl	r0, r4, #0x1
.L2849:
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldr	r1, .L2854+0x8
	ldr	r0, .L2854+0xc
	str	r0, [r1]
	mov	r0, #0x1
.L2848:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L2855:
	.align	2, 0
.L2854:
	.word	gBattleStruct
	.word	gBattlerPartyIndexes
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SuccessForceOut
.Lfe171:
	.size	 TryDoForceSwitchOut,.Lfe171-TryDoForceSwitchOut
	.align	2, 0
	.type	 atk8F_forcerandomswitch,function
	.thumb_func
atk8F_forcerandomswitch:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	ldr	r5, .L2902
	ldr	r0, [r5]
	mov	r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB27980
	b	.L2857	@long jump
.LCB27980:
	ldr	r4, .L2902+0x4
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L2902+0x8
	str	r1, [sp]
	cmp	r0, #0
	bne	.L2858	@cond_branch
	ldr	r0, .L2902+0xc
	str	r0, [sp]
.L2858:
	ldr	r2, [r5]
	mov	r1, #0x81
	lsl	r1, r1, #0x1
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, r1
	beq	.L2861	@cond_branch
	ldr	r1, .L2902+0x10
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, r1
	beq	.L2861	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xf
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L2860	@cond_branch
.L2861:
	ldr	r2, .L2902+0x4
	ldrb	r1, [r2]
	mov	r0, #0x2
	and	r0, r0, r1
	add	r1, r2, #0
	cmp	r0, #0
	beq	.L2862	@cond_branch
	mov	r0, #0x3
	mov	r9, r0
	mov	r0, #0x6
	b	.L2897
.L2903:
	.align	2, 0
.L2902:
	.word	gBattleTypeFlags
	.word	gBattlerTarget
	.word	gEnemyParty
	.word	gPlayerParty
	.word	0x2000100
.L2862:
	mov	r0, #0x0
	mov	r9, r0
	mov	r0, #0x3
.L2897:
	mov	r8, r0
	mov	r0, #0x3
	mov	sl, r0
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	ldr	r2, .L2904
	ldrb	r1, [r1]
	b	.L2898
.L2905:
	.align	2, 0
.L2904:
	.word	gBattlerPartyIndexes
.L2860:
	mov	r0, #0x42
	and	r0, r0, r2
	cmp	r0, #0x42
	beq	.L2866	@cond_branch
	ldr	r1, .L2906
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, r1
	bne	.L2865	@cond_branch
.L2866:
	ldrb	r0, [r4]
	bl	GetBattlerMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetLinkTrainerFlankId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L2867	@cond_branch
	mov	r1, #0x3
	mov	r9, r1
	mov	r0, #0x6
	b	.L2899
.L2907:
	.align	2, 0
.L2906:
	.word	0x2000040
.L2867:
	mov	r1, #0x0
	mov	r9, r1
	mov	r0, #0x3
.L2899:
	mov	r8, r0
	mov	r1, #0x3
	mov	sl, r1
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	ldr	r2, .L2908
	ldr	r0, .L2908+0x4
	ldrb	r1, [r0]
	b	.L2898
.L2909:
	.align	2, 0
.L2908:
	.word	gBattlerPartyIndexes
	.word	gBattlerTarget
.L2865:
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L2870	@cond_branch
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2871	@cond_branch
	mov	r1, #0x0
	mov	r9, r1
	mov	r0, #0x6
	mov	r8, r0
	mov	sl, r0
	mov	r1, #0x2
	b	.L2900
.L2871:
	ldrb	r1, [r4]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2873	@cond_branch
	mov	r0, #0x3
	mov	r9, r0
	mov	r1, #0x6
	b	.L2901
.L2873:
	mov	r0, #0x0
	mov	r9, r0
	mov	r1, #0x3
.L2901:
	mov	r8, r1
	mov	r0, #0x3
	mov	sl, r0
	mov	r1, #0x1
.L2900:
	str	r1, [sp, #0x8]
	ldr	r2, .L2910
	ldr	r0, .L2910+0x4
	ldrb	r1, [r0]
	b	.L2898
.L2911:
	.align	2, 0
.L2910:
	.word	gBattlerPartyIndexes
	.word	gBattlerTarget
.L2870:
	mov	r0, #0x1
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L2876	@cond_branch
	mov	r0, #0x0
	mov	r9, r0
	mov	r1, #0x6
	mov	r8, r1
	mov	sl, r1
	mov	r0, #0x2
	str	r0, [sp, #0x8]
	ldr	r2, .L2912
	ldrb	r1, [r4]
.L2898:
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r7, [r0]
	mov	r0, #0x2
	eor	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r5, [r1]
	b	.L2864
.L2913:
	.align	2, 0
.L2912:
	.word	gBattlerPartyIndexes
.L2876:
	mov	r1, #0x0
	mov	r9, r1
	mov	r0, #0x6
	mov	r8, r0
	mov	sl, r0
	mov	r1, #0x1
	str	r1, [sp, #0x8]
	ldr	r1, .L2914
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r5, [r0]
	add	r7, r5, #0
.L2864:
	mov	r6, r9
	cmp	r6, r8
	bge	.L2879	@cond_branch
.L2881:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, [sp]
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L2880	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L2880	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L2880	@cond_branch
	ldr	r0, [sp, #0x4]
	add	r0, r0, #0x1
	str	r0, [sp, #0x4]
.L2880:
	add	r6, r6, #0x1
	cmp	r6, r8
	blt	.L2881	@cond_branch
.L2879:
	ldr	r1, [sp, #0x4]
	ldr	r0, [sp, #0x8]
	cmp	r1, r0
	bgt	.L2884	@cond_branch
	ldr	r3, .L2914+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2896
.L2915:
	.align	2, 0
.L2914:
	.word	gBattlerPartyIndexes
	.word	gBattlescriptCurrInstr
.L2884:
	bl	TryDoForceSwitchOut
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2886	@cond_branch
.L2887:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, sl
	bl	__modsi3
	add	r6, r0, #0
	add	r6, r6, r9
	cmp	r6, r7
	beq	.L2887	@cond_branch
	cmp	r6, r5
	beq	.L2887	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, [sp]
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	cmp	r0, #0
	beq	.L2887	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0x1
	beq	.L2887	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L2887	@cond_branch
.L2886:
	ldr	r4, .L2916
	ldrb	r0, [r4]
	ldr	r1, .L2916+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	add	r0, r0, #0x5c
	strb	r6, [r0]
	bl	IsMultiBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2892	@cond_branch
	ldrb	r0, [r4]
	bl	sub_803BDA0
.L2892:
	ldr	r0, .L2916+0x8
	ldr	r2, [r0]
	mov	r1, #0x81
	lsl	r1, r1, #0x1
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, r1
	beq	.L2894	@cond_branch
	mov	r0, #0x42
	and	r0, r0, r2
	cmp	r0, #0x42
	beq	.L2894	@cond_branch
	ldr	r1, .L2916+0xc
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, r1
	beq	.L2894	@cond_branch
	ldr	r0, .L2916+0x10
	and	r2, r2, r0
	cmp	r2, r0
	bne	.L2893	@cond_branch
.L2894:
	ldr	r5, .L2916
	ldrb	r0, [r5]
	lsl	r4, r6, #0x18
	lsr	r4, r4, #0x18
	add	r1, r4, #0
	mov	r2, #0x0
	bl	sub_81B8E80
	ldrb	r1, [r5]
	mov	r0, #0x2
	eor	r0, r0, r1
	add	r1, r4, #0
	mov	r2, #0x1
	bl	sub_81B8E80
.L2893:
	ldr	r0, .L2916+0x8
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2896	@cond_branch
	ldr	r0, .L2916
	ldrb	r0, [r0]
	lsl	r1, r6, #0x18
	lsr	r1, r1, #0x18
	bl	sub_80571DC
	b	.L2896
.L2917:
	.align	2, 0
.L2916:
	.word	gBattlerTarget
	.word	gBattleStruct
	.word	gBattleTypeFlags
	.word	0x2000100
	.word	0x2000040
.L2857:
	bl	TryDoForceSwitchOut
.L2896:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe172:
	.size	 atk8F_forcerandomswitch,.Lfe172-atk8F_forcerandomswitch
	.align	2, 0
	.type	 atk90_tryconversiontypechange,function
	.thumb_func
atk90_tryconversiontypechange:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r6, #0x0
	ldr	r2, .L2949
	ldr	r3, .L2949+0x4
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r2, #0
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r8, r2
	cmp	r0, #0
	beq	.L2920	@cond_branch
	mov	r5, #0x58
	add	r2, r1, #0
.L2922:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3
	bhi	.L2920	@cond_branch
	lsl	r1, r6, #0x1
	ldrb	r0, [r3]
	mul	r0, r0, r5
	add	r1, r1, r0
	add	r1, r1, r2
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L2922	@cond_branch
.L2920:
	mov	r3, #0x0
	cmp	r3, r6
	bcs	.L2925	@cond_branch
	ldr	r0, .L2949+0x8
	mov	sl, r0
	ldr	r5, .L2949
	mov	ip, r5
	ldr	r7, .L2949+0x4
	ldrb	r0, [r7]
	mov	r4, #0x58
	mov	r5, r0
	mul	r5, r5, r4
	mov	r0, #0xc
	add	r0, r0, ip
	mov	r9, r0
.L2927:
	lsl	r0, r3, #0x1
	add	r0, r0, r5
	add	r0, r0, r9
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldrb	r2, [r0, #0x2]
	cmp	r2, #0x9
	bne	.L2928	@cond_branch
	mov	r0, r8
	add	r1, r5, r0
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0x7
	beq	.L2930	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x7
	bne	.L2929	@cond_branch
.L2930:
	mov	r2, #0x7
	b	.L2928
.L2950:
	.align	2, 0
.L2949:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleMoves
.L2929:
	mov	r2, #0x0
.L2928:
	ldrb	r0, [r7]
	mul	r0, r0, r4
	add	r0, r0, ip
	add	r1, r0, #0
	add	r1, r1, #0x21
	ldrb	r1, [r1]
	cmp	r2, r1
	beq	.L2926	@cond_branch
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r2, r0
	bne	.L2925	@cond_branch
.L2926:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r6
	bcc	.L2927	@cond_branch
.L2925:
	cmp	r3, r6
	bne	.L2934	@cond_branch
	ldr	r3, .L2951
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L2935
.L2952:
	.align	2, 0
.L2951:
	.word	gBattlescriptCurrInstr
.L2934:
	mov	r7, #0x3
	ldr	r5, .L2953
	mov	r9, r5
.L2939:
	bl	Random
	add	r3, r0, #0
	and	r3, r3, r7
	cmp	r3, r6
	bcs	.L2939	@cond_branch
	ldr	r4, .L2953+0x4
	lsl	r1, r3, #0x1
	ldr	r3, .L2953+0x8
	ldrb	r2, [r3]
	mov	r0, #0x58
	mov	r5, r2
	mul	r5, r5, r0
	add	r1, r1, r5
	add	r0, r4, #0
	add	r0, r0, #0xc
	add	r1, r1, r0
	ldrh	r1, [r1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrb	r2, [r0, #0x2]
	mov	r8, r4
	add	r4, r3, #0
	cmp	r2, #0x9
	bne	.L2938	@cond_branch
	mov	r0, r8
	add	r2, r5, r0
	add	r0, r2, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0x7
	beq	.L2945	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x7
	bne	.L2944	@cond_branch
.L2945:
	mov	r2, #0x7
	b	.L2938
.L2954:
	.align	2, 0
.L2953:
	.word	gBattleMoves
	.word	gBattleMons
	.word	gBattlerAttacker
.L2944:
	mov	r2, #0x0
.L2938:
	ldrb	r0, [r4]
	mov	r3, #0x58
	mul	r0, r0, r3
	add	r0, r0, r8
	add	r1, r0, #0
	add	r1, r1, #0x21
	ldrb	r5, [r1]
	cmp	r2, r5
	beq	.L2939	@cond_branch
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r2, r0
	beq	.L2939	@cond_branch
	strb	r2, [r1]
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r0, r0, r8
	add	r0, r0, #0x22
	strb	r2, [r0]
	ldr	r1, .L2955
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x3
	strb	r0, [r1, #0x1]
	strb	r2, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r1, .L2955+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L2935:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2956:
	.align	2, 0
.L2955:
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
.Lfe173:
	.size	 atk90_tryconversiontypechange,.Lfe173-atk90_tryconversiontypechange
	.align	2, 0
	.type	 atk91_givepaydaymoney,function
	.thumb_func
atk91_givepaydaymoney:
	push	{r4, lr}
	ldr	r0, .L2960
	ldr	r0, [r0]
	ldr	r1, .L2960+0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2958	@cond_branch
	ldr	r1, .L2960+0x8
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L2958	@cond_branch
	add	r1, r0, #0
	ldr	r0, .L2960+0xc
	ldr	r0, [r0]
	add	r0, r0, #0x4a
	ldrb	r0, [r0]
	mov	r4, r1
	mul	r4, r4, r0
	ldr	r0, .L2960+0x10
	ldr	r0, [r0]
	mov	r1, #0x92
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	add	r1, r4, #0
	bl	AddMoney
	ldr	r1, .L2960+0x14
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	mov	r0, #0x2
	strb	r0, [r1, #0x2]
	mov	r0, #0x5
	strb	r0, [r1, #0x3]
	strb	r4, [r1, #0x4]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r4, r4, r0
	lsr	r4, r4, #0x8
	strb	r4, [r1, #0x5]
	mov	r0, #0xff
	strb	r0, [r1, #0x6]
	ldr	r4, .L2960+0x18
	ldr	r0, [r4]
	add	r0, r0, #0x1
	bl	BattleScriptPush
	ldr	r0, .L2960+0x1c
	str	r0, [r4]
	b	.L2959
.L2961:
	.align	2, 0
.L2960:
	.word	gBattleTypeFlags
	.word	0x2000002
	.word	gPaydayMoney
	.word	gBattleStruct
	.word	gSaveBlock1Ptr
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PrintPayDayMoneyString
.L2958:
	ldr	r1, .L2962
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L2959:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2963:
	.align	2, 0
.L2962:
	.word	gBattlescriptCurrInstr
.Lfe174:
	.size	 atk91_givepaydaymoney,.Lfe174-atk91_givepaydaymoney
	.align	2, 0
	.type	 atk92_setlightscreen,function
	.thumb_func
atk92_setlightscreen:
	push	{r4, r5, r6, lr}
	ldr	r5, .L2970
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	ldr	r4, .L2970+0x4
	mov	r6, #0x1
	add	r1, r6, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r1, [r1]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2965	@cond_branch
	ldr	r2, .L2970+0x8
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L2970+0xc
	mov	r0, #0x0
	b	.L2969
.L2971:
	.align	2, 0
.L2970:
	.word	gBattlerAttacker
	.word	gSideStatuses
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L2965:
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	add	r1, r6, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r0, [r1]
	mov	r2, #0x2
	orr	r0, r0, r2
	strh	r0, [r1]
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	ldr	r4, .L2972
	add	r1, r6, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x5
	strb	r1, [r0, #0x2]
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	add	r1, r6, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r5]
	strb	r1, [r0, #0x3]
	ldr	r0, .L2972+0x4
	ldr	r0, [r0]
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L2967	@cond_branch
	mov	r0, #0x1
	bl	CountAliveMonsInBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L2967	@cond_branch
	ldr	r1, .L2972+0x8
	mov	r0, #0x4
	b	.L2969
.L2973:
	.align	2, 0
.L2972:
	.word	gSideTimers
	.word	gBattleTypeFlags
	.word	gBattleCommunication
.L2967:
	ldr	r1, .L2974
	mov	r0, #0x3
.L2969:
	strb	r0, [r1, #0x5]
	ldr	r1, .L2974+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2975:
	.align	2, 0
.L2974:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe175:
	.size	 atk92_setlightscreen,.Lfe175-atk92_setlightscreen
	.align	2, 0
	.type	 atk93_tryKO,function
	.thumb_func
atk93_tryKO:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r7, .L3001
	ldr	r6, .L3001+0x4
	ldrb	r2, [r6]
	mov	r5, #0x58
	mov	r0, r2
	mul	r0, r0, r5
	add	r1, r0, r7
	ldrh	r0, [r1, #0x2e]
	cmp	r0, #0xaf
	bne	.L2977	@cond_branch
	ldr	r1, .L3001+0x8
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r4, [r0, #0x7]
	ldrb	r6, [r0, #0x1a]
	b	.L2978
.L3002:
	.align	2, 0
.L3001:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gEnigmaBerries
.L2977:
	ldrh	r0, [r1, #0x2e]
	bl	ItemId_GetHoldEffect
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r7
	ldrh	r0, [r0, #0x2e]
	bl	ItemId_GetHoldEffectParam
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L2978:
	ldr	r1, .L3003
	ldr	r5, .L3003+0x4
	ldrb	r0, [r5]
	strb	r0, [r1]
	cmp	r4, #0x27
	bne	.L2979	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r6
	bcs	.L2979	@cond_branch
	ldrb	r0, [r5]
	mov	r1, #0x27
	bl	RecordItemEffectBattle
	ldr	r2, .L3003+0x8
	ldrb	r1, [r5]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
.L2979:
	ldr	r1, .L3003+0xc
	ldr	r2, .L3003+0x4
	ldrb	r3, [r2]
	mov	r6, #0x58
	mov	r0, r3
	mul	r0, r0, r6
	add	r5, r0, r1
	add	r0, r5, #0
	add	r0, r0, #0x20
	ldrb	r4, [r0]
	mov	r8, r1
	mov	r9, r2
	cmp	r4, #0x5
	bne	.L2980	@cond_branch
	ldr	r2, .L3003+0x10
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L3003+0x14
	strb	r4, [r0]
	ldr	r1, .L3003+0x18
	ldr	r0, .L3003+0x1c
	str	r0, [r1]
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r1, #0x5
	bl	RecordAbilityBattle
	b	.L2981
.L3004:
	.align	2, 0
.L3003:
	.word	gPotentialItemEffectBattler
	.word	gBattlerTarget
	.word	gSpecialStatuses
	.word	gBattleMons
	.word	gMoveResultFlags
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SturdyPreventsOHKO
.L2980:
	ldr	r1, .L3005
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x18
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2982	@cond_branch
	ldr	r1, .L3005+0x4
	ldr	r0, .L3005+0x8
	ldrh	r0, [r0]
	lsl	r2, r0, #0x1
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r1
	ldr	r7, .L3005+0xc
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r8
	add	r0, r0, #0x2a
	ldrb	r0, [r0]
	add	r1, r5, #0
	add	r1, r1, #0x2a
	ldrb	r1, [r1]
	sub	r0, r0, r1
	ldrb	r2, [r2, #0x3]
	add	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r0, r0, #0x1
	cmp	r0, r4
	blt	.LCB29167
	b	.L2990	@long jump
.LCB29167:
	ldrb	r0, [r7]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r8
	add	r1, r1, #0x2a
	mov	r2, r9
	ldrb	r0, [r2]
	mul	r0, r0, r6
	add	r0, r0, r8
	add	r0, r0, #0x2a
	ldrb	r1, [r1]
	mov	r4, #0x1
	ldrb	r0, [r0]
	cmp	r1, r0
	bcs	.L2985	@cond_branch
	b	.L2990
.L3006:
	.align	2, 0
.L3005:
	.word	gStatuses3
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattlerAttacker
.L2982:
	ldr	r1, .L3007
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L3007+0x4
	ldrb	r0, [r0, #0x15]
	add	r7, r1, #0
	ldrb	r3, [r7]
	cmp	r0, r3
	bne	.L2986	@cond_branch
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r8
	add	r0, r0, #0x2a
	add	r1, r5, #0
	add	r1, r1, #0x2a
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L2998	@cond_branch
.L2986:
	ldr	r1, .L3007+0x8
	ldr	r0, .L3007+0xc
	ldrh	r0, [r0]
	lsl	r2, r0, #0x1
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r1
	ldr	r6, .L3007+0x10
	ldrb	r0, [r7]
	mov	r5, #0x58
	mul	r0, r0, r5
	add	r0, r0, r6
	add	r0, r0, #0x2a
	ldrb	r1, [r0]
	ldr	r0, .L3007+0x14
	mov	r8, r0
	ldrb	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r6
	add	r0, r0, #0x2a
	ldrb	r0, [r0]
	sub	r1, r1, r0
	ldrb	r2, [r2, #0x3]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r0, r0, #0x1
	cmp	r0, r4
	bge	.L2988	@cond_branch
	ldrb	r0, [r7]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r6
	add	r1, r1, #0x2a
	mov	r2, r8
	ldrb	r0, [r2]
	mul	r0, r0, r5
	add	r0, r0, r6
	add	r0, r0, #0x2a
	ldrb	r1, [r1]
	mov	r4, #0x1
	ldrb	r0, [r0]
	cmp	r1, r0
	bcs	.L2985	@cond_branch
.L2988:
	mov	r4, #0x0
.L2985:
	ldr	r3, .L3007+0x10
	mov	r8, r3
	ldr	r0, .L3007+0x14
	mov	r9, r0
	cmp	r4, #0
	beq	.L2990	@cond_branch
.L2998:
	ldr	r0, .L3007+0x18
	mov	r1, r9
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bge	.L2991	@cond_branch
	ldr	r1, .L3007+0x1c
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r8
	ldrh	r0, [r0, #0x28]
	sub	r0, r0, #0x1
	str	r0, [r1]
	ldr	r2, .L3007+0x20
	ldrb	r0, [r2]
	mov	r1, #0x40
	b	.L2999
.L3008:
	.align	2, 0
.L3007:
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gProtectStructs
	.word	gBattleMoveDamage
	.word	gMoveResultFlags
.L2991:
	ldr	r0, .L3009
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsr	r0, r0, #0x7
	cmp	r0, #0
	beq	.L2993	@cond_branch
	ldr	r1, .L3009+0x4
	mov	r3, #0x58
	mov	r0, r2
	mul	r0, r0, r3
	add	r0, r0, r8
	ldrh	r0, [r0, #0x28]
	sub	r0, r0, #0x1
	str	r0, [r1]
	ldr	r2, .L3009+0x8
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L3009+0xc
	mov	r2, r9
	ldrb	r0, [r2]
	mul	r0, r0, r3
	add	r0, r0, r8
	ldrh	r0, [r0, #0x2e]
	strh	r0, [r1]
	b	.L2992
.L3010:
	.align	2, 0
.L3009:
	.word	gSpecialStatuses
	.word	gBattleMoveDamage
	.word	gMoveResultFlags
	.word	gLastUsedItem
.L2993:
	ldr	r1, .L3011
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r8
	ldrh	r0, [r0, #0x28]
	str	r0, [r1]
	ldr	r2, .L3011+0x4
	ldrb	r0, [r2]
	mov	r1, #0x10
.L2999:
	orr	r0, r0, r1
	strb	r0, [r2]
.L2992:
	ldr	r1, .L3011+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L2981
.L3012:
	.align	2, 0
.L3011:
	.word	gBattleMoveDamage
	.word	gMoveResultFlags
	.word	gBattlescriptCurrInstr
.L2990:
	ldr	r2, .L3013
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r3, .L3013+0x4
	ldr	r0, .L3013+0x8
	ldrb	r0, [r0]
	mov	r2, #0x58
	mov	r1, r0
	mul	r1, r1, r2
	add	r1, r1, r3
	add	r1, r1, #0x2a
	ldr	r0, .L3013+0xc
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x2a
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bcc	.L2996	@cond_branch
	ldr	r1, .L3013+0x10
	mov	r0, #0x0
	b	.L3000
.L3014:
	.align	2, 0
.L3013:
	.word	gMoveResultFlags
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattleCommunication
.L2996:
	ldr	r1, .L3015
	mov	r0, #0x1
.L3000:
	strb	r0, [r1, #0x5]
	ldr	r3, .L3015+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L2981:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3016:
	.align	2, 0
.L3015:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe176:
	.size	 atk93_tryKO,.Lfe176-atk93_tryKO
	.align	2, 0
	.type	 atk94_damagetohalftargethp,function
	.thumb_func
atk94_damagetohalftargethp:
	push	{lr}
	ldr	r3, .L3019
	ldr	r2, .L3019+0x4
	ldr	r0, .L3019+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x28]
	lsr	r0, r0, #0x1
	str	r0, [r3]
	cmp	r0, #0
	bne	.L3018	@cond_branch
	mov	r0, #0x1
	str	r0, [r3]
.L3018:
	ldr	r1, .L3019+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L3020:
	.align	2, 0
.L3019:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.Lfe177:
	.size	 atk94_damagetohalftargethp,.Lfe177-atk94_damagetohalftargethp
	.align	2, 0
	.type	 atk95_setsandstorm,function
	.thumb_func
atk95_setsandstorm:
	push	{lr}
	ldr	r2, .L3024
	ldrh	r1, [r2]
	mov	r0, #0x18
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3022	@cond_branch
	ldr	r2, .L3024+0x4
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L3024+0x8
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	b	.L3023
.L3025:
	.align	2, 0
.L3024:
	.word	gBattleWeather
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L3022:
	mov	r0, #0x8
	strh	r0, [r2]
	ldr	r1, .L3026
	mov	r0, #0x3
	strb	r0, [r1, #0x5]
	ldr	r0, .L3026+0x4
	add	r0, r0, #0x28
	mov	r1, #0x5
	strb	r1, [r0]
.L3023:
	ldr	r1, .L3026+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L3027:
	.align	2, 0
.L3026:
	.word	gBattleCommunication
	.word	gWishFutureKnock
	.word	gBattlescriptCurrInstr
.Lfe178:
	.size	 atk95_setsandstorm,.Lfe178-atk95_setsandstorm
	.align	2, 0
	.type	 atk96_weatherdamage,function
	.thumb_func
atk96_weatherdamage:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB29610
	b	.L3029	@long jump
.LCB29610:
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB29621
	b	.L3029	@long jump
.LCB29621:
	ldr	r2, .L3041
	ldrh	r1, [r2]
	mov	r0, #0x18
	and	r0, r0, r1
	add	r4, r2, #0
	ldr	r5, .L3041+0x4
	cmp	r0, #0
	beq	.L3030	@cond_branch
	ldr	r0, .L3041+0x8
	ldrb	r2, [r5]
	mov	r1, #0x58
	mul	r1, r1, r2
	add	r3, r1, r0
	add	r0, r3, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0x5
	beq	.L3031	@cond_branch
	cmp	r0, #0x8
	beq	.L3031	@cond_branch
	cmp	r0, #0x4
	beq	.L3031	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x5
	beq	.L3031	@cond_branch
	cmp	r0, #0x8
	beq	.L3031	@cond_branch
	cmp	r0, #0x4
	beq	.L3031	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x8
	beq	.L3031	@cond_branch
	ldr	r0, .L3041+0xc
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldr	r1, [r1]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3031	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xb
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L3031	@cond_branch
	ldr	r1, .L3041+0x10
	ldrh	r0, [r3, #0x2c]
	lsr	r0, r0, #0x4
	str	r0, [r1]
	cmp	r0, #0
	bne	.L3030	@cond_branch
	mov	r0, #0x1
	b	.L3040
.L3042:
	.align	2, 0
.L3041:
	.word	gBattleWeather
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gStatuses3
	.word	gBattleMoveDamage
.L3031:
	ldr	r1, .L3043
	mov	r0, #0x0
.L3040:
	str	r0, [r1]
.L3030:
	ldrh	r1, [r4]
	mov	r4, #0x80
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3038	@cond_branch
	ldr	r1, .L3043+0x4
	ldrb	r3, [r5]
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r2, r0, r1
	add	r0, r2, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0xf
	beq	.L3035	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xf
	beq	.L3035	@cond_branch
	ldr	r0, .L3043+0x8
	lsl	r1, r3, #0x2
	add	r1, r1, r0
	ldr	r1, [r1]
	add	r0, r1, #0
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L3035	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0xb
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L3035	@cond_branch
	ldr	r1, .L3043
	ldrh	r0, [r2, #0x2c]
	lsr	r0, r0, #0x4
	str	r0, [r1]
	cmp	r0, #0
	bne	.L3038	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
	b	.L3038
.L3044:
	.align	2, 0
.L3043:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gStatuses3
.L3035:
	ldr	r1, .L3045
	mov	r0, #0x0
	str	r0, [r1]
	b	.L3038
.L3046:
	.align	2, 0
.L3045:
	.word	gBattleMoveDamage
.L3029:
	ldr	r1, .L3047
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r5, .L3047+0x4
.L3038:
	ldr	r0, .L3047+0x8
	ldrb	r1, [r0]
	ldr	r2, .L3047+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L3039	@cond_branch
	ldr	r1, .L3047
	mov	r0, #0x0
	str	r0, [r1]
.L3039:
	ldr	r1, .L3047+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L3048:
	.align	2, 0
.L3047:
	.word	gBattleMoveDamage
	.word	gBattlerAttacker
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattlescriptCurrInstr
.Lfe179:
	.size	 atk96_weatherdamage,.Lfe179-atk96_weatherdamage
	.align	2, 0
	.type	 atk97_tryinfatuating,function
	.thumb_func
atk97_tryinfatuating:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r4, .L3061
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3050	@cond_branch
	ldr	r1, .L3061+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L3061+0x8
	b	.L3059
.L3062:
	.align	2, 0
.L3061:
	.word	gBattlerAttacker
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L3050:
	ldr	r1, .L3063
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L3063+0x4
.L3059:
	add	r5, r1, r0
	ldr	r4, .L3063+0x8
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3052	@cond_branch
	ldr	r1, .L3063
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L3063+0xc
	b	.L3060
.L3064:
	.align	2, 0
.L3063:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattlerTarget
	.word	gPlayerParty
.L3052:
	ldr	r1, .L3065
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L3065+0x4
.L3060:
	add	r4, r1, r0
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
	add	r0, r5, #0
	mov	r1, #0x0
	bl	GetMonData
	mov	r9, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	add	r7, r0, #0
	ldr	r5, .L3065+0x8
	ldrb	r0, [r5]
	mov	r6, #0x58
	mul	r0, r0, r6
	ldr	r1, .L3065+0xc
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r2, [r0]
	cmp	r2, #0xc
	bne	.L3054	@cond_branch
	ldr	r1, .L3065+0x10
	ldr	r0, .L3065+0x14
	str	r0, [r1]
	ldr	r0, .L3065+0x18
	strb	r2, [r0]
	ldrb	r0, [r5]
	mov	r1, #0xc
	bl	RecordAbilityBattle
	b	.L3055
.L3066:
	.align	2, 0
.L3065:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ObliviousPreventsAttraction
	.word	gLastUsedAbility
.L3054:
	mov	r0, sl
	mov	r1, r9
	bl	GetGenderFromSpeciesAndPersonality
	add	r4, r0, #0
	mov	r0, r8
	add	r1, r7, #0
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	beq	.L3057	@cond_branch
	ldrb	r0, [r5]
	mul	r0, r0, r6
	ldr	r4, .L3067
	add	r4, r4, #0x50
	add	r0, r0, r4
	ldr	r0, [r0]
	mov	r1, #0xf0
	lsl	r1, r1, #0xc
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3057	@cond_branch
	mov	r0, sl
	mov	r1, r9
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L3057	@cond_branch
	mov	r0, r8
	add	r1, r7, #0
	bl	GetGenderFromSpeciesAndPersonality
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L3056	@cond_branch
.L3057:
	ldr	r3, .L3067+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3055
.L3068:
	.align	2, 0
.L3067:
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
.L3056:
	ldrb	r0, [r5]
	mov	r2, r0
	mul	r2, r2, r6
	add	r2, r2, r4
	ldr	r1, .L3069
	ldr	r0, .L3069+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r1, r1, #0x10
	ldr	r0, [r2]
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L3069+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3055:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3070:
	.align	2, 0
.L3069:
	.word	gBitTable
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe180:
	.size	 atk97_tryinfatuating,.Lfe180-atk97_tryinfatuating
	.align	2, 0
	.type	 atk98_updatestatusicon,function
	.thumb_func
atk98_updatestatusicon:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L3078
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L3071	@cond_branch
	ldr	r5, .L3078+0x4
	ldr	r1, [r5]
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0x4
	beq	.L3073	@cond_branch
	bl	GetBattlerForBattleScript
	ldr	r4, .L3078+0x8
	strb	r0, [r4]
	ldr	r3, .L3078+0xc
	ldrb	r1, [r4]
	mov	r0, #0x58
	mov	r2, r1
	mul	r2, r2, r0
	add	r0, r3, #0
	add	r0, r0, #0x4c
	add	r0, r2, r0
	ldr	r1, [r0]
	add	r3, r3, #0x50
	add	r2, r2, r3
	ldr	r2, [r2]
	mov	r0, #0x0
	bl	BtlController_EmitStatusIconUpdate
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	b	.L3071
.L3079:
	.align	2, 0
.L3078:
	.word	gBattleControllerExecFlags
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleMons
.L3073:
	ldr	r4, .L3080
	ldr	r5, .L3080+0x4
	ldrb	r0, [r5]
	strb	r0, [r4]
	ldr	r6, .L3080+0x8
	ldrb	r1, [r6]
	ldr	r7, .L3080+0xc
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r7
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L3075	@cond_branch
	ldr	r3, .L3080+0x10
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r0, r3, #0
	add	r0, r0, #0x4c
	add	r0, r2, r0
	ldr	r1, [r0]
	add	r3, r3, #0x50
	add	r2, r2, r3
	ldr	r2, [r2]
	mov	r0, #0x0
	bl	BtlController_EmitStatusIconUpdate
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L3075:
	ldr	r0, .L3080+0x14
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3076	@cond_branch
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	strb	r0, [r4]
	ldrb	r1, [r6]
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r7
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L3076	@cond_branch
	ldr	r3, .L3080+0x10
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r0, r3, #0
	add	r0, r0, #0x4c
	add	r0, r2, r0
	ldr	r1, [r0]
	add	r3, r3, #0x50
	add	r2, r2, r3
	ldr	r2, [r2]
	mov	r0, #0x0
	bl	BtlController_EmitStatusIconUpdate
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L3076:
	ldr	r1, .L3080+0x18
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
.L3071:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3081:
	.align	2, 0
.L3080:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattleMons
	.word	gBattleTypeFlags
	.word	gBattlescriptCurrInstr
.Lfe181:
	.size	 atk98_updatestatusicon,.Lfe181-atk98_updatestatusicon
	.align	2, 0
	.type	 atk99_setmist,function
	.thumb_func
atk99_setmist:
	push	{r4, r5, r6, lr}
	ldr	r6, .L3085
	ldr	r4, .L3085+0x4
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	mov	r5, #0x1
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	beq	.L3083	@cond_branch
	ldr	r2, .L3085+0x8
	ldrb	r0, [r2]
	mov	r1, #0x20
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L3085+0xc
	strb	r5, [r0, #0x5]
	b	.L3084
.L3086:
	.align	2, 0
.L3085:
	.word	gSideTimers
	.word	gBattlerAttacker
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L3083:
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x5
	strb	r1, [r0, #0x4]
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r1, [r4]
	strb	r1, [r0, #0x5]
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	ldr	r2, .L3087
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r0, r3, #0
	mov	r3, #0x0
	orr	r0, r0, r2
	strh	r0, [r1]
	ldr	r0, .L3087+0x4
	strb	r3, [r0, #0x5]
.L3084:
	ldr	r1, .L3087+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L3088:
	.align	2, 0
.L3087:
	.word	gSideStatuses
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe182:
	.size	 atk99_setmist,.Lfe182-atk99_setmist
	.align	2, 0
	.type	 atk9A_setfocusenergy,function
	.thumb_func
atk9A_setfocusenergy:
	push	{lr}
	ldr	r1, .L3092
	ldr	r0, .L3092+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r3, #0x80
	lsl	r3, r3, #0xd
	add	r2, r1, #0
	and	r2, r2, r3
	cmp	r2, #0
	beq	.L3090	@cond_branch
	ldr	r2, .L3092+0x8
	ldrb	r0, [r2]
	mov	r1, #0x20
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L3092+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L3091
.L3093:
	.align	2, 0
.L3092:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L3090:
	orr	r1, r1, r3
	str	r1, [r0]
	ldr	r0, .L3094
	strb	r2, [r0, #0x5]
.L3091:
	ldr	r1, .L3094+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L3095:
	.align	2, 0
.L3094:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe183:
	.size	 atk9A_setfocusenergy,.Lfe183-atk9A_setfocusenergy
	.align	2, 0
	.type	 atk9B_transformdataexecution,function
	.thumb_func
atk9B_transformdataexecution:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r1, .L3114
	ldr	r2, .L3114+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r1, .L3114+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	ldr	r7, .L3114+0xc
	ldr	r0, .L3114+0x10
	mov	ip, r0
	ldrb	r1, [r0]
	mov	r6, #0x58
	mov	r0, r1
	mul	r0, r0, r6
	add	r5, r7, #0
	add	r5, r5, #0x50
	add	r0, r0, r5
	ldr	r0, [r0]
	mov	r4, #0x80
	lsl	r4, r4, #0xe
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L3098	@cond_branch
	ldr	r0, .L3114+0x14
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r2, [r1]
	ldr	r0, .L3114+0x18
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L3097	@cond_branch
.L3098:
	ldr	r2, .L3114+0x1c
	ldrb	r0, [r2]
	mov	r1, #0x20
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L3114+0x20
	mov	r0, #0x1
	b	.L3112
.L3115:
	.align	2, 0
.L3114:
	.word	gChosenMove
	.word	0xffff
	.word	gBattlescriptCurrInstr
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gStatuses3
	.word	0x400c0
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L3097:
	ldr	r3, .L3116
	ldrb	r0, [r3]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r5
	ldr	r0, [r1]
	orr	r0, r0, r4
	str	r0, [r1]
	ldr	r4, .L3116+0x4
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r2, [r0, #0x4]
	ldrb	r0, [r3]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r2, [r1, #0xb]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0xb]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r2, ip
	ldrb	r1, [r2]
	mul	r1, r1, r6
	add	r2, r7, #0
	add	r2, r2, #0x48
	add	r1, r1, r2
	ldr	r1, [r1]
	str	r1, [r0]
	ldrb	r0, [r3]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r2, [r1, #0x18]
	mov	r0, #0xf
	and	r0, r0, r2
	strb	r0, [r1, #0x18]
	ldr	r1, .L3116+0x8
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x6
	strb	r0, [r1, #0x1]
	mov	r2, ip
	ldrb	r0, [r2]
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r2]
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldrb	r0, [r3]
	mul	r0, r0, r6
	add	r5, r0, r7
	ldrb	r0, [r2]
	mul	r0, r0, r6
	add	r2, r0, r7
	mov	r4, #0x0
	add	r6, r3, #0
	ldr	r0, .L3116+0xc
	mov	r8, r0
.L3103:
	add	r0, r5, r4
	add	r1, r2, r4
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x23
	bls	.L3103	@cond_branch
	mov	r4, #0x0
	ldr	r7, .L3116+0x10
	ldr	r3, .L3116+0x14
	add	r5, r3, #0
	add	r5, r5, #0x18
.L3108:
	lsl	r1, r4, #0x1
	ldrb	r2, [r6]
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r1, r1, r2
	add	r1, r1, r3
	ldrh	r1, [r1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r1, [r0, #0x4]
	cmp	r1, #0x4
	bhi	.L3109	@cond_branch
	add	r0, r4, r2
	add	r0, r0, r5
	b	.L3113
.L3117:
	.align	2, 0
.L3116:
	.word	gBattlerAttacker
	.word	gDisableStructs
	.word	gBattleTextBuff1
	.word	gActiveBattler
	.word	gBattleMoves
	.word	gBattleMons+0xc
.L3109:
	add	r0, r4, r2
	add	r0, r0, r5
	mov	r1, #0x5
.L3113:
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L3108	@cond_branch
	ldrb	r0, [r6]
	mov	r1, r8
	strb	r0, [r1]
	mov	r0, #0x0
	mov	r1, #0x2
	bl	BtlController_EmitResetActionMoveSelection
	mov	r2, r8
	ldrb	r0, [r2]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L3118
	mov	r0, #0x0
.L3112:
	strb	r0, [r1, #0x5]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3119:
	.align	2, 0
.L3118:
	.word	gBattleCommunication
.Lfe184:
	.size	 atk9B_transformdataexecution,.Lfe184-atk9B_transformdataexecution
	.align	2, 0
	.type	 atk9C_setsubstitute,function
	.thumb_func
atk9C_setsubstitute:
	push	{r4, r5, r6, r7, lr}
	ldr	r7, .L3125
	ldr	r6, .L3125+0x4
	ldrb	r0, [r6]
	mov	r5, #0x58
	mul	r0, r0, r5
	add	r3, r0, r7
	ldrh	r0, [r3, #0x2c]
	lsr	r1, r0, #0x2
	add	r2, r1, #0
	cmp	r1, #0
	bne	.L3121	@cond_branch
	mov	r2, #0x1
.L3121:
	ldrh	r0, [r3, #0x28]
	cmp	r0, r2
	bhi	.L3122	@cond_branch
	ldr	r1, .L3125+0x8
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r1, .L3125+0xc
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L3123
.L3126:
	.align	2, 0
.L3125:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattleCommunication
.L3122:
	ldr	r4, .L3127
	str	r1, [r4]
	cmp	r1, #0
	bne	.L3124	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
.L3124:
	ldrb	r0, [r6]
	mov	r2, r0
	mul	r2, r2, r5
	add	r3, r7, #0
	add	r3, r3, #0x50
	add	r2, r2, r3
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	orr	r0, r0, r1
	str	r0, [r2]
	ldrb	r0, [r6]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r3
	ldr	r0, [r1]
	ldr	r2, .L3127+0x4
	and	r0, r0, r2
	str	r0, [r1]
	ldr	r2, .L3127+0x8
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, [r4]
	mov	r2, #0x0
	strb	r1, [r0, #0xa]
	ldr	r0, .L3127+0xc
	strb	r2, [r0, #0x5]
	ldr	r2, .L3127+0x10
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	orr	r0, r0, r1
	str	r0, [r2]
.L3123:
	ldr	r1, .L3127+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3128:
	.align	2, 0
.L3127:
	.word	gBattleMoveDamage
	.word	-0xe001
	.word	gDisableStructs
	.word	gBattleCommunication
	.word	gHitMarker
	.word	gBattlescriptCurrInstr
.Lfe185:
	.size	 atk9C_setsubstitute,.Lfe185-atk9C_setsubstitute
	.align	2, 0
	.type	 IsMoveUncopyableByMimic,function
	.thumb_func
IsMoveUncopyableByMimic:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	mov	r3, #0x0
	ldr	r0, .L3137
	ldrh	r1, [r0]
	ldr	r4, .L3137+0x4
	add	r5, r0, #0
	cmp	r1, r4
	beq	.L3131	@cond_branch
	cmp	r1, r2
	beq	.L3131	@cond_branch
	add	r1, r5, #0
.L3132:
	add	r1, r1, #0x2
	add	r3, r3, #0x1
	ldrh	r0, [r1]
	cmp	r0, r4
	beq	.L3131	@cond_branch
	cmp	r0, r2
	bne	.L3132	@cond_branch
.L3131:
	lsl	r0, r3, #0x1
	add	r0, r0, r5
	ldrh	r1, [r0]
	ldr	r0, .L3137+0x4
	eor	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L3138:
	.align	2, 0
.L3137:
	.word	sMovesForbiddenToCopy
	.word	0xfffe
.Lfe186:
	.size	 IsMoveUncopyableByMimic,.Lfe186-IsMoveUncopyableByMimic
	.align	2, 0
	.type	 atk9D_mimicattackcopy,function
	.thumb_func
atk9D_mimicattackcopy:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L3153
	ldr	r1, .L3153+0x4
	add	r7, r1, #0
	strh	r7, [r0]
	ldr	r5, .L3153+0x8
	ldr	r6, .L3153+0xc
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	ldrh	r0, [r0]
	bl	IsMoveUncopyableByMimic
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3141	@cond_branch
	ldr	r3, .L3153+0x10
	ldr	r2, .L3153+0x14
	ldrb	r1, [r2]
	mov	r0, #0x58
	mov	r4, r1
	mul	r4, r4, r0
	add	r0, r3, #0
	add	r0, r0, #0x50
	add	r0, r4, r0
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0xe
	and	r1, r1, r0
	mov	ip, r3
	mov	r9, r2
	cmp	r1, #0
	bne	.L3141	@cond_branch
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	ldrh	r1, [r0]
	cmp	r1, #0
	beq	.L3141	@cond_branch
	cmp	r1, r7
	bne	.L3140	@cond_branch
.L3141:
	ldr	r3, .L3153+0x18
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3142
.L3154:
	.align	2, 0
.L3153:
	.word	gChosenMove
	.word	0xffff
	.word	gLastMoves
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.L3140:
	mov	r2, #0x0
	mov	r3, ip
	add	r3, r3, #0xc
	add	r0, r4, r3
	ldrh	r0, [r0]
	ldr	r4, .L3155
	mov	sl, r4
	cmp	r0, r1
	beq	.L3144	@cond_branch
	mov	r8, r3
	add	r7, r5, #0
	add	r5, r6, #0
	mov	r4, r9
	mov	r3, #0x58
.L3145:
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bgt	.L3144	@cond_branch
	lsl	r1, r2, #0x1
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r1, r1, r0
	add	r1, r1, r8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r1, [r1]
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L3145	@cond_branch
.L3144:
	cmp	r2, #0x4
	bne	.L3149	@cond_branch
	ldr	r5, .L3155+0x4
	ldrb	r1, [r5]
	lsl	r1, r1, #0x1
	mov	r2, r9
	ldrb	r0, [r2]
	mov	r6, #0x58
	mul	r0, r0, r6
	add	r1, r1, r0
	mov	r0, ip
	add	r0, r0, #0xc
	add	r1, r1, r0
	ldr	r2, .L3155+0x8
	ldr	r3, .L3155+0xc
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r4, .L3155+0x10
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r4, [r0, #0x4]
	cmp	r4, #0x4
	bhi	.L3150	@cond_branch
	mov	r1, r9
	ldrb	r0, [r1]
	mul	r0, r0, r6
	ldrb	r1, [r5]
	add	r0, r0, r1
	mov	r1, ip
	add	r1, r1, #0x24
	add	r0, r0, r1
	strb	r4, [r0]
	b	.L3151
.L3156:
	.align	2, 0
.L3155:
	.word	gBattlescriptCurrInstr
	.word	gCurrMovePos
	.word	gLastMoves
	.word	gBattlerTarget
	.word	gBattleMoves
.L3150:
	mov	r4, r9
	ldrb	r0, [r4]
	mul	r0, r0, r6
	ldrb	r1, [r5]
	add	r0, r0, r1
	mov	r1, ip
	add	r1, r1, #0x24
	add	r0, r0, r1
	mov	r1, #0x5
	strb	r1, [r0]
.L3151:
	ldr	r1, .L3157
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L3157+0x4
	mov	r2, r9
	ldrb	r0, [r2]
	lsl	r2, r0, #0x3
	sub	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r1
	ldrb	r4, [r2, #0x18]
	lsr	r3, r4, #0x4
	ldr	r1, .L3157+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	orr	r1, r1, r3
	lsl	r1, r1, #0x4
	mov	r0, #0xf
	and	r0, r0, r4
	orr	r0, r0, r1
	strb	r0, [r2, #0x18]
	mov	r4, sl
	ldr	r0, [r4]
	add	r0, r0, #0x5
	str	r0, [r4]
	b	.L3142
.L3158:
	.align	2, 0
.L3157:
	.word	gBattleTextBuff1
	.word	gDisableStructs
	.word	gBitTable
.L3149:
	mov	r0, sl
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	mov	r2, sl
	str	r1, [r2]
.L3142:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe187:
	.size	 atk9D_mimicattackcopy,.Lfe187-atk9D_mimicattackcopy
	.align	2, 0
	.type	 atk9E_metronome,function
	.thumb_func
atk9E_metronome:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r7, .L3177
	mov	r6, #0xb1
	lsl	r6, r6, #0x1
	ldr	r5, .L3177+0x4
	ldr	r0, .L3177+0x8
	mov	r8, r0
.L3162:
	bl	Random
	ldr	r2, .L3177+0xc
	add	r1, r2, #0
	and	r0, r0, r1
	add	r0, r0, #0x1
	strh	r0, [r7]
	cmp	r0, r6
	bhi	.L3162	@cond_branch
	mov	r0, #0x3
.L3166:
	sub	r0, r0, #0x1
	cmp	r0, #0
	bge	.L3166	@cond_branch
	ldr	r4, .L3177
	ldrh	r2, [r4]
	ldr	r3, .L3177+0x10
	sub	r0, r5, #0x2
.L3169:
	add	r0, r0, #0x2
	ldrh	r1, [r0]
	cmp	r1, r2
	beq	.L3170	@cond_branch
	cmp	r1, r3
	bne	.L3169	@cond_branch
.L3170:
	ldr	r0, .L3177+0x10
	cmp	r1, r0
	bne	.L3162	@cond_branch
	ldr	r2, .L3177+0x14
	ldr	r0, [r2]
	ldr	r1, .L3177+0x18
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r3, .L3177+0x1c
	ldr	r2, .L3177+0x20
	ldrh	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	mov	r1, r8
	str	r0, [r1]
	ldrh	r0, [r4]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L3177+0x24
	strb	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3178:
	.align	2, 0
.L3177:
	.word	gCurrentMove
	.word	sMovesForbiddenToCopy
	.word	gBattlescriptCurrInstr
	.word	0x1ff
	.word	0xffff
	.word	gHitMarker
	.word	-0x401
	.word	gBattleScriptsForMoveEffects
	.word	gBattleMoves
	.word	gBattlerTarget
.Lfe188:
	.size	 atk9E_metronome,.Lfe188-atk9E_metronome
	.align	2, 0
	.type	 atk9F_dmgtolevel,function
	.thumb_func
atk9F_dmgtolevel:
	ldr	r3, .L3180
	ldr	r2, .L3180+0x4
	ldr	r0, .L3180+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x2a
	ldrb	r0, [r0]
	str	r0, [r3]
	ldr	r1, .L3180+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L3181:
	.align	2, 0
.L3180:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe189:
	.size	 atk9F_dmgtolevel,.Lfe189-atk9F_dmgtolevel
	.align	2, 0
	.type	 atkA0_psywavedamageeffect,function
	.thumb_func
atkA0_psywavedamageeffect:
	push	{r4, lr}
	mov	r4, #0xf
.L3183:
	bl	Random
	add	r3, r4, #0
	and	r3, r3, r0
	cmp	r3, #0xa
	bgt	.L3183	@cond_branch
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r3, r0, #0x1
	ldr	r4, .L3187
	ldr	r2, .L3187+0x4
	ldr	r0, .L3187+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x2a
	ldrb	r1, [r0]
	add	r0, r3, #0
	add	r0, r0, #0x32
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
	ldr	r1, .L3187+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L3188:
	.align	2, 0
.L3187:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe190:
	.size	 atkA0_psywavedamageeffect,.Lfe190-atkA0_psywavedamageeffect
	.align	2, 0
	.type	 atkA1_counterdamagecalculator,function
	.thumb_func
atkA1_counterdamagecalculator:
	push	{r4, r5, r6, lr}
	ldr	r4, .L3194
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r5, .L3194+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x4
	add	r0, r0, r5
	ldrb	r0, [r0, #0xc]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r0, r5, #0x4
	add	r0, r1, r0
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L3190	@cond_branch
	cmp	r6, r2
	beq	.L3190	@cond_branch
	ldr	r6, .L3194+0x8
	add	r0, r1, r5
	ldrb	r0, [r0, #0xc]
	mov	r4, #0x58
	mul	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L3190	@cond_branch
	ldr	r1, .L3194+0xc
	lsl	r0, r3, #0x1
	str	r0, [r1]
	ldr	r1, .L3194+0x10
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1, #0x8]
	cmp	r0, #0
	beq	.L3191	@cond_branch
	ldrb	r1, [r1, #0x9]
	mov	r0, r1
	mul	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L3191	@cond_branch
	ldr	r0, .L3194+0x14
	strb	r1, [r0]
	b	.L3192
.L3195:
	.align	2, 0
.L3194:
	.word	gBattlerAttacker
	.word	gProtectStructs
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	gSideTimers
	.word	gBattlerTarget
.L3191:
	ldr	r2, .L3196
	ldr	r1, .L3196+0x4
	ldr	r0, .L3196+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0xc]
	strb	r0, [r2]
.L3192:
	ldr	r1, .L3196+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3193
.L3197:
	.align	2, 0
.L3196:
	.word	gBattlerTarget
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.L3190:
	ldr	r2, .L3198
	ldr	r0, .L3198+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r3, .L3198+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3193:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L3199:
	.align	2, 0
.L3198:
	.word	gSpecialStatuses
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe191:
	.size	 atkA1_counterdamagecalculator,.Lfe191-atkA1_counterdamagecalculator
	.align	2, 0
	.type	 atkA2_mirrorcoatdamagecalculator,function
	.thumb_func
atkA2_mirrorcoatdamagecalculator:
	push	{r4, r5, r6, lr}
	ldr	r4, .L3205
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r5, .L3205+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x4
	add	r0, r0, r5
	ldrb	r0, [r0, #0xd]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r0, r5, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L3201	@cond_branch
	cmp	r6, r2
	beq	.L3201	@cond_branch
	ldr	r6, .L3205+0x8
	add	r0, r1, r5
	ldrb	r0, [r0, #0xd]
	mov	r4, #0x58
	mul	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L3201	@cond_branch
	ldr	r1, .L3205+0xc
	lsl	r0, r3, #0x1
	str	r0, [r1]
	ldr	r1, .L3205+0x10
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1, #0x8]
	cmp	r0, #0
	beq	.L3202	@cond_branch
	ldrb	r1, [r1, #0x9]
	mov	r0, r1
	mul	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L3202	@cond_branch
	ldr	r0, .L3205+0x14
	strb	r1, [r0]
	b	.L3203
.L3206:
	.align	2, 0
.L3205:
	.word	gBattlerAttacker
	.word	gProtectStructs
	.word	gBattleMons
	.word	gBattleMoveDamage
	.word	gSideTimers
	.word	gBattlerTarget
.L3202:
	ldr	r2, .L3207
	ldr	r1, .L3207+0x4
	ldr	r0, .L3207+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0xd]
	strb	r0, [r2]
.L3203:
	ldr	r1, .L3207+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3204
.L3208:
	.align	2, 0
.L3207:
	.word	gBattlerTarget
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.L3201:
	ldr	r2, .L3209
	ldr	r0, .L3209+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r3, .L3209+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3204:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L3210:
	.align	2, 0
.L3209:
	.word	gSpecialStatuses
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe192:
	.size	 atkA2_mirrorcoatdamagecalculator,.Lfe192-atkA2_mirrorcoatdamagecalculator
	.align	2, 0
	.type	 atkA3_disablelastusedattack,function
	.thumb_func
atkA3_disablelastusedattack:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r4, #0x0
	ldr	r2, .L3220
	ldr	r3, .L3220+0x4
	ldrb	r1, [r3]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r7, r2, #0
	add	r7, r7, #0xc
	add	r0, r0, r7
	ldr	r5, .L3220+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r5
	ldrh	r0, [r0]
	mov	r9, r2
	add	r6, r3, #0
	ldr	r2, .L3220+0xc
	mov	r8, r2
	ldrh	r1, [r1]
	cmp	r0, r1
	beq	.L3213	@cond_branch
	mov	ip, r6
	mov	r3, #0x58
.L3214:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L3213	@cond_branch
	lsl	r2, r4, #0x1
	mov	r0, ip
	ldrb	r1, [r0]
	mov	r0, r1
	mul	r0, r0, r3
	add	r2, r2, r0
	add	r2, r2, r7
	lsl	r1, r1, #0x1
	add	r1, r1, r5
	ldrh	r0, [r2]
	ldrh	r1, [r1]
	cmp	r0, r1
	bne	.L3214	@cond_branch
.L3213:
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrh	r0, [r0, #0x4]
	cmp	r0, #0
	bne	.L3218	@cond_branch
	cmp	r4, #0x4
	beq	.L3218	@cond_branch
	mov	r5, #0x58
	mov	r0, r1
	mul	r0, r0, r5
	add	r0, r4, r0
	mov	r1, r9
	add	r1, r1, #0x24
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L3218	@cond_branch
	ldr	r1, .L3220+0x10
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	lsl	r2, r4, #0x1
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r2, r0
	mov	r3, r9
	add	r3, r3, #0xc
	add	r0, r0, r3
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r2, r0
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	mul	r1, r1, r5
	add	r2, r2, r1
	add	r2, r2, r3
	ldrh	r1, [r2]
	strh	r1, [r0, #0x4]
	bl	Random
	ldrb	r2, [r6]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	mov	r2, #0x3
	and	r2, r2, r0
	add	r2, r2, #0x2
	ldrb	r3, [r1, #0xb]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0xb]
	ldrb	r0, [r6]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrb	r3, [r1, #0xb]
	lsl	r2, r3, #0x1c
	lsr	r2, r2, #0x18
	mov	r0, #0xf
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0xb]
	ldr	r1, .L3220+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3219
.L3221:
	.align	2, 0
.L3220:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gLastMoves
	.word	gDisableStructs
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
.L3218:
	ldr	r3, .L3222
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3219:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3223:
	.align	2, 0
.L3222:
	.word	gBattlescriptCurrInstr
.Lfe193:
	.size	 atkA3_disablelastusedattack,.Lfe193-atkA3_disablelastusedattack
	.align	2, 0
	.type	 atkA4_trysetencore,function
	.thumb_func
atkA4_trysetencore:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r5, #0x0
	ldr	r3, .L3235
	ldr	r4, .L3235+0x4
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r6, r3, #0
	add	r6, r6, #0xc
	add	r0, r0, r6
	ldr	r2, .L3235+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r0, [r0]
	mov	sl, r3
	mov	r8, r2
	ldr	r2, .L3235+0xc
	mov	r9, r2
	ldrh	r1, [r1]
	cmp	r0, r1
	beq	.L3226	@cond_branch
	mov	ip, r4
	add	r7, r6, #0
	mov	r6, r8
	mov	r3, #0x58
.L3227:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	bgt	.L3226	@cond_branch
	lsl	r2, r5, #0x1
	mov	r0, ip
	ldrb	r1, [r0]
	mov	r0, r1
	mul	r0, r0, r3
	add	r2, r2, r0
	add	r2, r2, r7
	lsl	r1, r1, #0x1
	add	r1, r1, r6
	ldrh	r0, [r2]
	ldrh	r1, [r1]
	cmp	r0, r1
	bne	.L3227	@cond_branch
.L3226:
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrh	r2, [r0]
	cmp	r2, #0xa5
	beq	.L3232	@cond_branch
	cmp	r2, #0xe3
	beq	.L3232	@cond_branch
	cmp	r2, #0x77
	bne	.L3231	@cond_branch
.L3232:
	mov	r5, #0x4
.L3231:
	ldrb	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r2, r9
	add	r3, r0, r2
	ldrh	r0, [r3, #0x6]
	cmp	r0, #0
	bne	.L3233	@cond_branch
	cmp	r5, #0x4
	beq	.L3233	@cond_branch
	mov	r0, #0x58
	mov	r2, r1
	mul	r2, r2, r0
	add	r0, r5, r2
	mov	r1, sl
	add	r1, r1, #0x24
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L3233	@cond_branch
	lsl	r0, r5, #0x1
	add	r0, r0, r2
	sub	r1, r1, #0x18
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r3, #0x6]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	strb	r5, [r0, #0xc]
	bl	Random
	ldrb	r2, [r4]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	mov	r2, #0x3
	and	r2, r2, r0
	add	r2, r2, #0x3
	ldrb	r3, [r1, #0xe]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0xe]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	ldrb	r3, [r1, #0xe]
	lsl	r2, r3, #0x1c
	lsr	r2, r2, #0x18
	mov	r0, #0xf
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0xe]
	ldr	r1, .L3235+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3234
.L3236:
	.align	2, 0
.L3235:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gLastMoves
	.word	gDisableStructs
	.word	gBattlescriptCurrInstr
.L3233:
	ldr	r3, .L3237
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3234:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3238:
	.align	2, 0
.L3237:
	.word	gBattlescriptCurrInstr
.Lfe194:
	.size	 atkA4_trysetencore,.Lfe194-atkA4_trysetencore
	.align	2, 0
	.type	 atkA5_painsplitdmgcalc,function
	.thumb_func
atkA5_painsplitdmgcalc:
	push	{r4, r5, r6, r7, lr}
	ldr	r6, .L3242
	ldr	r0, .L3242+0x4
	mov	ip, r0
	ldrb	r0, [r0]
	mov	r7, #0x58
	mov	r2, r0
	mul	r2, r2, r7
	add	r0, r6, #0
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3240	@cond_branch
	ldr	r5, .L3242+0x8
	ldrb	r0, [r5]
	mul	r0, r0, r7
	add	r0, r0, r6
	ldrh	r3, [r0, #0x28]
	add	r0, r2, r6
	ldrh	r1, [r0, #0x28]
	add	r3, r3, r1
	asr	r3, r3, #0x1
	ldr	r4, .L3242+0xc
	sub	r1, r1, r3
	str	r1, [r4]
	ldr	r2, .L3242+0x10
	strb	r1, [r2]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	asr	r0, r0, #0x8
	strb	r0, [r2, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	asr	r0, r0, #0x10
	strb	r0, [r2, #0x2]
	lsr	r1, r1, #0x18
	strb	r1, [r2, #0x3]
	ldrb	r0, [r5]
	mul	r0, r0, r7
	add	r0, r0, r6
	ldrh	r0, [r0, #0x28]
	sub	r0, r0, r3
	str	r0, [r4]
	ldr	r2, .L3242+0x14
	mov	r0, ip
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x4
	add	r0, r0, r2
	ldr	r1, .L3242+0x18
	str	r1, [r0]
	ldr	r1, .L3242+0x1c
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3241
.L3243:
	.align	2, 0
.L3242:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattleScripting
	.word	gSpecialStatuses
	.word	0xffff
	.word	gBattlescriptCurrInstr
.L3240:
	ldr	r3, .L3244
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3241:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3245:
	.align	2, 0
.L3244:
	.word	gBattlescriptCurrInstr
.Lfe195:
	.size	 atkA5_painsplitdmgcalc,.Lfe195-atkA5_painsplitdmgcalc
	.align	2, 0
	.type	 atkA6_settypetorandomresistance,function
	.thumb_func
atkA6_settypetorandomresistance:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r1, .L3277
	ldr	r4, .L3277+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r2, r0, r1
	ldrh	r1, [r2]
	cmp	r1, #0
	beq	.L3275	@cond_branch
	ldr	r0, .L3277+0x8
	cmp	r1, r0
	beq	.L3275	@cond_branch
	ldrh	r0, [r2]
	bl	IsTwoTurnsMove
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3250	@cond_branch
	ldr	r1, .L3277+0xc
	ldr	r2, .L3277+0x10
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3250	@cond_branch
.L3275:
	ldr	r3, .L3277+0x14
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3246
.L3278:
	.align	2, 0
.L3277:
	.word	gLastLandedMoves
	.word	gBattlerAttacker
	.word	0xffff
	.word	gBattleMons
	.word	gLastHitBy
	.word	gBattlescriptCurrInstr
.L3273:
	mov	r0, ip
	strb	r5, [r0]
	mov	r1, sl
	ldrb	r0, [r1]
	mul	r0, r0, r2
	add	r0, r0, r7
	add	r0, r0, #0x22
	strb	r5, [r0]
	ldr	r1, .L3279
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x3
	strb	r0, [r1, #0x1]
	strb	r5, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r1, .L3279+0x4
	b	.L3276
.L3280:
	.align	2, 0
.L3279:
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
.L3274:
	mov	r0, r8
	add	r0, r0, #0x1
	add	r0, r0, r3
	ldrb	r2, [r0]
	strb	r2, [r4]
	mov	r4, sl
	ldrb	r0, [r4]
	mul	r0, r0, r6
	ldr	r7, .L3281
	add	r0, r0, r7
	add	r0, r0, #0x22
	strb	r2, [r0]
	ldr	r1, .L3281+0x4
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x3
	strb	r0, [r1, #0x1]
	strb	r2, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	mov	r1, ip
.L3276:
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3246
.L3282:
	.align	2, 0
.L3281:
	.word	gBattleMons
	.word	gBattleTextBuff1
.L3250:
	mov	r4, #0x0
	mov	r8, r4
	mov	r7, #0x7f
	mov	r9, r7
.L3256:
	bl	Random
	mov	r4, r9
	and	r4, r4, r0
	cmp	r4, #0x70
	bhi	.L3256	@cond_branch
	lsl	r0, r4, #0x1
	add	r4, r0, r4
	ldr	r6, .L3283
	add	r3, r4, r6
	ldr	r1, .L3283+0x4
	ldr	r2, .L3283+0x8
	ldrb	r5, [r2]
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrb	r1, [r3]
	mov	sl, r2
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L3254	@cond_branch
	add	r0, r4, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0]
	cmp	r0, #0x5
	bhi	.L3254	@cond_branch
	ldr	r7, .L3283+0xc
	mov	r2, #0x58
	mov	r0, r5
	mul	r0, r0, r2
	add	r3, r0, r7
	mov	r0, #0x21
	add	r0, r0, r3
	mov	ip, r0
	add	r0, r4, #0x1
	add	r0, r0, r6
	ldrb	r5, [r0]
	mov	r1, ip
	ldrb	r0, [r1]
	add	r1, r5, #0
	cmp	r0, r1
	beq	.L3254	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, r1
	bne	.L3273	@cond_branch
.L3254:
	mov	r7, #0x1
	add	r8, r8, r7
	ldr	r0, .L3283+0x10
	cmp	r8, r0
	ble	.L3256	@cond_branch
	mov	r0, #0x0
	mov	r8, r0
	ldr	r1, .L3283+0x14
	mov	ip, r1
	ldr	r3, .L3283
	add	r0, r4, #0x1
	add	r0, r0, r3
	mov	r9, r0
	add	r5, r3, #0
.L3265:
	ldrb	r1, [r5]
	cmp	r1, #0xff
	bgt	.L3269	@cond_branch
	cmp	r1, #0xfe
	bge	.L3264	@cond_branch
.L3269:
	mov	r4, sl
	ldrb	r2, [r4]
	lsl	r0, r2, #0x1
	ldr	r7, .L3283+0x4
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L3264	@cond_branch
	ldrb	r0, [r5, #0x2]
	cmp	r0, #0x5
	bhi	.L3264	@cond_branch
	mov	r6, #0x58
	mov	r0, r2
	mul	r0, r0, r6
	ldr	r1, .L3283+0xc
	add	r2, r0, r1
	add	r4, r2, #0
	add	r4, r4, #0x21
	ldrb	r0, [r4]
	mov	r7, r9
	ldrb	r1, [r7]
	cmp	r0, r1
	beq	.L3264	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, r1
	beq	.LCB32428
	b	.L3274	@long jump
.LCB32428:
.L3264:
	add	r5, r5, #0x3
	mov	r0, #0x3
	add	r8, r8, r0
	ldr	r0, .L3283+0x18
	cmp	r8, r0
	bls	.L3265	@cond_branch
	mov	r1, ip
	ldr	r2, [r1]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	mov	r4, ip
	str	r1, [r4]
.L3246:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3284:
	.align	2, 0
.L3283:
	.word	gTypeEffectiveness
	.word	gLastHitByType
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	0x3e7
	.word	gBattlescriptCurrInstr
	.word	0x14f
.Lfe196:
	.size	 atkA6_settypetorandomresistance,.Lfe196-atkA6_settypetorandomresistance
	.align	2, 0
	.type	 atkA7_setalwayshitflag,function
	.thumb_func
atkA7_setalwayshitflag:
	push	{r4, lr}
	ldr	r4, .L3286
	ldr	r3, .L3286+0x4
	ldrb	r1, [r3]
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldr	r0, [r1]
	mov	r2, #0x19
	neg	r2, r2
	and	r0, r0, r2
	str	r0, [r1]
	ldrb	r1, [r3]
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldr	r0, [r1]
	mov	r2, #0x10
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r2, .L3286+0x8
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L3286+0xc
	ldrb	r1, [r1]
	strb	r1, [r0, #0x15]
	ldr	r1, .L3286+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L3287:
	.align	2, 0
.L3286:
	.word	gStatuses3
	.word	gBattlerTarget
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe197:
	.size	 atkA7_setalwayshitflag,.Lfe197-atkA7_setalwayshitflag
	.align	2, 0
	.type	 atkA8_copymovepermanently,function
	.thumb_func
atkA8_copymovepermanently:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	ldr	r0, .L3305
	ldr	r1, .L3305+0x4
	add	r5, r1, #0
	strh	r5, [r0]
	ldr	r3, .L3305+0x8
	ldr	r2, .L3305+0xc
	ldrb	r1, [r2]
	mov	r0, #0x58
	mov	r4, r1
	mul	r4, r4, r0
	add	r0, r3, #0
	add	r0, r0, #0x50
	add	r0, r4, r0
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0xe
	and	r1, r1, r0
	mov	ip, r3
	mov	sl, r2
	cmp	r1, #0
	beq	.LCB32549
	b	.L3289	@long jump
.LCB32549:
	ldr	r0, .L3305+0x10
	ldr	r2, .L3305+0x14
	ldrb	r1, [r2]
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r1, [r1]
	mov	r9, r0
	mov	r8, r2
	cmp	r1, #0xa5
	bne	.LCB32561
	b	.L3289	@long jump
.LCB32561:
	cmp	r1, #0
	bne	.LCB32563
	b	.L3289	@long jump
.LCB32563:
	cmp	r1, r5
	bne	.LCB32567
	b	.L3289	@long jump
.LCB32567:
	cmp	r1, #0xa6
	bne	.LCB32569
	b	.L3289	@long jump
.LCB32569:
	mov	r7, #0x0
	mov	r5, r9
	mov	r0, ip
	add	r0, r0, #0xc
	add	r1, r4, r0
	mov	r3, r8
.L3293:
	ldrh	r2, [r1]
	cmp	r2, #0xa6
	beq	.L3292	@cond_branch
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	ldrh	r0, [r0]
	cmp	r2, r0
	beq	.L3291	@cond_branch
.L3292:
	add	r1, r1, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L3293	@cond_branch
.L3291:
	cmp	r7, #0x4
	beq	.LCB32611
	b	.L3289	@long jump
.LCB32611:
	ldr	r4, .L3305+0x18
	ldrb	r1, [r4]
	lsl	r1, r1, #0x1
	mov	r2, sl
	ldrb	r0, [r2]
	mov	r3, #0x58
	mul	r0, r0, r3
	add	r1, r1, r0
	mov	r6, ip
	add	r6, r6, #0xc
	add	r1, r1, r6
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	strh	r0, [r1]
	mov	r1, sl
	ldrb	r0, [r1]
	mov	r2, r0
	mul	r2, r2, r3
	ldrb	r4, [r4]
	add	r2, r2, r4
	mov	r5, ip
	add	r5, r5, #0x24
	add	r2, r2, r5
	ldr	r4, .L3305+0x1c
	mov	r1, r8
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x4]
	strb	r0, [r2]
	ldr	r1, .L3305+0x20
	mov	r2, sl
	ldrb	r0, [r2]
	strb	r0, [r1]
	mov	r7, #0x0
	ldrb	r0, [r2]
	mul	r0, r0, r3
	add	r4, r0, r5
	add	r3, r0, #0
	add	r2, sp, #0x4
	add	r5, sp, #0xc
.L3302:
	add	r0, r3, r6
	ldrh	r0, [r0]
	strh	r0, [r2]
	add	r1, r5, r7
	ldrb	r0, [r4]
	strb	r0, [r1]
	add	r4, r4, #0x1
	add	r3, r3, #0x2
	add	r2, r2, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L3302	@cond_branch
	add	r2, sp, #0x4
	mov	r0, sl
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, ip
	add	r0, r0, #0x3b
	ldrb	r0, [r0]
	strb	r0, [r2, #0xc]
	str	r2, [sp]
	mov	r0, #0x0
	mov	r1, #0x3
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BtlController_EmitSetMonData
	ldr	r0, .L3305+0x20
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L3305+0x24
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	ldr	r3, .L3305+0x10
	ldr	r2, .L3305+0x14
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L3305+0x28
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3304
.L3306:
	.align	2, 0
.L3305:
	.word	gChosenMove
	.word	0xffff
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gLastPrintedMoves
	.word	gBattlerTarget
	.word	gCurrMovePos
	.word	gBattleMoves
	.word	gActiveBattler
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
.L3289:
	ldr	r3, .L3307
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3304:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3308:
	.align	2, 0
.L3307:
	.word	gBattlescriptCurrInstr
.Lfe198:
	.size	 atkA8_copymovepermanently,.Lfe198-atkA8_copymovepermanently
	.align	2, 0
	.type	 IsTwoTurnsMove,function
	.thumb_func
IsTwoTurnsMove:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r2, .L3314
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1]
	cmp	r0, #0x91
	beq	.L3311	@cond_branch
	cmp	r0, #0x27
	beq	.L3311	@cond_branch
	cmp	r0, #0x4b
	beq	.L3311	@cond_branch
	cmp	r0, #0x97
	beq	.L3311	@cond_branch
	cmp	r0, #0x9b
	beq	.L3311	@cond_branch
	cmp	r0, #0x1a
	bne	.L3310	@cond_branch
.L3311:
	mov	r0, #0x1
	b	.L3313
.L3315:
	.align	2, 0
.L3314:
	.word	gBattleMoves
.L3310:
	mov	r0, #0x0
.L3313:
	pop	{r1}
	bx	r1
.Lfe199:
	.size	 IsTwoTurnsMove,.Lfe199-IsTwoTurnsMove
	.align	2, 0
	.type	 IsInvalidForSleepTalkOrAssist,function
	.thumb_func
IsInvalidForSleepTalkOrAssist:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	beq	.L3318	@cond_branch
	cmp	r1, #0xd6
	beq	.L3318	@cond_branch
	mov	r0, #0x89
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L3318	@cond_branch
	cmp	r1, #0x77
	beq	.L3318	@cond_branch
	cmp	r1, #0x76
	bne	.L3317	@cond_branch
.L3318:
	mov	r0, #0x1
	b	.L3320
.L3317:
	mov	r0, #0x0
.L3320:
	pop	{r1}
	bx	r1
.Lfe200:
	.size	 IsInvalidForSleepTalkOrAssist,.Lfe200-IsInvalidForSleepTalkOrAssist
	.align	2, 0
	.type	 AttacksThisTurn,function
	.thumb_func
AttacksThisTurn:
	push	{lr}
	lsl	r1, r1, #0x10
	lsr	r2, r1, #0x10
	ldr	r1, .L3327
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r3, r1, #0
	cmp	r0, #0x97
	bne	.L3322	@cond_branch
	ldr	r0, .L3327+0x4
	ldrh	r1, [r0]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3323	@cond_branch
.L3322:
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0]
	cmp	r0, #0x91
	beq	.L3324	@cond_branch
	cmp	r0, #0x27
	beq	.L3324	@cond_branch
	cmp	r0, #0x4b
	beq	.L3324	@cond_branch
	cmp	r0, #0x97
	beq	.L3324	@cond_branch
	cmp	r0, #0x9b
	beq	.L3324	@cond_branch
	cmp	r0, #0x1a
	bne	.L3323	@cond_branch
.L3324:
	ldr	r0, .L3327+0x8
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x14
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3323	@cond_branch
	mov	r0, #0x1
	b	.L3326
.L3328:
	.align	2, 0
.L3327:
	.word	gBattleMoves
	.word	gBattleWeather
	.word	gHitMarker
.L3323:
	mov	r0, #0x2
.L3326:
	pop	{r1}
	bx	r1
.Lfe201:
	.size	 AttacksThisTurn,.Lfe201-AttacksThisTurn
	.align	2, 0
	.type	 atkA9_trychoosesleeptalkmove,function
	.thumb_func
atkA9_trychoosesleeptalkmove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r6, #0x0
	mov	r5, #0x0
	ldr	r0, .L3344
	mov	r9, r0
	mov	r1, #0x58
	mov	r8, r1
	ldr	r7, .L3344+0x4
	mov	r0, #0x84
	lsl	r0, r0, #0x1
	mov	sl, r0
.L3333:
	lsl	r4, r5, #0x1
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r4, r0
	add	r0, r0, r7
	ldrh	r0, [r0]
	bl	IsInvalidForSleepTalkOrAssist
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3335	@cond_branch
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r4, r0
	add	r0, r0, r7
	ldrh	r1, [r0]
	cmp	r1, sl
	beq	.L3335	@cond_branch
	cmp	r1, #0xfd
	beq	.L3335	@cond_branch
	add	r0, r1, #0
	bl	IsTwoTurnsMove
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3332	@cond_branch
.L3335:
	ldr	r1, .L3344+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	orr	r6, r6, r0
	lsl	r0, r6, #0x18
	lsr	r6, r0, #0x18
.L3332:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L3333	@cond_branch
	ldr	r0, .L3344
	ldrb	r0, [r0]
	add	r1, r6, #0
	mov	r2, #0xfd
	bl	CheckMoveLimitations
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0xf
	bne	.L3337	@cond_branch
	ldr	r1, .L3344+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3338
.L3345:
	.align	2, 0
.L3344:
	.word	gBattlerAttacker
	.word	gBattleMons+0xc
	.word	gBitTable
	.word	gBattlescriptCurrInstr
.L3337:
	mov	r7, #0x3
	ldr	r4, .L3346
.L3339:
	bl	Random
	add	r5, r7, #0
	and	r5, r5, r0
	lsl	r0, r5, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L3339	@cond_branch
	ldr	r4, .L3346+0x4
	ldr	r2, .L3346+0x8
	lsl	r1, r5, #0x1
	ldr	r0, .L3346+0xc
	ldrb	r3, [r0]
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r1, r1, r0
	add	r2, r2, #0xc
	add	r1, r1, r2
	ldrh	r0, [r1]
	strh	r0, [r4]
	ldr	r0, .L3346+0x10
	strb	r5, [r0]
	ldr	r2, .L3346+0x14
	ldr	r0, [r2]
	ldr	r1, .L3346+0x18
	and	r0, r0, r1
	str	r0, [r2]
	ldrh	r0, [r4]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L3346+0x1c
	strb	r0, [r1]
	ldr	r3, .L3346+0x20
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3338:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3347:
	.align	2, 0
.L3346:
	.word	gBitTable
	.word	gCalledMove
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gCurrMovePos
	.word	gHitMarker
	.word	-0x401
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.Lfe202:
	.size	 atkA9_trychoosesleeptalkmove,.Lfe202-atkA9_trychoosesleeptalkmove
	.align	2, 0
	.type	 atkAA_setdestinybond,function
	.thumb_func
atkAA_setdestinybond:
	ldr	r1, .L3349
	ldr	r0, .L3349+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r1, r1, #0x50
	add	r2, r2, r1
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L3349+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L3350:
	.align	2, 0
.L3349:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe203:
	.size	 atkAA_setdestinybond,.Lfe203-atkAA_setdestinybond
	.align	2, 0
	.type	 TrySetDestinyBondToHappen,function
	.thumb_func
TrySetDestinyBondToHappen:
	push	{r4, r5, lr}
	ldr	r0, .L3353
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L3353+0x4
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r1, .L3353+0x8
	ldrb	r2, [r4]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3352	@cond_branch
	cmp	r5, r3
	beq	.L3352	@cond_branch
	ldr	r2, .L3353+0xc
	ldr	r1, [r2]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3352	@cond_branch
	mov	r0, #0x40
	orr	r1, r1, r0
	str	r1, [r2]
.L3352:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L3354:
	.align	2, 0
.L3353:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gHitMarker
.Lfe204:
	.size	 TrySetDestinyBondToHappen,.Lfe204-TrySetDestinyBondToHappen
	.align	2, 0
	.type	 atkAB_trysetdestinybondtohappen,function
	.thumb_func
atkAB_trysetdestinybondtohappen:
	push	{lr}
	bl	TrySetDestinyBondToHappen
	ldr	r1, .L3356
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L3357:
	.align	2, 0
.L3356:
	.word	gBattlescriptCurrInstr
.Lfe205:
	.size	 atkAB_trysetdestinybondtohappen,.Lfe205-atkAB_trysetdestinybondtohappen
	.align	2, 0
	.type	 atkAC_remaininghptopower,function
	.thumb_func
atkAC_remaininghptopower:
	push	{lr}
	ldr	r2, .L3365
	ldr	r0, .L3365+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r1, r1, r2
	mov	r2, #0x28
	ldrsh	r0, [r1, r2]
	mov	r2, #0x2c
	ldrsh	r1, [r1, r2]
	mov	r2, #0x30
	bl	GetScaledHPFraction
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r3, #0x0
	ldr	r0, .L3365+0x8
	ldrb	r2, [r0]
	cmp	r1, r2
	ble	.L3360	@cond_branch
	add	r2, r0, #0
.L3361:
	add	r3, r3, #0x2
	cmp	r3, #0xb
	bgt	.L3360	@cond_branch
	add	r0, r3, r2
	ldrb	r0, [r0]
	cmp	r1, r0
	bgt	.L3361	@cond_branch
.L3360:
	ldr	r2, .L3365+0xc
	ldr	r1, .L3365+0x8
	add	r0, r3, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r2]
	ldr	r1, .L3365+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L3366:
	.align	2, 0
.L3365:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	sFlailHpScaleToPowerTable
	.word	gDynamicBasePower
	.word	gBattlescriptCurrInstr
.Lfe206:
	.size	 atkAC_remaininghptopower,.Lfe206-atkAC_remaininghptopower
	.align	2, 0
	.type	 atkAD_tryspiteppreduce,function
	.thumb_func
atkAD_tryspiteppreduce:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r4, .L3381
	ldr	r1, .L3381+0x4
	ldrb	r3, [r1]
	lsl	r0, r3, #0x1
	add	r0, r0, r4
	ldrh	r2, [r0]
	mov	r8, r1
	cmp	r2, #0
	bne	.LCB33332
	b	.L3368	@long jump
.LCB33332:
	ldr	r0, .L3381+0x8
	cmp	r2, r0
	bne	.LCB33337
	b	.L3368	@long jump
.LCB33337:
	mov	r7, #0x0
	ldr	r0, .L3381+0xc
	mov	r1, #0x58
	mul	r1, r1, r3
	add	r3, r0, #0
	add	r3, r3, #0xc
	add	r1, r1, r3
	ldrh	r1, [r1]
	cmp	r2, r1
	beq	.L3370	@cond_branch
	add	r6, r4, #0
	mov	r5, r8
	add	r4, r3, #0
	mov	r3, #0x58
.L3371:
	add	r7, r7, #0x1
	cmp	r7, #0x3
	bgt	.L3370	@cond_branch
	ldrb	r0, [r5]
	lsl	r2, r0, #0x1
	add	r2, r2, r6
	lsl	r1, r7, #0x1
	mul	r0, r0, r3
	add	r1, r1, r0
	add	r1, r1, r4
	ldrh	r0, [r2]
	ldrh	r1, [r1]
	cmp	r0, r1
	bne	.L3371	@cond_branch
.L3370:
	cmp	r7, #0x4
	bne	.LCB33386
	b	.L3375	@long jump
.LCB33386:
	mov	r4, r8
	ldrb	r0, [r4]
	mov	r1, #0x58
	mov	r9, r1
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r0, r7, r0
	ldr	r1, .L3381+0xc
	add	r1, r1, #0x24
	mov	sl, r1
	add	r0, r0, sl
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bhi	.LCB33403
	b	.L3375	@long jump
.LCB33403:
	bl	Random
	mov	r1, #0x3
	and	r1, r1, r0
	add	r6, r1, #0x2
	ldrb	r0, [r4]
	mov	r3, r9
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r0, r7, r0
	add	r0, r0, sl
	ldrb	r0, [r0]
	cmp	r0, r6
	bge	.L3376	@cond_branch
	add	r6, r0, #0
.L3376:
	ldr	r1, .L3381+0x10
	mov	r5, #0xfd
	strb	r5, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	ldr	r2, .L3381
	mov	r3, r8
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r4, .L3381+0x14
	add	r0, r4, #0
	add	r1, r6, #0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	ConvertIntToDecimalStringN
	strb	r5, [r4]
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	strb	r0, [r4, #0x2]
	strb	r0, [r4, #0x3]
	strb	r6, [r4, #0x4]
	sub	r0, r0, #0x2
	strb	r0, [r4, #0x5]
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, r9
	mul	r1, r1, r0
	add	r1, r7, r1
	add	r1, r1, sl
	ldrb	r0, [r1]
	sub	r0, r0, r6
	strb	r0, [r1]
	ldr	r4, .L3381+0x18
	mov	r3, r8
	ldrb	r0, [r3]
	strb	r0, [r4]
	ldr	r1, .L3381+0x1c
	ldrb	r3, [r4]
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x18]
	lsr	r1, r1, #0x4
	ldr	r2, .L3381+0x20
	lsl	r0, r7, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L3377	@cond_branch
	mov	r2, r9
	mul	r2, r2, r3
	ldr	r0, .L3381+0xc
	add	r0, r0, #0x50
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3377	@cond_branch
	add	r1, r7, #0
	add	r1, r1, #0x9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r3, sl
	add	r0, r2, r3
	add	r0, r0, r7
	str	r0, [sp]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L3377:
	ldr	r1, .L3381+0x24
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	ldr	r1, .L3381+0xc
	ldr	r0, .L3381+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r7, r0
	add	r1, r1, #0x24
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L3380	@cond_branch
	add	r0, r2, #0
	bl	CancelMultiTurnMoves
	b	.L3380
.L3382:
	.align	2, 0
.L3381:
	.word	gLastMoves
	.word	gBattlerTarget
	.word	0xffff
	.word	gBattleMons
	.word	gBattleTextBuff1
	.word	gBattleTextBuff2
	.word	gActiveBattler
	.word	gDisableStructs
	.word	gBitTable
	.word	gBattlescriptCurrInstr
.L3375:
.L3368:
	ldr	r3, .L3383
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3380:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3384:
	.align	2, 0
.L3383:
	.word	gBattlescriptCurrInstr
.Lfe207:
	.size	 atkAD_tryspiteppreduce,.Lfe207-atkAD_tryspiteppreduce
	.align	2, 0
	.type	 atkAE_healpartystatus,function
	.thumb_func
atkAE_healpartystatus:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	mov	r8, r4
	ldr	r0, .L3409
	ldrh	r0, [r0]
	cmp	r0, #0xd7
	beq	.LCB33608
	b	.L3386	@long jump
.LCB33608:
	ldr	r6, .L3409+0x4
	mov	r0, r8
	strb	r0, [r6, #0x5]
	ldr	r5, .L3409+0x8
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L3409+0xc
	mov	sl, r1
	cmp	r0, #0
	bne	.L3387	@cond_branch
	ldr	r2, .L3409+0x10
	mov	sl, r2
.L3387:
	ldr	r4, .L3409+0x14
	ldrb	r3, [r5]
	mov	r7, #0x58
	mov	r2, r3
	mul	r2, r2, r7
	add	r0, r2, r4
	add	r1, r0, #0
	add	r1, r1, #0x20
	ldrb	r0, [r1]
	cmp	r0, #0x2b
	beq	.L3389	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x4c
	add	r0, r2, r0
	mov	r1, r8
	str	r1, [r0]
	ldrb	r0, [r5]
	mov	r2, r0
	mul	r2, r2, r7
	add	r0, r4, #0
	add	r0, r0, #0x50
	add	r2, r2, r0
	ldr	r0, [r2]
	ldr	r1, .L3409+0x18
	and	r0, r0, r1
	str	r0, [r2]
	b	.L3390
.L3410:
	.align	2, 0
.L3409:
	.word	gCurrentMove
	.word	gBattleCommunication
	.word	gBattlerAttacker
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gBattleMons
	.word	-0x8000001
.L3389:
	ldrb	r1, [r1]
	add	r0, r3, #0
	bl	RecordAbilityBattle
	ldrb	r0, [r6, #0x5]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r6, #0x5]
.L3390:
	ldr	r7, .L3411
	ldr	r0, .L3411+0x4
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	mov	r2, #0x2
	mov	r9, r2
	mov	r1, r9
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r1, .L3411+0x8
	strb	r0, [r1, #0x17]
	strb	r0, [r7]
	ldr	r0, .L3411+0xc
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3391	@cond_branch
	ldr	r0, .L3411+0x10
	ldrb	r2, [r0]
	ldr	r1, .L3411+0x14
	ldrb	r3, [r7]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L3391	@cond_branch
	ldr	r5, .L3411+0x18
	mov	r6, #0x58
	mov	r4, r3
	mul	r4, r4, r6
	add	r0, r4, r5
	add	r1, r0, #0
	add	r1, r1, #0x20
	ldrb	r0, [r1]
	cmp	r0, #0x2b
	beq	.L3392	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x4c
	add	r0, r4, r0
	str	r2, [r0]
	ldrb	r0, [r7]
	mov	r2, r0
	mul	r2, r2, r6
	add	r0, r5, #0
	add	r0, r0, #0x50
	add	r2, r2, r0
	ldr	r0, [r2]
	ldr	r1, .L3411+0x1c
	and	r0, r0, r1
	str	r0, [r2]
	b	.L3391
.L3412:
	.align	2, 0
.L3411:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleScripting
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattleMons
	.word	-0x8000001
.L3392:
	ldrb	r1, [r1]
	add	r0, r3, #0
	bl	RecordAbilityBattle
	ldr	r1, .L3413
	ldrb	r0, [r1, #0x5]
	mov	r2, r9
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
.L3391:
	mov	r6, #0x0
	ldr	r7, .L3413+0x4
.L3397:
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	add	r4, r4, sl
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r5, #0
	beq	.L3396	@cond_branch
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r5, r0
	beq	.L3396	@cond_branch
	ldr	r2, .L3413+0x8
	ldr	r0, .L3413+0xc
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	cmp	r0, r6
	bne	.L3399	@cond_branch
	mov	r0, #0x58
	mul	r0, r0, r1
	b	.L3408
.L3414:
	.align	2, 0
.L3413:
	.word	gBattleCommunication
	.word	gBattleMons
	.word	gBattlerPartyIndexes
	.word	gBattlerAttacker
.L3399:
	ldr	r0, .L3415
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3401	@cond_branch
	ldr	r0, .L3415+0x4
	ldrb	r3, [r0]
	lsl	r0, r3, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	cmp	r0, r6
	bne	.L3401	@cond_branch
	ldr	r0, .L3415+0x8
	ldrb	r1, [r0]
	ldr	r2, .L3415+0xc
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L3401	@cond_branch
	mov	r0, #0x58
	mul	r0, r0, r3
.L3408:
	add	r0, r0, r7
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	b	.L3400
.L3416:
	.align	2, 0
.L3415:
	.word	gBattleTypeFlags
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L3401:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	GetAbilityBySpecies
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L3400:
	cmp	r0, #0x2b
	beq	.L3396	@cond_branch
	mov	r0, #0x1
	lsl	r0, r0, r6
	mov	r1, r8
	orr	r1, r1, r0
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
.L3396:
	add	r6, r6, #0x1
	cmp	r6, #0x5
	ble	.L3397	@cond_branch
	b	.L3405
.L3386:
	ldr	r1, .L3417
	mov	r0, #0x4
	strb	r0, [r1, #0x5]
	mov	r2, #0x3f
	mov	r8, r2
	ldr	r3, .L3417+0x4
	ldr	r2, .L3417+0x8
	ldrb	r0, [r2]
	mov	r5, #0x58
	mul	r0, r0, r5
	mov	r1, #0x4c
	add	r1, r1, r3
	mov	r9, r1
	add	r0, r0, r9
	str	r4, [r0]
	ldrb	r0, [r2]
	mov	r1, r0
	mul	r1, r1, r5
	add	r7, r3, #0
	add	r7, r7, #0x50
	add	r1, r1, r7
	ldr	r0, [r1]
	ldr	r6, .L3417+0xc
	and	r0, r0, r6
	str	r0, [r1]
	ldrb	r0, [r2]
	bl	GetBattlerPosition
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r4, .L3417+0x10
	strb	r0, [r4]
	ldr	r0, .L3417+0x14
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3405	@cond_branch
	ldr	r0, .L3417+0x18
	ldrb	r2, [r0]
	ldr	r1, .L3417+0x1c
	ldrb	r3, [r4]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	bne	.L3405	@cond_branch
	mov	r0, r3
	mul	r0, r0, r5
	add	r0, r0, r9
	str	r2, [r0]
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r7
	ldr	r0, [r1]
	and	r0, r0, r6
	str	r0, [r1]
.L3405:
	mov	r2, r8
	cmp	r2, #0
	beq	.L3407	@cond_branch
	ldr	r4, .L3417+0x10
	ldr	r0, .L3417+0x8
	ldrb	r0, [r0]
	strb	r0, [r4]
	add	r0, sp, #0x4
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L3407:
	ldr	r1, .L3417+0x20
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3418:
	.align	2, 0
.L3417:
	.word	gBattleCommunication
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	-0x8000001
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattlescriptCurrInstr
.Lfe208:
	.size	 atkAE_healpartystatus,.Lfe208-atkAE_healpartystatus
	.align	2, 0
	.type	 atkAF_cursetarget,function
	.thumb_func
atkAF_cursetarget:
	push	{r4, r5, lr}
	ldr	r5, .L3423
	ldr	r0, .L3423+0x4
	ldrb	r0, [r0]
	mov	r4, #0x58
	mov	r1, r0
	mul	r1, r1, r4
	add	r0, r5, #0
	add	r0, r0, #0x50
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r3, #0x80
	lsl	r3, r3, #0x15
	add	r0, r2, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L3420	@cond_branch
	ldr	r3, .L3423+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3421
.L3424:
	.align	2, 0
.L3423:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L3420:
	orr	r2, r2, r3
	str	r2, [r1]
	ldr	r1, .L3425
	ldr	r0, .L3425+0x4
	ldrb	r0, [r0]
	mul	r0, r0, r4
	add	r0, r0, r5
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x1
	str	r0, [r1]
	cmp	r0, #0
	bne	.L3422	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L3422:
	ldr	r1, .L3425+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3421:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L3426:
	.align	2, 0
.L3425:
	.word	gBattleMoveDamage
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe209:
	.size	 atkAF_cursetarget,.Lfe209-atkAF_cursetarget
	.align	2, 0
	.type	 atkB0_trysetspikes,function
	.thumb_func
atkB0_trysetspikes:
	push	{r4, lr}
	ldr	r4, .L3430
	ldrb	r0, [r4]
	bl	GetBattlerSide
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L3430+0x4
	lsl	r2, r0, #0x1
	add	r0, r2, r0
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	ldrb	r0, [r3, #0xa]
	cmp	r0, #0x3
	bne	.L3428	@cond_branch
	ldr	r2, .L3430+0x8
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r3, .L3430+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3429
.L3431:
	.align	2, 0
.L3430:
	.word	gBattlerAttacker
	.word	gSideTimers
	.word	gSpecialStatuses
	.word	gBattlescriptCurrInstr
.L3428:
	ldr	r1, .L3432
	add	r1, r2, r1
	ldrh	r2, [r1]
	mov	r0, #0x10
	orr	r0, r0, r2
	strh	r0, [r1]
	ldrb	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strb	r0, [r3, #0xa]
	ldr	r1, .L3432+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3429:
	pop	{r4}
	pop	{r0}
	bx	r0
.L3433:
	.align	2, 0
.L3432:
	.word	gSideStatuses
	.word	gBattlescriptCurrInstr
.Lfe210:
	.size	 atkB0_trysetspikes,.Lfe210-atkB0_trysetspikes
	.align	2, 0
	.type	 atkB1_setforesight,function
	.thumb_func
atkB1_setforesight:
	ldr	r1, .L3435
	ldr	r0, .L3435+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r1, r1, #0x50
	add	r2, r2, r1
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x16
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L3435+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L3436:
	.align	2, 0
.L3435:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.Lfe211:
	.size	 atkB1_setforesight,.Lfe211-atkB1_setforesight
	.align	2, 0
	.type	 atkB2_trysetperishsong,function
	.thumb_func
atkB2_trysetperishsong:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r6, #0x0
	mov	r3, #0x0
	ldr	r0, .L3448
	add	r7, r0, #0
	ldr	r0, .L3448+0x4
	mov	r8, r0
	ldrb	r1, [r7]
	cmp	r6, r1
	bge	.L3439	@cond_branch
	mov	r5, #0x20
	ldr	r0, .L3448+0x8
	mov	ip, r0
	ldr	r0, .L3448+0xc
	add	r4, r0, #0
	add	r4, r4, #0xf
	ldr	r2, .L3448+0x10
.L3441:
	ldr	r1, [r2]
	add	r0, r1, #0
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L3443	@cond_branch
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r0, r0, ip
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x2b
	bne	.L3442	@cond_branch
.L3443:
	add	r6, r6, #0x1
	b	.L3440
.L3449:
	.align	2, 0
.L3448:
	.word	gBattlersCount
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gDisableStructs
	.word	gStatuses3
.L3442:
	orr	r1, r1, r5
	str	r1, [r2]
	mov	r0, #0x33
	strb	r0, [r4]
.L3440:
	add	r4, r4, #0x1c
	add	r2, r2, #0x4
	add	r3, r3, #0x1
	ldrb	r0, [r7]
	cmp	r3, r0
	blt	.L3441	@cond_branch
.L3439:
	mov	r1, r8
	ldrb	r0, [r1]
	bl	PressurePPLoseOnUsingPerishSong
	ldr	r0, .L3450
	ldrb	r0, [r0]
	cmp	r6, r0
	bne	.L3446	@cond_branch
	ldr	r3, .L3450+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3447
.L3451:
	.align	2, 0
.L3450:
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
.L3446:
	ldr	r1, .L3452
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3447:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3453:
	.align	2, 0
.L3452:
	.word	gBattlescriptCurrInstr
.Lfe212:
	.size	 atkB2_trysetperishsong,.Lfe212-atkB2_trysetperishsong
	.align	2, 0
	.type	 atkB3_rolloutdamagecalculation,function
	.thumb_func
atkB3_rolloutdamagecalculation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L3465
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3455	@cond_branch
	ldr	r0, .L3465+0x4
	ldrb	r0, [r0]
	bl	CancelMultiTurnMoves
	ldr	r1, .L3465+0x8
	ldr	r0, .L3465+0xc
	str	r0, [r1]
	b	.L3456
.L3466:
	.align	2, 0
.L3465:
	.word	gMoveResultFlags
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveMissedPause
.L3455:
	ldr	r2, .L3467
	ldr	r1, .L3467+0x4
	ldrb	r3, [r1]
	mov	r5, #0x58
	mov	r0, r3
	mul	r0, r0, r5
	add	r4, r2, #0
	add	r4, r4, #0x50
	add	r0, r0, r4
	ldr	r0, [r0]
	mov	r7, #0x80
	lsl	r7, r7, #0x5
	and	r0, r0, r7
	add	r6, r1, #0
	mov	r9, r2
	ldr	r1, .L3467+0x8
	mov	ip, r1
	ldr	r2, .L3467+0xc
	mov	r8, r2
	cmp	r0, #0
	bne	.L3457	@cond_branch
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrb	r2, [r0, #0x11]
	mov	r1, #0x10
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x5
	orr	r1, r1, r2
	strb	r1, [r0, #0x11]
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrb	r2, [r0, #0x11]
	mov	r1, #0xf
	and	r1, r1, r2
	mov	r2, #0x50
	orr	r1, r1, r2
	strb	r1, [r0, #0x11]
	ldrb	r0, [r6]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r4
	ldr	r0, [r1]
	orr	r0, r0, r7
	str	r0, [r1]
	ldr	r1, .L3467+0x10
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r2, r8
	ldrh	r1, [r2]
	strh	r1, [r0]
.L3457:
	ldrb	r0, [r6]
	lsl	r2, r0, #0x3
	sub	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, ip
	ldrb	r3, [r2, #0x11]
	lsl	r1, r3, #0x1c
	lsr	r1, r1, #0x1c
	sub	r1, r1, #0x1
	mov	r0, #0xf
	and	r1, r1, r0
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x11]
	cmp	r1, #0
	bne	.L3458	@cond_branch
	ldrb	r0, [r6]
	mov	r1, r0
	mul	r1, r1, r5
	add	r1, r1, r4
	ldr	r0, [r1]
	ldr	r2, .L3467+0x14
	and	r0, r0, r2
	str	r0, [r1]
.L3458:
	ldr	r3, .L3467+0x18
	ldr	r2, .L3467+0x1c
	mov	r0, r8
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	strh	r0, [r3]
	mov	r2, #0x1
	ldrb	r1, [r6]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, ip
	add	r4, r0, r1
	ldrb	r0, [r4, #0x11]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	mov	r1, #0x5
	sub	r1, r1, r0
	ldr	r7, .L3467+0x20
	add	r5, r3, #0
	cmp	r2, r1
	bge	.L3460	@cond_branch
	add	r1, r5, #0
	add	r3, r4, #0
	mov	r4, #0x5
.L3462:
	ldrh	r0, [r1]
	lsl	r0, r0, #0x1
	strh	r0, [r1]
	add	r2, r2, #0x1
	ldrb	r0, [r3, #0x11]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	sub	r0, r4, r0
	cmp	r2, r0
	blt	.L3462	@cond_branch
.L3460:
	ldrb	r1, [r6]
	mov	r0, #0x58
	mul	r0, r0, r1
	mov	r1, r9
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x17
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3464	@cond_branch
	ldrh	r0, [r5]
	lsl	r0, r0, #0x1
	strh	r0, [r5]
.L3464:
	ldr	r0, [r7]
	add	r0, r0, #0x1
	str	r0, [r7]
.L3456:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3468:
	.align	2, 0
.L3467:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gDisableStructs
	.word	gCurrentMove
	.word	gLockedMoves
	.word	-0x1001
	.word	gDynamicBasePower
	.word	gBattleMoves
	.word	gBattlescriptCurrInstr
.Lfe213:
	.size	 atkB3_rolloutdamagecalculation,.Lfe213-atkB3_rolloutdamagecalculation
	.align	2, 0
	.type	 atkB4_jumpifconfusedandstatmaxed,function
	.thumb_func
atkB4_jumpifconfusedandstatmaxed:
	push	{r4, r5, lr}
	ldr	r5, .L3472
	ldr	r0, .L3472+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mov	r3, r1
	mul	r3, r3, r0
	add	r0, r5, #0
	add	r0, r0, #0x50
	add	r0, r3, r0
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	ldr	r4, .L3472+0x8
	cmp	r0, #0
	beq	.L3470	@cond_branch
	ldr	r2, [r4]
	ldrb	r0, [r2, #0x1]
	add	r0, r0, r3
	add	r1, r5, #0
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0xc
	bne	.L3470	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L3471
.L3473:
	.align	2, 0
.L3472:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L3470:
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
.L3471:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe214:
	.size	 atkB4_jumpifconfusedandstatmaxed,.Lfe214-atkB4_jumpifconfusedandstatmaxed
	.align	2, 0
	.type	 atkB5_furycuttercalc,function
	.thumb_func
atkB5_furycuttercalc:
	push	{r4, r5, lr}
	ldr	r0, .L3483
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3475	@cond_branch
	ldr	r2, .L3483+0x4
	ldr	r0, .L3483+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x10]
	ldr	r1, .L3483+0xc
	ldr	r0, .L3483+0x10
	str	r0, [r1]
	b	.L3476
.L3484:
	.align	2, 0
.L3483:
	.word	gMoveResultFlags
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	BattleScript_MoveMissedPause
.L3475:
	ldr	r5, .L3485
	ldr	r4, .L3485+0x4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r5
	ldrb	r0, [r1, #0x10]
	cmp	r0, #0x5
	beq	.L3477	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1, #0x10]
.L3477:
	ldr	r3, .L3485+0x8
	ldr	r2, .L3485+0xc
	ldr	r0, .L3485+0x10
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	strh	r0, [r3]
	mov	r2, #0x1
	ldrb	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r4, .L3485+0x14
	ldrb	r1, [r0, #0x10]
	cmp	r2, r1
	bge	.L3479	@cond_branch
	add	r1, r3, #0
	add	r3, r0, #0
.L3481:
	ldrh	r0, [r1]
	lsl	r0, r0, #0x1
	strh	r0, [r1]
	add	r2, r2, #0x1
	ldrb	r0, [r3, #0x10]
	cmp	r2, r0
	blt	.L3481	@cond_branch
.L3479:
	ldr	r0, [r4]
	add	r0, r0, #0x1
	str	r0, [r4]
.L3476:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L3486:
	.align	2, 0
.L3485:
	.word	gDisableStructs
	.word	gBattlerAttacker
	.word	gDynamicBasePower
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
.Lfe215:
	.size	 atkB5_furycuttercalc,.Lfe215-atkB5_furycuttercalc
	.align	2, 0
	.type	 atkB6_happinesstodamagecalculation,function
	.thumb_func
atkB6_happinesstodamagecalculation:
	push	{r4, lr}
	ldr	r2, .L3491
	ldr	r0, .L3491+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0x79
	bne	.L3488	@cond_branch
	ldr	r4, .L3491+0x8
	ldr	r2, .L3491+0xc
	ldr	r0, .L3491+0x10
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x2b
	ldrb	r1, [r0]
	b	.L3490
.L3492:
	.align	2, 0
.L3491:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gDynamicBasePower
	.word	gBattleMons
	.word	gBattlerAttacker
.L3488:
	ldr	r4, .L3493
	ldr	r2, .L3493+0x4
	ldr	r0, .L3493+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x2b
	ldrb	r0, [r0]
	mov	r1, #0xff
	sub	r1, r1, r0
.L3490:
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r1, #0x19
	bl	__divsi3
	strh	r0, [r4]
	ldr	r1, .L3493+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L3494:
	.align	2, 0
.L3493:
	.word	gDynamicBasePower
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe216:
	.size	 atkB6_happinesstodamagecalculation,.Lfe216-atkB6_happinesstodamagecalculation
	.align	2, 0
	.type	 atkB7_presentdamagecalculation,function
	.thumb_func
atkB7_presentdamagecalculation:
	push	{r4, lr}
	bl	Random
	mov	r4, #0xff
	and	r4, r4, r0
	cmp	r4, #0x65
	bgt	.L3496	@cond_branch
	ldr	r1, .L3508
	mov	r0, #0x28
	strh	r0, [r1]
	b	.L3497
.L3509:
	.align	2, 0
.L3508:
	.word	gDynamicBasePower
.L3496:
	cmp	r4, #0xb1
	bgt	.L3498	@cond_branch
	ldr	r1, .L3510
	mov	r0, #0x50
	strh	r0, [r1]
	b	.L3497
.L3511:
	.align	2, 0
.L3510:
	.word	gDynamicBasePower
.L3498:
	cmp	r4, #0xcb
	bgt	.L3500	@cond_branch
	ldr	r1, .L3512
	mov	r0, #0x78
	strh	r0, [r1]
	b	.L3497
.L3513:
	.align	2, 0
.L3512:
	.word	gDynamicBasePower
.L3500:
	ldr	r3, .L3514
	ldr	r2, .L3514+0x4
	ldr	r0, .L3514+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x2
	str	r0, [r3]
	cmp	r0, #0
	bne	.L3502	@cond_branch
	mov	r0, #0x1
	str	r0, [r3]
.L3502:
	ldr	r0, [r3]
	neg	r0, r0
	str	r0, [r3]
.L3497:
	cmp	r4, #0xcb
	bgt	.L3503	@cond_branch
	ldr	r1, .L3514+0xc
	ldr	r0, .L3514+0x10
	b	.L3507
.L3515:
	.align	2, 0
.L3514:
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	BattleScript_HitFromCritCalc
.L3503:
	ldr	r2, .L3516
	ldr	r0, .L3516+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r1, [r0, #0x2c]
	ldrh	r0, [r0, #0x28]
	cmp	r1, r0
	bne	.L3505	@cond_branch
	ldr	r1, .L3516+0x8
	ldr	r0, .L3516+0xc
	b	.L3507
.L3517:
	.align	2, 0
.L3516:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
	.word	BattleScript_AlreadyAtFullHp
.L3505:
	ldr	r2, .L3518
	ldrb	r1, [r2]
	mov	r0, #0xf7
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L3518+0x4
	ldr	r0, .L3518+0x8
.L3507:
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L3519:
	.align	2, 0
.L3518:
	.word	gMoveResultFlags
	.word	gBattlescriptCurrInstr
	.word	BattleScript_PresentHealTarget
.Lfe217:
	.size	 atkB7_presentdamagecalculation,.Lfe217-atkB7_presentdamagecalculation
	.align	2, 0
	.type	 atkB8_setsafeguard,function
	.thumb_func
atkB8_setsafeguard:
	push	{r4, r5, r6, r7, lr}
	ldr	r7, .L3523
	ldrb	r0, [r7]
	bl	GetBattlerPosition
	ldr	r4, .L3523+0x4
	mov	r6, #0x1
	add	r1, r6, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r1, [r1]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3521	@cond_branch
	ldr	r2, .L3523+0x8
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L3523+0xc
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	b	.L3522
.L3524:
	.align	2, 0
.L3523:
	.word	gBattlerAttacker
	.word	gSideStatuses
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L3521:
	ldrb	r0, [r7]
	bl	GetBattlerPosition
	add	r1, r6, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r0, [r1]
	mov	r2, #0x20
	orr	r0, r0, r2
	strh	r0, [r1]
	ldrb	r0, [r7]
	bl	GetBattlerPosition
	ldr	r5, .L3525
	add	r1, r6, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r4, #0x5
	strb	r4, [r0, #0x6]
	ldrb	r0, [r7]
	bl	GetBattlerPosition
	add	r1, r6, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r7]
	strb	r1, [r0, #0x7]
	ldr	r0, .L3525+0x4
	strb	r4, [r0, #0x5]
.L3522:
	ldr	r1, .L3525+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3526:
	.align	2, 0
.L3525:
	.word	gSideTimers
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe218:
	.size	 atkB8_setsafeguard,.Lfe218-atkB8_setsafeguard
	.align	2, 0
	.type	 atkB9_magnitudedamagecalculation,function
	.thumb_func
atkB9_magnitudedamagecalculation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0x4
	bgt	.L3528	@cond_branch
	ldr	r1, .L3547
	mov	r0, #0xa
	strh	r0, [r1]
	mov	r3, #0x4
	b	.L3529
.L3548:
	.align	2, 0
.L3547:
	.word	gDynamicBasePower
.L3528:
	cmp	r3, #0xe
	bgt	.L3530	@cond_branch
	ldr	r1, .L3549
	mov	r0, #0x1e
	strh	r0, [r1]
	mov	r3, #0x5
	b	.L3529
.L3550:
	.align	2, 0
.L3549:
	.word	gDynamicBasePower
.L3530:
	cmp	r3, #0x22
	bgt	.L3532	@cond_branch
	ldr	r1, .L3551
	mov	r0, #0x32
	strh	r0, [r1]
	mov	r3, #0x6
	b	.L3529
.L3552:
	.align	2, 0
.L3551:
	.word	gDynamicBasePower
.L3532:
	cmp	r3, #0x40
	bgt	.L3534	@cond_branch
	ldr	r1, .L3553
	mov	r0, #0x46
	strh	r0, [r1]
	mov	r3, #0x7
	b	.L3529
.L3554:
	.align	2, 0
.L3553:
	.word	gDynamicBasePower
.L3534:
	cmp	r3, #0x54
	bgt	.L3536	@cond_branch
	ldr	r1, .L3555
	mov	r0, #0x5a
	strh	r0, [r1]
	mov	r3, #0x8
	b	.L3529
.L3556:
	.align	2, 0
.L3555:
	.word	gDynamicBasePower
.L3536:
	cmp	r3, #0x5e
	bgt	.L3538	@cond_branch
	ldr	r1, .L3557
	mov	r0, #0x6e
	strh	r0, [r1]
	mov	r3, #0x9
	b	.L3529
.L3558:
	.align	2, 0
.L3557:
	.word	gDynamicBasePower
.L3538:
	ldr	r1, .L3559
	mov	r0, #0x96
	strh	r0, [r1]
	mov	r3, #0xa
.L3529:
	ldr	r1, .L3559+0x4
	mov	r2, #0x0
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	strb	r0, [r1, #0x2]
	mov	r0, #0x2
	strb	r0, [r1, #0x3]
	strb	r3, [r1, #0x4]
	mov	r0, #0xff
	strb	r0, [r1, #0x5]
	ldr	r1, .L3559+0x8
	strb	r2, [r1]
	ldr	r0, .L3559+0xc
	ldrb	r3, [r0]
	add	r6, r1, #0
	ldr	r0, .L3559+0x10
	mov	r8, r0
	cmp	r2, r3
	bcs	.L3541	@cond_branch
	add	r4, r6, #0
	ldr	r0, .L3559+0x14
	ldrb	r5, [r0]
	ldr	r1, .L3559+0x18
	mov	ip, r1
	ldr	r7, .L3559+0x1c
.L3543:
	ldrb	r2, [r4]
	cmp	r2, r5
	beq	.L3542	@cond_branch
	ldrb	r0, [r7]
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	ldr	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3541	@cond_branch
.L3542:
	add	r0, r2, #0x1
	strb	r0, [r4]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r3
	bcc	.L3543	@cond_branch
.L3541:
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3560:
	.align	2, 0
.L3559:
	.word	gDynamicBasePower
	.word	gBattleTextBuff1
	.word	gBattlerTarget
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
	.word	gBattlerAttacker
	.word	gBitTable
	.word	gAbsentBattlerFlags
.Lfe219:
	.size	 atkB9_magnitudedamagecalculation,.Lfe219-atkB9_magnitudedamagecalculation
	.align	2, 0
	.type	 atkBA_jumpifnopursuitswitchdmg,function
	.thumb_func
atkBA_jumpifnopursuitswitchdmg:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L3577
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L3562	@cond_branch
	ldr	r0, .L3577+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3563	@cond_branch
	mov	r0, #0x1
	b	.L3576
.L3578:
	.align	2, 0
.L3577:
	.word	gMultiHitCounter
	.word	gBattlerAttacker
.L3563:
	mov	r0, #0x0
	b	.L3576
.L3562:
	ldr	r0, .L3579
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3566	@cond_branch
	mov	r0, #0x3
	b	.L3576
.L3580:
	.align	2, 0
.L3579:
	.word	gBattlerAttacker
.L3566:
	mov	r0, #0x2
.L3576:
	bl	GetBattlerAtPosition
	ldr	r1, .L3581
	strb	r0, [r1]
	ldr	r0, .L3581+0x4
	ldr	r1, .L3581
	ldrb	r3, [r1]
	add	r0, r3, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB35373
	b	.L3568	@long jump
.LCB35373:
	ldr	r5, .L3581+0x8
	ldr	r0, .L3581+0xc
	ldr	r1, [r0]
	add	r1, r3, r1
	ldrb	r2, [r5]
	ldrb	r1, [r1, #0xc]
	cmp	r2, r1
	bne	.L3568	@cond_branch
	ldr	r4, .L3581+0x10
	mov	r2, #0x58
	mov	r0, r3
	mul	r0, r0, r2
	add	r1, r4, #0
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x27
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3568	@cond_branch
	ldrb	r0, [r5]
	mul	r0, r0, r2
	add	r0, r0, r4
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	beq	.L3568	@cond_branch
	ldr	r0, .L3581+0x14
	lsl	r1, r3, #0x3
	sub	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x18]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.L3568	@cond_branch
	ldr	r0, .L3581+0x18
	lsl	r1, r3, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	cmp	r0, #0xe4
	bne	.L3568	@cond_branch
	mov	r1, #0x0
	ldr	r0, .L3581+0x1c
	ldr	r2, .L3581+0x20
	mov	r8, r2
	ldr	r7, .L3581+0x24
	mov	sl, r7
	ldr	r2, .L3581+0x28
	mov	r9, r2
	ldr	r7, .L3581+0x2c
	mov	ip, r7
	ldrb	r2, [r0]
	cmp	r1, r2
	bge	.L3570	@cond_branch
	ldr	r6, .L3581+0x30
	ldr	r5, .L3581
	ldr	r4, .L3581+0x34
	mov	r3, #0xb
	add	r2, r0, #0
.L3572:
	add	r0, r1, r6
	ldrb	r0, [r0]
	ldrb	r7, [r5]
	cmp	r0, r7
	bne	.L3571	@cond_branch
	add	r0, r1, r4
	strb	r3, [r0]
.L3571:
	add	r1, r1, #0x1
	ldrb	r0, [r2]
	cmp	r1, r0
	blt	.L3572	@cond_branch
.L3570:
	mov	r0, #0xe4
	mov	r1, r8
	strh	r0, [r1]
	ldr	r2, .L3581
	ldrb	r0, [r2]
	ldr	r7, .L3581+0xc
	ldr	r1, [r7]
	add	r0, r0, r1
	add	r0, r0, #0x80
	ldrb	r0, [r0]
	mov	r1, r9
	strb	r0, [r1]
	mov	r2, sl
	strb	r0, [r2]
	ldr	r7, .L3581+0x38
	ldr	r0, [r7]
	add	r0, r0, #0x5
	str	r0, [r7]
	mov	r0, #0x1
	ldr	r1, .L3581+0x3c
	strb	r0, [r1, #0x18]
	mov	r2, ip
	ldr	r0, [r2]
	ldr	r1, .L3581+0x40
	and	r0, r0, r1
	str	r0, [r2]
	b	.L3575
.L3582:
	.align	2, 0
.L3581:
	.word	gBattlerTarget
	.word	gChosenActionByBattler
	.word	gBattlerAttacker
	.word	gBattleStruct
	.word	gBattleMons
	.word	gDisableStructs
	.word	gChosenMoveByBattler
	.word	gBattlersCount
	.word	gCurrentMove
	.word	gCurrMovePos
	.word	gChosenMovePos
	.word	gHitMarker
	.word	gBattlerByTurnOrder
	.word	gActionsByTurnOrder
	.word	gBattlescriptCurrInstr
	.word	gBattleScripting
	.word	-0x401
.L3568:
	ldr	r3, .L3583
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3575:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3584:
	.align	2, 0
.L3583:
	.word	gBattlescriptCurrInstr
.Lfe220:
	.size	 atkBA_jumpifnopursuitswitchdmg,.Lfe220-atkBA_jumpifnopursuitswitchdmg
	.align	2, 0
	.type	 atkBB_setsunny,function
	.thumb_func
atkBB_setsunny:
	push	{lr}
	ldr	r2, .L3588
	ldrh	r1, [r2]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3586	@cond_branch
	ldr	r2, .L3588+0x4
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L3588+0x8
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	b	.L3587
.L3589:
	.align	2, 0
.L3588:
	.word	gBattleWeather
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L3586:
	mov	r0, #0x20
	strh	r0, [r2]
	ldr	r1, .L3590
	mov	r0, #0x4
	strb	r0, [r1, #0x5]
	ldr	r0, .L3590+0x4
	add	r0, r0, #0x28
	mov	r1, #0x5
	strb	r1, [r0]
.L3587:
	ldr	r1, .L3590+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L3591:
	.align	2, 0
.L3590:
	.word	gBattleCommunication
	.word	gWishFutureKnock
	.word	gBattlescriptCurrInstr
.Lfe221:
	.size	 atkBB_setsunny,.Lfe221-atkBB_setsunny
	.align	2, 0
	.type	 atkBC_maxattackhalvehp,function
	.thumb_func
atkBC_maxattackhalvehp:
	push	{r4, r5, lr}
	ldr	r5, .L3597
	ldr	r4, .L3597+0x4
	ldrb	r0, [r4]
	mov	r3, #0x58
	mul	r0, r0, r3
	add	r2, r0, r5
	ldrh	r0, [r2, #0x2c]
	lsr	r1, r0, #0x1
	cmp	r1, #0
	bne	.L3593	@cond_branch
	mov	r1, #0x1
.L3593:
	mov	r0, #0x19
	ldrsb	r0, [r2, r0]
	cmp	r0, #0xb
	bgt	.L3594	@cond_branch
	ldrh	r0, [r2, #0x28]
	cmp	r0, r1
	bls	.L3594	@cond_branch
	mov	r0, #0xc
	strb	r0, [r2, #0x19]
	ldr	r1, .L3597+0x8
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r0, r0, r5
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x1
	str	r0, [r1]
	cmp	r0, #0
	bne	.L3595	@cond_branch
	mov	r0, #0x1
	str	r0, [r1]
.L3595:
	ldr	r1, .L3597+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3596
.L3598:
	.align	2, 0
.L3597:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
.L3594:
	ldr	r3, .L3599
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3596:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L3600:
	.align	2, 0
.L3599:
	.word	gBattlescriptCurrInstr
.Lfe222:
	.size	 atkBC_maxattackhalvehp,.Lfe222-atkBC_maxattackhalvehp
	.align	2, 0
	.type	 atkBD_copyfoestats,function
	.thumb_func
atkBD_copyfoestats:
	push	{r4, r5, r6, r7, lr}
	mov	r2, #0x0
	ldr	r7, .L3607
	ldr	r6, .L3607+0x4
	mov	r4, #0x58
	ldr	r3, .L3607+0x8
	ldr	r5, .L3607+0xc
.L3605:
	ldrb	r0, [r6]
	mov	r1, r0
	mul	r1, r1, r4
	add	r1, r2, r1
	add	r1, r1, r3
	ldrb	r0, [r5]
	mul	r0, r0, r4
	add	r0, r2, r0
	add	r0, r0, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r2, r2, #0x1
	cmp	r2, #0x7
	ble	.L3605	@cond_branch
	ldr	r0, [r7]
	add	r0, r0, #0x5
	str	r0, [r7]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3608:
	.align	2, 0
.L3607:
	.word	gBattlescriptCurrInstr
	.word	gBattlerAttacker
	.word	gBattleMons+0x18
	.word	gBattlerTarget
.Lfe223:
	.size	 atkBD_copyfoestats,.Lfe223-atkBD_copyfoestats
	.align	2, 0
	.type	 atkBE_rapidspinfree,function
	.thumb_func
atkBE_rapidspinfree:
	push	{r4, r5, r6, lr}
	ldr	r1, .L3617
	ldr	r5, .L3617+0x4
	ldrb	r2, [r5]
	mov	r6, #0x58
	mov	r0, r2
	mul	r0, r0, r6
	add	r4, r1, #0
	add	r4, r4, #0x50
	add	r0, r0, r4
	ldr	r0, [r0]
	mov	r1, #0xe0
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3610	@cond_branch
	ldr	r1, .L3617+0x8
	ldr	r3, .L3617+0xc
	ldrb	r0, [r3]
	strb	r0, [r1, #0x17]
	ldrb	r0, [r5]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r4
	ldr	r0, [r1]
	ldr	r2, .L3617+0x10
	and	r0, r0, r2
	str	r0, [r1]
	ldrb	r0, [r5]
	ldr	r1, .L3617+0x14
	ldr	r2, [r1]
	add	r0, r0, r2
	ldrb	r0, [r0, #0x14]
	strb	r0, [r3]
	ldr	r1, .L3617+0x18
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x2
	strb	r0, [r1, #0x1]
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0, #0x4]
	strb	r0, [r1, #0x2]
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0, #0x5]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	bl	BattleScriptPushCursor
	ldr	r1, .L3617+0x1c
	ldr	r0, .L3617+0x20
	b	.L3616
.L3618:
	.align	2, 0
.L3617:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleScripting
	.word	gBattlerTarget
	.word	-0xe001
	.word	gBattleStruct
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
	.word	BattleScript_WrapFree
.L3610:
	ldr	r4, .L3619
	lsl	r0, r2, #0x2
	add	r3, r0, r4
	ldr	r1, [r3]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3612	@cond_branch
	mov	r0, #0x5
	neg	r0, r0
	and	r1, r1, r0
	str	r1, [r3]
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldr	r0, [r1]
	mov	r2, #0x4
	neg	r2, r2
	and	r0, r0, r2
	str	r0, [r1]
	bl	BattleScriptPushCursor
	ldr	r1, .L3619+0x4
	ldr	r0, .L3619+0x8
	b	.L3616
.L3620:
	.align	2, 0
.L3619:
	.word	gStatuses3
	.word	gBattlescriptCurrInstr
	.word	BattleScript_LeechSeedFree
.L3612:
	add	r0, r2, #0
	bl	GetBattlerSide
	ldr	r4, .L3621
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r4
	ldrh	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3614	@cond_branch
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r4
	ldrh	r2, [r0]
	ldr	r1, .L3621+0x4
	and	r1, r1, r2
	mov	r4, #0x0
	strh	r1, [r0]
	ldrb	r0, [r5]
	bl	GetBattlerSide
	ldr	r2, .L3621+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	strb	r4, [r1, #0xa]
	bl	BattleScriptPushCursor
	ldr	r1, .L3621+0xc
	ldr	r0, .L3621+0x10
	b	.L3616
.L3622:
	.align	2, 0
.L3621:
	.word	gSideStatuses
	.word	0xffef
	.word	gSideTimers
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SpikesFree
.L3614:
	ldr	r1, .L3623
	ldr	r0, [r1]
	add	r0, r0, #0x1
.L3616:
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L3624:
	.align	2, 0
.L3623:
	.word	gBattlescriptCurrInstr
.Lfe224:
	.size	 atkBE_rapidspinfree,.Lfe224-atkBE_rapidspinfree
	.align	2, 0
	.type	 atkBF_setdefensecurlbit,function
	.thumb_func
atkBF_setdefensecurlbit:
	ldr	r1, .L3626
	ldr	r0, .L3626+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r2, r2, r0
	add	r1, r1, #0x50
	add	r2, r2, r1
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x17
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L3626+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L3627:
	.align	2, 0
.L3626:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe225:
	.size	 atkBF_setdefensecurlbit,.Lfe225-atkBF_setdefensecurlbit
	.align	2, 0
	.type	 atkC0_recoverbasedonsunlight,function
	.thumb_func
atkC0_recoverbasedonsunlight:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L3637
	ldr	r5, .L3637+0x4
	ldrb	r0, [r5]
	strb	r0, [r1]
	ldr	r7, .L3637+0x8
	ldrb	r0, [r5]
	mov	r6, #0x58
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r1, [r0, #0x28]
	ldrh	r0, [r0, #0x2c]
	cmp	r1, r0
	beq	.L3629	@cond_branch
	ldr	r4, .L3637+0xc
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L3631	@cond_branch
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L3631	@cond_branch
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3630	@cond_branch
.L3631:
	ldr	r3, .L3637+0x10
	ldr	r2, .L3637+0x8
	ldr	r0, .L3637+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x1
	str	r0, [r3]
	add	r1, r3, #0
	b	.L3632
.L3638:
	.align	2, 0
.L3637:
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gBattleWeather
	.word	gBattleMoveDamage
.L3630:
	ldrh	r1, [r4]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3633	@cond_branch
	ldr	r4, .L3639
	ldrb	r0, [r5]
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r1, [r0, #0x2c]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, #0x1e
	bl	__divsi3
	str	r0, [r4]
	add	r1, r4, #0
	b	.L3632
.L3640:
	.align	2, 0
.L3639:
	.word	gBattleMoveDamage
.L3633:
	ldr	r1, .L3641
	ldrb	r0, [r5]
	mul	r0, r0, r6
	add	r0, r0, r7
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x2
	str	r0, [r1]
.L3632:
	add	r2, r1, #0
	ldr	r0, [r2]
	cmp	r0, #0
	bne	.L3635	@cond_branch
	mov	r0, #0x1
	str	r0, [r2]
.L3635:
	ldr	r0, [r1]
	neg	r0, r0
	str	r0, [r1]
	ldr	r1, .L3641+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3636
.L3642:
	.align	2, 0
.L3641:
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
.L3629:
	ldr	r3, .L3643
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3636:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3644:
	.align	2, 0
.L3643:
	.word	gBattlescriptCurrInstr
.Lfe226:
	.size	 atkC0_recoverbasedonsunlight,.Lfe226-atkC0_recoverbasedonsunlight
	.align	2, 0
	.type	 atkC1_hiddenpowercalc,function
	.thumb_func
atkC1_hiddenpowercalc:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r2, .L3647
	ldr	r0, .L3647+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mov	r4, r1
	mul	r4, r4, r0
	add	r4, r4, r2
	ldrb	r0, [r4, #0x14]
	mov	sl, r0
	mov	r7, sl
	lsl	r7, r7, #0x1b
	add	r0, r7, #0
	lsr	r0, r0, #0x1b
	mov	sl, r0
	mov	r1, #0x2
	mov	r2, sl
	and	r2, r2, r1
	asr	r2, r2, #0x1
	ldrh	r7, [r4, #0x14]
	mov	r9, r7
	mov	r0, r9
	lsl	r0, r0, #0x16
	mov	r9, r0
	lsr	r3, r0, #0x1b
	add	r0, r1, #0
	and	r0, r0, r3
	orr	r2, r2, r0
	ldrb	r7, [r4, #0x15]
	mov	r8, r7
	mov	r0, r8
	lsl	r0, r0, #0x19
	mov	r8, r0
	lsr	r3, r0, #0x1b
	add	r0, r1, #0
	and	r0, r0, r3
	lsl	r0, r0, #0x1
	orr	r2, r2, r0
	ldr	r6, [r4, #0x14]
	lsl	r6, r6, #0xc
	lsr	r3, r6, #0x1b
	add	r0, r1, #0
	and	r0, r0, r3
	lsl	r0, r0, #0x2
	orr	r2, r2, r0
	ldrh	r5, [r4, #0x16]
	lsl	r5, r5, #0x17
	lsr	r3, r5, #0x1b
	add	r0, r1, #0
	and	r0, r0, r3
	lsl	r0, r0, #0x3
	orr	r2, r2, r0
	ldrb	r3, [r4, #0x17]
	lsl	r3, r3, #0x1a
	lsr	r0, r3, #0x1b
	and	r1, r1, r0
	lsl	r1, r1, #0x4
	orr	r2, r2, r1
	mov	r1, #0x1
	add	r4, r1, #0
	mov	r7, sl
	and	r4, r4, r7
	mov	r0, r9
	lsr	r0, r0, #0x1b
	mov	r9, r0
	add	r0, r1, #0
	mov	r7, r9
	and	r0, r0, r7
	lsl	r0, r0, #0x1
	orr	r4, r4, r0
	mov	r0, r8
	lsr	r0, r0, #0x1b
	mov	r8, r0
	add	r0, r1, #0
	mov	r7, r8
	and	r0, r0, r7
	lsl	r0, r0, #0x2
	orr	r4, r4, r0
	lsr	r6, r6, #0x1b
	add	r0, r1, #0
	and	r0, r0, r6
	lsl	r0, r0, #0x3
	orr	r4, r4, r0
	lsr	r5, r5, #0x1b
	add	r0, r1, #0
	and	r0, r0, r5
	lsl	r0, r0, #0x4
	orr	r4, r4, r0
	lsr	r3, r3, #0x1b
	and	r1, r1, r3
	lsl	r1, r1, #0x5
	orr	r4, r4, r1
	ldr	r5, .L3647+0x8
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	mov	r1, #0x3f
	bl	__divsi3
	add	r0, r0, #0x1e
	strh	r0, [r5]
	ldr	r6, .L3647+0xc
	ldr	r5, [r6]
	lsl	r0, r4, #0x4
	sub	r0, r0, r4
	mov	r1, #0x3f
	bl	__divsi3
	add	r0, r0, #0x1
	strb	r0, [r5, #0x13]
	ldr	r1, [r6]
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0x8
	bls	.L3646	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1, #0x13]
.L3646:
	ldr	r2, [r6]
	ldrb	r0, [r2, #0x13]
	mov	r1, #0xc0
	orr	r0, r0, r1
	strb	r0, [r2, #0x13]
	ldr	r1, .L3647+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3648:
	.align	2, 0
.L3647:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gDynamicBasePower
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
.Lfe227:
	.size	 atkC1_hiddenpowercalc,.Lfe227-atkC1_hiddenpowercalc
	.align	2, 0
	.type	 atkC2_selectfirstvalidtarget,function
	.thumb_func
atkC2_selectfirstvalidtarget:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L3657
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r1, .L3657+0x4
	ldrb	r1, [r1]
	add	r6, r0, #0
	ldr	r0, .L3657+0x8
	mov	r8, r0
	cmp	r1, #0
	beq	.L3651	@cond_branch
	add	r3, r6, #0
	ldr	r0, .L3657+0xc
	ldrb	r5, [r0]
	ldr	r0, .L3657+0x10
	mov	ip, r0
	add	r4, r1, #0
	ldr	r7, .L3657+0x14
.L3653:
	ldrb	r2, [r3]
	cmp	r2, r5
	beq	.L3652	@cond_branch
	ldrb	r0, [r7]
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	ldr	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3651	@cond_branch
.L3652:
	add	r0, r2, #0x1
	strb	r0, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r4
	bcc	.L3653	@cond_branch
.L3651:
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3658:
	.align	2, 0
.L3657:
	.word	gBattlerTarget
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
	.word	gBattlerAttacker
	.word	gBitTable
	.word	gAbsentBattlerFlags
.Lfe228:
	.size	 atkC2_selectfirstvalidtarget,.Lfe228-atkC2_selectfirstvalidtarget
	.align	2, 0
	.type	 atkC3_trysetfutureattack,function
	.thumb_func
atkC3_trysetfutureattack:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	ldr	r0, .L3665
	mov	r8, r0
	ldr	r6, .L3665+0x4
	ldrb	r1, [r6]
	add	r0, r1, r0
	ldrb	r7, [r0]
	cmp	r7, #0
	beq	.L3660	@cond_branch
	ldr	r3, .L3665+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3661
.L3666:
	.align	2, 0
.L3665:
	.word	gWishFutureKnock
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L3660:
	add	r0, r1, #0
	bl	GetBattlerPosition
	ldr	r4, .L3667
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	mov	sl, r1
	and	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	ldrh	r2, [r0]
	mov	r1, #0x40
	mov	r5, #0x0
	mov	r3, sp
	strh	r5, [r3, #0x10]
	orr	r1, r1, r2
	strh	r1, [r0]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	mov	r1, r8
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldr	r1, .L3667+0x4
	mov	r9, r1
	ldrh	r1, [r1]
	strh	r1, [r0]
	mov	r0, r8
	add	r0, r0, #0x4
	ldrb	r2, [r6]
	add	r0, r0, r2
	ldr	r5, .L3667+0x8
	ldrb	r1, [r5]
	strb	r1, [r0]
	ldrb	r0, [r6]
	add	r0, r0, r8
	mov	r1, #0x3
	strb	r1, [r0]
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	mov	r1, sl
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r3, [r1]
	ldrb	r0, [r5]
	mov	r4, #0x58
	mul	r0, r0, r4
	ldr	r2, .L3667+0xc
	add	r0, r0, r2
	ldrb	r1, [r6]
	mul	r1, r1, r4
	add	r1, r1, r2
	mov	r4, r9
	ldrh	r2, [r4]
	str	r7, [sp]
	str	r7, [sp, #0x4]
	ldrb	r4, [r5]
	str	r4, [sp, #0x8]
	ldrb	r4, [r6]
	str	r4, [sp, #0xc]
	bl	CalculateBaseDamage
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	mov	r2, r8
	add	r2, r2, #0x8
	add	r1, r1, r2
	str	r0, [r1]
	ldr	r1, .L3667+0x10
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.L3662	@cond_branch
	ldrb	r4, [r6]
	lsl	r4, r4, #0x2
	add	r4, r4, r2
	ldr	r1, [r4]
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	mov	r1, #0xa
	bl	__divsi3
	str	r0, [r4]
.L3662:
	mov	r5, r9
	ldrh	r1, [r5]
	ldr	r0, .L3667+0x14
	cmp	r1, r0
	bne	.L3663	@cond_branch
	ldr	r0, .L3667+0x18
	mov	r1, sl
	strb	r1, [r0, #0x5]
	b	.L3664
.L3668:
	.align	2, 0
.L3667:
	.word	gSideStatuses
	.word	gCurrentMove
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gProtectStructs
	.word	0x161
	.word	gBattleCommunication
.L3663:
	ldr	r0, .L3669
	mov	r2, sp
	ldrb	r2, [r2, #0x10]
	strb	r2, [r0, #0x5]
.L3664:
	ldr	r1, .L3669+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3661:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3670:
	.align	2, 0
.L3669:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe229:
	.size	 atkC3_trysetfutureattack,.Lfe229-atkC3_trysetfutureattack
	.align	2, 0
	.type	 atkC4_trydobeatup,function
	.thumb_func
atkC4_trydobeatup:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L3688
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r7, .L3688+0x4
	cmp	r0, #0
	bne	.L3672	@cond_branch
	ldr	r7, .L3688+0x8
.L3672:
	ldr	r2, .L3688+0xc
	ldr	r0, .L3688+0x10
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.L3674	@cond_branch
	ldr	r3, .L3688+0x14
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	b	.L3687
.L3689:
	.align	2, 0
.L3688:
	.word	gBattlerAttacker
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L3674:
	ldr	r6, .L3690
	ldrb	r0, [r6]
	mov	r8, r0
	cmp	r0, #0x5
	bls	.LCB36642
	b	.L3682	@long jump
.LCB36642:
	add	r4, r6, #0
	mov	r5, #0x64
.L3679:
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r0, r7, r0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L3678	@cond_branch
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r7, r0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L3678	@cond_branch
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r0, r7, r0
	mov	r1, #0x41
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	beq	.L3678	@cond_branch
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r0, r7, r0
	mov	r1, #0x37
	bl	GetMonData
	cmp	r0, #0
	beq	.L3677	@cond_branch
.L3678:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	add	r6, r4, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x5
	bls	.L3679	@cond_branch
.L3677:
	ldr	r1, .L3690
	mov	r9, r1
	ldrb	r2, [r1]
	cmp	r2, #0x5
	bhi	.L3682	@cond_branch
	ldr	r1, .L3690+0x4
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x4
	strb	r0, [r1, #0x1]
	ldr	r6, .L3690+0x8
	ldrb	r0, [r6]
	strb	r0, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L3690+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x9
	str	r0, [r1]
	ldr	r2, .L3690+0x10
	mov	r8, r2
	ldr	r5, .L3690+0x14
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r4, #0x64
	mul	r0, r0, r4
	add	r0, r7, r0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r3, [r1, #0x1]
	mov	r2, r8
	str	r3, [r2]
	ldr	r2, .L3690+0x18
	ldr	r0, .L3690+0x1c
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	mul	r0, r0, r3
	mov	r1, r8
	str	r0, [r1]
	mov	r2, r9
	ldrb	r0, [r2]
	mul	r0, r0, r4
	add	r0, r7, r0
	mov	r1, #0x38
	bl	GetMonData
	lsl	r0, r0, #0x1
	mov	r1, #0x5
	bl	__udivsi3
	add	r0, r0, #0x2
	mov	r2, r8
	ldr	r1, [r2]
	mul	r0, r0, r1
	str	r0, [r2]
	ldr	r3, .L3690+0x20
	ldr	r1, .L3690+0x24
	ldrb	r2, [r1]
	mov	r1, #0x58
	mul	r1, r1, r2
	add	r1, r1, r3
	ldrh	r2, [r1]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r1, [r1, #0x2]
	bl	__divsi3
	mov	r1, r8
	str	r0, [r1]
	mov	r1, #0x32
	bl	__divsi3
	add	r2, r0, #0x2
	mov	r0, r8
	str	r2, [r0]
	ldr	r1, .L3690+0x28
	ldrb	r0, [r6]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bge	.L3683	@cond_branch
	lsl	r0, r2, #0x4
	sub	r0, r0, r2
	mov	r1, #0xa
	bl	__divsi3
	mov	r1, r8
	str	r0, [r1]
.L3683:
	mov	r2, r9
	ldrb	r0, [r2]
	add	r0, r0, #0x1
	strb	r0, [r2]
	b	.L3675
.L3691:
	.align	2, 0
.L3690:
	.word	gBattleCommunication
	.word	gBattleTextBuff1
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	gBattleMoveDamage
	.word	gBaseStats
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gProtectStructs
.L3682:
	mov	r0, r8
	cmp	r0, #0
	beq	.L3685	@cond_branch
	ldr	r3, .L3692
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	b	.L3687
.L3693:
	.align	2, 0
.L3692:
	.word	gBattlescriptCurrInstr
.L3685:
	ldr	r3, .L3694
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
.L3687:
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3675:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3695:
	.align	2, 0
.L3694:
	.word	gBattlescriptCurrInstr
.Lfe230:
	.size	 atkC4_trydobeatup,.Lfe230-atkC4_trydobeatup
	.align	2, 0
	.type	 atkC5_setsemiinvulnerablebit,function
	.thumb_func
atkC5_setsemiinvulnerablebit:
	push	{lr}
	ldr	r0, .L3706
	ldrh	r1, [r0]
	cmp	r1, #0x5b
	beq	.L3700	@cond_branch
	cmp	r1, #0x5b
	bgt	.L3704	@cond_branch
	cmp	r1, #0x13
	beq	.L3699	@cond_branch
	b	.L3697
.L3707:
	.align	2, 0
.L3706:
	.word	gCurrentMove
.L3704:
	ldr	r0, .L3708
	cmp	r1, r0
	beq	.L3701	@cond_branch
	add	r0, r0, #0x31
	cmp	r1, r0
	bne	.L3697	@cond_branch
.L3699:
	ldr	r2, .L3708+0x4
	ldr	r0, .L3708+0x8
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x40
	b	.L3705
.L3709:
	.align	2, 0
.L3708:
	.word	0x123
	.word	gStatuses3
	.word	gBattlerAttacker
.L3700:
	ldr	r2, .L3710
	ldr	r0, .L3710+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x80
	b	.L3705
.L3711:
	.align	2, 0
.L3710:
	.word	gStatuses3
	.word	gBattlerAttacker
.L3701:
	ldr	r2, .L3712
	ldr	r0, .L3712+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0xb
.L3705:
	orr	r0, r0, r2
	str	r0, [r1]
.L3697:
	ldr	r1, .L3712+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L3713:
	.align	2, 0
.L3712:
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe231:
	.size	 atkC5_setsemiinvulnerablebit,.Lfe231-atkC5_setsemiinvulnerablebit
	.align	2, 0
	.type	 atkC6_clearsemiinvulnerablebit,function
	.thumb_func
atkC6_clearsemiinvulnerablebit:
	push	{lr}
	ldr	r0, .L3724
	ldrh	r1, [r0]
	cmp	r1, #0x5b
	beq	.L3718	@cond_branch
	cmp	r1, #0x5b
	bgt	.L3722	@cond_branch
	cmp	r1, #0x13
	beq	.L3717	@cond_branch
	b	.L3715
.L3725:
	.align	2, 0
.L3724:
	.word	gCurrentMove
.L3722:
	ldr	r0, .L3726
	cmp	r1, r0
	beq	.L3719	@cond_branch
	add	r0, r0, #0x31
	cmp	r1, r0
	bne	.L3715	@cond_branch
.L3717:
	ldr	r2, .L3726+0x4
	ldr	r0, .L3726+0x8
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x41
	neg	r2, r2
	b	.L3723
.L3727:
	.align	2, 0
.L3726:
	.word	0x123
	.word	gStatuses3
	.word	gBattlerAttacker
.L3718:
	ldr	r2, .L3728
	ldr	r0, .L3728+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x81
	neg	r2, r2
	b	.L3723
.L3729:
	.align	2, 0
.L3728:
	.word	gStatuses3
	.word	gBattlerAttacker
.L3719:
	ldr	r2, .L3730
	ldr	r0, .L3730+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	ldr	r2, .L3730+0x8
.L3723:
	and	r0, r0, r2
	str	r0, [r1]
.L3715:
	ldr	r1, .L3730+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L3731:
	.align	2, 0
.L3730:
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	-0x40001
	.word	gBattlescriptCurrInstr
.Lfe232:
	.size	 atkC6_clearsemiinvulnerablebit,.Lfe232-atkC6_clearsemiinvulnerablebit
	.align	2, 0
	.type	 atkC7_setminimize,function
	.thumb_func
atkC7_setminimize:
	push	{lr}
	ldr	r0, .L3734
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3733	@cond_branch
	ldr	r2, .L3734+0x4
	ldr	r0, .L3734+0x8
	ldrb	r1, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	orr	r0, r0, r2
	str	r0, [r1]
.L3733:
	ldr	r1, .L3734+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L3735:
	.align	2, 0
.L3734:
	.word	gHitMarker
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe233:
	.size	 atkC7_setminimize,.Lfe233-atkC7_setminimize
	.align	2, 0
	.type	 atkC8_sethail,function
	.thumb_func
atkC8_sethail:
	push	{lr}
	ldr	r3, .L3739
	ldrh	r1, [r3]
	mov	r2, #0x80
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3737	@cond_branch
	ldr	r2, .L3739+0x4
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L3739+0x8
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	b	.L3738
.L3740:
	.align	2, 0
.L3739:
	.word	gBattleWeather
	.word	gMoveResultFlags
	.word	gBattleCommunication
.L3737:
	strh	r2, [r3]
	ldr	r0, .L3741
	mov	r1, #0x5
	strb	r1, [r0, #0x5]
	ldr	r0, .L3741+0x4
	add	r0, r0, #0x28
	strb	r1, [r0]
.L3738:
	ldr	r1, .L3741+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L3742:
	.align	2, 0
.L3741:
	.word	gBattleCommunication
	.word	gWishFutureKnock
	.word	gBattlescriptCurrInstr
.Lfe234:
	.size	 atkC8_sethail,.Lfe234-atkC8_sethail
	.align	2, 0
	.type	 atkC9_jumpifattackandspecialattackcannotfall,function
	.thumb_func
atkC9_jumpifattackandspecialattackcannotfall:
	push	{r4, lr}
	ldr	r2, .L3746
	ldr	r0, .L3746+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r0, r2
	mov	r0, #0x19
	ldrsb	r0, [r1, r0]
	add	r3, r2, #0
	cmp	r0, #0
	bne	.L3744	@cond_branch
	mov	r0, #0x1c
	ldrsb	r0, [r1, r0]
	cmp	r0, #0
	bne	.L3744	@cond_branch
	ldr	r0, .L3746+0x8
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0x1
	beq	.L3744	@cond_branch
	ldr	r3, .L3746+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3745
.L3747:
	.align	2, 0
.L3746:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.L3744:
	ldr	r4, .L3748
	ldr	r0, .L3748+0x4
	ldrb	r0, [r0]
	strb	r0, [r4]
	ldr	r2, .L3748+0x8
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0, #0x28]
	str	r0, [r2]
	ldr	r1, .L3748+0xc
	mov	r0, #0x0
	bl	BtlController_EmitHealthBarUpdate
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L3748+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3745:
	pop	{r4}
	pop	{r0}
	bx	r0
.L3749:
	.align	2, 0
.L3748:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	0x7fff
	.word	gBattlescriptCurrInstr
.Lfe235:
	.size	 atkC9_jumpifattackandspecialattackcannotfall,.Lfe235-atkC9_jumpifattackandspecialattackcannotfall
	.align	2, 0
	.type	 atkCA_setforcedtarget,function
	.thumb_func
atkCA_setforcedtarget:
	push	{r4, r5, lr}
	ldr	r4, .L3751
	ldrb	r0, [r4]
	bl	GetBattlerSide
	ldr	r5, .L3751+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	mov	r0, #0x1
	strb	r0, [r1, #0x8]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r4]
	strb	r0, [r1, #0x9]
	ldr	r1, .L3751+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L3752:
	.align	2, 0
.L3751:
	.word	gBattlerAttacker
	.word	gSideTimers
	.word	gBattlescriptCurrInstr
.Lfe236:
	.size	 atkCA_setforcedtarget,.Lfe236-atkCA_setforcedtarget
	.align	2, 0
	.type	 atkCB_setcharge,function
	.thumb_func
atkCB_setcharge:
	push	{r4, lr}
	ldr	r0, .L3754
	ldr	r3, .L3754+0x4
	ldrb	r1, [r3]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r4, .L3754+0x8
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r2, [r0, #0x12]
	mov	r1, #0x10
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0, #0x12]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r2, [r0, #0x12]
	mov	r1, #0xf
	and	r1, r1, r2
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0, #0x12]
	ldr	r1, .L3754+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L3755:
	.align	2, 0
.L3754:
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	gDisableStructs
	.word	gBattlescriptCurrInstr
.Lfe237:
	.size	 atkCB_setcharge,.Lfe237-atkCB_setcharge
	.align	2, 0
	.type	 atkCC_callterrainattack,function
	.thumb_func
atkCC_callterrainattack:
	push	{r4, lr}
	ldr	r2, .L3757
	ldr	r0, [r2]
	ldr	r1, .L3757+0x4
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r4, .L3757+0x8
	ldr	r1, .L3757+0xc
	ldr	r0, .L3757+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r4]
	ldrh	r0, [r4]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L3757+0x14
	strb	r0, [r1]
	ldr	r3, .L3757+0x18
	ldr	r2, .L3757+0x1c
	ldrh	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	bl	BattleScriptPush
	ldr	r1, .L3757+0x20
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L3758:
	.align	2, 0
.L3757:
	.word	gHitMarker
	.word	-0x401
	.word	gCurrentMove
	.word	sNaturePowerMoves
	.word	gBattleTerrain
	.word	gBattlerTarget
	.word	gBattleScriptsForMoveEffects
	.word	gBattleMoves
	.word	gBattlescriptCurrInstr
.Lfe238:
	.size	 atkCC_callterrainattack,.Lfe238-atkCC_callterrainattack
	.align	2, 0
	.type	 atkCD_cureifburnedparalysedorpoisoned,function
	.thumb_func
atkCD_cureifburnedparalysedorpoisoned:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L3762
	ldr	r3, .L3762+0x4
	ldrb	r0, [r3]
	mov	r6, #0x58
	mul	r0, r0, r6
	add	r5, r1, #0
	add	r5, r5, #0x4c
	add	r2, r0, r5
	ldr	r0, [r2]
	mov	r1, #0xd8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3760	@cond_branch
	mov	r0, #0x0
	str	r0, [r2]
	ldr	r1, .L3762+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	ldr	r4, .L3762+0xc
	ldrb	r0, [r3]
	strb	r0, [r4]
	ldrb	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r5
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r2, #0x0
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	b	.L3761
.L3763:
	.align	2, 0
.L3762:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.L3760:
	ldr	r3, .L3764
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3761:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L3765:
	.align	2, 0
.L3764:
	.word	gBattlescriptCurrInstr
.Lfe239:
	.size	 atkCD_cureifburnedparalysedorpoisoned,.Lfe239-atkCD_cureifburnedparalysedorpoisoned
	.align	2, 0
	.type	 atkCE_settorment,function
	.thumb_func
atkCE_settorment:
	push	{lr}
	ldr	r1, .L3769
	ldr	r0, .L3769+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x18
	cmp	r1, #0
	bge	.L3767	@cond_branch
	ldr	r3, .L3769+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3768
.L3770:
	.align	2, 0
.L3769:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L3767:
	orr	r1, r1, r2
	str	r1, [r0]
	ldr	r1, .L3771
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3768:
	pop	{r0}
	bx	r0
.L3772:
	.align	2, 0
.L3771:
	.word	gBattlescriptCurrInstr
.Lfe240:
	.size	 atkCE_settorment,.Lfe240-atkCE_settorment
	.align	2, 0
	.type	 atkCF_jumpifnodamage,function
	.thumb_func
atkCF_jumpifnodamage:
	push	{lr}
	ldr	r2, .L3777
	ldr	r0, .L3777+0x4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r0, r2, #0x4
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L3775	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L3774	@cond_branch
.L3775:
	ldr	r1, .L3777+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3776
.L3778:
	.align	2, 0
.L3777:
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.L3774:
	ldr	r3, .L3779
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3776:
	pop	{r0}
	bx	r0
.L3780:
	.align	2, 0
.L3779:
	.word	gBattlescriptCurrInstr
.Lfe241:
	.size	 atkCF_jumpifnodamage,.Lfe241-atkCF_jumpifnodamage
	.align	2, 0
	.type	 atkD0_settaunt,function
	.thumb_func
atkD0_settaunt:
	push	{r4, lr}
	ldr	r4, .L3784
	ldr	r3, .L3784+0x4
	ldrb	r0, [r3]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r1, r4
	ldrb	r1, [r2, #0x13]
	lsl	r0, r1, #0x1c
	cmp	r0, #0
	bne	.L3782	@cond_branch
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2, #0x13]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r2, [r0, #0x13]
	mov	r1, #0xf
	and	r1, r1, r2
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0, #0x13]
	ldr	r1, .L3784+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3783
.L3785:
	.align	2, 0
.L3784:
	.word	gDisableStructs
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L3782:
	ldr	r3, .L3786
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3783:
	pop	{r4}
	pop	{r0}
	bx	r0
.L3787:
	.align	2, 0
.L3786:
	.word	gBattlescriptCurrInstr
.Lfe242:
	.size	 atkD0_settaunt,.Lfe242-atkD0_settaunt
	.align	2, 0
	.type	 atkD1_trysethelpinghand,function
	.thumb_func
atkD1_trysethelpinghand:
	push	{r4, lr}
	ldr	r4, .L3791
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r3, .L3791+0x4
	strb	r0, [r3]
	ldr	r0, .L3791+0x8
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3789	@cond_branch
	ldr	r0, .L3791+0xc
	ldrb	r1, [r0]
	ldr	r2, .L3791+0x10
	ldrb	r3, [r3]
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L3789	@cond_branch
	ldr	r1, .L3791+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	blt	.L3789	@cond_branch
	lsl	r0, r3, #0x4
	add	r2, r0, r1
	ldrb	r1, [r2]
	lsl	r0, r1, #0x1c
	cmp	r0, #0
	blt	.L3789	@cond_branch
	mov	r0, #0x8
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L3791+0x18
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3790
.L3792:
	.align	2, 0
.L3791:
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
.L3789:
	ldr	r3, .L3793
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3790:
	pop	{r4}
	pop	{r0}
	bx	r0
.L3794:
	.align	2, 0
.L3793:
	.word	gBattlescriptCurrInstr
.Lfe243:
	.size	 atkD1_trysethelpinghand,.Lfe243-atkD1_trysethelpinghand
	.align	2, 0
	.type	 atkD2_tryswapitems,function
	.thumb_func
atkD2_tryswapitems:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r4, .L3814
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3803	@cond_branch
	ldr	r0, .L3814+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L3796	@cond_branch
	ldr	r0, [r4]
	ldr	r1, .L3814+0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3803	@cond_branch
.L3796:
	ldr	r6, .L3814+0x4
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r7, .L3814+0xc
	ldrb	r0, [r7]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L3814
	ldr	r0, [r0]
	ldr	r1, .L3814+0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3799	@cond_branch
	ldr	r0, .L3814+0x10
	add	r2, r0, #0
	add	r2, r2, #0x29
	add	r0, r4, r2
	ldrb	r1, [r0]
	ldr	r4, .L3814+0x14
	ldr	r3, .L3814+0x18
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L3803	@cond_branch
	add	r0, r5, r2
	ldrb	r1, [r0]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L3803	@cond_branch
.L3799:
	ldr	r0, .L3814+0x1c
	mov	r8, r0
	ldr	r1, .L3814+0x4
	ldrb	r4, [r1]
	mov	r5, #0x58
	mov	r0, r4
	mul	r0, r0, r5
	add	r0, r0, r8
	mov	r9, r0
	ldrh	r3, [r0, #0x2e]
	add	r1, r3, #0
	cmp	r1, #0
	bne	.L3804	@cond_branch
	ldr	r0, .L3814+0xc
	ldrb	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r8
	ldrh	r0, [r0, #0x2e]
	cmp	r0, #0
	beq	.L3803	@cond_branch
.L3804:
	cmp	r1, #0xaf
	beq	.L3803	@cond_branch
	ldr	r7, .L3814+0xc
	ldrb	r0, [r7]
	mul	r0, r0, r5
	mov	r2, r8
	add	r1, r0, r2
	ldrh	r2, [r1, #0x2e]
	cmp	r2, #0xaf
	beq	.L3803	@cond_branch
	add	r0, r3, #0
	sub	r0, r0, #0x79
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xb
	bls	.L3803	@cond_branch
	add	r0, r2, #0
	sub	r0, r0, #0x79
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xb
	bhi	.L3802	@cond_branch
.L3803:
	ldr	r3, .L3814+0x20
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3798
.L3815:
	.align	2, 0
.L3814:
	.word	gBattleTypeFlags
	.word	gBattlerAttacker
	.word	0xa3f0902
	.word	gBattlerTarget
	.word	gWishFutureKnock
	.word	gBitTable
	.word	gBattlerPartyIndexes
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
.L3802:
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x3c
	bne	.L3806	@cond_branch
	ldr	r1, .L3816
	ldr	r0, .L3816+0x4
	str	r0, [r1]
	ldr	r1, .L3816+0x8
	ldrb	r0, [r7]
	mul	r0, r0, r5
	add	r0, r0, r8
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	ldrb	r1, [r1]
	bl	RecordAbilityBattle
	b	.L3798
.L3817:
	.align	2, 0
.L3816:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_StickyHoldActivates
	.word	gLastUsedAbility
.L3806:
	ldr	r3, .L3818
	mov	sl, r3
	lsl	r0, r4, #0x1
	add	r0, r0, #0xd0
	ldr	r1, [r3]
	add	r6, r1, r0
	mov	r0, r9
	ldrh	r0, [r0, #0x2e]
	mov	r9, r0
	strh	r2, [r6]
	ldr	r1, .L3818+0x4
	ldrb	r0, [r1]
	mul	r0, r0, r5
	add	r0, r0, r8
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r7]
	mul	r0, r0, r5
	add	r0, r0, r8
	mov	r2, r9
	strh	r2, [r0, #0x2e]
	ldr	r4, .L3818+0x8
	ldr	r3, .L3818+0x4
	ldrb	r0, [r3]
	strb	r0, [r4]
	str	r6, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldr	r1, .L3818+0x4
	ldrb	r0, [r1]
	bl	MarkBattlerForControllerExec
	ldrb	r0, [r7]
	strb	r0, [r4]
	ldrb	r0, [r7]
	mul	r0, r0, r5
	mov	r1, r8
	add	r1, r1, #0x2e
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r7]
	bl	MarkBattlerForControllerExec
	ldrb	r0, [r7]
	mov	r2, sl
	ldr	r1, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0xc8
	mov	r3, #0x0
	strb	r3, [r0]
	ldrb	r0, [r7]
	ldr	r1, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0xc9
	strb	r3, [r0]
	ldr	r1, .L3818+0x4
	ldrb	r0, [r1]
	ldr	r1, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0xc8
	strb	r3, [r0]
	ldr	r2, .L3818+0x4
	ldrb	r0, [r2]
	mov	r3, sl
	ldr	r1, [r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0xc9
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r1, .L3818+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	ldr	r1, .L3818+0x10
	mov	r3, #0xfd
	strb	r3, [r1]
	mov	r2, #0xa
	strb	r2, [r1, #0x1]
	ldrh	r0, [r6]
	strb	r0, [r1, #0x2]
	ldrh	r0, [r6]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L3818+0x14
	strb	r3, [r1]
	strb	r2, [r1, #0x1]
	mov	r2, r9
	strb	r2, [r1, #0x2]
	mov	r3, r9
	lsr	r0, r3, #0x8
	strb	r0, [r1, #0x3]
	mov	r0, #0x1
	neg	r0, r0
	strb	r0, [r1, #0x4]
	cmp	r3, #0
	beq	.L3812	@cond_branch
	ldrh	r0, [r6]
	cmp	r0, #0
	beq	.L3810	@cond_branch
	ldr	r1, .L3818+0x18
	mov	r0, #0x2
	b	.L3813
.L3819:
	.align	2, 0
.L3818:
	.word	gBattleStruct
	.word	gBattlerAttacker
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	gBattleTextBuff1
	.word	gBattleTextBuff2
	.word	gBattleCommunication
.L3812:
	ldrh	r0, [r6]
	cmp	r0, #0
	beq	.L3810	@cond_branch
	ldr	r0, .L3820
	mov	r1, #0x0
	strb	r1, [r0, #0x5]
	b	.L3798
.L3821:
	.align	2, 0
.L3820:
	.word	gBattleCommunication
.L3810:
	ldr	r1, .L3822
	mov	r0, #0x1
.L3813:
	strb	r0, [r1, #0x5]
.L3798:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3823:
	.align	2, 0
.L3822:
	.word	gBattleCommunication
.Lfe244:
	.size	 atkD2_tryswapitems,.Lfe244-atkD2_tryswapitems
	.align	2, 0
	.type	 atkD3_trycopyability,function
	.thumb_func
atkD3_trycopyability:
	push	{r4, lr}
	ldr	r3, .L3827
	ldr	r4, .L3827+0x4
	ldrb	r0, [r4]
	mov	r2, #0x58
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x20
	ldrb	r1, [r0]
	add	r0, r1, #0
	cmp	r0, #0
	beq	.L3825	@cond_branch
	cmp	r0, #0x19
	beq	.L3825	@cond_branch
	ldr	r0, .L3827+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x20
	strb	r1, [r0]
	ldr	r1, .L3827+0xc
	ldrb	r0, [r4]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r1, .L3827+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3826
.L3828:
	.align	2, 0
.L3827:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gLastUsedAbility
	.word	gBattlescriptCurrInstr
.L3825:
	ldr	r3, .L3829
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3826:
	pop	{r4}
	pop	{r0}
	bx	r0
.L3830:
	.align	2, 0
.L3829:
	.word	gBattlescriptCurrInstr
.Lfe245:
	.size	 atkD3_trycopyability,.Lfe245-atkD3_trycopyability
	.align	2, 0
	.type	 atkD4_trywish,function
	.thumb_func
atkD4_trywish:
	push	{r4, r5, r6, r7, lr}
	ldr	r7, .L3844
	ldr	r2, [r7]
	ldrb	r3, [r2, #0x1]
	cmp	r3, #0
	beq	.L3833	@cond_branch
	cmp	r3, #0x1
	beq	.L3836	@cond_branch
	b	.L3832
.L3845:
	.align	2, 0
.L3844:
	.word	gBattlescriptCurrInstr
.L3833:
	ldr	r1, .L3846
	ldr	r4, .L3846+0x4
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r5, [r4]
	add	r3, r0, r5
	ldrb	r0, [r3]
	cmp	r0, #0
	bne	.L3843	@cond_branch
	mov	r0, #0x2
	strb	r0, [r3]
	ldrb	r0, [r4]
	add	r1, r1, #0x24
	add	r1, r0, r1
	ldr	r2, .L3846+0x8
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldr	r0, [r7]
	add	r0, r0, #0x6
	b	.L3842
.L3847:
	.align	2, 0
.L3846:
	.word	gWishFutureKnock
	.word	gBattlerAttacker
	.word	gBattlerPartyIndexes
.L3836:
	ldr	r1, .L3848
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x4
	strb	r0, [r1, #0x1]
	ldr	r4, .L3848+0x4
	ldrb	r0, [r4]
	strb	r0, [r1, #0x2]
	ldr	r0, .L3848+0x8
	add	r0, r0, #0x24
	ldrb	r5, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	ldr	r1, .L3848+0xc
	ldr	r6, .L3848+0x10
	ldrb	r0, [r4]
	mov	r5, #0x58
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r0, [r0, #0x2c]
	lsr	r0, r0, #0x1
	str	r0, [r1]
	cmp	r0, #0
	bne	.L3837	@cond_branch
	str	r3, [r1]
.L3837:
	ldr	r0, [r1]
	neg	r0, r0
	str	r0, [r1]
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r0, r0, r6
	ldrh	r1, [r0, #0x28]
	ldrh	r0, [r0, #0x2c]
	cmp	r1, r0
	bne	.L3838	@cond_branch
.L3843:
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r7]
	b	.L3832
.L3849:
	.align	2, 0
.L3848:
	.word	gBattleTextBuff1
	.word	gBattlerTarget
	.word	gWishFutureKnock
	.word	gBattleMoveDamage
	.word	gBattleMons
.L3838:
	add	r0, r2, #0x6
.L3842:
	str	r0, [r7]
.L3832:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe246:
	.size	 atkD4_trywish,.Lfe246-atkD4_trywish
	.align	2, 0
	.type	 atkD5_trysetroots,function
	.thumb_func
atkD5_trysetroots:
	push	{lr}
	ldr	r1, .L3853
	ldr	r0, .L3853+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0x3
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L3851	@cond_branch
	ldr	r3, .L3853+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3852
.L3854:
	.align	2, 0
.L3853:
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.L3851:
	orr	r1, r1, r3
	str	r1, [r2]
	ldr	r1, .L3855
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3852:
	pop	{r0}
	bx	r0
.L3856:
	.align	2, 0
.L3855:
	.word	gBattlescriptCurrInstr
.Lfe247:
	.size	 atkD5_trysetroots,.Lfe247-atkD5_trysetroots
	.align	2, 0
	.type	 atkD6_doubledamagedealtifdamaged,function
	.thumb_func
atkD6_doubledamagedealtifdamaged:
	push	{lr}
	ldr	r3, .L3861
	ldr	r0, .L3861+0x4
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r0, r3, #0x4
	add	r0, r2, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L3860	@cond_branch
	add	r0, r2, r3
	ldr	r1, .L3861+0x8
	ldrb	r0, [r0, #0xc]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L3859	@cond_branch
.L3860:
	add	r0, r3, #0
	add	r0, r0, #0x8
	add	r0, r2, r0
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L3858	@cond_branch
	add	r0, r2, r3
	ldr	r1, .L3861+0x8
	ldrb	r0, [r0, #0xd]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L3858	@cond_branch
.L3859:
	ldr	r1, .L3861+0xc
	mov	r0, #0x2
	strb	r0, [r1, #0xe]
.L3858:
	ldr	r1, .L3861+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L3862:
	.align	2, 0
.L3861:
	.word	gProtectStructs
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
.Lfe248:
	.size	 atkD6_doubledamagedealtifdamaged,.Lfe248-atkD6_doubledamagedealtifdamaged
	.align	2, 0
	.type	 atkD7_setyawn,function
	.thumb_func
atkD7_setyawn:
	push	{r4, lr}
	ldr	r1, .L3867
	ldr	r0, .L3867+0x4
	ldrb	r3, [r0]
	lsl	r0, r3, #0x2
	add	r4, r0, r1
	ldr	r2, [r4]
	mov	r0, #0xc0
	lsl	r0, r0, #0x5
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L3865	@cond_branch
	ldr	r1, .L3867+0x8
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L3864	@cond_branch
.L3865:
	ldr	r3, .L3867+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3866
.L3868:
	.align	2, 0
.L3867:
	.word	gStatuses3
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBattlescriptCurrInstr
.L3864:
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	orr	r2, r2, r0
	str	r2, [r4]
	ldr	r1, .L3869
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3866:
	pop	{r4}
	pop	{r0}
	bx	r0
.L3870:
	.align	2, 0
.L3869:
	.word	gBattlescriptCurrInstr
.Lfe249:
	.size	 atkD7_setyawn,.Lfe249-atkD7_setyawn
	.align	2, 0
	.type	 atkD8_setdamagetohealthdifference,function
	.thumb_func
atkD8_setdamagetohealthdifference:
	push	{lr}
	ldr	r2, .L3874
	ldr	r0, .L3874+0x4
	ldrb	r0, [r0]
	mov	r1, #0x58
	mul	r0, r0, r1
	add	r3, r0, r2
	ldr	r0, .L3874+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r1
	add	r1, r0, r2
	ldrh	r0, [r3, #0x28]
	ldrh	r2, [r1, #0x28]
	cmp	r0, r2
	bhi	.L3872	@cond_branch
	ldr	r3, .L3874+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3873
.L3875:
	.align	2, 0
.L3874:
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.L3872:
	ldr	r2, .L3876
	ldrh	r0, [r3, #0x28]
	ldrh	r1, [r1, #0x28]
	sub	r0, r0, r1
	str	r0, [r2]
	ldr	r1, .L3876+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3873:
	pop	{r0}
	bx	r0
.L3877:
	.align	2, 0
.L3876:
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
.Lfe250:
	.size	 atkD8_setdamagetohealthdifference,.Lfe250-atkD8_setdamagetohealthdifference
	.align	2, 0
	.type	 atkD9_scaledamagebyhealthratio,function
	.thumb_func
atkD9_scaledamagebyhealthratio:
	push	{r4, lr}
	ldr	r4, .L3881
	ldrh	r0, [r4]
	cmp	r0, #0
	bne	.L3879	@cond_branch
	ldr	r2, .L3881+0x4
	ldr	r0, .L3881+0x8
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r3, [r0, #0x1]
	ldr	r2, .L3881+0xc
	ldr	r0, .L3881+0x10
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r0, [r1, #0x28]
	mul	r0, r0, r3
	ldrh	r1, [r1, #0x2c]
	bl	__divsi3
	strh	r0, [r4]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L3879	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4]
.L3879:
	ldr	r1, .L3881+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L3882:
	.align	2, 0
.L3881:
	.word	gDynamicBasePower
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe251:
	.size	 atkD9_scaledamagebyhealthratio,.Lfe251-atkD9_scaledamagebyhealthratio
	.align	2, 0
	.type	 atkDA_tryswapabilities,function
	.thumb_func
atkDA_tryswapabilities:
	push	{r4, r5, r6, lr}
	ldr	r5, .L3888
	ldr	r0, .L3888+0x4
	ldrb	r0, [r0]
	mov	r4, #0x58
	mul	r0, r0, r4
	add	r0, r0, r5
	add	r2, r0, #0
	add	r2, r2, #0x20
	ldrb	r1, [r2]
	cmp	r1, #0
	bne	.L3886	@cond_branch
	ldr	r0, .L3888+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r4
	add	r0, r0, r5
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L3885	@cond_branch
.L3886:
	cmp	r1, #0x19
	beq	.L3885	@cond_branch
	ldr	r6, .L3888+0x8
	ldrb	r0, [r6]
	mul	r0, r0, r4
	add	r0, r0, r5
	add	r0, r0, #0x20
	ldrb	r3, [r0]
	cmp	r3, #0x19
	beq	.L3885	@cond_branch
	ldr	r0, .L3888+0xc
	ldrb	r1, [r0]
	mov	r0, #0x29
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3884	@cond_branch
.L3885:
	ldr	r3, .L3888+0x10
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3887
.L3889:
	.align	2, 0
.L3888:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gMoveResultFlags
	.word	gBattlescriptCurrInstr
.L3884:
	ldrb	r1, [r2]
	strb	r3, [r2]
	ldrb	r0, [r6]
	mul	r0, r0, r4
	add	r0, r0, r5
	add	r0, r0, #0x20
	strb	r1, [r0]
	ldr	r1, .L3890
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3887:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L3891:
	.align	2, 0
.L3890:
	.word	gBattlescriptCurrInstr
.Lfe252:
	.size	 atkDA_tryswapabilities,.Lfe252-atkDA_tryswapabilities
	.align	2, 0
	.type	 atkDB_tryimprison,function
	.thumb_func
atkDB_tryimprison:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r1, .L3918
	ldr	r4, .L3918+0x4
	ldrb	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3893	@cond_branch
	b	.L3916
.L3919:
	.align	2, 0
.L3918:
	.word	gStatuses3
	.word	gBattlerAttacker
.L3915:
	ldr	r0, .L3920
	mov	r2, r9
	ldrb	r1, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	orr	r0, r0, r2
	str	r0, [r1]
	ldr	r1, .L3920+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3896
.L3921:
	.align	2, 0
.L3920:
	.word	gStatuses3
	.word	gBattlescriptCurrInstr
.L3893:
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrb	r0, [r4]
	bl	PressurePPLoseOnUsingImprison
	mov	r6, #0x0
	b	.L3917
.L3898:
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r8, r0
	beq	.L3897	@cond_branch
	mov	r4, #0x0
	ldr	r7, .L3922
	mov	r9, r7
	ldr	r0, .L3922+0x4
	mov	ip, r0
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r2, ip
	add	r2, r2, #0xc
	mov	r1, #0x58
	mul	r0, r0, r1
	add	r3, r0, r2
	mov	r5, r6
	mul	r5, r5, r1
.L3903:
	mov	r2, #0x0
	ldrh	r1, [r3]
	mov	r0, ip
	add	r0, r0, #0xc
	add	r0, r5, r0
.L3907:
	ldrh	r7, [r0]
	cmp	r1, r7
	bne	.L3906	@cond_branch
	cmp	r1, #0
	bne	.L3905	@cond_branch
.L3906:
	add	r0, r0, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L3907	@cond_branch
.L3905:
	cmp	r2, #0x4
	bne	.L3901	@cond_branch
	add	r3, r3, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L3903	@cond_branch
.L3901:
	cmp	r4, #0x4
	bne	.L3915	@cond_branch
.L3897:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L3917:
	ldr	r0, .L3922+0x8
	ldrb	r0, [r0]
	cmp	r6, r0
	bcc	.L3898	@cond_branch
.L3896:
	ldr	r0, .L3922+0x8
	ldrb	r0, [r0]
	cmp	r6, r0
	bne	.L3894	@cond_branch
.L3916:
	ldr	r3, .L3922+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3894:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3923:
	.align	2, 0
.L3922:
	.word	gBattlerAttacker
	.word	gBattleMons
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
.Lfe253:
	.size	 atkDB_tryimprison,.Lfe253-atkDB_tryimprison
	.align	2, 0
	.type	 atkDC_trysetgrudge,function
	.thumb_func
atkDC_trysetgrudge:
	push	{lr}
	ldr	r1, .L3927
	ldr	r0, .L3927+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0x7
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L3925	@cond_branch
	ldr	r3, .L3927+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3926
.L3928:
	.align	2, 0
.L3927:
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.L3925:
	orr	r1, r1, r3
	str	r1, [r2]
	ldr	r1, .L3929
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3926:
	pop	{r0}
	bx	r0
.L3930:
	.align	2, 0
.L3929:
	.word	gBattlescriptCurrInstr
.Lfe254:
	.size	 atkDC_trysetgrudge,.Lfe254-atkDC_trysetgrudge
	.align	2, 0
	.type	 atkDD_weightdamagecalculation,function
	.thumb_func
atkDD_weightdamagecalculation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r5, #0x0
	ldr	r2, .L3940
	ldrh	r0, [r2]
	ldr	r1, .L3940+0x4
	cmp	r0, r1
	beq	.L3938	@cond_branch
	add	r6, r2, #0
	ldr	r0, .L3940+0x8
	mov	r8, r0
	add	r7, r1, #0
	add	r4, r6, #0
.L3935:
	ldr	r0, .L3940+0xc
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r8
	ldrh	r0, [r0]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	bl	GetPokedexHeightWeight
	ldrh	r1, [r4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r1, r0
	bhi	.L3933	@cond_branch
	add	r4, r4, #0x4
	add	r5, r5, #0x2
	ldrh	r0, [r4]
	cmp	r0, r7
	bne	.L3935	@cond_branch
.L3933:
	lsl	r0, r5, #0x1
	add	r0, r0, r6
	ldrh	r1, [r0]
	ldr	r0, .L3940+0x4
	cmp	r1, r0
	beq	.L3938	@cond_branch
	ldr	r0, .L3940+0x10
	add	r1, r5, #0x1
	lsl	r1, r1, #0x1
	add	r1, r1, r6
	ldrh	r1, [r1]
	strh	r1, [r0]
	b	.L3939
.L3941:
	.align	2, 0
.L3940:
	.word	sWeightToDamageTable
	.word	0xffff
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gDynamicBasePower
.L3938:
	ldr	r1, .L3942
	mov	r0, #0x78
	strh	r0, [r1]
.L3939:
	ldr	r1, .L3942+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3943:
	.align	2, 0
.L3942:
	.word	gDynamicBasePower
	.word	gBattlescriptCurrInstr
.Lfe255:
	.size	 atkDD_weightdamagecalculation,.Lfe255-atkDD_weightdamagecalculation
	.align	2, 0
	.type	 atkDE_assistattackselect,function
	.thumb_func
atkDE_assistattackselect:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	mov	r0, #0x0
	mov	sl, r0
	ldr	r0, .L3972
	ldr	r0, [r0]
	add	r0, r0, #0x18
	str	r0, [sp, #0x4]
	ldr	r0, .L3972+0x4
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	mov	r1, #0x1
	and	r1, r1, r0
	ldr	r0, .L3972+0x8
	str	r0, [sp]
	cmp	r1, #0
	beq	.L3945	@cond_branch
	ldr	r1, .L3972+0xc
	str	r1, [sp]
.L3945:
	mov	r2, #0x0
.L3950:
	ldr	r1, .L3972+0x10
	ldr	r0, .L3972+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r1, r2, #0x1
	str	r1, [sp, #0x8]
	ldrh	r0, [r0]
	cmp	r2, r0
	beq	.L3949	@cond_branch
	mov	r0, #0x64
	mov	r6, r2
	mul	r6, r6, r0
	ldr	r0, [sp]
	add	r4, r0, r6
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L3949	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	beq	.L3949	@cond_branch
	mov	r5, #0x0
	ldr	r1, .L3972+0x14
	mov	r8, r1
	mov	r9, r6
	mov	r1, sl
	lsl	r0, r1, #0x1
	ldr	r1, [sp, #0x4]
	add	r6, r0, r1
.L3957:
	mov	r7, #0x0
	add	r1, r5, #0
	add	r1, r1, #0xd
	ldr	r0, [sp]
	add	r0, r0, r9
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r4, #0
	bl	IsInvalidForSleepTalkOrAssist
	lsl	r0, r0, #0x18
	add	r1, r5, #0x1
	cmp	r0, #0
	bne	.L3956	@cond_branch
	ldr	r0, .L3972+0x18
	ldrh	r2, [r0]
	add	r3, r0, #0
	cmp	r2, r8
	beq	.L3971	@cond_branch
	cmp	r4, r2
	beq	.L3960	@cond_branch
	ldr	r5, .L3972+0x14
	add	r2, r3, #0
.L3961:
	add	r2, r2, #0x2
	add	r7, r7, #0x1
	ldrh	r0, [r2]
	cmp	r0, r5
	beq	.L3971	@cond_branch
	cmp	r4, r0
	bne	.L3961	@cond_branch
.L3960:
	lsl	r0, r7, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	cmp	r0, r8
	bne	.L3956	@cond_branch
.L3971:
	cmp	r4, #0
	beq	.L3956	@cond_branch
	strh	r4, [r6]
	add	r6, r6, #0x2
	mov	r0, #0x1
	add	sl, sl, r0
.L3956:
	add	r5, r1, #0
	cmp	r5, #0x3
	ble	.L3957	@cond_branch
.L3949:
	ldr	r2, [sp, #0x8]
	cmp	r2, #0x5
	ble	.L3950	@cond_branch
	mov	r1, sl
	cmp	r1, #0
	beq	.L3969	@cond_branch
	ldr	r2, .L3972+0x1c
	ldr	r0, [r2]
	ldr	r1, .L3972+0x20
	and	r0, r0, r1
	str	r0, [r2]
	ldr	r4, .L3972+0x24
	bl	Random
	mov	r1, #0xff
	and	r1, r1, r0
	mov	r0, sl
	mul	r0, r0, r1
	asr	r0, r0, #0x8
	lsl	r0, r0, #0x1
	ldr	r1, [sp, #0x4]
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r4]
	ldrh	r0, [r4]
	mov	r1, #0x0
	bl	GetMoveTarget
	ldr	r1, .L3972+0x28
	strb	r0, [r1]
	ldr	r1, .L3972+0x2c
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L3970
.L3973:
	.align	2, 0
.L3972:
	.word	gBattleStruct
	.word	gBattlerAttacker
	.word	gPlayerParty
	.word	gEnemyParty
	.word	gBattlerPartyIndexes
	.word	0xffff
	.word	sMovesForbiddenToCopy
	.word	gHitMarker
	.word	-0x401
	.word	gCalledMove
	.word	gBattlerTarget
	.word	gBattlescriptCurrInstr
.L3969:
	ldr	r3, .L3974
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L3970:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3975:
	.align	2, 0
.L3974:
	.word	gBattlescriptCurrInstr
.Lfe256:
	.size	 atkDE_assistattackselect,.Lfe256-atkDE_assistattackselect
	.align	2, 0
	.type	 atkDF_trysetmagiccoat,function
	.thumb_func
atkDF_trysetmagiccoat:
	push	{lr}
	ldr	r1, .L3979
	ldr	r3, .L3979+0x4
	ldrb	r0, [r3]
	strb	r0, [r1]
	ldr	r2, .L3979+0x8
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r0, .L3979+0xc
	ldrb	r1, [r0]
	ldr	r0, .L3979+0x10
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bne	.L3977	@cond_branch
	ldr	r3, .L3979+0x14
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3978
.L3980:
	.align	2, 0
.L3979:
	.word	gBattlerTarget
	.word	gBattlerAttacker
	.word	gSpecialStatuses
	.word	gCurrentTurnActionNumber
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
.L3977:
	ldr	r0, .L3981
	ldrb	r1, [r3]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x10
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L3981+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3978:
	pop	{r0}
	bx	r0
.L3982:
	.align	2, 0
.L3981:
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
.Lfe257:
	.size	 atkDF_trysetmagiccoat,.Lfe257-atkDF_trysetmagiccoat
	.align	2, 0
	.type	 atkE0_trysetsnatch,function
	.thumb_func
atkE0_trysetsnatch:
	push	{lr}
	ldr	r2, .L3986
	ldr	r3, .L3986+0x4
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
	ldr	r0, .L3986+0x8
	ldrb	r1, [r0]
	ldr	r0, .L3986+0xc
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bne	.L3984	@cond_branch
	ldr	r3, .L3986+0x10
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3985
.L3987:
	.align	2, 0
.L3986:
	.word	gSpecialStatuses
	.word	gBattlerAttacker
	.word	gCurrentTurnActionNumber
	.word	gBattlersCount
	.word	gBattlescriptCurrInstr
.L3984:
	ldr	r0, .L3988
	ldrb	r1, [r3]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L3988+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3985:
	pop	{r0}
	bx	r0
.L3989:
	.align	2, 0
.L3988:
	.word	gProtectStructs
	.word	gBattlescriptCurrInstr
.Lfe258:
	.size	 atkE0_trysetsnatch,.Lfe258-atkE0_trysetsnatch
	.align	2, 0
	.type	 atkE1_trygetintimidatetarget,function
	.thumb_func
atkE1_trygetintimidatetarget:
	push	{r4, r5, r6, lr}
	ldr	r4, .L4001
	ldr	r0, .L4001+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xd8
	ldrb	r0, [r0]
	strb	r0, [r4, #0x17]
	ldrb	r0, [r4, #0x17]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r2, .L4001+0x8
	mov	r0, #0xfd
	strb	r0, [r2]
	mov	r0, #0x9
	strb	r0, [r2, #0x1]
	ldr	r3, .L4001+0xc
	ldrb	r1, [r4, #0x17]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r3
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	strb	r0, [r2, #0x2]
	mov	r0, #0xff
	strb	r0, [r2, #0x3]
	ldr	r2, .L4001+0x10
	ldr	r1, .L4001+0x14
	ldrb	r0, [r2]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L4000	@cond_branch
	add	r4, r2, #0
	ldr	r6, .L4001+0x18
.L3994:
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r5
	beq	.L3993	@cond_branch
	ldr	r0, .L4001+0x1c
	ldrb	r1, [r0]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	and	r1, r1, r0
	ldr	r2, .L4001+0x14
	cmp	r1, #0
	beq	.L3992	@cond_branch
.L3993:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	ldr	r1, .L4001+0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r2, r1, #0
	ldrb	r1, [r2]
	cmp	r0, r1
	bcc	.L3994	@cond_branch
.L3992:
	ldr	r0, .L4001+0x10
	ldrb	r0, [r0]
	ldrb	r2, [r2]
	cmp	r0, r2
	bcc	.L3998	@cond_branch
.L4000:
	ldr	r3, .L4001+0x20
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L3999
.L4002:
	.align	2, 0
.L4001:
	.word	gBattleScripting
	.word	gBattleStruct
	.word	gBattleTextBuff1
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattlersCount
	.word	gBitTable
	.word	gAbsentBattlerFlags
	.word	gBattlescriptCurrInstr
.L3998:
	ldr	r1, .L4003
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L3999:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L4004:
	.align	2, 0
.L4003:
	.word	gBattlescriptCurrInstr
.Lfe259:
	.size	 atkE1_trygetintimidatetarget,.Lfe259-atkE1_trygetintimidatetarget
	.align	2, 0
	.type	 atkE2_switchoutabilities,function
	.thumb_func
atkE2_switchoutabilities:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r5, .L4010
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r4, .L4010+0x4
	strb	r0, [r4]
	ldr	r3, .L4010+0x8
	ldrb	r0, [r4]
	mov	r6, #0x58
	mov	r1, r0
	mul	r1, r1, r6
	add	r0, r1, r3
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x1e
	bne	.L4006	@cond_branch
	add	r3, r3, #0x4c
	add	r1, r1, r3
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r2, .L4010+0xc
	ldrb	r1, [r4]
	ldr	r0, .L4010+0x10
	ldr	r0, [r0]
	add	r0, r1, r0
	add	r0, r0, #0x58
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r2, [r0]
	mov	r0, r1
	mul	r0, r0, r6
	add	r0, r0, r3
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x28
	mov	r3, #0x4
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
.L4006:
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L4011:
	.align	2, 0
.L4010:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleMons
	.word	gBitTable
	.word	gBattleStruct
.Lfe260:
	.size	 atkE2_switchoutabilities,.Lfe260-atkE2_switchoutabilities
	.align	2, 0
	.type	 atkE3_jumpifhasnohp,function
	.thumb_func
atkE3_jumpifhasnohp:
	push	{r4, lr}
	ldr	r4, .L4015
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerForBattleScript
	ldr	r1, .L4015+0x4
	strb	r0, [r1]
	ldr	r2, .L4015+0x8
	ldrb	r1, [r1]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.L4013	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L4014
.L4016:
	.align	2, 0
.L4015:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
	.word	gBattleMons
.L4013:
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
.L4014:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe261:
	.size	 atkE3_jumpifhasnohp,.Lfe261-atkE3_jumpifhasnohp
	.align	2, 0
	.type	 atkE4_getsecretpowereffect,function
	.thumb_func
atkE4_getsecretpowereffect:
	push	{lr}
	ldr	r0, .L4030
	ldrb	r0, [r0]
	cmp	r0, #0x7
	bhi	.L4027	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L4030+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L4031:
	.align	2, 0
.L4030:
	.word	gBattleTerrain
	.word	.L4028
	.align	2, 0
	.align	2, 0
.L4028:
	.word	.L4019
	.word	.L4020
	.word	.L4021
	.word	.L4022
	.word	.L4023
	.word	.L4024
	.word	.L4025
	.word	.L4026
.L4019:
	ldr	r1, .L4032
	mov	r0, #0x2
	b	.L4029
.L4033:
	.align	2, 0
.L4032:
	.word	gBattleCommunication
.L4020:
	ldr	r1, .L4034
	mov	r0, #0x1
	b	.L4029
.L4035:
	.align	2, 0
.L4034:
	.word	gBattleCommunication
.L4021:
	ldr	r1, .L4036
	mov	r0, #0x1b
	b	.L4029
.L4037:
	.align	2, 0
.L4036:
	.word	gBattleCommunication
.L4022:
	ldr	r1, .L4038
	mov	r0, #0x17
	b	.L4029
.L4039:
	.align	2, 0
.L4038:
	.word	gBattleCommunication
.L4023:
	ldr	r1, .L4040
	mov	r0, #0x16
	b	.L4029
.L4041:
	.align	2, 0
.L4040:
	.word	gBattleCommunication
.L4024:
	ldr	r1, .L4042
	mov	r0, #0x18
	b	.L4029
.L4043:
	.align	2, 0
.L4042:
	.word	gBattleCommunication
.L4025:
	ldr	r1, .L4044
	mov	r0, #0x7
	b	.L4029
.L4045:
	.align	2, 0
.L4044:
	.word	gBattleCommunication
.L4026:
	ldr	r1, .L4046
	mov	r0, #0x8
	b	.L4029
.L4047:
	.align	2, 0
.L4046:
	.word	gBattleCommunication
.L4027:
	ldr	r1, .L4048
	mov	r0, #0x5
.L4029:
	strb	r0, [r1, #0x3]
	ldr	r1, .L4048+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L4049:
	.align	2, 0
.L4048:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.Lfe262:
	.size	 atkE4_getsecretpowereffect,.Lfe262-atkE4_getsecretpowereffect
	.align	2, 0
	.type	 atkE5_pickup,function
	.thumb_func
atkE5_pickup:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	bl	InBattlePike
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB40028
	b	.L4052	@long jump
.LCB40028:
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L4053	@cond_branch
	mov	r6, #0x0
	mov	r7, sp
	ldr	r0, .L4081
	mov	r8, r0
.L4057:
	mov	r0, #0x64
	mov	r4, r6
	mul	r4, r4, r0
	ldr	r0, .L4081+0x4
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	strh	r0, [r7]
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	cmp	r0, #0
	beq	.L4058	@cond_branch
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrb	r0, [r0, #0x17]
	b	.L4059
.L4082:
	.align	2, 0
.L4081:
	.word	gBaseStats
	.word	gPlayerParty
.L4058:
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrb	r0, [r0, #0x16]
.L4059:
	cmp	r0, #0x35
	bne	.L4056	@cond_branch
	cmp	r5, #0
	beq	.L4056	@cond_branch
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r5, r0
	beq	.L4056	@cond_branch
	ldrh	r0, [r7]
	cmp	r0, #0
	bne	.L4056	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L4056	@cond_branch
	bl	GetBattlePyramidPickupItemId
	strh	r0, [r7]
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L4083
	add	r0, r0, r1
	mov	r1, #0xc
	mov	r2, sp
	bl	SetMonData
.L4056:
	add	r6, r6, #0x1
	cmp	r6, #0x5
	ble	.L4057	@cond_branch
	b	.L4052
.L4084:
	.align	2, 0
.L4083:
	.word	gPlayerParty
.L4053:
	mov	r6, #0x0
	mov	r1, #0x64
	mov	r8, r1
	ldr	r7, .L4085
	mov	sl, sp
.L4066:
	mov	r4, r8
	mul	r4, r4, r6
	add	r4, r4, r7
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	mov	r1, sl
	strh	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	cmp	r0, #0
	beq	.L4067	@cond_branch
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	ldr	r1, .L4085+0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x17]
	b	.L4068
.L4086:
	.align	2, 0
.L4085:
	.word	gPlayerParty
	.word	gBaseStats
.L4080:
	mov	r0, r8
	mul	r0, r0, r6
	add	r0, r0, r7
	add	r2, r1, #0
	add	r2, r2, #0x63
	sub	r2, r2, r4
	lsl	r2, r2, #0x1
	ldr	r1, .L4087
	add	r2, r2, r1
	mov	r1, #0xc
	bl	SetMonData
	b	.L4065
.L4088:
	.align	2, 0
.L4087:
	.word	sRarePickupItems
.L4067:
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	ldr	r1, .L4089
	add	r0, r0, r1
	ldrb	r0, [r0, #0x16]
.L4068:
	add	r1, r6, #0x1
	mov	r9, r1
	cmp	r0, #0x35
	bne	.L4065	@cond_branch
	cmp	r5, #0
	beq	.L4065	@cond_branch
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r5, r0
	beq	.L4065	@cond_branch
	mov	r1, sl
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L4065	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L4065	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, r8
	mul	r0, r0, r6
	add	r0, r0, r7
	mov	r1, #0x38
	bl	GetMonData
	sub	r0, r0, #0x1
	mov	r1, #0xa
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x9
	bls	.L4070	@cond_branch
	mov	r1, #0x9
.L4070:
	mov	r2, #0x0
	b	.L4071
.L4090:
	.align	2, 0
.L4089:
	.word	gBaseStats
.L4075:
	add	r0, r4, #0
	sub	r0, r0, #0x62
	cmp	r0, #0x1
	bls	.L4080	@cond_branch
	add	r2, r2, #0x1
.L4071:
	cmp	r2, #0x8
	bgt	.L4065	@cond_branch
	ldr	r0, .L4091
	add	r0, r2, r0
	ldrb	r0, [r0]
	cmp	r0, r4
	ble	.L4075	@cond_branch
	mov	r0, r8
	mul	r0, r0, r6
	add	r0, r0, r7
	add	r2, r1, r2
	lsl	r2, r2, #0x1
	ldr	r1, .L4091+0x4
	add	r2, r2, r1
	mov	r1, #0xc
	bl	SetMonData
.L4065:
	mov	r6, r9
	cmp	r6, #0x5
	bgt	.LCB40332
	b	.L4066	@long jump
.LCB40332:
.L4052:
	ldr	r1, .L4091+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4092:
	.align	2, 0
.L4091:
	.word	sPickupProbabilities
	.word	sPickupItems
	.word	gBattlescriptCurrInstr
.Lfe263:
	.size	 atkE5_pickup,.Lfe263-atkE5_pickup
	.align	2, 0
	.type	 atkE6_docastformchangeanimation,function
	.thumb_func
atkE6_docastformchangeanimation:
	push	{r4, lr}
	ldr	r4, .L4095
	ldr	r0, .L4095+0x4
	ldrb	r0, [r0, #0x17]
	strb	r0, [r4]
	ldr	r1, .L4095+0x8
	ldrb	r2, [r4]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	ldr	r3, .L4095+0xc
	cmp	r0, #0
	beq	.L4094	@cond_branch
	ldr	r0, [r3]
	add	r0, r0, #0x7f
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
.L4094:
	ldr	r0, [r3]
	add	r0, r0, #0x7f
	ldrb	r2, [r0]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BtlController_EmitBattleAnimation
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L4095+0x10
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L4096:
	.align	2, 0
.L4095:
	.word	gActiveBattler
	.word	gBattleScripting
	.word	gBattleMons
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
.Lfe264:
	.size	 atkE6_docastformchangeanimation,.Lfe264-atkE6_docastformchangeanimation
	.align	2, 0
	.type	 atkE7_trycastformdatachange,function
	.thumb_func
atkE7_trycastformdatachange:
	push	{r4, lr}
	ldr	r1, .L4099
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	ldr	r0, .L4099+0x4
	ldrb	r0, [r0, #0x17]
	bl	CastformDataTypeChange
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.L4098	@cond_branch
	ldr	r0, .L4099+0x8
	bl	BattleScriptPushCursorAndCallback
	ldr	r0, .L4099+0xc
	ldr	r0, [r0]
	add	r0, r0, #0x7f
	sub	r1, r4, #0x1
	strb	r1, [r0]
.L4098:
	pop	{r4}
	pop	{r0}
	bx	r0
.L4100:
	.align	2, 0
.L4099:
	.word	gBattlescriptCurrInstr
	.word	gBattleScripting
	.word	BattleScript_CastformChange
	.word	gBattleStruct
.Lfe265:
	.size	 atkE7_trycastformdatachange,.Lfe265-atkE7_trycastformdatachange
	.align	2, 0
	.type	 atkE8_settypebasedhalvers,function
	.thumb_func
atkE8_settypebasedhalvers:
	push	{r4, lr}
	mov	r4, #0x0
	ldr	r2, .L4109
	ldr	r0, .L4109+0x4
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0xc9
	bne	.L4102	@cond_branch
	ldr	r1, .L4109+0x8
	ldr	r0, .L4109+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0x9
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L4104	@cond_branch
	orr	r1, r1, r3
	str	r1, [r2]
	ldr	r0, .L4109+0x10
	strb	r4, [r0, #0x5]
	b	.L4108
.L4110:
	.align	2, 0
.L4109:
	.word	gBattleMoves
	.word	gCurrentMove
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	gBattleCommunication
.L4102:
	ldr	r1, .L4111
	ldr	r0, .L4111+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldr	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0xa
	add	r0, r1, #0
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L4104	@cond_branch
	orr	r1, r1, r3
	str	r1, [r2]
	ldr	r1, .L4111+0x8
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	mov	r4, #0x1
.L4104:
	cmp	r4, #0
	beq	.L4106	@cond_branch
.L4108:
	ldr	r1, .L4111+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L4107
.L4112:
	.align	2, 0
.L4111:
	.word	gStatuses3
	.word	gBattlerAttacker
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
.L4106:
	ldr	r3, .L4113
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L4107:
	pop	{r4}
	pop	{r0}
	bx	r0
.L4114:
	.align	2, 0
.L4113:
	.word	gBattlescriptCurrInstr
.Lfe266:
	.size	 atkE8_settypebasedhalvers,.Lfe266-atkE8_settypebasedhalvers
	.align	2, 0
	.type	 atkE9_setweatherballtype,function
	.thumb_func
atkE9_setweatherballtype:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L4116	@cond_branch
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L4116	@cond_branch
	ldr	r2, .L4127
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L4117	@cond_branch
	ldr	r1, .L4127+0x4
	mov	r0, #0x2
	strb	r0, [r1, #0xe]
.L4117:
	ldrh	r1, [r2]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4118	@cond_branch
	ldr	r0, .L4127+0x8
	ldr	r1, [r0]
	mov	r0, #0x8b
	b	.L4126
.L4128:
	.align	2, 0
.L4127:
	.word	gBattleWeather
	.word	gBattleScripting
	.word	gBattleStruct
.L4118:
	mov	r0, #0x18
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4120	@cond_branch
	ldr	r0, .L4129
	ldr	r1, [r0]
	mov	r0, #0x85
	b	.L4126
.L4130:
	.align	2, 0
.L4129:
	.word	gBattleStruct
.L4120:
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4122	@cond_branch
	ldr	r0, .L4131
	ldr	r1, [r0]
	mov	r0, #0x8a
	b	.L4126
.L4132:
	.align	2, 0
.L4131:
	.word	gBattleStruct
.L4122:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4124	@cond_branch
	ldr	r0, .L4133
	ldr	r1, [r0]
	mov	r0, #0x8f
	b	.L4126
.L4134:
	.align	2, 0
.L4133:
	.word	gBattleStruct
.L4124:
	ldr	r0, .L4135
	ldr	r1, [r0]
	mov	r0, #0x80
.L4126:
	strb	r0, [r1, #0x13]
.L4116:
	ldr	r1, .L4135+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L4136:
	.align	2, 0
.L4135:
	.word	gBattleStruct
	.word	gBattlescriptCurrInstr
.Lfe267:
	.size	 atkE9_setweatherballtype,.Lfe267-atkE9_setweatherballtype
	.align	2, 0
	.type	 atkEA_tryrecycleitem,function
	.thumb_func
atkEA_tryrecycleitem:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r7, .L4140
	ldr	r0, .L4140+0x4
	ldrb	r0, [r0]
	strb	r0, [r7]
	ldr	r1, .L4140+0x8
	ldrb	r2, [r7]
	lsl	r0, r2, #0x1
	add	r0, r0, #0xb8
	ldr	r1, [r1]
	add	r6, r1, r0
	ldrh	r5, [r6]
	cmp	r5, #0
	beq	.L4138	@cond_branch
	ldr	r4, .L4140+0xc
	mov	r3, #0x58
	mov	r0, r2
	mul	r0, r0, r3
	add	r0, r0, r4
	ldrh	r0, [r0, #0x2e]
	cmp	r0, #0
	bne	.L4138	@cond_branch
	ldr	r1, .L4140+0x10
	strh	r5, [r1]
	strh	r0, [r6]
	ldrb	r0, [r7]
	mul	r0, r0, r3
	add	r0, r0, r4
	ldrh	r1, [r1]
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r7]
	mul	r0, r0, r3
	add	r1, r4, #0
	add	r1, r1, #0x2e
	add	r0, r0, r1
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x2
	bl	BtlController_EmitSetMonData
	ldrb	r0, [r7]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L4140+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L4139
.L4141:
	.align	2, 0
.L4140:
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattleStruct
	.word	gBattleMons
	.word	gLastUsedItem
	.word	gBattlescriptCurrInstr
.L4138:
	ldr	r3, .L4142
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L4139:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4143:
	.align	2, 0
.L4142:
	.word	gBattlescriptCurrInstr
.Lfe268:
	.size	 atkEA_tryrecycleitem,.Lfe268-atkEA_tryrecycleitem
	.align	2, 0
	.type	 atkEB_settypetoterrain,function
	.thumb_func
atkEB_settypetoterrain:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L4147
	mov	r8, r0
	ldr	r7, .L4147+0x4
	ldrb	r0, [r7]
	mov	r6, #0x58
	mul	r0, r0, r6
	mov	r1, r8
	add	r3, r0, r1
	mov	r0, #0x21
	add	r0, r0, r3
	mov	ip, r0
	ldr	r5, .L4147+0x8
	ldr	r4, .L4147+0xc
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r2, [r0]
	mov	r1, ip
	ldrb	r0, [r1]
	add	r1, r2, #0
	cmp	r0, r1
	beq	.L4145	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, r1
	beq	.L4145	@cond_branch
	mov	r0, ip
	strb	r2, [r0]
	ldrb	r0, [r7]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r1, r8
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	add	r1, r1, #0x22
	strb	r0, [r1]
	ldr	r1, .L4147+0x10
	mov	r0, #0xfd
	strb	r0, [r1]
	mov	r0, #0x3
	strb	r0, [r1, #0x1]
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	strb	r0, [r1, #0x2]
	mov	r0, #0xff
	strb	r0, [r1, #0x3]
	ldr	r1, .L4147+0x14
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L4146
.L4148:
	.align	2, 0
.L4147:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	sTerrainToType
	.word	gBattleTerrain
	.word	gBattleTextBuff1
	.word	gBattlescriptCurrInstr
.L4145:
	ldr	r3, .L4149
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L4146:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4150:
	.align	2, 0
.L4149:
	.word	gBattlescriptCurrInstr
.Lfe269:
	.size	 atkEB_settypetoterrain,.Lfe269-atkEB_settypetoterrain
	.align	2, 0
	.type	 atkEC_pursuitrelated,function
	.thumb_func
atkEC_pursuitrelated:
	push	{r4, r5, r6, lr}
	ldr	r5, .L4154
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r4, .L4154+0x4
	strb	r0, [r4]
	ldr	r0, .L4154+0x8
	ldr	r0, [r0]
	mov	r6, #0x1
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L4152	@cond_branch
	ldr	r0, .L4154+0xc
	ldrb	r1, [r0]
	ldr	r2, .L4154+0x10
	ldrb	r3, [r4]
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L4152	@cond_branch
	ldr	r0, .L4154+0x14
	add	r0, r3, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L4152	@cond_branch
	ldr	r1, .L4154+0x18
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldrh	r2, [r0]
	cmp	r2, #0xe4
	bne	.L4152	@cond_branch
	ldr	r0, .L4154+0x1c
	add	r0, r3, r0
	mov	r1, #0xb
	strb	r1, [r0]
	ldr	r0, .L4154+0x20
	strh	r2, [r0]
	ldr	r1, .L4154+0x24
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	ldr	r0, .L4154+0x28
	strb	r6, [r0, #0x18]
	ldrb	r1, [r5]
	add	r0, r0, #0x20
	strb	r1, [r0]
	ldrb	r0, [r4]
	strb	r0, [r5]
	b	.L4153
.L4155:
	.align	2, 0
.L4154:
	.word	gBattlerAttacker
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gChosenActionByBattler
	.word	gChosenMoveByBattler
	.word	gActionsByTurnOrder
	.word	gCurrentMove
	.word	gBattlescriptCurrInstr
	.word	gBattleScripting
.L4152:
	ldr	r3, .L4156
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L4153:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L4157:
	.align	2, 0
.L4156:
	.word	gBattlescriptCurrInstr
.Lfe270:
	.size	 atkEC_pursuitrelated,.Lfe270-atkEC_pursuitrelated
	.align	2, 0
	.type	 atkEF_snatchsetbattlers,function
	.thumb_func
atkEF_snatchsetbattlers:
	push	{r4, lr}
	ldr	r1, .L4161
	ldr	r3, .L4161+0x4
	ldrb	r0, [r3]
	strb	r0, [r1]
	ldr	r2, .L4161+0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r1, #0
	ldrb	r1, [r2]
	cmp	r0, r1
	bne	.L4159	@cond_branch
	ldr	r1, .L4161+0xc
	ldrb	r0, [r1, #0x17]
	strb	r0, [r2]
	strb	r0, [r3]
	b	.L4160
.L4162:
	.align	2, 0
.L4161:
	.word	gEffectBattler
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattleScripting
.L4159:
	ldr	r1, .L4163
	ldrb	r0, [r1, #0x17]
	strb	r0, [r2]
.L4160:
	ldrb	r0, [r4]
	strb	r0, [r1, #0x17]
	ldr	r1, .L4163+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L4164:
	.align	2, 0
.L4163:
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
.Lfe271:
	.size	 atkEF_snatchsetbattlers,.Lfe271-atkEF_snatchsetbattlers
	.align	2, 0
	.type	 atkEE_removelightscreenreflect,function
	.thumb_func
atkEE_removelightscreenreflect:
	push	{r4, lr}
	ldr	r0, .L4169
	ldrb	r0, [r0]
	bl	GetBattlerSide
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L4169+0x4
	lsl	r3, r0, #0x1
	add	r0, r3, r0
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrb	r0, [r4]
	cmp	r0, #0
	bne	.L4167	@cond_branch
	ldrb	r1, [r4, #0x2]
	cmp	r1, #0
	beq	.L4166	@cond_branch
.L4167:
	ldr	r2, .L4169+0x8
	add	r2, r3, r2
	ldrh	r1, [r2]
	ldr	r0, .L4169+0xc
	and	r0, r0, r1
	mov	r3, #0x0
	ldr	r1, .L4169+0x10
	and	r0, r0, r1
	strh	r0, [r2]
	strb	r3, [r4]
	strb	r3, [r4, #0x2]
	ldr	r1, .L4169+0x14
	mov	r0, #0x1
	strb	r0, [r1, #0x18]
	strb	r0, [r1, #0x19]
	b	.L4168
.L4170:
	.align	2, 0
.L4169:
	.word	gBattlerAttacker
	.word	gSideTimers
	.word	gSideStatuses
	.word	0xfffe
	.word	0xfffd
	.word	gBattleScripting
.L4166:
	ldr	r0, .L4171
	strb	r1, [r0, #0x18]
	strb	r1, [r0, #0x19]
.L4168:
	ldr	r1, .L4171+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L4172:
	.align	2, 0
.L4171:
	.word	gBattleScripting
	.word	gBattlescriptCurrInstr
.Lfe272:
	.size	 atkEE_removelightscreenreflect,.Lfe272-atkEE_removelightscreenreflect
	.align	2, 0
	.type	 atkEF_handleballthrow,function
	.thumb_func
atkEF_handleballthrow:
	push	{r4, r5, r6, lr}
	mov	r4, #0x0
	ldr	r0, .L4229
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LCB41182
	b	.L4173	@long jump
.LCB41182:
	ldr	r5, .L4229+0x4
	ldr	r0, .L4229+0x8
	ldrb	r0, [r0]
	strb	r0, [r5]
	ldr	r6, .L4229+0xc
	mov	r1, #0x1
	eor	r0, r0, r1
	strb	r0, [r6]
	ldr	r0, .L4229+0x10
	ldr	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4175	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x5
	bl	BtlController_EmitBallThrowAnim
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L4229+0x14
	ldr	r0, .L4229+0x18
	b	.L4225
.L4230:
	.align	2, 0
.L4229:
	.word	gBattleControllerExecFlags
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattleTypeFlags
	.word	gBattlescriptCurrInstr
	.word	BattleScript_TrainerBallBlock
.L4175:
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L4177	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x4
	bl	BtlController_EmitBallThrowAnim
	ldrb	r0, [r5]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L4231
	ldr	r0, .L4231+0x4
	b	.L4225
.L4232:
	.align	2, 0
.L4231:
	.word	gBattlescriptCurrInstr
	.word	BattleScript_WallyBallThrow
.L4177:
	ldr	r0, .L4233
	ldrh	r0, [r0]
	cmp	r0, #0x5
	bne	.L4179	@cond_branch
	ldr	r0, .L4233+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x7c
	ldrb	r0, [r0]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r0, r1, #0x8
	sub	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	b	.L4180
.L4234:
	.align	2, 0
.L4233:
	.word	gLastUsedItem
	.word	gBattleStruct
.L4179:
	ldr	r3, .L4235
	ldr	r2, .L4235+0x4
	ldrb	r1, [r6]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r5, [r0, #0x8]
.L4180:
	ldr	r2, .L4235+0x8
	ldrh	r0, [r2]
	cmp	r0, #0x5
	bhi	.LCB41294
	b	.L4181	@long jump
.LCB41294:
	sub	r0, r0, #0x6
	cmp	r0, #0x6
	bls	.LCB41299
	b	.L4203	@long jump
.LCB41299:
	lsl	r0, r0, #0x2
	ldr	r1, .L4235+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L4236:
	.align	2, 0
.L4235:
	.word	gBaseStats
	.word	gBattleMons
	.word	gLastUsedItem
	.word	.L4201
	.align	2, 0
	.align	2, 0
.L4201:
	.word	.L4183
	.word	.L4187
	.word	.L4190
	.word	.L4194
	.word	.L4197
	.word	.L4227
	.word	.L4227
.L4183:
	ldr	r2, .L4237
	ldr	r0, .L4237+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r1, r0, #0
	add	r1, r1, #0x21
	ldrb	r1, [r1]
	cmp	r1, #0xb
	beq	.L4226	@cond_branch
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0xb
	beq	.L4226	@cond_branch
	cmp	r1, #0x6
	beq	.L4226	@cond_branch
	cmp	r0, #0x6
	beq	.L4226	@cond_branch
	b	.L4227
.L4238:
	.align	2, 0
.L4237:
	.word	gBattleMons
	.word	gBattlerTarget
.L4187:
	bl	GetCurrentMapType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r4, #0xa
	cmp	r0, #0x5
	bne	.L4203	@cond_branch
	mov	r4, #0x23
	b	.L4203
.L4190:
	ldr	r2, .L4239
	ldr	r0, .L4239+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x2a
	ldrb	r1, [r0]
	cmp	r1, #0x27
	bhi	.L4227	@cond_branch
	mov	r0, #0x28
	sub	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x9
	bhi	.L4203	@cond_branch
.L4227:
	mov	r4, #0xa
	b	.L4203
.L4240:
	.align	2, 0
.L4239:
	.word	gBattleMons
	.word	gBattlerTarget
.L4194:
	ldr	r2, .L4241
	ldr	r0, .L4241+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	bl	GetSetPokedexFlag
	lsl	r0, r0, #0x18
	mov	r4, #0xa
	cmp	r0, #0
	beq	.L4203	@cond_branch
.L4226:
	mov	r4, #0x1e
	b	.L4203
.L4242:
	.align	2, 0
.L4241:
	.word	gBattleMons
	.word	gBattlerTarget
.L4197:
	ldr	r0, .L4243
	ldrb	r0, [r0, #0x13]
	add	r0, r0, #0xa
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x28
	bls	.L4203	@cond_branch
	mov	r4, #0x28
	b	.L4203
.L4244:
	.align	2, 0
.L4243:
	.word	gBattleResults
.L4181:
	ldr	r1, .L4245
	ldrh	r0, [r2]
	sub	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r4, [r0]
.L4203:
	mov	r0, r5
	mul	r0, r0, r4
	mov	r1, #0xa
	bl	__divsi3
	ldr	r5, .L4245+0x4
	ldr	r1, .L4245+0x8
	ldrb	r2, [r1]
	mov	r1, #0x58
	mov	r4, r2
	mul	r4, r4, r1
	add	r3, r4, r5
	ldrh	r2, [r3, #0x2c]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	ldrh	r2, [r3, #0x28]
	lsl	r2, r2, #0x1
	sub	r2, r1, r2
	mul	r0, r0, r2
	bl	__divsi3
	add	r6, r0, #0
	add	r5, r5, #0x4c
	add	r4, r4, r5
	ldr	r4, [r4]
	mov	r0, #0x27
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L4204	@cond_branch
	lsl	r6, r6, #0x1
.L4204:
	mov	r0, #0xd8
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L4205	@cond_branch
	lsl	r0, r6, #0x4
	sub	r0, r0, r6
	mov	r1, #0xa
	bl	__udivsi3
	add	r6, r0, #0
.L4205:
	ldr	r1, .L4245+0xc
	ldrh	r0, [r1]
	cmp	r0, #0x5
	beq	.L4206	@cond_branch
	cmp	r0, #0x1
	bne	.L4207	@cond_branch
	ldr	r0, .L4245+0x10
	ldrb	r1, [r0, #0x5]
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
	b	.L4206
.L4246:
	.align	2, 0
.L4245:
	.word	sBallCatchBonuses
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gLastUsedItem
	.word	gBattleResults
.L4207:
	ldr	r0, .L4247
	ldrh	r1, [r1]
	add	r0, r0, r1
	add	r1, r0, #0
	add	r1, r1, #0x34
	ldrb	r0, [r1]
	cmp	r0, #0xfe
	bhi	.L4206	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1]
.L4206:
	cmp	r6, #0xfe
	bls	.L4210	@cond_branch
	mov	r0, #0x0
	mov	r1, #0x4
	bl	BtlController_EmitBallThrowAnim
	ldr	r0, .L4247+0x4
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	ldr	r1, .L4247+0x8
	ldr	r0, .L4247+0xc
	str	r0, [r1]
	ldr	r1, .L4247+0x10
	ldr	r0, .L4247+0x14
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L4247+0x18
	add	r0, r0, r1
	ldr	r2, .L4247+0x1c
	mov	r1, #0x26
	bl	SetMonData
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x6
	beq	.L4228	@cond_branch
	b	.L4222
.L4248:
	.align	2, 0
.L4247:
	.word	gBattleResults
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SuccessBallThrow
	.word	gBattlerPartyIndexes
	.word	gBattlerTarget
	.word	gEnemyParty
	.word	gLastUsedItem
.L4210:
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	add	r1, r6, #0
	bl	__udivsi3
	bl	Sqrt
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	Sqrt
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, .L4249
	add	r1, r6, #0
	bl	__udivsi3
	add	r6, r0, #0
	mov	r4, #0x0
	b	.L4214
.L4250:
	.align	2, 0
.L4249:
	.word	0xffff0
.L4216:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L4214:
	cmp	r4, #0x3
	bhi	.L4215	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r6
	bcc	.L4216	@cond_branch
.L4215:
	ldr	r5, .L4251
	ldrh	r0, [r5]
	cmp	r0, #0x1
	bne	.L4220	@cond_branch
	mov	r4, #0x4
.L4220:
	mov	r0, #0x0
	add	r1, r4, #0
	bl	BtlController_EmitBallThrowAnim
	ldr	r0, .L4251+0x4
	ldrb	r0, [r0]
	bl	MarkBattlerForControllerExec
	cmp	r4, #0x4
	bne	.L4221	@cond_branch
	ldr	r1, .L4251+0x8
	ldr	r0, .L4251+0xc
	str	r0, [r1]
	ldr	r1, .L4251+0x10
	ldr	r0, .L4251+0x14
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L4251+0x18
	add	r0, r0, r1
	mov	r1, #0x26
	add	r2, r5, #0
	bl	SetMonData
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x6
	bne	.L4222	@cond_branch
.L4228:
	ldr	r1, .L4251+0x1c
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	b	.L4173
.L4252:
	.align	2, 0
.L4251:
	.word	gLastUsedItem
	.word	gActiveBattler
	.word	gBattlescriptCurrInstr
	.word	BattleScript_SuccessBallThrow
	.word	gBattlerPartyIndexes
	.word	gBattlerTarget
	.word	gEnemyParty
	.word	gBattleCommunication
.L4222:
	ldr	r1, .L4253
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	b	.L4173
.L4254:
	.align	2, 0
.L4253:
	.word	gBattleCommunication
.L4221:
	ldr	r0, .L4255
	strb	r4, [r0, #0x5]
	ldr	r1, .L4255+0x4
	ldr	r0, .L4255+0x8
.L4225:
	str	r0, [r1]
.L4173:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L4256:
	.align	2, 0
.L4255:
	.word	gBattleCommunication
	.word	gBattlescriptCurrInstr
	.word	BattleScript_ShakeBallThrow
.Lfe273:
	.size	 atkEF_handleballthrow,.Lfe273-atkEF_handleballthrow
	.align	2, 0
	.type	 atkF0_givecaughtmon,function
	.thumb_func
atkF0_givecaughtmon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L4262
	mov	r9, r0
	ldr	r5, .L4262+0x4
	ldrb	r0, [r5]
	mov	r6, #0x1
	eor	r0, r0, r6
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r7, #0x64
	mul	r0, r0, r7
	ldr	r1, .L4262+0x8
	mov	r8, r1
	add	r0, r0, r8
	bl	GiveMonToPlayer
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L4258	@cond_branch
	bl	sub_813B21C
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L4259	@cond_branch
	ldr	r0, .L4262+0xc
	strb	r1, [r0, #0x5]
	ldr	r4, .L4262+0x10
	ldr	r0, .L4262+0x14
	bl	VarGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBoxNamePtr
	add	r1, r0, #0
	add	r0, r4, #0
	bl	StringCopy
	ldrb	r0, [r5]
	eor	r0, r0, r6
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, r8
	ldr	r2, .L4262+0x18
	mov	r1, #0x2
	bl	GetMonData
	b	.L4260
.L4263:
	.align	2, 0
.L4262:
	.word	gBattlerPartyIndexes
	.word	gBattlerAttacker
	.word	gEnemyParty
	.word	gBattleCommunication
	.word	gStringVar1
	.word	0x4036
	.word	gStringVar2
.L4259:
	ldr	r4, .L4264
	ldr	r0, .L4264+0x4
	bl	VarGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBoxNamePtr
	add	r1, r0, #0
	add	r0, r4, #0
	bl	StringCopy
	ldrb	r0, [r5]
	eor	r0, r0, r6
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, r8
	ldr	r2, .L4264+0x8
	mov	r1, #0x2
	bl	GetMonData
	ldr	r4, .L4264+0xc
	bl	get_unknown_box_id
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBoxNamePtr
	add	r1, r0, #0
	add	r0, r4, #0
	bl	StringCopy
	ldr	r1, .L4264+0x10
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
.L4260:
	ldr	r0, .L4264+0x14
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L4258	@cond_branch
	ldr	r1, .L4264+0x10
	ldrb	r0, [r1, #0x5]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x5]
.L4258:
	ldr	r0, .L4264+0x18
	mov	sl, r0
	ldr	r1, .L4264+0x1c
	mov	r9, r1
	ldrb	r0, [r1]
	mov	r4, #0x1
	eor	r0, r0, r4
	lsl	r0, r0, #0x1
	add	r0, r0, sl
	ldrh	r0, [r0]
	mov	r1, #0x64
	mov	r8, r1
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	ldr	r6, .L4264+0x20
	add	r0, r0, r6
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	ldr	r5, .L4264+0x24
	strh	r0, [r5, #0x28]
	mov	r1, r9
	ldrb	r0, [r1]
	eor	r0, r0, r4
	lsl	r0, r0, #0x1
	add	r0, r0, sl
	ldrh	r0, [r0]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r6
	add	r2, r5, #0
	add	r2, r2, #0x2a
	mov	r1, #0x2
	bl	GetMonData
	mov	r1, r9
	ldrb	r0, [r1]
	eor	r4, r4, r0
	lsl	r4, r4, #0x1
	add	r4, r4, sl
	ldrh	r0, [r4]
	mov	r1, r8
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r6
	mov	r1, #0x26
	mov	r2, #0x0
	bl	GetMonData
	mov	r1, #0xf
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r2, [r5, #0x5]
	mov	r1, #0x3d
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0x5]
	ldr	r1, .L4264+0x28
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4265:
	.align	2, 0
.L4264:
	.word	gStringVar1
	.word	0x4036
	.word	gStringVar2
	.word	gStringVar3
	.word	gBattleCommunication
	.word	0x8ab
	.word	gBattlerPartyIndexes
	.word	gBattlerAttacker
	.word	gEnemyParty
	.word	gBattleResults
	.word	gBattlescriptCurrInstr
.Lfe274:
	.size	 atkF0_givecaughtmon,.Lfe274-atkF0_givecaughtmon
	.align	2, 0
	.type	 atkF1_trysetcaughtmondexflags,function
	.thumb_func
atkF1_trysetcaughtmondexflags:
	push	{r4, r5, lr}
	ldr	r4, .L4269
	add	r0, r4, #0
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	GetMonData
	add	r4, r0, #0
	add	r0, r5, #0
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	bl	GetSetPokedexFlag
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L4267	@cond_branch
	ldr	r3, .L4269+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L4268
.L4270:
	.align	2, 0
.L4269:
	.word	gEnemyParty
	.word	gBattlescriptCurrInstr
.L4267:
	add	r0, r5, #0
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	add	r2, r4, #0
	bl	HandleSetPokedexFlag
	ldr	r1, .L4271
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L4268:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L4272:
	.align	2, 0
.L4271:
	.word	gBattlescriptCurrInstr
.Lfe275:
	.size	 atkF1_trysetcaughtmondexflags,.Lfe275-atkF1_trysetcaughtmondexflags
	.align	2, 0
	.type	 atkF2_displaydexinfo,function
	.thumb_func
atkF2_displaydexinfo:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L4289
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L4289+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x5
	bls	.LCB42062
	b	.L4274	@long jump
.LCB42062:
	lsl	r0, r0, #0x2
	ldr	r1, .L4289+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L4290:
	.align	2, 0
.L4289:
	.word	gEnemyParty
	.word	gBattleCommunication
	.word	.L4285
	.align	2, 0
	.align	2, 0
.L4285:
	.word	.L4275
	.word	.L4276
	.word	.L4278
	.word	.L4280
	.word	.L4281
	.word	.L4283
.L4275:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	b	.L4287
.L4276:
	ldr	r0, .L4291
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB42102
	b	.L4274	@long jump
.LCB42102:
	bl	FreeAllWindowBuffers
	add	r0, r4, #0
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r3, .L4291+0x4
	ldr	r1, .L4291+0x8
	ldrb	r2, [r1]
	mov	r1, #0x58
	mul	r2, r2, r1
	add	r1, r3, #0
	add	r1, r1, #0x54
	add	r1, r2, r1
	ldr	r1, [r1]
	add	r3, r3, #0x48
	add	r2, r2, r3
	ldr	r2, [r2]
	bl	CreateDexDisplayMonDataTask
	ldr	r1, .L4291+0xc
	strb	r0, [r1, #0x1]
	b	.L4288
.L4292:
	.align	2, 0
.L4291:
	.word	gPaletteFade
	.word	gBattleMons
	.word	gBattlerTarget
	.word	gBattleCommunication
.L4278:
	ldr	r0, .L4293
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4274	@cond_branch
	ldr	r0, .L4293+0x4
	ldr	r1, [r0, #0x4]
	ldr	r0, .L4293+0x8
	cmp	r1, r0
	bne	.L4274	@cond_branch
	ldr	r2, .L4293+0xc
	ldr	r4, .L4293+0x10
	ldrb	r1, [r4, #0x1]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	bne	.L4274	@cond_branch
	ldr	r0, .L4293+0x14
	bl	SetVBlankCallback
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L4274
.L4294:
	.align	2, 0
.L4293:
	.word	gPaletteFade
	.word	gMain
	.word	BattleMainCB2
	.word	gTasks
	.word	gBattleCommunication
	.word	VBlankCB_Battle
.L4280:
	bl	sub_80356D0
	bl	LoadBattleTextboxAndBackground
	ldr	r1, .L4295
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	strh	r0, [r1]
	b	.L4287
.L4296:
	.align	2, 0
.L4295:
	.word	gBattle_BG3_X
.L4281:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L4274	@cond_branch
	ldr	r0, .L4297
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
.L4287:
	ldr	r1, .L4297+0x4
.L4288:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L4274
.L4298:
	.align	2, 0
.L4297:
	.word	0xffff
	.word	gBattleCommunication
.L4283:
	ldr	r0, .L4299
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4274	@cond_branch
	ldr	r1, .L4299+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
.L4274:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L4300:
	.align	2, 0
.L4299:
	.word	gPaletteFade
	.word	gBattlescriptCurrInstr
.Lfe276:
	.size	 atkF2_displaydexinfo,.Lfe276-atkF2_displaydexinfo
	.align	2, 0
	.globl	HandleBattleWindow
	.type	 HandleBattleWindow,function
	.thumb_func
HandleBattleWindow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	ldr	r4, [sp, #0x40]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x10]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp, #0x1c]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x14]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	sl, r4
	mov	r1, #0x0
	add	r0, sp, #0xc
	strh	r1, [r0]
	ldr	r6, [sp, #0x10]
	cmp	r6, r3
	ble	.LCB42295
	b	.L4303	@long jump
.LCB42295:
.L4305:
	mov	r4, r8
	add	r0, r6, #0x1
	str	r0, [sp, #0x18]
	ldr	r2, [sp, #0x1c]
	cmp	r4, r2
	bgt	.L4304	@cond_branch
	add	r5, sp, #0xc
	lsl	r7, r6, #0x18
	mov	r9, r7
.L4309:
	ldr	r0, [sp, #0x10]
	cmp	r6, r0
	bne	.L4310	@cond_branch
	cmp	r4, r8
	bne	.L4311	@cond_branch
	ldr	r0, .L4332
	b	.L4331
.L4333:
	.align	2, 0
.L4332:
	.word	0x1022
.L4311:
	ldr	r2, [sp, #0x1c]
	cmp	r4, r2
	bne	.L4313	@cond_branch
	ldr	r0, .L4334
	b	.L4331
.L4335:
	.align	2, 0
.L4334:
	.word	0x1024
.L4313:
	ldr	r0, .L4336
	b	.L4331
.L4337:
	.align	2, 0
.L4336:
	.word	0x1023
.L4310:
	ldr	r7, [sp, #0x14]
	cmp	r6, r7
	bne	.L4316	@cond_branch
	cmp	r4, r8
	bne	.L4317	@cond_branch
	ldr	r0, .L4338
	b	.L4331
.L4339:
	.align	2, 0
.L4338:
	.word	0x1028
.L4317:
	ldr	r0, [sp, #0x1c]
	cmp	r4, r0
	bne	.L4319	@cond_branch
	ldr	r0, .L4340
	b	.L4331
.L4341:
	.align	2, 0
.L4340:
	.word	0x102a
.L4319:
	ldr	r0, .L4342
	b	.L4331
.L4343:
	.align	2, 0
.L4342:
	.word	0x1029
.L4316:
	cmp	r4, r8
	bne	.L4322	@cond_branch
	ldr	r0, .L4344
	b	.L4331
.L4345:
	.align	2, 0
.L4344:
	.word	0x1025
.L4322:
	ldr	r2, [sp, #0x1c]
	cmp	r4, r2
	bne	.L4324	@cond_branch
	ldr	r0, .L4346
	b	.L4331
.L4347:
	.align	2, 0
.L4346:
	.word	0x1027
.L4324:
	ldr	r0, .L4348
.L4331:
	strh	r0, [r5]
	mov	r1, #0x1
	mov	r0, sl
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4326	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5]
.L4326:
	mov	r0, #0x80
	mov	r7, sl
	and	r0, r0, r7
	cmp	r0, #0
	beq	.L4327	@cond_branch
	lsl	r2, r4, #0x18
	lsr	r2, r2, #0x18
	str	r1, [sp]
	str	r1, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	add	r1, sp, #0xc
	mov	r7, r9
	lsr	r3, r7, #0x18
	bl	CopyToBgTilemapBufferRect_ChangePalette
	b	.L4308
.L4349:
	.align	2, 0
.L4348:
	.word	0x1026
.L4327:
	lsl	r2, r4, #0x18
	lsr	r2, r2, #0x18
	str	r1, [sp]
	str	r1, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	add	r1, sp, #0xc
	mov	r7, r9
	lsr	r3, r7, #0x18
	bl	CopyToBgTilemapBufferRect_ChangePalette
.L4308:
	add	r4, r4, #0x1
	ldr	r0, [sp, #0x1c]
	cmp	r4, r0
	ble	.L4309	@cond_branch
.L4304:
	ldr	r6, [sp, #0x18]
	ldr	r2, [sp, #0x14]
	cmp	r6, r2
	bgt	.LCB42485
	b	.L4305	@long jump
.LCB42485:
.L4303:
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe277:
	.size	 HandleBattleWindow,.Lfe277-HandleBattleWindow
	.align	2, 0
	.globl	BattleCreateYesNoCursorAt
	.type	 BattleCreateYesNoCursorAt,function
	.thumb_func
BattleCreateYesNoCursorAt:
	push	{lr}
	add	sp, sp, #-0x10
	add	r3, r0, #0
	add	r0, sp, #0xc
	mov	r2, #0x1
	strh	r2, [r0]
	mov	r1, #0x2
	strh	r1, [r0, #0x2]
	lsl	r3, r3, #0x19
	mov	r0, #0x90
	lsl	r0, r0, #0x14
	add	r3, r3, r0
	lsr	r3, r3, #0x18
	str	r2, [sp]
	str	r1, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	add	r1, sp, #0xc
	mov	r2, #0x19
	bl	CopyToBgTilemapBufferRect_ChangePalette
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x10
	pop	{r0}
	bx	r0
.Lfe278:
	.size	 BattleCreateYesNoCursorAt,.Lfe278-BattleCreateYesNoCursorAt
	.align	2, 0
	.globl	BattleDestroyYesNoCursorAt
	.type	 BattleDestroyYesNoCursorAt,function
	.thumb_func
BattleDestroyYesNoCursorAt:
	push	{lr}
	add	sp, sp, #-0x10
	add	r3, r0, #0
	add	r0, sp, #0xc
	ldr	r1, .L4352
	strh	r1, [r0]
	strh	r1, [r0, #0x2]
	lsl	r3, r3, #0x19
	mov	r0, #0x90
	lsl	r0, r0, #0x14
	add	r3, r3, r0
	lsr	r3, r3, #0x18
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	add	r1, sp, #0xc
	mov	r2, #0x19
	bl	CopyToBgTilemapBufferRect_ChangePalette
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x10
	pop	{r0}
	bx	r0
.L4353:
	.align	2, 0
.L4352:
	.word	0x1016
.Lfe279:
	.size	 BattleDestroyYesNoCursorAt,.Lfe279-BattleDestroyYesNoCursorAt
	.align	2, 0
	.type	 atkF3_trygivecaughtmonnick,function
	.thumb_func
atkF3_trygivecaughtmonnick:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r0, .L4375
	ldrb	r1, [r0]
	add	r4, r0, #0
	cmp	r1, #0x4
	bls	.LCB42592
	b	.L4355	@long jump
.LCB42592:
	lsl	r0, r1, #0x2
	ldr	r1, .L4375+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L4376:
	.align	2, 0
.L4375:
	.word	gBattleCommunication
	.word	.L4372
	.align	2, 0
	.align	2, 0
.L4372:
	.word	.L4356
	.word	.L4357
	.word	.L4365
	.word	.L4367
	.word	.L4369
.L4356:
	mov	r4, #0x0
	str	r4, [sp]
	mov	r0, #0x18
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	ldr	r0, .L4377
	mov	r1, #0xc
	bl	BattlePutTextOnWindow
	ldr	r1, .L4377+0x4
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	strb	r4, [r1, #0x1]
	mov	r0, #0x0
	bl	BattleCreateYesNoCursorAt
	b	.L4355
.L4378:
	.align	2, 0
.L4377:
	.word	gText_BattleYesNoChoice
	.word	gBattleCommunication
.L4357:
	ldr	r0, .L4379
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4358	@cond_branch
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	beq	.L4358	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4, #0x1]
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x0
	strb	r0, [r4, #0x1]
	bl	BattleCreateYesNoCursorAt
.L4358:
	ldr	r0, .L4379
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4359	@cond_branch
	ldr	r4, .L4379+0x4
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	bne	.L4359	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4, #0x1]
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x1
	strb	r0, [r4, #0x1]
	bl	BattleCreateYesNoCursorAt
.L4359:
	ldr	r0, .L4379
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L4360	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L4379+0x4
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.L4374	@cond_branch
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r0, #0x3
	bl	BeginFastPaletteFade
	b	.L4355
.L4380:
	.align	2, 0
.L4379:
	.word	gMain
	.word	gBattleCommunication
.L4360:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB42731
	b	.L4355	@long jump
.LCB42731:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L4381
.L4374:
	mov	r0, #0x4
	strb	r0, [r1]
	b	.L4355
.L4382:
	.align	2, 0
.L4381:
	.word	gBattleCommunication
.L4365:
	ldr	r0, .L4383
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB42755
	b	.L4355	@long jump
.LCB42755:
	ldr	r7, .L4383+0x4
	ldr	r0, .L4383+0x8
	mov	sl, r0
	ldrb	r0, [r0]
	mov	r4, #0x1
	eor	r0, r0, r4
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r1, #0x64
	mov	r9, r1
	mov	r2, r9
	mul	r2, r2, r0
	add	r0, r2, #0
	ldr	r1, .L4383+0xc
	mov	r8, r1
	add	r0, r0, r8
	ldr	r1, .L4383+0x10
	ldr	r2, [r1]
	add	r2, r2, #0x6d
	mov	r1, #0x2
	bl	GetMonData
	bl	FreeAllWindowBuffers
	mov	r2, sl
	ldrb	r0, [r2]
	eor	r0, r0, r4
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r8
	mov	r1, #0xb
	bl	GetMonData
	add	r6, r0, #0
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	mov	r2, sl
	ldrb	r0, [r2]
	eor	r0, r0, r4
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r8
	bl	GetMonGender
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r2, sl
	ldrb	r0, [r2]
	eor	r4, r4, r0
	lsl	r4, r4, #0x1
	add	r4, r4, r7
	ldrh	r0, [r4]
	mov	r1, r9
	mul	r1, r1, r0
	add	r0, r1, #0
	add	r0, r0, r8
	mov	r1, #0x0
	mov	r2, #0x0
	bl	GetMonData
	ldr	r2, .L4383+0x10
	ldr	r1, [r2]
	add	r1, r1, #0x6d
	str	r0, [sp]
	ldr	r0, .L4383+0x14
	str	r0, [sp, #0x4]
	mov	r0, #0x2
	add	r2, r6, #0
	add	r3, r5, #0
	bl	DoNamingScreen
	ldr	r1, .L4383+0x18
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L4355
.L4384:
	.align	2, 0
.L4383:
	.word	gPaletteFade
	.word	gBattlerPartyIndexes
	.word	gBattlerAttacker
	.word	gEnemyParty
	.word	gBattleStruct
	.word	BattleMainCB2
	.word	gBattleCommunication
.L4367:
	ldr	r0, .L4385
	ldr	r1, [r0, #0x4]
	ldr	r0, .L4385+0x4
	cmp	r1, r0
	bne	.L4355	@cond_branch
	ldr	r0, .L4385+0x8
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L4355	@cond_branch
	ldr	r2, .L4385+0xc
	ldr	r0, .L4385+0x10
	ldrb	r1, [r0]
	mov	r0, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L4385+0x14
	add	r0, r0, r1
	ldr	r1, .L4385+0x18
	ldr	r2, [r1]
	add	r2, r2, #0x6d
	mov	r1, #0x2
	bl	SetMonData
	b	.L4370
.L4386:
	.align	2, 0
.L4385:
	.word	gMain
	.word	BattleMainCB2
	.word	gPaletteFade
	.word	gBattlerPartyIndexes
	.word	gBattlerAttacker
	.word	gEnemyParty
	.word	gBattleStruct
.L4369:
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x6
	bne	.L4370	@cond_branch
	ldr	r1, .L4387
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
	b	.L4355
.L4388:
	.align	2, 0
.L4387:
	.word	gBattlescriptCurrInstr
.L4370:
	ldr	r3, .L4389
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
.L4355:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4390:
	.align	2, 0
.L4389:
	.word	gBattlescriptCurrInstr
.Lfe280:
	.size	 atkF3_trygivecaughtmonnick,.Lfe280-atkF3_trygivecaughtmonnick
	.align	2, 0
	.type	 atkF4_subattackerhpbydmg,function
	.thumb_func
atkF4_subattackerhpbydmg:
	ldr	r2, .L4392
	ldr	r0, .L4392+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r1, r1, r2
	ldr	r0, .L4392+0x8
	ldr	r2, [r0]
	ldrh	r0, [r1, #0x28]
	sub	r0, r0, r2
	strh	r0, [r1, #0x28]
	ldr	r1, .L4392+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L4393:
	.align	2, 0
.L4392:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattleMoveDamage
	.word	gBattlescriptCurrInstr
.Lfe281:
	.size	 atkF4_subattackerhpbydmg,.Lfe281-atkF4_subattackerhpbydmg
	.align	2, 0
	.type	 atkF5_removeattackerstatus1,function
	.thumb_func
atkF5_removeattackerstatus1:
	ldr	r1, .L4395
	ldr	r0, .L4395+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x4c
	add	r0, r0, r1
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r1, .L4395+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L4396:
	.align	2, 0
.L4395:
	.word	gBattleMons
	.word	gBattlerAttacker
	.word	gBattlescriptCurrInstr
.Lfe282:
	.size	 atkF5_removeattackerstatus1,.Lfe282-atkF5_removeattackerstatus1
	.align	2, 0
	.type	 atkF6_finishaction,function
	.thumb_func
atkF6_finishaction:
	ldr	r1, .L4398
	mov	r0, #0xc
	strb	r0, [r1]
	bx	lr
.L4399:
	.align	2, 0
.L4398:
	.word	gCurrentActionFuncId
.Lfe283:
	.size	 atkF6_finishaction,.Lfe283-atkF6_finishaction
	.align	2, 0
	.type	 atkF7_finishturn,function
	.thumb_func
atkF7_finishturn:
	ldr	r1, .L4401
	mov	r0, #0xc
	strb	r0, [r1]
	ldr	r1, .L4401+0x4
	ldr	r0, .L4401+0x8
	ldrb	r0, [r0]
	strb	r0, [r1]
	bx	lr
.L4402:
	.align	2, 0
.L4401:
	.word	gCurrentActionFuncId
	.word	gCurrentTurnActionNumber
	.word	gBattlersCount
.Lfe284:
	.size	 atkF7_finishturn,.Lfe284-atkF7_finishturn
	.align	2, 0
	.type	 atkF8_trainerslideout,function
	.thumb_func
atkF8_trainerslideout:
	push	{r4, r5, lr}
	ldr	r5, .L4404
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x1]
	bl	GetBattlerAtPosition
	ldr	r4, .L4404+0x4
	strb	r0, [r4]
	mov	r0, #0x0
	bl	BtlController_EmitTrainerSlideBack
	ldrb	r0, [r4]
	bl	MarkBattlerForControllerExec
	ldr	r0, [r5]
	add	r0, r0, #0x2
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L4405:
	.align	2, 0
.L4404:
	.word	gBattlescriptCurrInstr
	.word	gActiveBattler
.Lfe285:
	.size	 atkF8_trainerslideout,.Lfe285-atkF8_trainerslideout
.text
	.align	2, 0

