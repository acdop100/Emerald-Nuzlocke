@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gUnknown_08596AE0
	.section .rodata
	.align	2, 0
	.type	 gUnknown_08596AE0,object
gUnknown_08596AE0:
	.short	0x20
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08596AE0,8
	.globl	gUnknown_08596AE8
	.align	2, 0
	.type	 gUnknown_08596AE8,object
gUnknown_08596AE8:
	.short	0x30
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08596AE8,8
	.globl	gUnknown_08596AF0
	.align	2, 0
	.type	 gUnknown_08596AF0,object
gUnknown_08596AF0:
	.short	0x40
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08596AF0,8
	.globl	gUnknown_08596AF8
	.align	2, 0
	.type	 gUnknown_08596AF8,object
gUnknown_08596AF8:
	.word	gUnknown_08596AE0
	.word	gUnknown_08596AE8
	.word	gUnknown_08596AF0
	.size	 gUnknown_08596AF8,12
	.globl	gUnknown_08596B04
	.align	2, 0
	.type	 gUnknown_08596B04,object
	.size	 gUnknown_08596B04,24
gUnknown_08596B04:
	.short	0x274a
	.short	0x274a
	.word	gUnknown_08524914
	.word	gUnknown_08596AF8
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_81109F0
	.globl	gUnknown_08596B1C
	.align	2, 0
	.type	 gUnknown_08596B1C,object
	.size	 gUnknown_08596B1C,24
gUnknown_08596B1C:
	.short	0x274a
	.short	0x274a
	.word	gUnknown_08524914
	.word	gUnknown_08596AF8
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8110AB4
	.globl	gUnknown_08596B34
	.align	2, 0
	.type	 gUnknown_08596B34,object
	.size	 gUnknown_08596B34,24
gUnknown_08596B34:
	.short	0x275a
	.short	0x275a
	.word	gUnknown_08524904
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8110B38
	.globl	gUnknown_08596B4C
	.align	2, 0
	.type	 gUnknown_08596B4C,object
gUnknown_08596B4C:
	.short	0xc0
	.short	0xc0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x2
	.short	-0x3
	.byte	0x0
	.byte	0x5
	.space	2
	.short	-0x2
	.short	0x3
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gUnknown_08596B4C,32
	.globl	gUnknown_08596B6C
	.align	2, 0
	.type	 gUnknown_08596B6C,object
gUnknown_08596B6C:
	.word	gUnknown_08596B4C
	.size	 gUnknown_08596B6C,4
	.globl	gUnknown_08596B70
	.align	2, 0
	.type	 gUnknown_08596B70,object
	.size	 gUnknown_08596B70,24
gUnknown_08596B70:
	.short	0x27a5
	.short	0x27a5
	.word	gUnknown_08524A8C
	.word	gUnknown_085950E0
	.word	0x0
	.word	gUnknown_08596B6C
	.word	sub_8110B38
	.globl	gUnknown_08596B88
	.align	2, 0
	.type	 gUnknown_08596B88,object
	.size	 gUnknown_08596B88,24
gUnknown_08596B88:
	.short	0x272d
	.short	0x272d
	.word	gUnknown_08524914
	.word	gUnknown_085954D0
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8110B38
	.globl	gBattleAnimSpriteTemplate_8596BA0
	.align	2, 0
	.type	 gBattleAnimSpriteTemplate_8596BA0,object
	.size	 gBattleAnimSpriteTemplate_8596BA0,24
gBattleAnimSpriteTemplate_8596BA0:
	.short	0x2815
	.short	0x2815
	.word	gUnknown_08524934
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimDirtParticleAcrossScreen
	.globl	gUnknown_08596BB8
	.align	2, 0
	.type	 gUnknown_08596BB8,object
	.size	 gUnknown_08596BB8,8
gUnknown_08596BB8:
	.byte	-0x10
	.byte	0x0
	.byte	0x9
	.byte	0x40
	.byte	0x10
	.byte	0x0
	.byte	0x89
	.byte	0x40
	.globl	gUnknown_08596BC0
	.align	2, 0
	.type	 gUnknown_08596BC0,object
gUnknown_08596BC0:
	.byte	0x2
	.space	3
	.word	gUnknown_08596BB8
	.size	 gUnknown_08596BC0,8
	.globl	gUnknown_08596BC8
	.align	2, 0
	.type	 gUnknown_08596BC8,object
gUnknown_08596BC8:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08596BC8,8
	.globl	gUnknown_08596BD0
	.align	2, 0
	.type	 gUnknown_08596BD0,object
gUnknown_08596BD0:
	.short	0x10
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08596BD0,8
	.globl	gUnknown_08596BD8
	.align	2, 0
	.type	 gUnknown_08596BD8,object
gUnknown_08596BD8:
	.short	0x20
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08596BD8,8
	.globl	gUnknown_08596BE0
	.align	2, 0
	.type	 gUnknown_08596BE0,object
gUnknown_08596BE0:
	.short	0x30
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08596BE0,8
	.globl	gUnknown_08596BE8
	.align	2, 0
	.type	 gUnknown_08596BE8,object
gUnknown_08596BE8:
	.short	0x40
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08596BE8,8
	.globl	gUnknown_08596BF0
	.align	2, 0
	.type	 gUnknown_08596BF0,object
gUnknown_08596BF0:
	.short	0x50
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08596BF0,8
	.globl	gUnknown_08596BF8
	.align	2, 0
	.type	 gUnknown_08596BF8,object
gUnknown_08596BF8:
	.word	gUnknown_08596BC8
	.word	gUnknown_08596BD0
	.size	 gUnknown_08596BF8,8
	.globl	gUnknown_08596C00
	.align	2, 0
	.type	 gUnknown_08596C00,object
gUnknown_08596C00:
	.word	gUnknown_08596BD8
	.word	gUnknown_08596BE0
	.size	 gUnknown_08596C00,8
	.globl	gUnknown_08596C08
	.align	2, 0
	.type	 gUnknown_08596C08,object
gUnknown_08596C08:
	.word	gUnknown_08596BE8
	.word	gUnknown_08596BF0
	.size	 gUnknown_08596C08,8
	.globl	gUnknown_08596C10
	.align	2, 0
	.type	 gUnknown_08596C10,object
	.size	 gUnknown_08596C10,24
gUnknown_08596C10:
	.short	0x274a
	.short	0x274a
	.word	gUnknown_08524914
	.word	gUnknown_08596BF8
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimRaiseSprite
	.globl	gUnknown_08596C28
	.align	2, 0
	.type	 gUnknown_08596C28,object
	.size	 gUnknown_08596C28,24
gUnknown_08596C28:
	.short	0x275a
	.short	0x275a
	.word	gUnknown_08524904
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_811131C
	.globl	gUnknown_08596C40
	.align	2, 0
	.type	 gUnknown_08596C40,object
	.size	 gUnknown_08596C40,24
gUnknown_08596C40:
	.short	0x274a
	.short	0x274a
	.word	gUnknown_08524914
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_811131C
	.globl	gUnknown_08596C58
	.align	2, 0
	.type	 gUnknown_08596C58,object
	.size	 gUnknown_08596C58,24
gUnknown_08596C58:
	.short	0x274a
	.short	0x274a
	.word	gUnknown_08524914
	.word	gUnknown_08596BF8
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8111388
	.globl	gUnknown_08596C70
	.align	2, 0
	.type	 gUnknown_08596C70,object
gUnknown_08596C70:
	.short	0x0
	.short	0x0
	.byte	0xfb
	.byte	0x5
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gUnknown_08596C70,16
	.globl	gUnknown_08596C80
	.align	2, 0
	.type	 gUnknown_08596C80,object
gUnknown_08596C80:
	.short	0x0
	.short	0x0
	.byte	0x5
	.byte	0x5
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gUnknown_08596C80,16
	.globl	gUnknown_08596C90
	.align	2, 0
	.type	 gUnknown_08596C90,object
gUnknown_08596C90:
	.word	gUnknown_08596C70
	.word	gUnknown_08596C80
	.size	 gUnknown_08596C90,8
	.globl	gUnknown_08596C98
	.align	2, 0
	.type	 gUnknown_08596C98,object
	.size	 gUnknown_08596C98,24
gUnknown_08596C98:
	.short	0x274a
	.short	0x274a
	.word	gUnknown_08524974
	.word	gUnknown_08596BF8
	.word	0x0
	.word	gUnknown_08596C90
	.word	sub_8111418
	.globl	gUnknown_08596CB0
	.align	2, 0
	.type	 gUnknown_08596CB0,object
	.size	 gUnknown_08596CB0,24
gUnknown_08596CB0:
	.short	0x274a
	.short	0x274a
	.word	gUnknown_08524974
	.word	gUnknown_08596BF8
	.word	0x0
	.word	gUnknown_08596C90
	.word	sub_8111444
	.globl	gUnknown_08596CC8
	.align	2, 0
	.type	 gUnknown_08596CC8,object
	.size	 gUnknown_08596CC8,24
gUnknown_08596CC8:
	.short	0x274a
	.short	0x274a
	.word	gUnknown_08524914
	.word	gUnknown_08596C08
	.word	0x0
	.word	gUnknown_08596C90
	.word	AnimMoveTwisterParticle
	.globl	gUnknown_08596CE0
	.align	2, 0
	.type	 gUnknown_08596CE0,object
	.size	 gUnknown_08596CE0,24
gUnknown_08596CE0:
	.short	0x274a
	.short	0x274a
	.word	gUnknown_08524974
	.word	gUnknown_08596C00
	.word	0x0
	.word	gUnknown_08596C90
	.word	sub_80A8EE4
.text
	.align	2, 0
	.globl	sub_81109F0
	.type	 sub_81109F0,function
	.thumb_func
sub_81109F0:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L4
	mov	r1, #0x6
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	beq	.L3	@cond_branch
	ldr	r0, .L4+0x4
	ldrb	r0, [r0]
	add	r2, r5, #0
	add	r2, r2, #0x20
	add	r3, r5, #0
	add	r3, r3, #0x22
	mov	r1, #0x0
	bl	SetAverageBattlerPositions
.L3:
	ldrh	r0, [r6]
	ldrh	r1, [r5, #0x20]
	add	r0, r0, r1
	mov	r4, #0x0
	strh	r0, [r5, #0x20]
	ldrh	r0, [r5, #0x22]
	add	r0, r0, #0xe
	strh	r0, [r5, #0x22]
	ldrb	r1, [r6, #0x2]
	add	r0, r5, #0
	bl	StartSpriteAnim
	add	r0, r5, #0
	bl	AnimateSprite
	strh	r4, [r5, #0x2e]
	strh	r4, [r5, #0x30]
	mov	r0, #0x4
	strh	r0, [r5, #0x32]
	mov	r0, #0x10
	strh	r0, [r5, #0x34]
	ldr	r0, .L4+0x8
	strh	r0, [r5, #0x36]
	ldrh	r0, [r6, #0x4]
	strh	r0, [r5, #0x38]
	ldr	r1, .L4+0xc
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r1, .L4+0x10
	str	r1, [r5, #0x1c]
	add	r0, r5, #0
	bl	_call_via_r1
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L5:
	.align	2, 0
.L4:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	0xffba
	.word	sub_8110A70
	.word	TranslateSpriteInEllipseOverDuration
.Lfe1:
	.size	 sub_81109F0,.Lfe1-sub_81109F0
	.align	2, 0
	.type	 sub_8110A70,function
	.thumb_func
sub_8110A70:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x38]
	ldrh	r2, [r4, #0x20]
	add	r0, r1, r2
	strh	r0, [r4, #0x20]
	mov	r0, #0xc0
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	mov	r0, #0x4
	strh	r0, [r4, #0x32]
	mov	r0, #0x20
	strh	r0, [r4, #0x34]
	ldr	r0, .L7
	strh	r0, [r4, #0x36]
	ldr	r1, .L7+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r1, .L7+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L8:
	.align	2, 0
.L7:
	.word	0xffe8
	.word	DestroySpriteAndMatrix
	.word	TranslateSpriteInEllipseOverDuration
.Lfe2:
	.size	 sub_8110A70,.Lfe2-sub_8110A70
	.align	2, 0
	.globl	sub_8110AB4
	.type	 sub_8110AB4,function
	.thumb_func
sub_8110AB4:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L13
	ldrb	r1, [r4, #0xa]
	bl	StartSpriteAnim
	add	r0, r5, #0
	bl	AnimateSprite
	ldr	r0, .L13+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L10	@cond_branch
	ldrh	r0, [r5, #0x20]
	ldrh	r1, [r4]
	sub	r0, r0, r1
	b	.L12
.L14:
	.align	2, 0
.L13:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L10:
	ldrh	r0, [r4]
	ldrh	r1, [r5, #0x20]
	add	r0, r0, r1
.L12:
	strh	r0, [r5, #0x20]
	ldr	r3, .L15
	ldrh	r2, [r3, #0x2]
	ldrh	r0, [r5, #0x22]
	add	r2, r2, r0
	mov	r4, #0x0
	strh	r2, [r5, #0x22]
	ldrh	r0, [r3, #0x8]
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r5, #0x20]
	strh	r0, [r5, #0x30]
	ldrh	r1, [r3, #0x4]
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	strh	r2, [r5, #0x34]
	ldrh	r0, [r3, #0x6]
	add	r2, r2, r0
	strh	r2, [r5, #0x36]
	add	r0, r5, #0
	bl	InitSpriteDataForLinearTranslation
	strh	r4, [r5, #0x34]
	strh	r4, [r5, #0x36]
	ldr	r0, .L15+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L15+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	gBattleAnimArgs
	.word	TranslateSpriteLinearFixedPoint
	.word	DestroySpriteAndMatrix
.Lfe3:
	.size	 sub_8110AB4,.Lfe3-sub_8110AB4
	.align	2, 0
	.globl	sub_8110B38
	.type	 sub_8110B38,function
	.thumb_func
sub_8110B38:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L20
	mov	r1, #0xc
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L18	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	b	.L19
.L21:
	.align	2, 0
.L20:
	.word	gBattleAnimArgs
.L18:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
.L19:
	ldr	r1, .L22
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r1, #0xa]
	strh	r0, [r4, #0x34]
	ldr	r0, .L22+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	gBattleAnimArgs
	.word	sub_8110B80
.Lfe4:
	.size	 sub_8110B38,.Lfe4-sub_8110B38
	.align	2, 0
	.type	 sub_8110B80,function
	.thumb_func
sub_8110B80:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x36]
	add	r0, r0, r1
	strh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	neg	r0, r0
	strh	r0, [r4, #0x26]
	mov	r2, #0x38
	ldrsh	r0, [r4, r2]
	mov	r2, #0x34
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x32]
	ldrh	r1, [r4, #0x38]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L25	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L25:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 sub_8110B80,.Lfe5-sub_8110B80
	.align	2, 0
	.globl	AnimTask_LoadSandstormBackground
	.type	 AnimTask_LoadSandstormBackground,function
	.thumb_func
AnimTask_LoadSandstormBackground:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r5, #0x0
	ldr	r1, .L29
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L27	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x1
	bl	SetAnimBgAttribute
.L27:
	ldr	r0, .L29+0x4
	strh	r5, [r0]
	ldr	r4, .L29+0x8
	strh	r5, [r4]
	mov	r0, #0x14
	mov	r1, #0x0
	bl	SetGpuReg
	ldrh	r1, [r4]
	mov	r0, #0x16
	bl	SetGpuReg
	mov	r0, sp
	bl	sub_80A6B30
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L29+0xc
	mov	r2, sp
	ldrh	r2, [r2, #0xa]
	bl	AnimLoadCompressedBgGfx
	ldr	r1, .L29+0x10
	mov	r0, sp
	mov	r2, #0x0
	bl	sub_80A6D60
	ldr	r0, .L29+0x14
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldr	r0, .L29+0x18
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L28	@cond_branch
	ldr	r0, .L29+0x1c
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L28	@cond_branch
	mov	r5, #0x1
.L28:
	ldr	r0, .L29+0x20
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	strh	r5, [r1, #0x8]
	ldr	r0, .L29+0x24
	str	r0, [r1]
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L30:
	.align	2, 0
.L29:
	.word	0x3f42
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gUnknown_08D8D58C
	.word	gUnknown_08D8D410
	.word	gBattleAnimSpritePal_FlyingDirt
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gTasks
	.word	sub_8110CB0
.Lfe6:
	.size	 AnimTask_LoadSandstormBackground,.Lfe6-AnimTask_LoadSandstormBackground
	.align	2, 0
	.type	 sub_8110CB0,function
	.thumb_func
sub_8110CB0:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L50
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	add	r2, r1, #0
	cmp	r0, #0
	bne	.L32	@cond_branch
	ldr	r1, .L50+0x4
	ldr	r3, .L50+0x8
	add	r0, r3, #0
	ldrh	r3, [r1]
	add	r0, r0, r3
	b	.L48
.L51:
	.align	2, 0
.L50:
	.word	gTasks
	.word	gBattle_BG1_X
	.word	0xfffa
.L32:
	ldr	r1, .L52
	ldrh	r0, [r1]
	add	r0, r0, #0x6
.L48:
	strh	r0, [r1]
	ldr	r1, .L52+0x4
	ldr	r3, .L52+0x8
	add	r0, r3, #0
	ldrh	r3, [r1]
	add	r0, r0, r3
	strh	r0, [r1]
	lsl	r1, r5, #0x2
	add	r0, r1, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r3, #0x20
	ldrsh	r0, [r0, r3]
	add	r4, r1, #0
	cmp	r0, #0x4
	bls	.LCB485
	b	.L34	@long jump
.LCB485:
	lsl	r0, r0, #0x2
	ldr	r1, .L52+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L53:
	.align	2, 0
.L52:
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	0xffff
	.word	.L46
	.align	2, 0
	.align	2, 0
.L46:
	.word	.L35
	.word	.L38
	.word	.L40
	.word	.L43
	.word	.L44
.L35:
	add	r0, r4, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	mov	r5, #0x0
	strh	r0, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L34	@cond_branch
	strh	r5, [r4, #0x1c]
	ldrh	r1, [r4, #0x1e]
	add	r1, r1, #0x1
	strh	r1, [r4, #0x1e]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x1e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7
	bne	.L34	@cond_branch
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x20]
	strh	r5, [r4, #0x1e]
	b	.L34
.L38:
	add	r0, r4, r5
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrh	r0, [r1, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x65
	bne	.L34	@cond_branch
	mov	r0, #0x7
	strh	r0, [r1, #0x1e]
	b	.L49
.L40:
	add	r0, r4, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L34	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	ldrh	r1, [r4, #0x1e]
	sub	r1, r1, #0x1
	strh	r1, [r4, #0x1e]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0x1e
	ldrsh	r1, [r4, r2]
	cmp	r1, #0
	bne	.L34	@cond_branch
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x20]
	strh	r1, [r4, #0x1e]
	b	.L34
.L43:
	mov	r0, sp
	bl	sub_80A6B30
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	bl	sub_80A6C68
	ldr	r0, .L54
	add	r1, r4, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
.L49:
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x20]
	b	.L34
.L55:
	.align	2, 0
.L54:
	.word	gTasks
.L44:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L45	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x0
	bl	SetAnimBgAttribute
.L45:
	ldr	r0, .L56
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L56+0x4
	strh	r1, [r0]
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L34:
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L57:
	.align	2, 0
.L56:
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
.Lfe7:
	.size	 sub_8110CB0,.Lfe7-sub_8110CB0
	.align	2, 0
	.globl	AnimDirtParticleAcrossScreen
	.type	 AnimDirtParticleAcrossScreen,function
	.thumb_func
AnimDirtParticleAcrossScreen:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L59	@cond_branch
	ldr	r4, .L68
	mov	r2, #0x6
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L60	@cond_branch
	ldr	r0, .L68+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L60	@cond_branch
	mov	r0, #0x98
	lsl	r0, r0, #0x1
	strh	r0, [r5, #0x20]
	ldrh	r0, [r4, #0x2]
	neg	r0, r0
	strh	r0, [r4, #0x2]
	mov	r0, #0x1
	strh	r0, [r5, #0x38]
	ldrb	r1, [r5, #0x3]
	sub	r0, r0, #0x40
	and	r0, r0, r1
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r5, #0x3]
	b	.L61
.L69:
	.align	2, 0
.L68:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L60:
	ldr	r0, .L70
	strh	r0, [r5, #0x20]
.L61:
	ldr	r4, .L70+0x4
	ldrh	r0, [r4]
	strh	r0, [r5, #0x22]
	ldr	r1, .L70+0x8
	add	r0, r5, #0
	bl	SetSubspriteTables
	ldrh	r0, [r4, #0x2]
	strh	r0, [r5, #0x30]
	ldrh	r0, [r4, #0x4]
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	b	.L62
.L71:
	.align	2, 0
.L70:
	.word	0xffc0
	.word	gBattleAnimArgs
	.word	gUnknown_08596BC0
.L59:
	ldrh	r1, [r5, #0x30]
	ldrh	r3, [r5, #0x34]
	add	r1, r1, r3
	ldrh	r2, [r5, #0x32]
	ldrh	r0, [r5, #0x36]
	add	r2, r2, r0
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	ldrh	r3, [r5, #0x24]
	add	r0, r0, r3
	strh	r0, [r5, #0x24]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	ldrh	r3, [r5, #0x26]
	add	r0, r0, r3
	strh	r0, [r5, #0x26]
	mov	r0, #0xff
	and	r1, r1, r0
	strh	r1, [r5, #0x34]
	and	r2, r2, r0
	strh	r2, [r5, #0x36]
	mov	r1, #0x38
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L63	@cond_branch
	mov	r2, #0x20
	ldrsh	r0, [r5, r2]
	mov	r3, #0x24
	ldrsh	r1, [r5, r3]
	add	r0, r0, r1
	mov	r1, #0x88
	lsl	r1, r1, #0x1
	cmp	r0, r1
	ble	.L62	@cond_branch
	b	.L67
.L63:
	mov	r1, #0x20
	ldrsh	r0, [r5, r1]
	mov	r2, #0x24
	ldrsh	r1, [r5, r2]
	add	r0, r0, r1
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	bge	.L62	@cond_branch
.L67:
	ldr	r0, .L72
	str	r0, [r5, #0x1c]
.L62:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L73:
	.align	2, 0
.L72:
	.word	DestroyAnimSprite
.Lfe8:
	.size	 AnimDirtParticleAcrossScreen,.Lfe8-AnimDirtParticleAcrossScreen
	.align	2, 0
	.globl	AnimRaiseSprite
	.type	 AnimRaiseSprite,function
	.thumb_func
AnimRaiseSprite:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L75
	ldrb	r1, [r5, #0x8]
	bl	StartSpriteAnim
	add	r0, r4, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r5, #0x4]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x36]
	ldr	r0, .L75+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L75+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L76:
	.align	2, 0
.L75:
	.word	gBattleAnimArgs
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe9:
	.size	 AnimRaiseSprite,.Lfe9-AnimRaiseSprite
	.align	2, 0
	.globl	sub_8110F74
	.type	 sub_8110F74,function
	.thumb_func
sub_8110F74:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L83
	add	r6, r1, r0
	ldr	r5, .L83+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x8
	mov	r1, #0xc0
	lsl	r1, r1, #0xd
	add	r0, r0, r1
	lsr	r7, r0, #0x10
	ldr	r4, .L83+0x8
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x8
	mov	r2, #0xc0
	lsl	r2, r2, #0xd
	add	r0, r0, r2
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldrb	r1, [r5]
	mov	r0, #0x2
	eor	r0, r0, r1
	ldrb	r4, [r4]
	cmp	r0, r4
	bne	.L78	@cond_branch
	mov	r8, r7
.L78:
	bl	sub_811135C
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x1
	bne	.L79	@cond_branch
	mov	r0, #0x20
	b	.L82
.L84:
	.align	2, 0
.L83:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L79:
	lsl	r1, r5, #0x3
	mov	r0, #0x30
	sub	r0, r0, r1
.L82:
	strh	r0, [r6, #0x18]
	mov	r4, #0x0
	strh	r4, [r6, #0x8]
	strh	r4, [r6, #0x1e]
	strh	r4, [r6, #0x1a]
	mov	r0, #0x1
	strh	r0, [r6, #0x20]
	mov	r1, #0x18
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bge	.L81	@cond_branch
	add	r0, r0, #0x7
.L81:
	asr	r0, r0, #0x3
	sub	r0, r0, #0x1
	strh	r0, [r6, #0x1c]
	mov	r2, r9
	lsl	r0, r2, #0x3
	strh	r0, [r6, #0xc]
	lsl	r0, r7, #0x3
	strh	r0, [r6, #0xe]
	mov	r1, sl
	sub	r0, r1, r2
	lsl	r0, r0, #0x3
	mov	r2, #0x18
	ldrsh	r1, [r6, r2]
	bl	__divsi3
	strh	r0, [r6, #0x10]
	mov	r1, r8
	sub	r0, r1, r7
	lsl	r0, r0, #0x3
	mov	r2, #0x18
	ldrsh	r1, [r6, r2]
	bl	__divsi3
	strh	r0, [r6, #0x12]
	strh	r4, [r6, #0x14]
	strh	r4, [r6, #0x16]
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x8
	lsr	r4, r4, #0x10
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	lsl	r0, r0, #0x18
	strh	r4, [r6, #0x22]
	asr	r0, r0, #0x18
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	sub	r0, r0, r4
	mov	r2, #0x18
	ldrsh	r1, [r6, r2]
	bl	__divsi3
	strh	r0, [r6, #0x24]
	strh	r5, [r6, #0xa]
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x26]
	ldr	r0, .L85
	str	r0, [r6]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L86:
	.align	2, 0
.L85:
	.word	sub_81110A4
.Lfe10:
	.size	 sub_8110F74,.Lfe10-sub_8110F74
	.align	2, 0
	.globl	sub_81110A4
	.type	 sub_81110A4,function
	.thumb_func
sub_81110A4:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L104
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	bls	.LCB1066
	b	.L88	@long jump
.LCB1066:
	lsl	r0, r0, #0x2
	ldr	r1, .L104+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L105:
	.align	2, 0
.L104:
	.word	gTasks
	.word	.L101
	.align	2, 0
	.align	2, 0
.L101:
	.word	.L89
	.word	.L91
	.word	.L93
	.word	.L96
	.word	.L99
.L89:
	ldrh	r2, [r4, #0x14]
	ldrh	r0, [r4, #0x10]
	sub	r2, r2, r0
	strh	r2, [r4, #0x14]
	ldrh	r0, [r4, #0x16]
	ldrh	r1, [r4, #0x12]
	sub	r0, r0, r1
	strh	r0, [r4, #0x16]
	ldr	r3, .L106
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x13
	strh	r2, [r0, #0x24]
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r4, #0x16]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	strh	r0, [r1, #0x26]
	ldrh	r0, [r4, #0x1a]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	bne	.L90	@cond_branch
	mov	r0, #0x14
	strh	r0, [r4, #0x1e]
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L90:
	ldrh	r1, [r4, #0x22]
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xa2
	bl	PlaySE12WithPanning
	b	.L88
.L107:
	.align	2, 0
.L106:
	.word	gSprites
.L91:
	ldrh	r0, [r4, #0x1e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x1e]
	b	.L103
.L93:
	ldrh	r0, [r4, #0x1a]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x1a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	beq	.L94	@cond_branch
	ldrh	r0, [r4, #0x10]
	ldrh	r2, [r4, #0x14]
	add	r0, r0, r2
	strh	r0, [r4, #0x14]
	ldrh	r0, [r4, #0x12]
	ldrh	r1, [r4, #0x16]
	add	r0, r0, r1
	strh	r0, [r4, #0x16]
	b	.L95
.L94:
	strh	r0, [r4, #0x14]
	strh	r0, [r4, #0x16]
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L95:
	ldr	r2, .L108
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r4, #0x14]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	strh	r0, [r1, #0x24]
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r4, #0x16]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	strh	r0, [r1, #0x26]
	b	.L88
.L109:
	.align	2, 0
.L108:
	.word	gSprites
.L96:
	ldrh	r0, [r4, #0x10]
	ldrh	r2, [r4, #0xc]
	add	r0, r0, r2
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x12]
	ldrh	r1, [r4, #0xe]
	add	r0, r0, r1
	strh	r0, [r4, #0xe]
	ldrh	r0, [r4, #0x1a]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x1c
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	blt	.L97	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1a]
	add	r0, r4, #0
	bl	sub_8111214
	ldrh	r1, [r4, #0x24]
	ldrh	r0, [r4, #0x22]
	add	r1, r1, r0
	strh	r1, [r4, #0x22]
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xaf
	bl	PlaySE12WithPanning
.L97:
	ldrh	r0, [r4, #0x18]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x18]
.L103:
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L88	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L88
.L99:
	mov	r1, #0x1e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L88	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L88:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 sub_81110A4,.Lfe11-sub_81110A4
	.align	2, 0
	.type	 sub_8111214,function
	.thumb_func
sub_8111214:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0xa]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bhi	.L110	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L120
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L121:
	.align	2, 0
.L120:
	.word	.L118
	.align	2, 0
	.align	2, 0
.L118:
	.word	.L112
	.word	.L114
	.word	.L114
	.word	.L115
	.word	.L116
.L112:
	ldr	r3, .L122
	mov	r5, #0x0
	b	.L111
.L123:
	.align	2, 0
.L122:
	.word	gUnknown_08596C28
.L114:
	ldr	r3, .L124
	mov	r5, #0x50
	b	.L111
.L125:
	.align	2, 0
.L124:
	.word	gUnknown_08596C40
.L115:
	ldr	r3, .L126
	mov	r5, #0x40
	b	.L111
.L127:
	.align	2, 0
.L126:
	.word	gUnknown_08596C40
.L116:
	ldr	r3, .L128
	mov	r5, #0x30
.L111:
	ldrh	r1, [r4, #0xc]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x13
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldrh	r2, [r4, #0xe]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x13
	lsl	r2, r2, #0x10
	mov	r6, #0x20
	ldrsh	r0, [r4, r6]
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	asr	r1, r1, #0x10
	lsr	r7, r2, #0x10
	asr	r2, r2, #0x10
	add	r0, r3, #0
	mov	r3, #0x23
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x40
	beq	.L119	@cond_branch
	ldr	r1, .L128+0x4
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x12
	strh	r1, [r0, #0x2e]
	mov	r2, #0x20
	ldrsh	r1, [r4, r2]
	lsl	r2, r1, #0x2
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r6, r2
	mov	r6, #0xa
	ldrsh	r3, [r4, r6]
	lsl	r1, r3, #0x1
	add	r1, r1, r3
	add	r2, r2, r1
	strh	r2, [r0, #0x32]
	strh	r7, [r0, #0x36]
	mov	r1, #0xa
	ldrsh	r2, [r4, r1]
	lsl	r2, r2, #0x1
	mov	r3, #0x10
	neg	r3, r3
	add	r1, r3, #0
	sub	r1, r1, r2
	strh	r1, [r0, #0x38]
	ldrh	r3, [r0, #0x4]
	lsl	r2, r3, #0x16
	lsr	r2, r2, #0x16
	add	r2, r2, r5
	ldr	r5, .L128+0x8
	add	r1, r5, #0
	and	r2, r2, r1
	ldr	r1, .L128+0xc
	and	r1, r1, r3
	orr	r1, r1, r2
	strh	r1, [r0, #0x4]
	bl	InitAnimArcTranslation
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1e]
.L119:
	mov	r6, #0x20
	ldrsh	r0, [r4, r6]
	neg	r0, r0
	strh	r0, [r4, #0x20]
.L110:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L129:
	.align	2, 0
.L128:
	.word	gUnknown_08596C40
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.Lfe12:
	.size	 sub_8111214,.Lfe12-sub_8111214
	.align	2, 0
	.globl	sub_811131C
	.type	 sub_811131C,function
	.thumb_func
sub_811131C:
	push	{r4, lr}
	add	r4, r0, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L131	@cond_branch
	ldr	r0, .L133
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	beq	.L132	@cond_branch
	ldr	r0, .L133+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x1e]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x1e]
.L132:
	add	r0, r4, #0
	bl	DestroySprite
.L131:
	pop	{r4}
	pop	{r0}
	bx	r0
.L134:
	.align	2, 0
.L133:
	.word	sub_81110A4
	.word	gTasks
.Lfe13:
	.size	 sub_811131C,.Lfe13-sub_811131C
	.align	2, 0
	.type	 sub_811135C,function
	.thumb_func
sub_811135C:
	push	{lr}
	ldr	r0, .L137
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x11]
	lsr	r0, r1, #0x4
	lsl	r1, r1, #0x1c
	lsr	r1, r1, #0x1c
	sub	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r2, #0xff
	lsl	r2, r2, #0x18
	add	r0, r0, r2
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L136	@cond_branch
	mov	r1, #0x1
.L136:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.L138:
	.align	2, 0
.L137:
	.word	gAnimDisableStructPtr
.Lfe14:
	.size	 sub_811135C,.Lfe14-sub_811135C
	.align	2, 0
	.globl	sub_8111388
	.type	 sub_8111388,function
	.thumb_func
sub_8111388:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L140
	ldrb	r1, [r5, #0x8]
	bl	StartSpriteAnim
	ldrh	r0, [r5]
	strh	r0, [r4, #0x24]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x34]
	ldrh	r1, [r5, #0x4]
	sub	r0, r0, r1
	strh	r0, [r4, #0x34]
	mov	r0, #0x3
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x30]
	ldr	r0, .L140+0x4
	str	r0, [r4, #0x1c]
	add	r4, r4, #0x3e
	ldrb	r0, [r4]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L141:
	.align	2, 0
.L140:
	.word	gBattleAnimArgs
	.word	sub_81113C8
.Lfe15:
	.size	 sub_8111388,.Lfe15-sub_8111388
	.align	2, 0
	.type	 sub_81113C8,function
	.thumb_func
sub_81113C8:
	push	{lr}
	add	r2, r0, #0
	add	r3, r2, #0
	add	r3, r3, #0x3e
	ldrb	r0, [r3]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r0
	strb	r1, [r3]
	ldrh	r1, [r2, #0x34]
	mov	r3, #0x34
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	beq	.L143	@cond_branch
	ldrh	r3, [r2, #0x32]
	add	r0, r1, r3
	strh	r0, [r2, #0x26]
	ldrh	r0, [r2, #0x2e]
	add	r1, r1, r0
	strh	r1, [r2, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	ble	.L145	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x34]
	b	.L145
.L143:
	ldrh	r0, [r2, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L145	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L145:
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 sub_81113C8,.Lfe16-sub_81113C8
	.align	2, 0
	.globl	sub_8111418
	.type	 sub_8111418,function
	.thumb_func
sub_8111418:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L149
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L148	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
.L148:
	add	r0, r4, #0
	bl	TranslateAnimSpriteToTargetMonLocation
	pop	{r4}
	pop	{r0}
	bx	r0
.L150:
	.align	2, 0
.L149:
	.word	gBattleAnimAttacker
.Lfe17:
	.size	 sub_8111418,.Lfe17-sub_8111418
	.align	2, 0
	.globl	sub_8111444
	.type	 sub_8111444,function
	.thumb_func
sub_8111444:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L152
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L152+0x4
	ldrh	r3, [r2]
	ldrh	r5, [r4, #0x20]
	add	r1, r3, r5
	strh	r1, [r4, #0x20]
	ldrh	r1, [r2, #0x2]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	strh	r3, [r4, #0x30]
	strh	r1, [r4, #0x32]
	ldrh	r0, [r2, #0x4]
	strh	r0, [r4, #0x38]
	ldrb	r1, [r2, #0x6]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldr	r0, .L152+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L153:
	.align	2, 0
.L152:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	sub_811149C
.Lfe18:
	.size	 sub_8111444,.Lfe18-sub_8111444
	.align	2, 0
	.type	 sub_811149C,function
	.thumb_func
sub_811149C:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x8
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x34]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	strh	r0, [r4, #0x36]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	mov	r1, #0x28
	bl	__divsi3
	ldrh	r1, [r4, #0x24]
	add	r1, r1, r0
	strh	r1, [r4, #0x24]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	bl	Sin
	ldrh	r1, [r4, #0x26]
	sub	r1, r1, r0
	strh	r1, [r4, #0x26]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x8c
	ble	.L155	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L155:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 sub_811149C,.Lfe19-sub_811149C
	.align	2, 0
	.globl	AnimTask_GetSeismicTossDamageLevel
	.type	 AnimTask_GetSeismicTossDamageLevel,function
	.thumb_func
AnimTask_GetSeismicTossDamageLevel:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r2, .L160
	ldr	r0, [r2]
	cmp	r0, #0x20
	bgt	.L157	@cond_branch
	ldr	r1, .L160+0x4
	mov	r0, #0x0
	strh	r0, [r1, #0xe]
.L157:
	ldr	r2, [r2]
	add	r0, r2, #0
	sub	r0, r0, #0x21
	cmp	r0, #0x20
	bhi	.L158	@cond_branch
	ldr	r1, .L160+0x4
	mov	r0, #0x1
	strh	r0, [r1, #0xe]
.L158:
	cmp	r2, #0x41
	ble	.L159	@cond_branch
	ldr	r1, .L160+0x4
	mov	r0, #0x2
	strh	r0, [r1, #0xe]
.L159:
	add	r0, r3, #0
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L161:
	.align	2, 0
.L160:
	.word	gAnimMoveDmg
	.word	gBattleAnimArgs
.Lfe20:
	.size	 AnimTask_GetSeismicTossDamageLevel,.Lfe20-AnimTask_GetSeismicTossDamageLevel
	.align	2, 0
	.globl	sub_811152C
	.type	 sub_811152C,function
	.thumb_func
sub_811152C:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L165
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L163	@cond_branch
	mov	r0, #0x0
	bl	sub_80A6DAC
	mov	r0, #0xc8
	strh	r0, [r5, #0xa]
.L163:
	ldr	r4, .L165+0x4
	mov	r1, #0xa
	ldrsh	r0, [r5, r1]
	mov	r1, #0xa
	bl	__divsi3
	ldrh	r1, [r4]
	add	r1, r1, r0
	strh	r1, [r4]
	ldrh	r0, [r5, #0xa]
	sub	r0, r0, #0x3
	strh	r0, [r5, #0xa]
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x78
	bne	.L164	@cond_branch
	mov	r0, #0x1
	bl	sub_80A6DAC
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L164:
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L166:
	.align	2, 0
.L165:
	.word	gTasks
	.word	gBattle_BG3_Y
.Lfe21:
	.size	 sub_811152C,.Lfe21-sub_811152C
	.align	2, 0
	.globl	sub_8111590
	.type	 sub_8111590,function
	.thumb_func
sub_8111590:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L170
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L168	@cond_branch
	mov	r0, #0x0
	bl	sub_80A6DAC
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	ldr	r0, .L170+0x4
	ldrh	r0, [r0]
	strh	r0, [r4, #0xc]
.L168:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x50
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0xa]
	ldr	r6, .L170+0x4
	mov	r2, #0xa
	ldrsh	r1, [r4, r2]
	mov	r0, #0x4
	bl	Cos
	ldrh	r4, [r4, #0xc]
	add	r0, r0, r4
	strh	r0, [r6]
	ldr	r0, .L170+0x8
	mov	r2, #0xe
	ldrsh	r1, [r0, r2]
	ldr	r0, .L170+0xc
	cmp	r1, r0
	bne	.L169	@cond_branch
	mov	r0, #0x0
	strh	r0, [r6]
	mov	r0, #0x1
	bl	sub_80A6DAC
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L169:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L171:
	.align	2, 0
.L170:
	.word	gTasks
	.word	gBattle_BG3_Y
	.word	gBattleAnimArgs
	.word	0xfff
.Lfe22:
	.size	 sub_8111590,.Lfe22-sub_8111590
.text
	.align	2, 0

