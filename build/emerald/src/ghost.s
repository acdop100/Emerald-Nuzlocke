@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gUnknown_08596CF8
	.section .rodata
	.align	2, 0
	.type	 gUnknown_08596CF8,object
gUnknown_08596CF8:
	.short	0x1e
	.short	0x1e
	.byte	0xa
	.byte	0x5
	.space	2
	.short	-0x1e
	.short	-0x1e
	.byte	0xa
	.byte	0x5
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gUnknown_08596CF8,24
	.globl	gUnknown_08596D10
	.align	2, 0
	.type	 gUnknown_08596D10,object
gUnknown_08596D10:
	.word	gUnknown_08596CF8
	.size	 gUnknown_08596D10,4
	.globl	gUnknown_08596D14
	.align	2, 0
	.type	 gUnknown_08596D14,object
	.size	 gUnknown_08596D14,24
gUnknown_08596D14:
	.short	0x271d
	.short	0x271d
	.word	gUnknown_085249CC
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08596D10
	.word	sub_811160C
	.globl	gUnknown_08596D2C
	.align	2, 0
	.type	 gUnknown_08596D2C,object
	.size	 gUnknown_08596D2C,24
gUnknown_08596D2C:
	.short	0x271d
	.short	0x271d
	.word	gUnknown_08524A2C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_81117F4
	.globl	gUnknown_08596D44
	.align	2, 0
	.type	 gUnknown_08596D44,object
gUnknown_08596D44:
	.short	0x0
	.short	0x0
	.byte	0xa
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gUnknown_08596D44,16
	.globl	gUnknown_08596D54
	.align	2, 0
	.type	 gUnknown_08596D54,object
gUnknown_08596D54:
	.word	gUnknown_08596D44
	.size	 gUnknown_08596D54,4
	.globl	gShadowBallSpriteTemplate
	.align	2, 0
	.type	 gShadowBallSpriteTemplate,object
	.size	 gShadowBallSpriteTemplate,24
gShadowBallSpriteTemplate:
	.short	0x27c0
	.short	0x27c0
	.word	gUnknown_08524974
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08596D54
	.word	InitAnimShadowBall
	.globl	gUnknown_08596D70
	.align	2, 0
	.type	 gUnknown_08596D70,object
gUnknown_08596D70:
	.short	0x0
	.byte	0x2
	.space	1
	.short	0x8
	.byte	0x2
	.space	1
	.short	0x10
	.byte	0x2
	.space	1
	.short	0x18
	.byte	0x2
	.space	1
	.short	0x20
	.byte	0x2
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08596D70,24
	.globl	gUnknown_08596D88
	.align	2, 0
	.type	 gUnknown_08596D88,object
gUnknown_08596D88:
	.word	gUnknown_08596D70
	.size	 gUnknown_08596D88,4
	.globl	gUnknown_08596D8C
	.align	2, 0
	.type	 gUnknown_08596D8C,object
	.size	 gUnknown_08596D8C,24
gUnknown_08596D8C:
	.short	0x27c1
	.short	0x27c1
	.word	gUnknown_08524954
	.word	gUnknown_08596D88
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8111B9C
	.globl	gUnknown_08596DA4
	.align	2, 0
	.type	 gUnknown_08596DA4,object
gUnknown_08596DA4:
	.short	0x200
	.short	0x200
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08596DA4,16
	.globl	gUnknown_08596DB4
	.align	2, 0
	.type	 gUnknown_08596DB4,object
gUnknown_08596DB4:
	.word	gUnknown_08596DA4
	.size	 gUnknown_08596DB4,4
	.globl	gUnknown_08596DB8
	.align	2, 0
	.type	 gUnknown_08596DB8,object
	.size	 gUnknown_08596DB8,24
gUnknown_08596DB8:
	.short	0x27cc
	.short	0x27cc
	.word	gUnknown_08524A5C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8112264
	.globl	gUnknown_08596DD0
	.align	2, 0
	.type	 gUnknown_08596DD0,object
	.size	 gUnknown_08596DD0,24
gUnknown_08596DD0:
	.short	0x27d7
	.short	0x27d7
	.word	gUnknown_08524A54
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_81129F0
	.globl	gBattleAnimSpriteTemplate_8596DE8
	.align	2, 0
	.type	 gBattleAnimSpriteTemplate_8596DE8,object
	.size	 gBattleAnimSpriteTemplate_8596DE8,24
gBattleAnimSpriteTemplate_8596DE8:
	.short	0x27d8
	.short	0x27d8
	.word	gUnknown_08524A34
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8112B78
	.globl	gBattleAnimSpriteTemplate_8596E00
	.align	2, 0
	.type	 gBattleAnimSpriteTemplate_8596E00,object
	.size	 gBattleAnimSpriteTemplate_8596E00,24
gBattleAnimSpriteTemplate_8596E00:
	.short	0x27ed
	.short	0x27ed
	.word	gUnknown_08524A34
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8112B78
	.globl	gUnknown_08596E18
	.align	2, 0
	.type	 gUnknown_08596E18,object
gUnknown_08596E18:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x8
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x18
	.byte	0x4
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_08596E18,20
	.globl	gUnknown_08596E2C
	.align	2, 0
	.type	 gUnknown_08596E2C,object
gUnknown_08596E2C:
	.word	gUnknown_08596E18
	.size	 gUnknown_08596E2C,4
	.globl	gUnknown_08596E30
	.align	2, 0
	.type	 gUnknown_08596E30,object
	.size	 gUnknown_08596E30,24
gUnknown_08596E30:
	.short	0x280d
	.short	0x280d
	.word	gUnknown_08524A74
	.word	gUnknown_08596E2C
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8112E9C
	.globl	gUnknown_08596E48
	.align	2, 0
	.type	 gUnknown_08596E48,object
	.size	 gUnknown_08596E48,24
gUnknown_08596E48:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8112F60
.text
	.align	2, 0
	.type	 sub_811160C,function
	.thumb_func
sub_811160C:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L3
	ldrh	r0, [r0, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldr	r5, .L3+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	sub_80A6FD4
	ldr	r0, .L3+0x8
	str	r0, [r4, #0x1c]
	mov	r0, #0x10
	strh	r0, [r4, #0x3a]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r1, [r4, #0x3a]
	mov	r0, #0x52
	bl	SetGpuReg
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	sub_8111674
.Lfe1:
	.size	 sub_811160C,.Lfe1-sub_811160C
	.align	2, 0
	.type	 sub_8111674,function
	.thumb_func
sub_8111674:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_8111764
	add	r0, r4, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L6	@cond_branch
	ldr	r0, .L9
	str	r0, [r4, #0x1c]
	b	.L5
.L10:
	.align	2, 0
.L9:
	.word	sub_81116E8
.L6:
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0xa
	bl	Sin
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0xf
	bl	Cos
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r2, [r4, #0x38]
	add	r0, r2, #0x5
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x38]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	cmp	r2, #0
	beq	.L7	@cond_branch
	cmp	r2, #0xc4
	ble	.L5	@cond_branch
.L7:
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L5	@cond_branch
	ldr	r0, .L11
	mov	r1, #0x0
	ldrsb	r1, [r0, r1]
	mov	r0, #0xc4
	bl	PlaySE12WithPanning
.L5:
	pop	{r4}
	pop	{r0}
	bx	r0
.L12:
	.align	2, 0
.L11:
	.word	gUnknown_02038440
.Lfe2:
	.size	 sub_8111674,.Lfe2-sub_8111674
	.align	2, 0
	.type	 sub_81116E8,function
	.thumb_func
sub_81116E8:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x1
	strh	r0, [r4, #0x2e]
	add	r0, r4, #0
	bl	AnimTranslateLinear
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0xa
	bl	Sin
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0xf
	bl	Cos
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r2, [r4, #0x38]
	add	r0, r2, #0x5
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x38]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	cmp	r2, #0
	beq	.L15	@cond_branch
	cmp	r2, #0xc4
	ble	.L14	@cond_branch
.L15:
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L14	@cond_branch
	mov	r0, #0xc4
	bl	PlaySE
.L14:
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L17	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L19
	str	r0, [r4, #0x1c]
	b	.L18
.L20:
	.align	2, 0
.L19:
	.word	DestroyAnimSpriteAndDisableBlend
.L17:
	add	r0, r4, #0
	bl	sub_8111764
.L18:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 sub_81116E8,.Lfe3-sub_81116E8
	.align	2, 0
	.type	 sub_8111764,function
	.thumb_func
sub_8111764:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r2, [r4, #0x3a]
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xff
	ble	.L22	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r4, #0x3a]
	lsl	r0, r0, #0x10
	ldr	r1, .L32
	cmp	r0, r1
	bne	.L21	@cond_branch
	mov	r0, #0x0
	b	.L30
.L33:
	.align	2, 0
.L32:
	.word	0x10d0000
.L22:
	ldrh	r1, [r4, #0x3c]
	add	r3, r1, #0x1
	strh	r3, [r4, #0x3c]
	mov	r0, #0xff
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L21	@cond_branch
	ldr	r1, .L34
	and	r1, r1, r3
	strh	r1, [r4, #0x3c]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L25	@cond_branch
	add	r0, r2, #0x1
	b	.L31
.L35:
	.align	2, 0
.L34:
	.word	-0x100
.L25:
	sub	r0, r2, #0x1
.L31:
	strh	r0, [r4, #0x3a]
	ldrh	r0, [r4, #0x3a]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0x3a
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L28	@cond_branch
	cmp	r0, #0x10
	bne	.L27	@cond_branch
.L28:
	ldrh	r0, [r4, #0x3c]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r2, #0
	eor	r0, r0, r1
	strh	r0, [r4, #0x3c]
.L27:
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L21	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x1
.L30:
	strh	r0, [r4, #0x3a]
.L21:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 sub_8111764,.Lfe4-sub_8111764
	.align	2, 0
	.type	 sub_81117F4,function
	.thumb_func
sub_81117F4:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
	ldr	r1, .L37
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L38:
	.align	2, 0
.L37:
	.word	sub_8111814
.Lfe5:
	.size	 sub_81117F4,.Lfe5-sub_81117F4
	.align	2, 0
	.type	 sub_8111814,function
	.thumb_func
sub_8111814:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x20
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x8
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x41
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x82
	bhi	.L40	@cond_branch
	ldrb	r0, [r4, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x8
	b	.L43
.L40:
	ldrb	r0, [r4, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x4
.L43:
	orr	r1, r1, r0
	strb	r1, [r4, #0x5]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x13
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x50
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x3c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3d
	bne	.L42	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L42:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 sub_8111814,.Lfe6-sub_8111814
	.align	2, 0
	.globl	sub_811188C
	.type	 sub_811188C,function
	.thumb_func
sub_811188C:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x1
	bl	PrepareBattlerSpriteForRotScale
	add	r0, r4, #0
	mov	r1, #0x80
	mov	r2, #0x80
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldr	r1, .L45
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	ldr	r1, .L45+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x0
	mov	r1, #0x80
	strh	r1, [r0, #0x8]
	ldr	r1, .L45+0x8
	ldrh	r1, [r1]
	strh	r1, [r0, #0xa]
	strh	r2, [r0, #0xc]
	mov	r1, #0x10
	strh	r1, [r0, #0xe]
	ldr	r1, .L45+0xc
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L46:
	.align	2, 0
.L45:
	.word	gSprites
	.word	gTasks
	.word	gBattleAnimArgs
	.word	sub_8111914
.Lfe7:
	.size	 sub_811188C,.Lfe7-sub_811188C
	.align	2, 0
	.type	 sub_8111914,function
	.thumb_func
sub_8111914:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L50
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	bne	.L47	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	ldrh	r1, [r4, #0xc]
	add	r1, r1, #0x1
	strh	r1, [r4, #0xc]
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x9
	bne	.L47	@cond_branch
	ldr	r0, .L50+0x4
	str	r0, [r4]
.L47:
	pop	{r4}
	pop	{r0}
	bx	r0
.L51:
	.align	2, 0
.L50:
	.word	gTasks
	.word	sub_811196C
.Lfe8:
	.size	 sub_8111914,.Lfe8-sub_8111914
	.align	2, 0
	.type	 sub_811196C,function
	.thumb_func
sub_811196C:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L56
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r1, [r4, #0xa]
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L53	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0xa]
	b	.L52
.L57:
	.align	2, 0
.L56:
	.word	gTasks
.L53:
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x8
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	bgt	.L54	@cond_branch
	mov	r0, #0x8
	ldrsh	r2, [r4, r0]
	add	r0, r1, #0
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	b	.L52
.L54:
	add	r0, r1, #0
	bl	ResetSpriteRotScale
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
.L52:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 sub_811196C,.Lfe9-sub_811196C
	.align	2, 0
	.type	 InitAnimShadowBall,function
	.thumb_func
InitAnimShadowBall:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	ldrh	r5, [r4, #0x20]
	ldrh	r6, [r4, #0x22]
	ldr	r0, .L59
	mov	r8, r0
	ldrb	r0, [r0]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	mov	r9, r1
	strh	r0, [r4, #0x20]
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	mov	r1, r9
	strh	r1, [r4, #0x2e]
	ldr	r2, .L59+0x4
	ldrh	r1, [r2]
	strh	r1, [r4, #0x30]
	ldrh	r1, [r2, #0x2]
	strh	r1, [r4, #0x32]
	ldrh	r1, [r2, #0x4]
	strh	r1, [r4, #0x34]
	ldrh	r1, [r4, #0x20]
	lsl	r1, r1, #0x4
	strh	r1, [r4, #0x36]
	lsl	r0, r0, #0x4
	strh	r0, [r4, #0x38]
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	mov	r1, #0x20
	ldrsh	r0, [r4, r1]
	sub	r5, r5, r0
	lsl	r5, r5, #0x4
	mov	r0, #0x0
	ldrsh	r1, [r2, r0]
	lsl	r1, r1, #0x1
	add	r0, r5, #0
	str	r2, [sp]
	bl	__divsi3
	strh	r0, [r4, #0x3a]
	lsl	r6, r6, #0x10
	asr	r6, r6, #0x10
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	sub	r6, r6, r0
	lsl	r6, r6, #0x4
	ldr	r2, [sp]
	mov	r0, #0x0
	ldrsh	r1, [r2, r0]
	lsl	r1, r1, #0x1
	add	r0, r6, #0
	bl	__divsi3
	strh	r0, [r4, #0x3c]
	ldr	r0, .L59+0x8
	str	r0, [r4, #0x1c]
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L60:
	.align	2, 0
.L59:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimShadowBallStep
.Lfe10:
	.size	 InitAnimShadowBall,.Lfe10-InitAnimShadowBall
	.align	2, 0
	.type	 AnimShadowBallStep,function
	.thumb_func
AnimShadowBallStep:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L65	@cond_branch
	cmp	r0, #0x1
	bgt	.L72	@cond_branch
	cmp	r0, #0
	beq	.L63	@cond_branch
	b	.L62
.L72:
	cmp	r0, #0x2
	beq	.L67	@cond_branch
	cmp	r0, #0x3
	beq	.L69	@cond_branch
	b	.L62
.L63:
	ldrh	r0, [r5, #0x3a]
	ldrh	r2, [r5, #0x36]
	add	r0, r0, r2
	strh	r0, [r5, #0x36]
	ldrh	r1, [r5, #0x3c]
	ldrh	r2, [r5, #0x38]
	add	r1, r1, r2
	strh	r1, [r5, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r5, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r5, #0x22]
	ldrh	r0, [r5, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x30]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L62	@cond_branch
	b	.L73
.L65:
	ldrh	r0, [r5, #0x32]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x32]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L62	@cond_branch
	ldr	r4, .L74
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x30]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x20]
	lsl	r0, r0, #0x4
	strh	r0, [r5, #0x36]
	ldrh	r0, [r5, #0x22]
	lsl	r0, r0, #0x4
	strh	r0, [r5, #0x38]
	mov	r1, #0x30
	ldrsh	r0, [r5, r1]
	mov	r2, #0x20
	ldrsh	r1, [r5, r2]
	sub	r0, r0, r1
	lsl	r0, r0, #0x4
	mov	r2, #0x34
	ldrsh	r1, [r5, r2]
	bl	__divsi3
	strh	r0, [r5, #0x3a]
	mov	r1, #0x32
	ldrsh	r0, [r5, r1]
	mov	r2, #0x22
	ldrsh	r1, [r5, r2]
	sub	r0, r0, r1
	lsl	r0, r0, #0x4
	mov	r2, #0x34
	ldrsh	r1, [r5, r2]
	bl	__divsi3
	strh	r0, [r5, #0x3c]
	b	.L73
.L75:
	.align	2, 0
.L74:
	.word	gBattleAnimTarget
.L67:
	ldrh	r0, [r5, #0x3a]
	ldrh	r1, [r5, #0x36]
	add	r0, r0, r1
	strh	r0, [r5, #0x36]
	ldrh	r1, [r5, #0x3c]
	ldrh	r2, [r5, #0x38]
	add	r1, r1, r2
	strh	r1, [r5, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r5, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r5, #0x22]
	ldrh	r0, [r5, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L62	@cond_branch
	ldr	r4, .L76
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
.L73:
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	b	.L62
.L77:
	.align	2, 0
.L76:
	.word	gBattleAnimTarget
.L69:
	add	r0, r5, #0
	bl	DestroySpriteAndMatrix
.L62:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 AnimShadowBallStep,.Lfe11-AnimShadowBallStep
	.align	2, 0
	.type	 sub_8111B9C,function
	.thumb_func
sub_8111B9C:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
	ldr	r0, .L79
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L80:
	.align	2, 0
.L79:
	.word	sub_8111BB4
.Lfe12:
	.size	 sub_8111B9C,.Lfe12-sub_8111B9C
	.align	2, 0
	.type	 sub_8111BB4,function
	.thumb_func
sub_8111BB4:
	push	{r4, r5, r6, lr}
	add	r3, r0, #0
	mov	r5, #0x0
	mov	r6, #0x0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L82	@cond_branch
	add	r1, r3, #0
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	mov	r0, #0x4
	and	r0, r0, r2
	add	r4, r1, #0
	cmp	r0, #0
	bne	.L83	@cond_branch
	mov	r0, #0x4
	orr	r0, r0, r2
	strb	r0, [r4]
.L83:
	mov	r1, #0x2e
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	beq	.L86	@cond_branch
	cmp	r0, #0x1
	beq	.L88	@cond_branch
	mov	r6, #0x1
	b	.L84
.L86:
	mov	r1, #0x30
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x2
	bne	.L84	@cond_branch
	b	.L96
.L88:
	mov	r1, #0x30
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x4
	bne	.L84	@cond_branch
	mov	r5, #0x1
.L84:
	cmp	r5, #0
	beq	.L91	@cond_branch
.L96:
	ldrb	r2, [r4]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4]
	ldrh	r0, [r3, #0x32]
	add	r0, r0, #0x1
	mov	r1, #0x0
	strh	r0, [r3, #0x32]
	strh	r1, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L82	@cond_branch
	strh	r1, [r3, #0x32]
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	b	.L82
.L91:
	cmp	r6, #0
	beq	.L94	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimSprite
	b	.L82
.L94:
	ldrh	r0, [r3, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x30]
.L82:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 sub_8111BB4,.Lfe13-sub_8111BB4
	.align	2, 0
	.globl	sub_8111C50
	.type	 sub_8111C50,function
	.thumb_func
sub_8111C50:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L102
	add	r5, r0, r1
	mov	r0, #0x1
	bl	CloneBattlerSpriteWithBlend
	mov	r6, #0x0
	mov	r1, #0x0
	strh	r0, [r5, #0x8]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L98	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L97
.L103:
	.align	2, 0
.L102:
	.word	gTasks
.L98:
	strh	r1, [r5, #0xa]
	mov	r0, #0xf
	strh	r0, [r5, #0xc]
	mov	r0, #0x2
	strh	r0, [r5, #0xe]
	strh	r1, [r5, #0x10]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r1, [r5, #0xe]
	lsl	r1, r1, #0x8
	ldrh	r0, [r5, #0xc]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r4, .L104
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x50
	strh	r1, [r0, #0x2e]
	ldr	r0, .L104+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L99	@cond_branch
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L104+0x8
	strh	r1, [r0, #0x30]
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x70
	b	.L101
.L105:
	.align	2, 0
.L104:
	.word	gSprites
	.word	gBattleAnimTarget
	.word	0xff70
.L99:
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x90
	strh	r1, [r0, #0x30]
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L106
.L101:
	strh	r1, [r0, #0x32]
	ldr	r4, .L106+0x4
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r2, #0x0
	strh	r2, [r0, #0x34]
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r2, [r0, #0x36]
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L106+0x8
	bl	StoreSpriteCallbackInData6
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r1, .L106+0xc
	str	r1, [r0]
	ldr	r0, .L106+0x10
	str	r0, [r5]
.L97:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L107:
	.align	2, 0
.L106:
	.word	0xff90
	.word	gSprites
	.word	SpriteCallbackDummy
	.word	TranslateSpriteLinearFixedPoint
	.word	sub_8111D78
.Lfe14:
	.size	 sub_8111C50,.Lfe14-sub_8111C50
	.align	2, 0
	.type	 sub_8111D78,function
	.thumb_func
sub_8111D78:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L123
	add	r4, r0, r1
	mov	r1, #0x10
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L117	@cond_branch
	cmp	r0, #0x1
	bgt	.L122	@cond_branch
	cmp	r0, #0
	beq	.L110	@cond_branch
	b	.L109
.L124:
	.align	2, 0
.L123:
	.word	gTasks
.L122:
	cmp	r0, #0x2
	beq	.L119	@cond_branch
	b	.L109
.L110:
	ldrh	r1, [r4, #0xa]
	add	r1, r1, #0x1
	strh	r1, [r4, #0xa]
	mov	r0, #0x3
	and	r0, r0, r1
	strh	r0, [r4, #0x12]
	cmp	r0, #0x1
	bne	.L111	@cond_branch
	ldrh	r1, [r4, #0xc]
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L111	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0xc]
.L111:
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x3
	bne	.L113	@cond_branch
	ldrh	r1, [r4, #0xe]
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xf
	bgt	.L113	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0xe]
.L113:
	ldrh	r1, [r4, #0xe]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0xc]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r1, [r4, #0xc]
	mov	r0, #0x80
	lsl	r0, r0, #0xd
	cmp	r1, r0
	bne	.L109	@cond_branch
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x50
	ble	.L109	@cond_branch
	mov	r2, #0x8
	ldrsh	r1, [r4, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L125
	add	r0, r0, r1
	bl	obj_delete_but_dont_free_vram
	mov	r0, #0x1
	strh	r0, [r4, #0x10]
	b	.L109
.L126:
	.align	2, 0
.L125:
	.word	gSprites
.L117:
	ldrh	r0, [r4, #0x14]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x14]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L109	@cond_branch
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	b	.L109
.L119:
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L109:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 sub_8111D78,.Lfe15-sub_8111D78
	.align	2, 0
	.globl	sub_8111E50
	.type	 sub_8111E50,function
	.thumb_func
sub_8111E50:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r2, .L128
	add	r1, r1, r2
	mov	r2, #0x0
	strh	r2, [r1, #0x26]
	ldr	r2, .L128+0x4
	str	r2, [r1]
	bl	_call_via_r2
	pop	{r0}
	bx	r0
.L129:
	.align	2, 0
.L128:
	.word	gTasks
	.word	sub_8111E78
.Lfe16:
	.size	 sub_8111E50,.Lfe16-sub_8111E50
	.align	2, 0
	.type	 sub_8111E78,function
	.thumb_func
sub_8111E78:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L155
	add	r5, r0, r1
	ldr	r0, .L155+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r1, #0x26
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x4
	bls	.LCB1380
	b	.L151	@long jump
.LCB1380:
	lsl	r0, r0, #0x2
	ldr	r1, .L155+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L156:
	.align	2, 0
.L155:
	.word	gTasks
	.word	gBattleAnimTarget
	.word	.L152
	.align	2, 0
	.align	2, 0
.L152:
	.word	.L132
	.word	.L140
	.word	.L141
	.word	.L145
	.word	.L148
.L132:
	ldr	r7, .L157
	add	r0, r7, #0
	bl	AllocSpritePalette
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x0
	mov	r8, r2
	strh	r0, [r5, #0x24]
	cmp	r0, #0xff
	beq	.L153	@cond_branch
	cmp	r0, #0xf
	beq	.L153	@cond_branch
	mov	r0, #0x1
	bl	CloneBattlerSpriteWithBlend
	strh	r0, [r5, #0x8]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L136	@cond_branch
	add	r0, r7, #0
	bl	FreeSpritePaletteByTag
.L153:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L131
.L158:
	.align	2, 0
.L157:
	.word	0x2771
.L136:
	ldr	r4, .L159
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r2, [r5, #0x24]
	lsl	r2, r2, #0x4
	ldrb	r3, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	mov	r2, #0x8
	ldrsh	r0, [r5, r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r2, [r1, #0x1]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r1, [r0, #0x5]
	mov	r2, #0xc
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldr	r0, .L159+0x4
	ldr	r1, [r0]
	ldr	r0, .L159+0x8
	ldrb	r0, [r0]
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	lsl	r1, r1, #0x1f
	add	r2, r2, #0x3e
	lsr	r1, r1, #0x1f
	lsl	r1, r1, #0x2
	ldrb	r3, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r2, r8
	strh	r2, [r5, #0xa]
	strh	r2, [r5, #0xc]
	mov	r0, #0x10
	strh	r0, [r5, #0xe]
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	mov	r0, #0x22
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	lsl	r0, r0, #0x4
	strh	r0, [r5, #0x10]
	cmp	r6, #0x1
	bne	.L138	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	b	.L139
.L160:
	.align	2, 0
.L159:
	.word	gSprites
	.word	gBattleSpritesDataPtr
	.word	gBattleAnimTarget
.L138:
	mov	r1, #0x80
	lsl	r1, r1, #0x3
.L139:
	mov	r0, #0x0
	bl	ClearGpuRegBits
	b	.L151
.L140:
	mov	r1, #0x24
	ldrsh	r0, [r5, r1]
	add	r0, r0, #0x10
	lsl	r0, r0, #0x4
	strh	r0, [r5, #0x24]
	mov	r2, #0x10
	ldrsh	r0, [r5, r2]
	lsl	r0, r0, #0x1
	ldr	r1, .L161
	add	r0, r0, r1
	mov	r2, #0x24
	ldrsh	r1, [r5, r2]
	lsl	r1, r1, #0x1
	ldr	r2, .L161+0x4
	add	r1, r1, r2
	ldr	r2, .L161+0x8
	bl	CpuSet
	ldrh	r0, [r5, #0x10]
	ldr	r3, .L161+0xc
	mov	r1, #0x10
	mov	r2, #0xa
	bl	BlendPalette
	b	.L151
.L162:
	.align	2, 0
.L161:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
	.word	0x4000008
	.word	0x3c0d
.L141:
	ldr	r2, .L163
	mov	r0, #0x22
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x26]
	ldrh	r0, [r0, #0x22]
	add	r1, r1, r0
	sub	r1, r1, #0x20
	lsl	r1, r1, #0x10
	lsr	r2, r1, #0x10
	cmp	r1, #0
	bge	.L142	@cond_branch
	mov	r2, #0x0
.L142:
	cmp	r6, #0x1
	bne	.L143	@cond_branch
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	add	r1, r2, #0
	add	r1, r1, #0x40
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x4
	str	r2, [sp, #0x4]
	str	r6, [sp, #0x8]
	b	.L154
.L164:
	.align	2, 0
.L163:
	.word	gSprites
.L143:
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	add	r1, r2, #0
	add	r1, r1, #0x40
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x0
	str	r2, [sp]
	mov	r2, #0x8
	str	r2, [sp, #0x4]
	mov	r2, #0x1
	str	r2, [sp, #0x8]
.L154:
	mov	r2, #0x2
	mov	r3, #0x6
	bl	ScanlineEffect_InitWave
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x1c]
	b	.L151
.L145:
	cmp	r6, #0x1
	bne	.L146	@cond_branch
	ldr	r1, .L165
	mov	r0, #0x50
	bl	SetGpuReg
	b	.L147
.L166:
	.align	2, 0
.L165:
	.word	0x3f42
.L146:
	ldr	r1, .L167
	mov	r0, #0x50
	bl	SetGpuReg
.L147:
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	b	.L151
.L168:
	.align	2, 0
.L167:
	.word	0x3f44
.L148:
	cmp	r6, #0x1
	bne	.L149	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	bl	SetGpuRegBits
	b	.L150
.L149:
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	mov	r0, #0x0
	bl	SetGpuRegBits
.L150:
	ldr	r0, .L169
	str	r0, [r5]
.L151:
	ldrh	r0, [r5, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x26]
.L131:
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L170:
	.align	2, 0
.L169:
	.word	sub_81120DC
.Lfe17:
	.size	 sub_8111E78,.Lfe17-sub_8111E78
	.align	2, 0
	.type	 sub_81120DC,function
	.thumb_func
sub_81120DC:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L175
	add	r4, r0, r1
	ldrh	r1, [r4, #0xa]
	add	r1, r1, #0x1
	strh	r1, [r4, #0xa]
	mov	r0, #0x1
	and	r0, r0, r1
	strh	r0, [r4, #0x12]
	cmp	r0, #0
	bne	.L172	@cond_branch
	ldr	r1, .L175+0x4
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r1, #0x12
	bl	__divsi3
	strh	r0, [r4, #0xc]
.L172:
	mov	r2, #0x12
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x1
	bne	.L173	@cond_branch
	ldr	r1, .L175+0x4
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r1, #0x12
	bl	__divsi3
	mov	r1, #0x10
	sub	r1, r1, r0
	strh	r1, [r4, #0xe]
.L173:
	ldrh	r1, [r4, #0xe]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0xc]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x80
	bne	.L174	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x26]
	ldr	r1, .L175+0x8
	str	r1, [r4]
	add	r0, r5, #0
	bl	_call_via_r1
.L174:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L176:
	.align	2, 0
.L175:
	.word	gTasks
	.word	gSineTable
	.word	sub_8112170
.Lfe18:
	.size	 sub_81120DC,.Lfe18-sub_81120DC
	.align	2, 0
	.type	 sub_8112170,function
	.thumb_func
sub_8112170:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L190
	add	r4, r0, r1
	ldr	r0, .L190+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L182	@cond_branch
	cmp	r0, #0x1
	bgt	.L188	@cond_branch
	cmp	r0, #0
	beq	.L179	@cond_branch
	b	.L178
.L191:
	.align	2, 0
.L190:
	.word	gTasks
	.word	gBattleAnimTarget
.L188:
	cmp	r0, #0x2
	beq	.L183	@cond_branch
	b	.L178
.L179:
	ldr	r1, .L192
	mov	r0, #0x3
	strb	r0, [r1, #0x15]
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	cmp	r6, #0x1
	bne	.L180	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	b	.L189
.L193:
	.align	2, 0
.L192:
	.word	gScanlineEffect
.L180:
	mov	r1, #0x80
	lsl	r1, r1, #0x3
.L189:
	mov	r0, #0x0
	bl	ClearGpuRegBits
	b	.L178
.L182:
	ldrh	r0, [r4, #0x10]
	ldr	r3, .L194
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalette
	b	.L178
.L195:
	.align	2, 0
.L194:
	.word	0x3c0d
.L183:
	ldr	r3, .L196
	mov	r0, #0x24
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	bl	obj_delete_but_dont_free_vram
	ldr	r0, .L196+0x4
	bl	FreeSpritePaletteByTag
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	cmp	r6, #0x1
	bne	.L184	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	bl	SetGpuRegBits
	b	.L185
.L197:
	.align	2, 0
.L196:
	.word	gSprites
	.word	0x2771
.L184:
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	mov	r0, #0x0
	bl	SetGpuRegBits
.L185:
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L178:
	ldrh	r0, [r4, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x26]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 sub_8112170,.Lfe19-sub_8112170
	.align	2, 0
	.type	 sub_8112264,function
	.thumb_func
sub_8112264:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r7, r0, #0
	ldr	r0, .L202
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L199	@cond_branch
	ldr	r4, .L202+0x4
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x8
	mov	r2, #0xe0
	lsl	r2, r2, #0xd
	add	r0, r0, r2
	lsr	r5, r0, #0x10
	ldr	r4, .L202+0x8
	b	.L201
.L203:
	.align	2, 0
.L202:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L199:
	ldr	r4, .L204
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x8
	mov	r2, #0xe0
	lsl	r2, r2, #0xd
	add	r0, r0, r2
	lsr	r5, r0, #0x10
	ldr	r4, .L204+0x4
.L201:
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x8
	mov	r1, #0xe0
	lsl	r1, r1, #0xd
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	mov	r9, r0
	mov	r8, r5
	mov	r2, r9
	sub	r4, r2, r5
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r0, r6, #0x4
	strh	r0, [r7, #0x2e]
	lsl	r0, r5, #0x4
	strh	r0, [r7, #0x30]
	mov	r1, sl
	sub	r0, r1, r6
	lsl	r0, r0, #0x4
	ldr	r5, .L204+0x8
	mov	r2, #0x2
	ldrsh	r1, [r5, r2]
	bl	__divsi3
	strh	r0, [r7, #0x32]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0xc
	mov	r0, #0x2
	ldrsh	r1, [r5, r0]
	add	r0, r4, #0
	bl	__divsi3
	strh	r0, [r7, #0x34]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r7, #0x36]
	mov	r1, sl
	strh	r1, [r7, #0x38]
	mov	r2, r9
	strh	r2, [r7, #0x3a]
	mov	r1, #0x36
	ldrsh	r0, [r7, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r7, #0x3c]
	ldrb	r1, [r7, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r7, #0x5]
	strh	r6, [r7, #0x20]
	mov	r2, r8
	strh	r2, [r7, #0x22]
	ldr	r0, .L204+0xc
	str	r0, [r7, #0x1c]
	add	r2, r7, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L205:
	.align	2, 0
.L204:
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	sub_8112384
.Lfe20:
	.size	 sub_8112264,.Lfe20-sub_8112264
	.align	2, 0
	.type	 sub_8112384,function
	.thumb_func
sub_8112384:
	push	{r4, lr}
	add	r2, r0, #0
	ldrh	r3, [r2, #0x36]
	mov	r1, #0x36
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	beq	.L207	@cond_branch
	ldrh	r0, [r2, #0x32]
	ldrh	r4, [r2, #0x2e]
	add	r0, r0, r4
	strh	r0, [r2, #0x2e]
	ldrh	r1, [r2, #0x34]
	ldrh	r4, [r2, #0x30]
	add	r1, r1, r4
	strh	r1, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r2, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r2, #0x22]
	sub	r0, r3, #0x1
	strh	r0, [r2, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L207	@cond_branch
	strh	r0, [r2, #0x2e]
.L207:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 sub_8112384,.Lfe21-sub_8112384
	.align	2, 0
	.globl	sub_81123C4
	.type	 sub_81123C4,function
	.thumb_func
sub_81123C4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L220
	add	r1, r1, r0
	str	r1, [sp]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x0
	ldr	r1, [sp]
	strh	r0, [r1, #0x12]
	strh	r0, [r1, #0x14]
	strh	r0, [r1, #0x16]
	strh	r0, [r1, #0x18]
	mov	r0, #0x10
	strh	r0, [r1, #0x1a]
	ldr	r2, .L220+0x4
	ldrh	r0, [r2]
	strh	r0, [r1, #0x1c]
	ldr	r4, .L220+0x8
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoordAttr
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x8]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB2261
	b	.L210	@long jump
.LCB2261:
	mov	r4, #0x0
.L214:
	lsl	r1, r4, #0x10
	asr	r3, r1, #0x10
	ldr	r0, .L220+0x8
	ldrb	r2, [r0]
	str	r1, [sp, #0x10]
	cmp	r3, r2
	beq	.L213	@cond_branch
	mov	r0, #0x2
	eor	r2, r2, r0
	cmp	r3, r2
	beq	.L213	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L213	@cond_branch
	ldr	r6, [sp, #0x4]
	ldr	r3, [sp, #0x8]
	lsl	r0, r3, #0x10
	asr	r7, r0, #0x10
	ldr	r0, .L220+0xc
	add	r1, r6, #0
	add	r2, r7, #0
	mov	r3, #0x37
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	cmp	r0, #0x40
	beq	.L213	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	add	r0, r4, #0
	mov	r1, #0x3
	bl	GetBattlerSpriteCoordAttr
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	mov	r0, r8
	lsl	r5, r0, #0x4
	add	r5, r5, r8
	lsl	r5, r5, #0x2
	ldr	r1, .L220+0x10
	add	r4, r5, r1
	lsl	r0, r6, #0x4
	strh	r0, [r4, #0x2e]
	lsl	r0, r7, #0x4
	strh	r0, [r4, #0x30]
	mov	r2, sl
	sub	r0, r2, r6
	lsl	r0, r0, #0x4
	ldr	r3, .L220+0x4
	mov	r2, #0x2
	ldrsh	r1, [r3, r2]
	bl	__divsi3
	strh	r0, [r4, #0x32]
	mov	r3, r9
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	sub	r0, r0, r7
	lsl	r0, r0, #0x4
	ldr	r2, .L220+0x4
	mov	r3, #0x2
	ldrsh	r1, [r2, r3]
	bl	__divsi3
	strh	r0, [r4, #0x34]
	ldr	r1, .L220+0x4
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x36]
	mov	r2, sl
	strh	r2, [r4, #0x38]
	mov	r3, r9
	strh	r3, [r4, #0x3a]
	ldr	r0, .L220+0x14
	add	r5, r5, r0
	ldr	r0, .L220+0x18
	str	r0, [r5]
	ldr	r2, [sp]
	mov	r3, #0x20
	ldrsh	r1, [r2, r3]
	add	r1, r1, #0xd
	lsl	r1, r1, #0x1
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r0, r1
	mov	r1, r8
	strh	r1, [r0]
	ldrh	r0, [r2, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x20]
.L213:
	ldr	r2, [sp, #0x10]
	mov	r3, #0x80
	lsl	r3, r3, #0x9
	add	r0, r2, r3
	lsr	r4, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L214	@cond_branch
	b	.L218
.L221:
	.align	2, 0
.L220:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gUnknown_08596DB8
	.word	gSprites
	.word	gSprites+0x1c
	.word	sub_8112384
.L210:
	ldr	r0, .L222
	ldr	r7, [sp, #0x4]
	ldr	r2, [sp, #0x8]
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	str	r1, [sp, #0xc]
	add	r1, r7, #0
	ldr	r2, [sp, #0xc]
	mov	r3, #0x37
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	cmp	r0, #0x40
	beq	.L218	@cond_branch
	mov	r3, #0x30
	mov	sl, r3
	mov	r0, #0x28
	mov	r9, r0
	ldr	r6, .L222+0x4
	mov	r1, r8
	lsl	r5, r1, #0x4
	add	r5, r5, r8
	lsl	r5, r5, #0x2
	add	r4, r5, r6
	lsl	r0, r7, #0x4
	strh	r0, [r4, #0x2e]
	ldr	r2, [sp, #0xc]
	lsl	r0, r2, #0x4
	strh	r0, [r4, #0x30]
	sub	r0, r3, r7
	lsl	r0, r0, #0x4
	ldr	r3, .L222+0x8
	mov	r2, #0x2
	ldrsh	r1, [r3, r2]
	bl	__divsi3
	strh	r0, [r4, #0x32]
	mov	r3, r9
	ldr	r1, [sp, #0xc]
	sub	r0, r3, r1
	lsl	r0, r0, #0x4
	ldr	r2, .L222+0x8
	mov	r3, #0x2
	ldrsh	r1, [r2, r3]
	bl	__divsi3
	strh	r0, [r4, #0x34]
	ldr	r1, .L222+0x8
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x36]
	mov	r2, sl
	strh	r2, [r4, #0x38]
	mov	r3, r9
	strh	r3, [r4, #0x3a]
	add	r6, r6, #0x1c
	add	r5, r5, r6
	ldr	r0, .L222+0xc
	str	r0, [r5]
	mov	r1, r8
	ldr	r0, [sp]
	strh	r1, [r0, #0x22]
	mov	r0, #0x1
	ldr	r2, [sp]
	strh	r0, [r2, #0x20]
.L218:
	ldr	r0, .L222+0x10
	ldr	r3, [sp]
	str	r0, [r3]
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L223:
	.align	2, 0
.L222:
	.word	gUnknown_08596DB8
	.word	gSprites
	.word	gBattleAnimArgs
	.word	sub_8112384
	.word	sub_81125E0
.Lfe22:
	.size	 sub_81123C4,.Lfe22-sub_81123C4
	.align	2, 0
	.type	 sub_81125E0,function
	.thumb_func
sub_81125E0:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L257
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	cmp	r1, #0x1
	beq	.L237	@cond_branch
	cmp	r1, #0x1
	bgt	.L254	@cond_branch
	cmp	r1, #0
	beq	.L226	@cond_branch
	b	.L225
.L258:
	.align	2, 0
.L257:
	.word	gTasks
.L254:
	cmp	r1, #0x2
	bne	.LCB2540
	b	.L249	@long jump
.LCB2540:
	cmp	r1, #0x3
	bne	.LCB2542
	b	.L251	@long jump
.LCB2542:
	b	.L225
.L226:
	mov	r2, #0x14
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L227	@cond_branch
	ldrh	r0, [r4, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L227	@cond_branch
	strh	r1, [r4, #0x12]
	ldrh	r0, [r4, #0x16]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x16]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L229	@cond_branch
	ldrh	r1, [r4, #0x18]
	mov	r2, #0x18
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xf
	bgt	.L231	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x18]
	b	.L231
.L229:
	ldrh	r1, [r4, #0x1a]
	mov	r2, #0x1a
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L231	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x1a]
.L231:
	ldrh	r1, [r4, #0x1a]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x18]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x16
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x17
	ble	.L227	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x16]
	mov	r0, #0x1
	strh	r0, [r4, #0x14]
.L227:
	ldrh	r1, [r4, #0x1c]
	mov	r2, #0x1c
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L234	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x1c]
	b	.L225
.L234:
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L225	@cond_branch
	b	.L255
.L237:
	ldrh	r0, [r4, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L225	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x12]
	ldrh	r0, [r4, #0x16]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x16]
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L239	@cond_branch
	ldrh	r1, [r4, #0x18]
	mov	r2, #0x18
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L241	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x18]
	b	.L241
.L239:
	ldrh	r1, [r4, #0x1a]
	mov	r2, #0x1a
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xf
	bgt	.L241	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x1a]
.L241:
	ldrh	r1, [r4, #0x1a]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x18]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r1, [r4, #0x18]
	mov	r0, #0x80
	lsl	r0, r0, #0xd
	cmp	r1, r0
	bne	.L225	@cond_branch
	mov	r5, #0x0
	b	.L256
.L247:
	add	r1, r5, #0
	add	r1, r1, #0xd
	lsl	r1, r1, #0x1
	add	r0, r4, #0
	add	r0, r0, #0x8
	add	r0, r0, r1
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L259
	add	r0, r0, r1
	bl	DestroySprite
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L256:
	mov	r1, #0x20
	ldrsh	r0, [r4, r1]
	cmp	r5, r0
	blt	.L247	@cond_branch
	b	.L255
.L260:
	.align	2, 0
.L259:
	.word	gSprites
.L249:
	ldrh	r0, [r4, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x12]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L225	@cond_branch
.L255:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L225
.L251:
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L225:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 sub_81125E0,.Lfe23-sub_81125E0
	.align	2, 0
	.globl	sub_8112758
	.type	 sub_8112758,function
	.thumb_func
sub_8112758:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L265
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L265+0x4
	strh	r1, [r0]
	ldr	r1, .L265+0x8
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L265+0xc
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0xc8
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x10
	bl	SetGpuReg
	ldr	r0, .L265+0x10
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L263	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L262	@cond_branch
.L263:
	mov	r6, #0x28
	b	.L264
.L266:
	.align	2, 0
.L265:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	0x3f1f
	.word	gBattleAnimAttacker
.L262:
	mov	r6, #0xc8
.L264:
	ldr	r1, .L267
	lsl	r3, r6, #0x10
	asr	r2, r3, #0x10
	lsl	r0, r2, #0x8
	orr	r0, r0, r2
	strh	r0, [r1]
	ldr	r1, .L267+0x4
	mov	r5, #0x28
	ldr	r0, .L267+0x8
	strh	r0, [r1]
	lsr	r3, r3, #0x10
	mov	r1, #0xf0
	sub	r1, r1, r2
	mov	r4, #0x48
	ldr	r2, .L267+0xc
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	strh	r3, [r0, #0xa]
	strh	r1, [r0, #0xc]
	strh	r5, [r0, #0xe]
	strh	r4, [r0, #0x10]
	strh	r6, [r0, #0x12]
	strh	r5, [r0, #0x14]
	ldr	r1, .L267+0x10
	str	r1, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L268:
	.align	2, 0
.L267:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x2828
	.word	gTasks
	.word	sub_811280C
.Lfe24:
	.size	 sub_8112758,.Lfe24-sub_8112758
	.align	2, 0
	.type	 sub_811280C,function
	.thumb_func
sub_811280C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L272
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r1, [r4, #0x8]
	add	r0, r1, #0x1
	strh	r0, [r4, #0x8]
	ldrh	r5, [r4, #0xa]
	ldrh	r7, [r4, #0xc]
	ldrh	r0, [r4, #0xe]
	mov	sl, r0
	ldrh	r2, [r4, #0x10]
	str	r2, [sp, #0xc]
	ldrh	r0, [r4, #0x12]
	ldrh	r2, [r4, #0x14]
	mov	r8, r2
	lsl	r1, r1, #0x10
	asr	r6, r1, #0x10
	cmp	r6, #0xf
	ble	.LCB2884
	b	.L270	@long jump
.LCB2884:
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	bl	__floatsidf
	str	r0, [sp, #0x10]
	str	r1, [sp, #0x14]
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	bl	__floatsidf
	ldr	r2, .L272+0x4		@ created by thumb_load_double_from_address
	ldr	r3, .L272+0x8		@ created by thumb_load_double_from_address
	bl	__muldf3
	add	r5, r1, #0
	add	r4, r0, #0
	add	r0, r6, #0
	bl	__floatsidf
	str	r0, [sp, #0x18]
	str	r1, [sp, #0x1c]
	add	r1, r5, #0
	add	r0, r4, #0
	ldr	r2, [sp, #0x18]		@ created by thumb_load_double_from_address
	ldr	r3, [sp, #0x1c]		@ created by thumb_load_double_from_address
	bl	__muldf3
	add	r3, r1, #0
	add	r2, r0, #0
	ldr	r0, [sp, #0x10]		@ created by thumb_load_double_from_address
	ldr	r1, [sp, #0x14]		@ created by thumb_load_double_from_address
	bl	__subdf3
	bl	__fixunsdfsi
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	bl	__floatsidf
	ldr	r2, .L272+0x4		@ created by thumb_load_double_from_address
	ldr	r3, .L272+0x8		@ created by thumb_load_double_from_address
	bl	__muldf3
	ldr	r2, [sp, #0x18]		@ created by thumb_load_double_from_address
	ldr	r3, [sp, #0x1c]		@ created by thumb_load_double_from_address
	bl	__muldf3
	add	r3, r1, #0
	add	r2, r0, #0
	ldr	r0, [sp, #0x10]		@ created by thumb_load_double_from_address
	ldr	r1, [sp, #0x14]		@ created by thumb_load_double_from_address
	bl	__adddf3
	bl	__fixunsdfsi
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	mov	r1, r8
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	bl	__floatsidf
	add	r5, r1, #0
	add	r4, r0, #0
	mov	r2, sl
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	bl	__floatsidf
	ldr	r2, .L272+0x4		@ created by thumb_load_double_from_address
	ldr	r3, .L272+0x8		@ created by thumb_load_double_from_address
	bl	__muldf3
	ldr	r2, [sp, #0x18]		@ created by thumb_load_double_from_address
	ldr	r3, [sp, #0x1c]		@ created by thumb_load_double_from_address
	bl	__muldf3
	add	r3, r1, #0
	add	r2, r0, #0
	add	r1, r5, #0
	add	r0, r4, #0
	bl	__subdf3
	bl	__fixunsdfsi
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r1, [sp, #0xc]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	bl	__floatsidf
	ldr	r2, .L272+0x4		@ created by thumb_load_double_from_address
	ldr	r3, .L272+0x8		@ created by thumb_load_double_from_address
	bl	__muldf3
	ldr	r2, [sp, #0x18]		@ created by thumb_load_double_from_address
	ldr	r3, [sp, #0x1c]		@ created by thumb_load_double_from_address
	bl	__muldf3
	add	r3, r1, #0
	add	r2, r0, #0
	add	r1, r5, #0
	add	r0, r4, #0
	bl	__adddf3
	bl	__fixunsdfsi
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	b	.L271
.L273:
	.align	2, 0
.L272:
	.word	gTasks
	.long 0x3fb00000, 0x0	@ double 6.25000000000000000000e-2
.L270:
	mov	r2, #0x0
	mov	r9, r2
	mov	r7, #0xf0
	mov	r6, #0x0
	mov	r5, #0x70
	str	r6, [sp]
	str	r6, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r3, #0x0
	bl	sub_80A75AC
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r6, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L274
	str	r0, [r4]
.L271:
	ldr	r1, .L274+0x4
	mov	r2, r9
	lsl	r0, r2, #0x8
	orr	r7, r7, r0
	strh	r7, [r1]
	ldr	r1, .L274+0x8
	lsl	r0, r6, #0x8
	orr	r5, r5, r0
	strh	r5, [r1]
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L275:
	.align	2, 0
.L274:
	.word	sub_8112994
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
.Lfe25:
	.size	 sub_811280C,.Lfe25-sub_811280C
	.align	2, 0
	.type	 sub_8112994,function
	.thumb_func
sub_8112994:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L278
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L277	@cond_branch
	ldr	r0, .L278+0x4
	strh	r1, [r0]
	ldr	r0, .L278+0x8
	strh	r1, [r0]
	ldr	r4, .L278+0xc
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L277:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L279:
	.align	2, 0
.L278:
	.word	gPaletteFade
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
.Lfe26:
	.size	 sub_8112994,.Lfe26-sub_8112994
	.align	2, 0
	.type	 sub_81129F0,function
	.thumb_func
sub_81129F0:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L283
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L281	@cond_branch
	mov	r2, #0x18
	ldr	r3, .L283+0x4
	ldrb	r0, [r4, #0x3]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x10
	orr	r1, r1, r0
	strb	r1, [r4, #0x3]
	b	.L282
.L284:
	.align	2, 0
.L283:
	.word	gBattleAnimAttacker
	.word	0xfffe
.L281:
	ldr	r2, .L285
	mov	r3, #0x2
.L282:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	strh	r3, [r4, #0x30]
	mov	r0, #0x3c
	strh	r0, [r4, #0x2e]
	ldr	r0, .L285+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L286:
	.align	2, 0
.L285:
	.word	0xffe8
	.word	sub_8112A4C
.Lfe27:
	.size	 sub_81129F0,.Lfe27-sub_81129F0
	.align	2, 0
	.type	 sub_8112A4C,function
	.thumb_func
sub_8112A4C:
	push	{r4, lr}
	add	r3, r0, #0
	ldrh	r1, [r3, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	ble	.L288	@cond_branch
	sub	r0, r1, #0x1
	b	.L293
.L288:
	ldrh	r0, [r3, #0x30]
	ldrh	r4, [r3, #0x24]
	add	r1, r0, r4
	strh	r1, [r3, #0x24]
	add	r0, r1, #0x7
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xe
	bls	.L289	@cond_branch
	ldrh	r0, [r3, #0x20]
	add	r0, r0, r1
	strh	r0, [r3, #0x20]
	mov	r0, #0x0
	strh	r0, [r3, #0x24]
	ldrh	r2, [r3, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x8
	ldr	r4, .L294
	add	r0, r4, #0
	and	r1, r1, r0
	ldr	r0, .L294+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3, #0x4]
	ldrh	r0, [r3, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	bne	.L291	@cond_branch
	mov	r0, #0x1e
	strh	r0, [r3, #0x2e]
	ldr	r0, .L294+0x8
	str	r0, [r3, #0x1c]
	ldr	r1, .L294+0xc
	add	r0, r3, #0
	bl	StoreSpriteCallbackInData6
	b	.L289
.L295:
	.align	2, 0
.L294:
	.word	0x3ff
	.word	-0x400
	.word	WaitAnimForDuration
	.word	sub_8112ACC
.L291:
	mov	r0, #0x28
.L293:
	strh	r0, [r3, #0x2e]
.L289:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 sub_8112A4C,.Lfe28-sub_8112A4C
	.align	2, 0
	.type	 sub_8112ACC,function
	.thumb_func
sub_8112ACC:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x2e
	ldrsh	r5, [r4, r0]
	cmp	r5, #0
	bne	.L297	@cond_branch
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x10
	bl	SetGpuReg
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	strh	r5, [r4, #0x30]
	strh	r5, [r4, #0x32]
	b	.L298
.L297:
	ldrh	r1, [r4, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x1
	bgt	.L299	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x30]
	b	.L298
.L299:
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L298	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L302
	str	r0, [r4, #0x1c]
.L298:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L303:
	.align	2, 0
.L302:
	.word	sub_8112B44
.Lfe29:
	.size	 sub_8112ACC,.Lfe29-sub_8112ACC
	.align	2, 0
	.type	 sub_8112B44,function
	.thumb_func
sub_8112B44:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r0, .L305
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L305+0x4
	strh	r1, [r0]
	add	r0, r4, #0
	bl	DestroyAnimSprite
	pop	{r4}
	pop	{r0}
	bx	r0
.L306:
	.align	2, 0
.L305:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
.Lfe30:
	.size	 sub_8112B44,.Lfe30-sub_8112B44
	.align	2, 0
	.type	 sub_8112B78,function
	.thumb_func
sub_8112B78:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	mov	r1, #0xc
	bl	Sin
	strh	r0, [r5, #0x24]
	ldr	r0, .L315
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L308	@cond_branch
	ldrh	r0, [r5, #0x24]
	neg	r0, r0
	strh	r0, [r5, #0x24]
.L308:
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x6
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r5, #0x2e]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r1, #0
	ldrh	r1, [r5, #0x30]
	add	r0, r0, r1
	strh	r0, [r5, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	neg	r0, r0
	strh	r0, [r5, #0x26]
	ldrh	r0, [r5, #0x3c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x3c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L309	@cond_branch
	ldr	r0, .L315+0x4
	strh	r0, [r5, #0x3a]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r1, [r5, #0x3a]
	mov	r0, #0x52
	bl	SetGpuReg
	b	.L310
.L316:
	.align	2, 0
.L315:
	.word	gBattleAnimAttacker
	.word	0x50b
.L309:
	cmp	r0, #0x1e
	ble	.L310	@cond_branch
	ldrh	r0, [r5, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x32]
	ldrh	r1, [r5, #0x3a]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	lsl	r0, r0, #0x10
	mov	r6, #0xff
	and	r6, r6, r1
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r0, r1
	lsr	r7, r0, #0x10
	cmp	r7, #0x10
	bls	.L312	@cond_branch
	mov	r7, #0x10
.L312:
	sub	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r0, #0
	bge	.L313	@cond_branch
	mov	r6, #0x0
.L313:
	lsl	r4, r7, #0x8
	orr	r4, r4, r6
	lsl	r1, r4, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	strh	r4, [r5, #0x3a]
	cmp	r7, #0x10
	bne	.L310	@cond_branch
	cmp	r6, #0
	bne	.L310	@cond_branch
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L317
	str	r0, [r5, #0x1c]
.L310:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L318:
	.align	2, 0
.L317:
	.word	sub_8112C4C
.Lfe31:
	.size	 sub_8112B78,.Lfe31-sub_8112B78
	.align	2, 0
	.type	 sub_8112C4C,function
	.thumb_func
sub_8112C4C:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyAnimSprite
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 sub_8112C4C,.Lfe32-sub_8112C4C
	.align	2, 0
	.globl	sub_8112C6C
	.type	 sub_8112C6C,function
	.thumb_func
sub_8112C6C:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L321
	add	r4, r4, r0
	mov	r6, #0x0
	strh	r6, [r4, #0x8]
	mov	r0, #0x10
	mov	r8, r0
	mov	r0, r8
	strh	r0, [r4, #0xa]
	ldr	r5, .L321+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x1a]
	ldrb	r0, [r5]
	bl	GetBattlerYCoordWithElevation
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x1c]
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoordAttr
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	lsr	r0, r0, #0x1f
	add	r1, r1, r0
	asr	r1, r1, #0x1
	add	r1, r1, #0x8
	strh	r1, [r4, #0x1e]
	strh	r6, [r4, #0x16]
	ldrb	r0, [r5]
	bl	GetBattlerSpriteBGPriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x12]
	ldrb	r0, [r5]
	bl	GetBattlerSpriteSubpriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x2
	strh	r0, [r4, #0x14]
	strh	r6, [r4, #0xe]
	mov	r0, r8
	strh	r0, [r4, #0x10]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	strh	r6, [r4, #0x18]
	ldr	r0, .L321+0x8
	str	r0, [r4]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L322:
	.align	2, 0
.L321:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	sub_8112D10
.Lfe33:
	.size	 sub_8112C6C,.Lfe33-sub_8112C6C
	.align	2, 0
	.type	 sub_8112D10,function
	.thumb_func
sub_8112D10:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	ldr	r1, .L354
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x5
	bls	.LCB3647
	b	.L324	@long jump
.LCB3647:
	lsl	r0, r0, #0x2
	ldr	r1, .L354+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L355:
	.align	2, 0
.L354:
	.word	gTasks
	.word	.L350
	.align	2, 0
	.align	2, 0
.L350:
	.word	.L325
	.word	.L333
	.word	.L339
	.word	.L341
	.word	.L347
	.word	.L349
.L325:
	mov	r6, #0x0
.L329:
	mov	r2, #0x1a
	ldrsh	r1, [r4, r2]
	mov	r0, #0x1c
	ldrsh	r2, [r4, r0]
	ldrb	r3, [r4, #0x14]
	ldr	r0, .L356
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x40
	beq	.L328	@cond_branch
	ldr	r1, .L356+0x4
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r5, r0, r1
	strh	r7, [r5, #0x2e]
	ldr	r0, .L356+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	mov	r1, #0x0
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L331	@cond_branch
	mov	r1, #0x1
.L331:
	strh	r1, [r5, #0x30]
	mov	r0, #0x2a
	mul	r0, r0, r6
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r5, #0x32]
	ldrh	r0, [r4, #0x1e]
	strh	r0, [r5, #0x34]
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x1
	strh	r0, [r5, #0x38]
	ldrh	r0, [r4, #0x16]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x16]
.L328:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x5
	bls	.L329	@cond_branch
	b	.L352
.L357:
	.align	2, 0
.L356:
	.word	gUnknown_08596E30
	.word	gSprites
	.word	gBattleAnimAttacker
.L333:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L334	@cond_branch
	ldrh	r1, [r4, #0xe]
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xd
	bgt	.L336	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0xe]
	b	.L336
.L334:
	ldrh	r1, [r4, #0x10]
	mov	r2, #0x10
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x4
	ble	.L336	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x10]
.L336:
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	ldrh	r2, [r4, #0xe]
	ldrh	r1, [r4, #0x10]
	cmp	r0, #0xe
	bne	.L346	@cond_branch
	cmp	r1, #0x4
	bne	.L346	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	b	.L353
.L339:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1e
	ble	.L324	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	b	.L352
.L341:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L342	@cond_branch
	ldrh	r1, [r4, #0xe]
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L344	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0xe]
	b	.L344
.L342:
	ldrh	r1, [r4, #0x10]
	mov	r2, #0x10
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xf
	bgt	.L344	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x10]
.L344:
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	ldrh	r2, [r4, #0xe]
	ldrh	r1, [r4, #0x10]
	cmp	r0, #0
	bne	.L346	@cond_branch
	cmp	r1, #0x10
	bne	.L346	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4, #0x18]
.L353:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L346:
	lsl	r1, r1, #0x8
	orr	r1, r1, r2
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	b	.L324
.L347:
	mov	r2, #0x16
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L324	@cond_branch
.L352:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L324
.L349:
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
.L324:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 sub_8112D10,.Lfe34-sub_8112D10
	.align	2, 0
	.type	 sub_8112E9C,function
	.thumb_func
sub_8112E9C:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L359	@cond_branch
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x2
	b	.L364
.L359:
	ldrh	r0, [r4, #0x32]
	sub	r0, r0, #0x2
.L364:
	strh	r0, [r4, #0x32]
	ldrh	r1, [r4, #0x32]
	mov	r0, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x32]
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	mov	r2, #0x34
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x32]
	sub	r0, r0, #0x41
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x7e
	bhi	.L361	@cond_branch
	ldr	r2, .L366
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0x12]
	add	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	b	.L365
.L367:
	.align	2, 0
.L366:
	.word	gTasks
.L361:
	ldr	r2, .L368
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r2, #0x3
	ldrb	r1, [r0, #0x12]
	and	r1, r1, r2
.L365:
	lsl	r1, r1, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x3
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x3a]
	mov	r2, #0x3a
	ldrsh	r0, [r4, r2]
	mov	r1, #0x7
	bl	Sin
	strh	r0, [r4, #0x26]
	ldr	r2, .L368
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	mov	r2, #0x18
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L363	@cond_branch
	ldrh	r0, [r1, #0x16]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x16]
	add	r0, r4, #0
	bl	DestroySprite
.L363:
	pop	{r4}
	pop	{r0}
	bx	r0
.L369:
	.align	2, 0
.L368:
	.word	gTasks
.Lfe35:
	.size	 sub_8112E9C,.Lfe35-sub_8112E9C
	.align	2, 0
	.type	 sub_8112F60,function
	.thumb_func
sub_8112F60:
	add	r3, r0, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r3]
	ldr	r2, .L371
	ldr	r1, .L371+0x4
	ldrb	r1, [r1]
	add	r1, r1, r2
	ldrb	r1, [r1]
	strh	r1, [r0, #0x38]
	mov	r1, #0x80
	strh	r1, [r0, #0x2e]
	mov	r1, #0xa
	strh	r1, [r0, #0x30]
	ldr	r2, .L371+0x8
	ldrh	r1, [r2]
	strh	r1, [r0, #0x32]
	ldrh	r1, [r2, #0x2]
	strh	r1, [r0, #0x34]
	ldr	r1, .L371+0xc
	str	r1, [r0, #0x1c]
	ldr	r2, .L371+0x10
	mov	r3, #0x38
	ldrsh	r1, [r0, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x22]
	add	r1, r1, #0x8
	strh	r1, [r0, #0x22]
	bx	lr
.L372:
	.align	2, 0
.L371:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	sub_8112FB8
	.word	gSprites
.Lfe36:
	.size	 sub_8112F60,.Lfe36-sub_8112F60
	.align	2, 0
	.type	 sub_8112FB8,function
	.thumb_func
sub_8112FB8:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x34]
	mov	r1, #0x34
	ldrsh	r3, [r5, r1]
	cmp	r3, #0
	beq	.L374	@cond_branch
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	mov	r2, #0x2e
	ldrsh	r0, [r5, r2]
	mov	r2, #0x30
	ldrsh	r1, [r5, r2]
	bl	Sin
	ldr	r4, .L377
	mov	r1, #0x38
	ldrsh	r2, [r5, r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	strh	r0, [r1, #0x24]
	mov	r2, #0x2e
	ldrsh	r0, [r5, r2]
	mov	r2, #0x30
	ldrsh	r1, [r5, r2]
	bl	Cos
	mov	r1, #0x38
	ldrsh	r2, [r5, r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	strh	r0, [r1, #0x26]
	ldrh	r0, [r5, #0x32]
	ldrh	r2, [r5, #0x2e]
	add	r1, r0, r2
	strh	r1, [r5, #0x2e]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L376	@cond_branch
	ldr	r2, .L377+0x4
	add	r0, r1, r2
	strh	r0, [r5, #0x2e]
	b	.L376
.L378:
	.align	2, 0
.L377:
	.word	gSprites
	.word	-0x100
.L374:
	ldr	r2, .L379
	mov	r0, #0x38
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r3, [r0, #0x24]
	mov	r0, #0x38
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r3, [r0, #0x26]
	mov	r0, #0x38
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x22]
	sub	r1, r1, #0x8
	strh	r1, [r0, #0x22]
	ldr	r0, .L379+0x4
	str	r0, [r5, #0x1c]
.L376:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L380:
	.align	2, 0
.L379:
	.word	gSprites
	.word	DestroySpriteAndMatrix
.Lfe37:
	.size	 sub_8112FB8,.Lfe37-sub_8112FB8
.text
	.align	2, 0

