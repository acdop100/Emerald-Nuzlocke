@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gUnknown_08595340
	.section .rodata
	.align	2, 0
	.type	 gUnknown_08595340,object
gUnknown_08595340:
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x30
	.byte	0x4
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_08595340,16
	.globl	gUnknown_08595350
	.align	2, 0
	.type	 gUnknown_08595350,object
gUnknown_08595350:
	.short	0x10
	.byte	0xc4
	.space	1
	.short	0x20
	.byte	0xc4
	.space	1
	.short	0x30
	.byte	0xc4
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_08595350,16
	.globl	gUnknown_08595360
	.align	2, 0
	.type	 gUnknown_08595360,object
gUnknown_08595360:
	.word	gUnknown_08595340
	.word	gUnknown_08595350
	.size	 gUnknown_08595360,8
	.globl	gUnknown_08595368
	.align	2, 0
	.type	 gUnknown_08595368,object
	.size	 gUnknown_08595368,24
gUnknown_08595368:
	.short	0x272d
	.short	0x272d
	.word	gUnknown_08524914
	.word	gUnknown_08595360
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8108EC8
	.globl	gUnknown_08595380
	.align	2, 0
	.type	 gUnknown_08595380,object
	.size	 gUnknown_08595380,24
gUnknown_08595380:
	.short	0x272d
	.short	0x272d
	.word	gUnknown_08524914
	.word	gUnknown_08595360
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8108F08
	.globl	gUnknown_08595398
	.align	2, 0
	.type	 gUnknown_08595398,object
gUnknown_08595398:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x10
	.byte	0x3
	.space	1
	.short	0x20
	.byte	0x3
	.space	1
	.short	0x30
	.byte	0x3
	.space	1
	.short	0x40
	.byte	0x3
	.space	1
	.short	0x50
	.byte	0x3
	.space	1
	.short	0x60
	.byte	0x3
	.space	1
	.short	0x70
	.byte	0x3
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_08595398,36
	.globl	gUnknown_085953BC
	.align	2, 0
	.type	 gUnknown_085953BC,object
gUnknown_085953BC:
	.word	gUnknown_08595398
	.size	 gUnknown_085953BC,4
	.globl	gUnknown_085953C0
	.align	2, 0
	.type	 gUnknown_085953C0,object
gUnknown_085953C0:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0x20
	.byte	0x5
	.space	1
	.short	0x30
	.byte	0x5
	.space	1
	.short	0x40
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_085953C0,24
	.globl	gUnknown_085953D8
	.align	2, 0
	.type	 gUnknown_085953D8,object
gUnknown_085953D8:
	.word	gUnknown_085953C0
	.size	 gUnknown_085953D8,4
	.globl	gUnknown_085953DC
	.align	2, 0
	.type	 gUnknown_085953DC,object
gUnknown_085953DC:
	.short	0x32
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x20
	.short	0x0
	.byte	0x0
	.byte	0x7
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_085953DC,24
	.globl	gUnknown_085953F4
	.align	2, 0
	.type	 gUnknown_085953F4,object
gUnknown_085953F4:
	.word	gUnknown_085953DC
	.size	 gUnknown_085953F4,4
	.globl	gUnknown_085953F8
	.align	2, 0
	.type	 gUnknown_085953F8,object
	.size	 gUnknown_085953F8,24
gUnknown_085953F8:
	.short	0x2731
	.short	0x2731
	.word	gUnknown_08524974
	.word	gUnknown_085953BC
	.word	0x0
	.word	gUnknown_085953F4
	.word	sub_8108FBC
	.globl	gUnknown_08595410
	.align	2, 0
	.type	 gUnknown_08595410,object
	.size	 gUnknown_08595410,24
gUnknown_08595410:
	.short	0x2731
	.short	0x2731
	.word	gUnknown_08524914
	.word	gUnknown_085953BC
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8108FBC
	.globl	gUnknown_08595428
	.align	2, 0
	.type	 gUnknown_08595428,object
	.size	 gUnknown_08595428,24
gUnknown_08595428:
	.short	0x2733
	.short	0x2733
	.word	gUnknown_08524914
	.word	gUnknown_085953D8
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8108F4C
	.globl	gUnknown_08595440
	.align	2, 0
	.type	 gUnknown_08595440,object
	.size	 gUnknown_08595440,24
gUnknown_08595440:
	.short	0x272d
	.short	0x272d
	.word	gUnknown_08524914
	.word	gUnknown_085953D8
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8108F4C
	.globl	gUnknown_08595458
	.align	2, 0
	.type	 gUnknown_08595458,object
gUnknown_08595458:
	.short	0x10
	.byte	0x6
	.space	1
	.short	0x20
	.byte	0x6
	.space	1
	.short	0x30
	.byte	0x6
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_08595458,16
	.globl	gUnknown_08595468
	.align	2, 0
	.type	 gUnknown_08595468,object
gUnknown_08595468:
	.word	gUnknown_08595458
	.size	 gUnknown_08595468,4
	.globl	gUnknown_0859546C
	.align	2, 0
	.type	 gUnknown_0859546C,object
	.size	 gUnknown_0859546C,24
gUnknown_0859546C:
	.short	0x272d
	.short	0x272d
	.word	gUnknown_08524914
	.word	gUnknown_08595468
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8109064
	.globl	gUnknown_08595484
	.align	2, 0
	.type	 gUnknown_08595484,object
gUnknown_08595484:
	.short	0x50
	.short	0x50
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x2
	.short	0x2
	.byte	0xa
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gUnknown_08595484,24
	.globl	gUnknown_0859549C
	.align	2, 0
	.type	 gUnknown_0859549C,object
gUnknown_0859549C:
	.word	gUnknown_08595484
	.size	 gUnknown_0859549C,4
	.globl	gUnknown_085954A0
	.align	2, 0
	.type	 gUnknown_085954A0,object
	.size	 gUnknown_085954A0,24
gUnknown_085954A0:
	.short	0x27ad
	.short	0x27ad
	.word	gUnknown_08524A94
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_0859549C
	.word	sub_810916C
	.globl	gUnknown_085954B8
	.align	2, 0
	.type	 gUnknown_085954B8,object
gUnknown_085954B8:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x30
	.byte	0x4
	.space	1
	.short	0x40
	.byte	0x4
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_085954B8,24
	.globl	gUnknown_085954D0
	.align	2, 0
	.type	 gUnknown_085954D0,object
gUnknown_085954D0:
	.word	gUnknown_085954B8
	.size	 gUnknown_085954D0,4
	.globl	gEmberSpriteTemplate
	.align	2, 0
	.type	 gEmberSpriteTemplate,object
	.size	 gEmberSpriteTemplate,24
gEmberSpriteTemplate:
	.short	0x272d
	.short	0x272d
	.word	gUnknown_08524914
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	TranslateAnimSpriteToTargetMonLocation
	.globl	gEmberFlareSpriteTemplate
	.align	2, 0
	.type	 gEmberFlareSpriteTemplate,object
	.size	 gEmberFlareSpriteTemplate,24
gEmberFlareSpriteTemplate:
	.short	0x272d
	.short	0x272d
	.word	gUnknown_08524914
	.word	gUnknown_085954D0
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimEmberFlare
	.globl	gUnknown_08595504
	.align	2, 0
	.type	 gUnknown_08595504,object
	.size	 gUnknown_08595504,24
gUnknown_08595504:
	.short	0x272d
	.short	0x272d
	.word	gUnknown_08524914
	.word	gUnknown_085954D0
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8109200
	.globl	gUnknown_0859551C
	.align	2, 0
	.type	 gUnknown_0859551C,object
	.size	 gUnknown_0859551C,24
gUnknown_0859551C:
	.short	0x272d
	.short	0x272d
	.word	gUnknown_08524914
	.word	gUnknown_085954D0
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFireRing
	.globl	gUnknown_08595534
	.align	2, 0
	.type	 gUnknown_08595534,object
gUnknown_08595534:
	.short	0x20
	.byte	0x6
	.space	1
	.short	0x30
	.byte	0x6
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_08595534,12
	.globl	gUnknown_08595540
	.align	2, 0
	.type	 gUnknown_08595540,object
gUnknown_08595540:
	.word	gUnknown_08595534
	.size	 gUnknown_08595540,4
	.globl	gUnknown_08595544
	.align	2, 0
	.type	 gUnknown_08595544,object
gUnknown_08595544:
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08595544,16
	.globl	gUnknown_08595554
	.align	2, 0
	.type	 gUnknown_08595554,object
gUnknown_08595554:
	.short	0xa0
	.short	0xa0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08595554,16
	.globl	gUnknown_08595564
	.align	2, 0
	.type	 gUnknown_08595564,object
gUnknown_08595564:
	.word	gUnknown_08595544
	.word	gUnknown_08595554
	.size	 gUnknown_08595564,8
	.globl	gUnknown_0859556C
	.align	2, 0
	.type	 gUnknown_0859556C,object
	.size	 gUnknown_0859556C,24
gUnknown_0859556C:
	.short	0x272d
	.short	0x272d
	.word	gUnknown_08524914
	.word	gUnknown_08595540
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFireCross
	.globl	gBattleAnimSpriteTemplate_8595584
	.align	2, 0
	.type	 gBattleAnimSpriteTemplate_8595584,object
	.size	 gBattleAnimSpriteTemplate_8595584,24
gBattleAnimSpriteTemplate_8595584:
	.short	0x272d
	.short	0x272d
	.word	gUnknown_08524914
	.word	gUnknown_085954D0
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_81093A4
	.globl	gUnknown_0859559C
	.align	2, 0
	.type	 gUnknown_0859559C,object
	.size	 gUnknown_0859559C,24
gUnknown_0859559C:
	.short	0x272d
	.short	0x272d
	.word	gUnknown_08524914
	.word	gUnknown_085954D0
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_80A8EE4
	.globl	gUnknown_085955B4
	.align	2, 0
	.type	 gUnknown_085955B4,object
	.size	 gUnknown_085955B4,24
gUnknown_085955B4:
	.short	0x27d9
	.short	0x27d9
	.word	gUnknown_0852490C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_81098EC
	.globl	gUnknown_085955CC
	.align	1, 0
	.type	 gUnknown_085955CC,object
gUnknown_085955CC:
	.short	-0x2
	.short	-0x5
	.short	-0x1
	.short	-0x1
	.short	0x3
	.short	-0x6
	.short	0x4
	.short	-0x2
	.short	0x2
	.short	-0x8
	.short	-0x5
	.short	-0x5
	.short	0x4
	.short	-0x7
	.size	 gUnknown_085955CC,28
	.globl	gUnknown_085955E8
	.align	2, 0
	.type	 gUnknown_085955E8,object
	.size	 gUnknown_085955E8,24
gUnknown_085955E8:
	.short	0x27d9
	.short	0x27d9
	.word	gUnknown_08524914
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8109A10
	.globl	gUnknown_08595600
	.align	2, 0
	.type	 gUnknown_08595600,object
gUnknown_08595600:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x4
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	0xc
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_08595600,20
	.globl	gUnknown_08595614
	.align	2, 0
	.type	 gUnknown_08595614,object
gUnknown_08595614:
	.short	0x10
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08595614,8
	.globl	gUnknown_0859561C
	.align	2, 0
	.type	 gUnknown_0859561C,object
gUnknown_0859561C:
	.short	0x14
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0859561C,8
	.globl	gUnknown_08595624
	.align	2, 0
	.type	 gUnknown_08595624,object
gUnknown_08595624:
	.short	0x14
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08595624,8
	.globl	gUnknown_0859562C
	.align	2, 0
	.type	 gUnknown_0859562C,object
gUnknown_0859562C:
	.word	gUnknown_08595600
	.word	gUnknown_08595614
	.word	gUnknown_0859561C
	.word	gUnknown_08595624
	.size	 gUnknown_0859562C,16
	.globl	gUnknown_0859563C
	.align	2, 0
	.type	 gUnknown_0859563C,object
	.size	 gUnknown_0859563C,24
gUnknown_0859563C:
	.short	0x27f7
	.short	0x27f7
	.word	gUnknown_0852490C
	.word	gUnknown_0859562C
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8109AFC
	.globl	gUnknown_08595654
	.align	2, 0
	.type	 gUnknown_08595654,object
gUnknown_08595654:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0x20
	.byte	0x5
	.space	1
	.short	0x30
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_08595654,20
	.globl	gUnknown_08595668
	.align	2, 0
	.type	 gUnknown_08595668,object
gUnknown_08595668:
	.word	gUnknown_08595654
	.size	 gUnknown_08595668,4
	.globl	gUnknown_0859566C
	.align	2, 0
	.type	 gUnknown_0859566C,object
	.size	 gUnknown_0859566C,24
gUnknown_0859566C:
	.short	0x27f8
	.short	0x27f8
	.word	gUnknown_08524914
	.word	gUnknown_08595668
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8109CB0
	.globl	gUnknown_08595684
	.type	 gUnknown_08595684,object
	.size	 gUnknown_08595684,16
gUnknown_08595684:
	.byte	-0x1
	.byte	-0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	-0x1
	.byte	-0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	-0x1
	.byte	0x0
	.byte	0x1
	.globl	gUnknown_08595694
	.type	 gUnknown_08595694,object
	.size	 gUnknown_08595694,16
gUnknown_08595694:
	.byte	-0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	-0x1
	.byte	0x1
	.byte	0x0
	.byte	-0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	-0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
.text
	.align	2, 0
	.type	 sub_8108EC8,function
	.thumb_func
sub_8108EC8:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L3
	ldrh	r0, [r0]
	strh	r0, [r4, #0x2e]
	mov	r0, #0x3c
	strh	r0, [r4, #0x30]
	mov	r0, #0x9
	strh	r0, [r4, #0x32]
	mov	r0, #0x1e
	strh	r0, [r4, #0x34]
	mov	r0, #0xfe
	lsl	r0, r0, #0x8
	strh	r0, [r4, #0x36]
	ldr	r1, .L3+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r1, .L3+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	gBattleAnimArgs
	.word	DestroyAnimSprite
	.word	TranslateSpriteInGrowingCircleOverDuration
.Lfe1:
	.size	 sub_8108EC8,.Lfe1-sub_8108EC8
	.align	2, 0
	.type	 sub_8108F08,function
	.thumb_func
sub_8108F08:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L6
	mov	r0, #0x0
	ldrsh	r1, [r5, r0]
	add	r0, r4, #0
	bl	SetAnimSpriteInitialXOffset
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x32]
	ldr	r0, .L6+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L6+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L7:
	.align	2, 0
.L6:
	.word	gBattleAnimArgs
	.word	TranslateSpriteLinearFixedPoint
	.word	DestroyAnimSprite
.Lfe2:
	.size	 sub_8108F08,.Lfe2-sub_8108F08
	.align	2, 0
	.type	 sub_8108F4C,function
	.thumb_func
sub_8108F4C:
	push	{r4, lr}
	add	r4, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r0, .L11
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L9	@cond_branch
	ldr	r2, .L11+0x4
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldrh	r0, [r2, #0x8]
	neg	r0, r0
	strh	r0, [r4, #0x32]
	add	r1, r2, #0
	b	.L10
.L12:
	.align	2, 0
.L11:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L9:
	ldr	r1, .L13
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x32]
.L10:
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x36]
	ldrh	r0, [r1, #0xa]
	strh	r0, [r4, #0x34]
	ldr	r0, .L13+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	gBattleAnimArgs
	.word	sub_8109028
.Lfe3:
	.size	 sub_8108F4C,.Lfe3-sub_8108F4C
	.align	2, 0
	.type	 sub_8108FBC,function
	.thumb_func
sub_8108FBC:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L18
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L16	@cond_branch
	ldr	r2, .L18+0x4
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldrh	r0, [r2, #0x8]
	strh	r0, [r4, #0x32]
	add	r1, r2, #0
	b	.L17
.L19:
	.align	2, 0
.L18:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L16:
	ldr	r1, .L20
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldrh	r0, [r1, #0x8]
	neg	r0, r0
	strh	r0, [r4, #0x32]
.L17:
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x36]
	ldrh	r0, [r1, #0xa]
	strh	r0, [r4, #0x34]
	ldr	r0, .L20+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L21:
	.align	2, 0
.L20:
	.word	gBattleAnimArgs
	.word	sub_8109028
.Lfe4:
	.size	 sub_8108FBC,.Lfe4-sub_8108FBC
	.align	2, 0
	.type	 sub_8109028,function
	.thumb_func
sub_8109028:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x36
	ldrsh	r1, [r2, r3]
	cmp	r0, r1
	bge	.L23	@cond_branch
	ldrh	r0, [r2, #0x32]
	ldrh	r1, [r2, #0x24]
	add	r0, r0, r1
	strh	r0, [r2, #0x24]
	ldrh	r0, [r2, #0x34]
	ldrh	r3, [r2, #0x26]
	add	r0, r0, r3
	strh	r0, [r2, #0x26]
.L23:
	mov	r0, #0x2e
	ldrsh	r1, [r2, r0]
	mov	r3, #0x30
	ldrsh	r0, [r2, r3]
	cmp	r1, r0
	bne	.L24	@cond_branch
	add	r0, r2, #0
	bl	DestroySpriteAndMatrix
.L24:
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 sub_8109028,.Lfe5-sub_8109028
	.align	2, 0
	.type	 sub_8109064,function
	.thumb_func
sub_8109064:
	push	{r4, lr}
	add	r4, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r0, .L29
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L26	@cond_branch
	ldr	r0, .L29+0x4
	ldrh	r1, [r4, #0x20]
	ldrh	r2, [r0]
	sub	r1, r1, r2
	strh	r1, [r4, #0x20]
	b	.L28
.L30:
	.align	2, 0
.L29:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L26:
	ldr	r0, .L31
	ldrh	r1, [r0]
	ldrh	r2, [r4, #0x20]
	add	r1, r1, r2
	strh	r1, [r4, #0x20]
	add	r2, r4, #0
	add	r2, r2, #0x43
	mov	r1, #0x8
	strb	r1, [r2]
.L28:
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r4, #0x22]
	ldrh	r0, [r2, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r2, #0x6]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r2, #0x8]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r2, #0xa]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r2, #0xc]
	strh	r0, [r4, #0x36]
	strh	r1, [r4, #0x38]
	ldr	r0, .L31+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L32:
	.align	2, 0
.L31:
	.word	gBattleAnimArgs
	.word	sub_81090D8
.Lfe6:
	.size	 sub_8109064,.Lfe6-sub_8109064
	.align	2, 0
	.type	 sub_81090D8,function
	.thumb_func
sub_81090D8:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L34	@cond_branch
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	ldr	r0, .L41
	cmp	r1, r0
	ble	.L35	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x1
	strb	r0, [r1]
.L35:
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	ldrh	r1, [r4, #0x38]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r2, [r4, #0x30]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	ldrh	r1, [r4, #0x38]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r2, [r4, #0x30]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x2e]
	add	r1, r0, r2
	strh	r1, [r4, #0x2e]
	ldrh	r0, [r4, #0x36]
	ldrh	r2, [r4, #0x38]
	add	r0, r0, r2
	strh	r0, [r4, #0x38]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L36	@cond_branch
	ldr	r2, .L41+0x4
	b	.L40
.L42:
	.align	2, 0
.L41:
	.word	0x2710
	.word	-0x100
.L36:
	cmp	r0, #0
	bge	.L37	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
.L40:
	add	r0, r1, r2
	strh	r0, [r4, #0x2e]
.L37:
	ldrh	r0, [r4, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	b	.L39
.L34:
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
.L39:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 sub_81090D8,.Lfe7-sub_81090D8
	.align	2, 0
	.type	 sub_810916C,function
	.thumb_func
sub_810916C:
	push	{lr}
	mov	r1, #0x0
	strh	r1, [r0, #0x20]
	strh	r1, [r0, #0x22]
	mov	r1, #0x3c
	strh	r1, [r0, #0x2e]
	mov	r1, #0x8c
	strh	r1, [r0, #0x32]
	mov	r1, #0x50
	strh	r1, [r0, #0x36]
	ldr	r1, .L44
	str	r1, [r0, #0x1c]
	ldr	r1, .L44+0x4
	bl	StoreSpriteCallbackInData6
	pop	{r0}
	bx	r0
.L45:
	.align	2, 0
.L44:
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe8:
	.size	 sub_810916C,.Lfe8-sub_810916C
	.align	2, 0
	.type	 AnimEmberFlare,function
	.thumb_func
AnimEmberFlare:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	ldr	r5, .L49
	ldrb	r0, [r5]
	bl	GetBattlerSide
	add	r4, r0, #0
	ldr	r0, .L49+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.L47	@cond_branch
	mov	r0, #0x2
	bl	GetBattlerAtPosition
	ldrb	r1, [r5]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r1, r0
	beq	.L48	@cond_branch
	mov	r0, #0x3
	bl	GetBattlerAtPosition
	ldrb	r1, [r5]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r1, r0
	bne	.L47	@cond_branch
.L48:
	ldr	r1, .L49+0x8
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L47:
	ldr	r1, .L49+0xc
	str	r1, [r6, #0x1c]
	add	r0, r6, #0
	bl	_call_via_r1
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L50:
	.align	2, 0
.L49:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	sub_80A7938
.Lfe9:
	.size	 AnimEmberFlare,.Lfe9-AnimEmberFlare
	.align	2, 0
	.type	 sub_8109200,function
	.thumb_func
sub_8109200:
	ldr	r2, .L52
	ldrh	r1, [r2]
	neg	r1, r1
	strh	r1, [r2]
	ldrh	r1, [r2, #0x4]
	neg	r1, r1
	strh	r1, [r2, #0x4]
	ldr	r1, .L52+0x4
	str	r1, [r0, #0x1c]
	bx	lr
.L53:
	.align	2, 0
.L52:
	.word	gBattleAnimArgs
	.word	sub_80A7938
.Lfe10:
	.size	 sub_8109200,.Lfe10-sub_8109200
	.align	2, 0
	.type	 AnimFireRing,function
	.thumb_func
AnimFireRing:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L55
	ldrh	r0, [r0, #0x4]
	mov	r1, #0x0
	strh	r0, [r4, #0x3c]
	strh	r1, [r4, #0x2e]
	ldr	r0, .L55+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L56:
	.align	2, 0
.L55:
	.word	gBattleAnimArgs
	.word	AnimFireRingStep1
.Lfe11:
	.size	 AnimFireRing,.Lfe11-AnimFireRing
	.align	2, 0
	.type	 AnimFireRingStep1,function
	.thumb_func
AnimFireRingStep1:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	UpdateFireRingCircleOffset
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x12
	bne	.L58	@cond_branch
	mov	r0, #0x19
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r5, #0x20]
	strh	r0, [r5, #0x30]
	ldr	r4, .L59
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x22]
	strh	r0, [r5, #0x34]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	add	r0, r5, #0
	bl	InitAnimLinearTranslation
	ldr	r0, .L59+0x4
	str	r0, [r5, #0x1c]
.L58:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L60:
	.align	2, 0
.L59:
	.word	gBattleAnimTarget
	.word	AnimFireRingStep2
.Lfe12:
	.size	 AnimFireRingStep1,.Lfe12-AnimFireRingStep1
	.align	2, 0
	.type	 AnimFireRingStep2,function
	.thumb_func
AnimFireRingStep2:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L62	@cond_branch
	mov	r4, #0x0
	strh	r4, [r6, #0x2e]
	ldr	r5, .L64
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x22]
	strh	r4, [r6, #0x26]
	strh	r4, [r6, #0x24]
	ldr	r1, .L64+0x4
	str	r1, [r6, #0x1c]
	add	r0, r6, #0
	bl	_call_via_r1
	b	.L63
.L65:
	.align	2, 0
.L64:
	.word	gBattleAnimTarget
	.word	AnimFireRingStep3
.L62:
	mov	r1, #0x3c
	ldrsh	r0, [r6, r1]
	mov	r1, #0x1c
	bl	Sin
	ldrh	r1, [r6, #0x24]
	add	r0, r0, r1
	strh	r0, [r6, #0x24]
	mov	r1, #0x3c
	ldrsh	r0, [r6, r1]
	mov	r1, #0x1c
	bl	Cos
	ldrh	r1, [r6, #0x26]
	add	r0, r0, r1
	strh	r0, [r6, #0x26]
	ldrh	r0, [r6, #0x3c]
	add	r0, r0, #0x14
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r6, #0x3c]
.L63:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 AnimFireRingStep2,.Lfe13-AnimFireRingStep2
	.align	2, 0
	.type	 AnimFireRingStep3,function
	.thumb_func
AnimFireRingStep3:
	push	{r4, lr}
	add	r4, r0, #0
	bl	UpdateFireRingCircleOffset
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	bne	.L67	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L67:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 AnimFireRingStep3,.Lfe14-AnimFireRingStep3
	.align	2, 0
	.type	 UpdateFireRingCircleOffset,function
	.thumb_func
UpdateFireRingCircleOffset:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	mov	r1, #0x1c
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	mov	r1, #0x1c
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x3c]
	add	r0, r0, #0x14
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x3c]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 UpdateFireRingCircleOffset,.Lfe15-UpdateFireRingCircleOffset
	.align	2, 0
	.type	 AnimFireCross,function
	.thumb_func
AnimFireCross:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L70
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x32]
	ldr	r1, .L70+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L70+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L71:
	.align	2, 0
.L70:
	.word	gBattleAnimArgs
	.word	DestroyAnimSprite
	.word	TranslateSpriteLinear
.Lfe16:
	.size	 AnimFireCross,.Lfe16-AnimFireCross
	.align	2, 0
	.type	 sub_81093A4,function
	.thumb_func
sub_81093A4:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r1, .L73
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x2e]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L73+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L73+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4}
	pop	{r0}
	bx	r0
.L74:
	.align	2, 0
.L73:
	.word	gBattleAnimArgs
	.word	WaitAnimForDuration
	.word	sub_81093E4
.Lfe17:
	.size	 sub_81093A4,.Lfe17-sub_81093A4
	.align	2, 0
	.type	 sub_81093E4,function
	.thumb_func
sub_81093E4:
	push	{lr}
	add	r3, r0, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r3]
	ldrh	r1, [r0, #0x30]
	mov	r2, #0x0
	strh	r1, [r0, #0x2e]
	strh	r2, [r0, #0x30]
	ldr	r1, .L76
	str	r1, [r0, #0x1c]
	bl	_call_via_r1
	pop	{r0}
	bx	r0
.L77:
	.align	2, 0
.L76:
	.word	sub_810940C
.Lfe18:
	.size	 sub_81093E4,.Lfe18-sub_81093E4
	.align	2, 0
	.type	 sub_810940C,function
	.thumb_func
sub_810940C:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	ldrh	r1, [r4, #0x32]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	ldrh	r1, [r4, #0x32]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0xa
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0xd0
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L79	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L79:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 sub_810940C,.Lfe19-sub_810940C
	.align	2, 0
	.globl	sub_8109460
	.type	 sub_8109460,function
	.thumb_func
sub_8109460:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L81
	add	r4, r4, r0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	strh	r0, [r4, #0x26]
	strh	r5, [r4, #0x8]
	strh	r5, [r4, #0xa]
	strh	r5, [r4, #0xc]
	strh	r5, [r4, #0xe]
	ldr	r2, .L81+0x4
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x22]
	strh	r0, [r4, #0x10]
	ldr	r0, .L81+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x12]
	strh	r5, [r4, #0x14]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	ldr	r0, .L81+0xc
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L82:
	.align	2, 0
.L81:
	.word	gTasks
	.word	gSprites
	.word	gBattleAnimAttacker
	.word	sub_81094D0
.Lfe20:
	.size	 sub_8109460,.Lfe20-sub_8109460
	.align	2, 0
	.type	 sub_81094D0,function
	.thumb_func
sub_81094D0:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L117
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x6
	bls	.LCB1031
	b	.L84	@long jump
.LCB1031:
	lsl	r0, r0, #0x2
	ldr	r1, .L117+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L118:
	.align	2, 0
.L117:
	.word	gTasks
	.word	.L113
	.align	2, 0
	.align	2, 0
.L113:
	.word	.L85
	.word	.L86
	.word	.L93
	.word	.L97
	.word	.L99
	.word	.L107
	.word	.L110
.L85:
	ldrh	r1, [r4, #0x26]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	mov	r0, #0xe0
	str	r0, [sp]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x20
	str	r0, [sp, #0x8]
	add	r0, r4, #0
	add	r2, r3, #0
	bl	sub_80A805C
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L86:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L87	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L88	@cond_branch
	ldr	r2, .L119
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3
	b	.L114
.L120:
	.align	2, 0
.L119:
	.word	gSprites
.L88:
	ldr	r2, .L121
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L121+0x4
.L114:
	strh	r1, [r0, #0x24]
.L87:
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L90	@cond_branch
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L90	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xe]
	ldr	r2, .L121
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x22]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x22]
.L90:
	add	r0, r4, #0
	bl	sub_80A80C8
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	beq	.LCB1155
	b	.L84	@long jump
.LCB1155:
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromYScale
	ldr	r2, .L121
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r5, [r0, #0x24]
	strh	r5, [r4, #0xa]
	strh	r5, [r4, #0xc]
	strh	r5, [r4, #0xe]
	b	.L115
.L122:
	.align	2, 0
.L121:
	.word	gSprites
	.word	0xfffd
.L93:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bgt	.LCB1189
	b	.L84	@long jump
.LCB1189:
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L95	@cond_branch
	ldrh	r1, [r4, #0x26]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r3, #0x80
	lsl	r3, r3, #0x2
	mov	r0, #0xc0
	lsl	r0, r0, #0x1
	str	r0, [sp]
	mov	r0, #0xf0
	str	r0, [sp, #0x4]
	mov	r0, #0x6
	str	r0, [sp, #0x8]
	add	r0, r4, #0
	mov	r2, #0xe0
	bl	sub_80A805C
	b	.L96
.L95:
	ldrh	r1, [r4, #0x26]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r3, #0x80
	lsl	r3, r3, #0x2
	mov	r0, #0xc0
	lsl	r0, r0, #0x1
	str	r0, [sp]
	mov	r0, #0xc0
	str	r0, [sp, #0x4]
	mov	r0, #0x6
	str	r0, [sp, #0x8]
	add	r0, r4, #0
	mov	r2, #0xe0
	bl	sub_80A805C
.L96:
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	b	.L115
.L97:
	add	r0, r4, #0
	bl	sub_80A80C8
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1248
	b	.L84	@long jump
.LCB1248:
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r5, #0
	mov	r2, #0x6
	bl	sub_81097B4
	b	.L115
.L99:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L100	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L101	@cond_branch
	ldr	r2, .L123
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x26]
	add	r1, r1, #0x3
	b	.L116
.L124:
	.align	2, 0
.L123:
	.word	gSprites
.L101:
	ldr	r2, .L125
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x26]
	sub	r1, r1, #0x3
.L116:
	strh	r1, [r0, #0x26]
.L100:
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x18
	ble	.L84	@cond_branch
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L104	@cond_branch
	ldrh	r1, [r4, #0x26]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0xc0
	lsl	r2, r2, #0x1
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x8
	str	r0, [sp, #0x8]
	add	r0, r4, #0
	mov	r3, #0xf0
	bl	sub_80A805C
	b	.L105
.L126:
	.align	2, 0
.L125:
	.word	gSprites
.L104:
	ldrh	r1, [r4, #0x26]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0xc0
	lsl	r2, r2, #0x1
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x8
	str	r0, [sp, #0x8]
	add	r0, r4, #0
	mov	r3, #0xc0
	bl	sub_80A805C
.L105:
	ldrh	r1, [r4, #0xc]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L106	@cond_branch
	ldr	r2, .L127
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x26]
	sub	r1, r1, #0x3
	strh	r1, [r0, #0x26]
.L106:
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	strh	r0, [r4, #0xc]
	strh	r0, [r4, #0xe]
	b	.L115
.L128:
	.align	2, 0
.L127:
	.word	gSprites
.L107:
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L108	@cond_branch
	ldr	r2, .L129
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x22]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x22]
.L108:
	add	r0, r4, #0
	bl	sub_80A80C8
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L84	@cond_branch
	ldr	r2, .L129
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x10]
	strh	r1, [r0, #0x22]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ResetSpriteRotScale
	strh	r5, [r4, #0xc]
.L115:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L84
.L130:
	.align	2, 0
.L129:
	.word	gSprites
.L110:
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L84	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L84:
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 sub_81094D0,.Lfe21-sub_81094D0
	.align	2, 0
	.type	 sub_81097B4,function
	.thumb_func
sub_81097B4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	add	r0, r4, #0
	bl	sub_8109930
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	ldr	r1, .L141
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r4, [r0, #0x20]
	ldr	r0, .L141+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L132	@cond_branch
	add	r0, r4, #0
	sub	r0, r0, #0xc
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x1
	b	.L133
.L142:
	.align	2, 0
.L141:
	.word	gSprites
	.word	gBattleAnimAttacker
.L132:
	add	r0, r4, #0
	add	r0, r0, #0x10
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0xff
.L133:
	mov	r6, #0x0
	mov	r5, #0x0
	lsl	r4, r4, #0x10
	str	r4, [sp, #0x8]
	mov	r1, r9
	lsl	r1, r1, #0x10
	str	r1, [sp, #0x4]
	ldr	r2, .L143
	mov	r9, r2
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	str	r0, [sp]
	mov	r3, r8
	lsl	r3, r3, #0x1
	mov	sl, r3
.L137:
	ldr	r0, .L143+0x4
	ldr	r2, [sp, #0x8]
	asr	r1, r2, #0x10
	ldr	r3, [sp, #0x4]
	asr	r2, r3, #0x10
	mov	r3, #0x2
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x40
	beq	.L136	@cond_branch
	ldr	r1, .L143+0x8
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrh	r2, [r4, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	lsl	r0, r5, #0x2
	add	r0, r0, #0x40
	add	r1, r1, r0
	ldr	r3, .L143+0xc
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r3, .L143+0x10
	add	r0, r3, #0
	and	r2, r2, r0
	orr	r2, r2, r1
	strh	r2, [r4, #0x4]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x4
	bls	.L139	@cond_branch
	mov	r5, #0x0
.L139:
	lsl	r2, r6, #0x2
	mov	r1, r9
	add	r0, r2, r1
	ldrh	r0, [r0]
	ldr	r3, [sp]
	mov	r1, r0
	mul	r1, r1, r3
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	ldr	r0, .L143+0x14
	add	r2, r2, r0
	mov	r3, #0x0
	ldrsh	r2, [r2, r3]
	add	r0, r4, #0
	bl	sub_8109984
	strh	r7, [r4, #0x3a]
	mov	r0, r8
	strh	r0, [r4, #0x3c]
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, sl
	ldr	r1, .L143+0x18
	add	r0, r0, r1
	ldrh	r1, [r0]
	add	r1, r1, #0x1
	strh	r1, [r0]
.L136:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x6
	bls	.L137	@cond_branch
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L144:
	.align	2, 0
.L143:
	.word	gUnknown_085955CC
	.word	gUnknown_085955B4
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	gUnknown_085955CC+0x2
	.word	gTasks+0x8
.Lfe22:
	.size	 sub_81097B4,.Lfe22-sub_81097B4
	.align	2, 0
	.type	 sub_81098EC,function
	.thumb_func
sub_81098EC:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_81099A0
	add	r0, r4, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L146	@cond_branch
	ldr	r3, .L147
	mov	r0, #0x3c
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x3a
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	add	r0, r4, #0
	bl	DestroySprite
.L146:
	pop	{r4}
	pop	{r0}
	bx	r0
.L148:
	.align	2, 0
.L147:
	.word	gTasks
.Lfe23:
	.size	 sub_81098EC,.Lfe23-sub_81098EC
	.align	2, 0
	.type	 sub_8109930,function
	.thumb_func
sub_8109930:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L153
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r2, [r1, #0x26]
	ldrh	r0, [r1, #0x22]
	add	r2, r2, r0
	add	r1, r1, #0x29
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	add	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L153+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L150	@cond_branch
	lsl	r0, r4, #0x10
	mov	r1, #0x94
	lsl	r1, r1, #0xf
	b	.L152
.L154:
	.align	2, 0
.L153:
	.word	gSprites
	.word	gBattleAnimAttacker
.L150:
	lsl	r0, r4, #0x10
	mov	r1, #0xb0
	lsl	r1, r1, #0xe
.L152:
	add	r0, r0, r1
	lsr	r4, r0, #0x10
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe24:
	.size	 sub_8109930,.Lfe24-sub_8109930
	.align	2, 0
	.type	 sub_8109984,function
	.thumb_func
sub_8109984:
	mov	r3, #0x0
	strh	r3, [r0, #0x2e]
	strh	r3, [r0, #0x30]
	ldrh	r3, [r0, #0x20]
	lsl	r3, r3, #0x3
	strh	r3, [r0, #0x32]
	ldrh	r3, [r0, #0x22]
	lsl	r3, r3, #0x3
	strh	r3, [r0, #0x34]
	lsl	r1, r1, #0x3
	strh	r1, [r0, #0x36]
	lsl	r2, r2, #0x3
	strh	r2, [r0, #0x38]
	bx	lr
.Lfe25:
	.size	 sub_8109984,.Lfe25-sub_8109984
	.align	2, 0
	.type	 sub_81099A0,function
	.thumb_func
sub_81099A0:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L157	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x2e]
	ldrh	r0, [r2, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	ldrh	r0, [r2, #0x30]
	mov	r1, r0
	mul	r1, r1, r0
	add	r0, r1, #0
	ldrh	r3, [r2, #0x34]
	add	r0, r0, r3
	strh	r0, [r2, #0x34]
.L157:
	ldrh	r0, [r2, #0x36]
	ldrh	r1, [r2, #0x32]
	add	r0, r0, r1
	strh	r0, [r2, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	strh	r0, [r2, #0x20]
	ldrh	r1, [r2, #0x38]
	ldrh	r3, [r2, #0x34]
	add	r1, r1, r3
	strh	r1, [r2, #0x34]
	lsl	r1, r1, #0x10
	asr	r3, r1, #0x13
	strh	r3, [r2, #0x22]
	add	r0, r0, #0x8
	lsl	r0, r0, #0x10
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	cmp	r0, r1
	bhi	.L159	@cond_branch
	add	r1, r3, #0
	mov	r0, #0x8
	neg	r0, r0
	cmp	r1, r0
	blt	.L159	@cond_branch
	cmp	r1, #0x78
	ble	.L158	@cond_branch
.L159:
	add	r0, r2, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L158:
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 sub_81099A0,.Lfe26-sub_81099A0
	.align	2, 0
	.type	 sub_8109A10,function
	.thumb_func
sub_8109A10:
	push	{r4, r5, lr}
	ldr	r3, .L161
	ldrh	r1, [r3]
	mov	r2, #0x0
	strh	r1, [r0, #0x20]
	ldrh	r1, [r3, #0x2]
	strh	r1, [r0, #0x22]
	strh	r2, [r0, #0x2e]
	strh	r2, [r0, #0x30]
	strh	r2, [r0, #0x32]
	ldrh	r1, [r3, #0x4]
	strh	r1, [r0, #0x3a]
	ldrh	r1, [r3, #0x6]
	strh	r1, [r0, #0x3c]
	ldrh	r4, [r0, #0x4]
	lsl	r2, r4, #0x16
	lsr	r2, r2, #0x16
	mov	r5, #0x8
	ldrsh	r1, [r3, r5]
	lsl	r1, r1, #0x4
	add	r2, r2, r1
	ldr	r3, .L161+0x4
	add	r1, r3, #0
	and	r2, r2, r1
	ldr	r1, .L161+0x8
	and	r1, r1, r4
	orr	r1, r1, r2
	strh	r1, [r0, #0x4]
	ldr	r1, .L161+0xc
	str	r1, [r0, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L162:
	.align	2, 0
.L161:
	.word	gBattleAnimArgs
	.word	0x3ff
	.word	-0x400
	.word	sub_8109A64
.Lfe27:
	.size	 sub_8109A10,.Lfe27-sub_8109A10
	.align	2, 0
	.type	 sub_8109A64,function
	.thumb_func
sub_8109A64:
	push	{r4, lr}
	add	r2, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r2, r1]
	cmp	r0, #0x1
	beq	.L167	@cond_branch
	cmp	r0, #0x1
	bgt	.L176	@cond_branch
	cmp	r0, #0
	beq	.L165	@cond_branch
	b	.L163
.L176:
	cmp	r0, #0x2
	beq	.L169	@cond_branch
	b	.L163
.L165:
	ldrh	r1, [r2, #0x3a]
	mov	r3, #0x3a
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	beq	.L166	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r2, #0x3a]
	b	.L163
.L166:
	ldrh	r0, [r2, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
.L167:
	ldrh	r0, [r2, #0x22]
	add	r0, r0, #0x8
	strh	r0, [r2, #0x22]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r3, [r2, #0x3c]
	mov	r4, #0x3c
	ldrsh	r1, [r2, r4]
	cmp	r0, r1
	blt	.L163	@cond_branch
	strh	r3, [r2, #0x22]
	ldrh	r0, [r2, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	b	.L163
.L169:
	ldrh	r0, [r2, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L170	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x30]
	ldrh	r0, [r2, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x32]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L171	@cond_branch
	ldr	r0, .L178
	b	.L177
.L179:
	.align	2, 0
.L178:
	.word	0xfffd
.L171:
	mov	r0, #0x3
.L177:
	strh	r0, [r2, #0x26]
.L170:
	ldrh	r0, [r2, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	ble	.L163	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L163:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 sub_8109A64,.Lfe28-sub_8109A64
	.align	2, 0
	.type	 sub_8109AFC,function
	.thumb_func
sub_8109AFC:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L185	@cond_branch
	cmp	r0, #0x1
	bgt	.L193	@cond_branch
	cmp	r0, #0
	beq	.L182	@cond_branch
	b	.L181
.L193:
	cmp	r0, #0x2
	beq	.L189	@cond_branch
	b	.L181
.L182:
	add	r0, r5, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	ldr	r4, .L197
	ldrb	r1, [r4, #0x4]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldrh	r0, [r4, #0x4]
	strh	r0, [r5, #0x3c]
	ldr	r0, .L197+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L183	@cond_branch
	mov	r0, #0x4
	b	.L194
.L198:
	.align	2, 0
.L197:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L183:
	ldr	r0, .L199
.L194:
	strh	r0, [r5, #0x36]
	ldr	r0, .L199+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r5, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	b	.L195
.L200:
	.align	2, 0
.L199:
	.word	0xfffc
	.word	gBattleAnimTarget
.L185:
	ldrh	r0, [r5, #0x30]
	add	r0, r0, #0xc0
	strh	r0, [r5, #0x30]
	ldr	r0, .L201
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L186	@cond_branch
	ldrh	r0, [r5, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	neg	r0, r0
	b	.L196
.L202:
	.align	2, 0
.L201:
	.word	gBattleAnimAttacker
.L186:
	ldrh	r0, [r5, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
.L196:
	strh	r0, [r5, #0x26]
	mov	r2, #0x32
	ldrsh	r0, [r5, r2]
	mov	r2, #0x36
	ldrsh	r1, [r5, r2]
	bl	Sin
	strh	r0, [r5, #0x24]
	ldrh	r0, [r5, #0x32]
	add	r0, r0, #0x4
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L181	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x34]
.L195:
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	b	.L181
.L189:
	mov	r1, #0x32
	ldrsh	r0, [r5, r1]
	mov	r2, #0x36
	ldrsh	r1, [r5, r2]
	bl	Sin
	add	r2, r0, #0
	mov	r3, #0x0
	strh	r2, [r5, #0x24]
	ldrh	r0, [r5, #0x32]
	add	r0, r0, #0x4
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	bne	.L181	@cond_branch
	ldrh	r0, [r5, #0x20]
	add	r1, r2, r0
	strh	r1, [r5, #0x20]
	ldrh	r0, [r5, #0x26]
	ldrh	r2, [r5, #0x22]
	add	r0, r0, r2
	strh	r0, [r5, #0x22]
	strh	r3, [r5, #0x26]
	strh	r3, [r5, #0x24]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	strh	r1, [r5, #0x30]
	ldr	r4, .L203
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x22]
	strh	r0, [r5, #0x34]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	add	r0, r5, #0
	bl	sub_80A6FD4
	ldr	r0, .L203+0x4
	str	r0, [r5, #0x1c]
.L181:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L204:
	.align	2, 0
.L203:
	.word	gBattleAnimTarget
	.word	sub_8109C4C
.Lfe29:
	.size	 sub_8109AFC,.Lfe29-sub_8109AFC
	.align	2, 0
	.type	 sub_8109C4C,function
	.thumb_func
sub_8109C4C:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L206	@cond_branch
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x10
	bl	Sin
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	ldrh	r2, [r4, #0x38]
	add	r0, r2, #0x4
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x38]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	cmp	r2, #0
	beq	.L208	@cond_branch
	cmp	r2, #0xc4
	ble	.L209	@cond_branch
.L208:
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L209	@cond_branch
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L209	@cond_branch
	ldr	r0, .L210
	mov	r1, #0x0
	ldrsb	r1, [r0, r1]
	mov	r0, #0x90
	bl	PlaySE12WithPanning
	b	.L209
.L211:
	.align	2, 0
.L210:
	.word	gUnknown_02038440
.L206:
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L209:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 sub_8109C4C,.Lfe30-sub_8109C4C
	.align	2, 0
	.type	 sub_8109CB0,function
	.thumb_func
sub_8109CB0:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L213	@cond_branch
	ldr	r0, .L223
	ldrh	r0, [r0]
	strh	r0, [r4, #0x30]
	add	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
.L213:
	mov	r0, #0xc0
	lsl	r0, r0, #0x1
	add	r1, r0, #0
	ldrh	r2, [r4, #0x34]
	add	r1, r1, r2
	strh	r1, [r4, #0x34]
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0xa0
	strh	r0, [r4, #0x36]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	ldrh	r1, [r4, #0x36]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x7
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L214	@cond_branch
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x40
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x83
	bls	.L215	@cond_branch
	ldr	r0, .L223+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
	b	.L217
.L224:
	.align	2, 0
.L223:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
.L215:
	ldr	r0, .L225
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0x5]
	b	.L217
.L226:
	.align	2, 0
.L225:
	.word	gBattleAnimTarget
.L214:
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x40
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x83
	bls	.L218	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x1d
	b	.L222
.L218:
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x1f
.L222:
	strb	r0, [r1]
.L217:
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	ble	.L220	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L220:
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x1e
	bne	.L221	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L221:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 sub_8109CB0,.Lfe31-sub_8109CB0
	.align	2, 0
	.globl	sub_8109DBC
	.type	 sub_8109DBC,function
	.thumb_func
sub_8109DBC:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L230
	add	r4, r1, r0
	ldr	r0, .L230+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r2, #0x1
	neg	r2, r2
	add	r1, r2, #0
	cmp	r0, #0
	bne	.L228	@cond_branch
	mov	r1, #0x1
.L228:
	strh	r1, [r4, #0x20]
	ldr	r0, .L230+0x8
	ldrb	r1, [r0]
	mov	r0, #0x2
	eor	r0, r0, r1
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1
	strh	r0, [r4, #0x22]
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	mov	r0, #0x3
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldr	r0, .L230+0xc
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L231:
	.align	2, 0
.L230:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	sub_8109E2C
.Lfe32:
	.size	 sub_8109DBC,.Lfe32-sub_8109DBC
	.align	2, 0
	.type	 sub_8109E2C,function
	.thumb_func
sub_8109E2C:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L276
	add	r2, r0, r1
	mov	r0, #0x8
	ldrsh	r3, [r2, r0]
	cmp	r3, #0x1
	beq	.L244	@cond_branch
	cmp	r3, #0x1
	bgt	.L272	@cond_branch
	cmp	r3, #0
	beq	.L234	@cond_branch
	b	.L233
.L277:
	.align	2, 0
.L276:
	.word	gTasks
.L272:
	cmp	r3, #0x2
	bne	.LCB2604
	b	.L254	@long jump
.LCB2604:
	cmp	r3, #0x3
	bne	.LCB2606
	b	.L264	@long jump
.LCB2606:
	b	.L233
.L234:
	mov	r1, #0x20
	ldrsh	r0, [r2, r1]
	lsl	r0, r0, #0x1
	ldrh	r5, [r2, #0x1c]
	add	r0, r0, r5
	strh	r0, [r2, #0x1c]
	ldrh	r0, [r2, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L235	@cond_branch
	strh	r3, [r2, #0xa]
	ldrh	r0, [r2, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xc]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L236	@cond_branch
	mov	r0, #0x2
	b	.L273
.L236:
	ldr	r0, .L278
.L273:
	strh	r0, [r2, #0x1e]
.L235:
	mov	r1, #0x0
	strh	r1, [r2, #0xe]
	mov	r7, #0x22
	ldrsh	r0, [r2, r7]
	cmp	r1, r0
	bge	.L239	@cond_branch
	ldr	r4, .L278+0x4
	add	r3, r2, #0
	add	r3, r3, #0x8
.L241:
	mov	r1, #0xe
	ldrsh	r0, [r2, r1]
	add	r0, r0, #0xe
	lsl	r0, r0, #0x1
	add	r0, r3, r0
	mov	r5, #0x0
	ldrsh	r0, [r0, r5]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r2, #0x1e]
	ldrh	r7, [r2, #0x1c]
	add	r0, r0, r7
	strh	r0, [r1, #0x24]
	ldrh	r0, [r2, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r5, #0x22
	ldrsh	r1, [r2, r5]
	cmp	r0, r1
	blt	.L241	@cond_branch
.L239:
	ldrh	r0, [r2, #0x1a]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x1a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	beq	.LCB2696
	b	.L233	@long jump
.LCB2696:
	mov	r0, #0x0
	strh	r0, [r2, #0x1a]
	b	.L274
.L279:
	.align	2, 0
.L278:
	.word	0xfffe
	.word	gSprites
.L244:
	ldrh	r0, [r2, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L245	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0xa]
	ldrh	r0, [r2, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xc]
	and	r0, r0, r3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L246	@cond_branch
	mov	r0, #0x2
	b	.L275
.L246:
	ldr	r0, .L280
.L275:
	strh	r0, [r2, #0x1e]
.L245:
	mov	r1, #0x0
	strh	r1, [r2, #0xe]
	mov	r7, #0x22
	ldrsh	r0, [r2, r7]
	cmp	r1, r0
	bge	.L249	@cond_branch
	ldr	r4, .L280+0x4
	add	r3, r2, #0
	add	r3, r3, #0x8
.L251:
	mov	r1, #0xe
	ldrsh	r0, [r2, r1]
	add	r0, r0, #0xe
	lsl	r0, r0, #0x1
	add	r0, r3, r0
	mov	r5, #0x0
	ldrsh	r0, [r0, r5]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r2, #0x1e]
	ldrh	r7, [r2, #0x1c]
	add	r0, r0, r7
	strh	r0, [r1, #0x24]
	ldrh	r0, [r2, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r5, #0x22
	ldrsh	r1, [r2, r5]
	cmp	r0, r1
	blt	.L251	@cond_branch
.L249:
	ldrh	r0, [r2, #0x1a]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x1a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x60
	bne	.L233	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x1a]
	b	.L274
.L281:
	.align	2, 0
.L280:
	.word	0xfffe
	.word	gSprites
.L254:
	mov	r7, #0x20
	ldrsh	r1, [r2, r7]
	lsl	r1, r1, #0x1
	ldrh	r0, [r2, #0x1c]
	sub	r0, r0, r1
	strh	r0, [r2, #0x1c]
	ldrh	r0, [r2, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L255	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0xa]
	ldrh	r0, [r2, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xc]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L256	@cond_branch
	strh	r3, [r2, #0x1e]
	b	.L255
.L256:
	ldr	r0, .L282
	strh	r0, [r2, #0x1e]
.L255:
	mov	r1, #0x0
	strh	r1, [r2, #0xe]
	mov	r3, #0x22
	ldrsh	r0, [r2, r3]
	cmp	r1, r0
	bge	.L259	@cond_branch
	ldr	r4, .L282+0x4
	add	r3, r2, #0
	add	r3, r3, #0x8
.L261:
	mov	r5, #0xe
	ldrsh	r0, [r2, r5]
	add	r0, r0, #0xe
	lsl	r0, r0, #0x1
	add	r0, r3, r0
	mov	r7, #0x0
	ldrsh	r0, [r0, r7]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r2, #0x1e]
	ldrh	r5, [r2, #0x1c]
	add	r0, r0, r5
	strh	r0, [r1, #0x24]
	ldrh	r0, [r2, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r7, #0x22
	ldrsh	r1, [r2, r7]
	cmp	r0, r1
	blt	.L261	@cond_branch
.L259:
	ldrh	r0, [r2, #0x1a]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x1a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	bne	.L233	@cond_branch
.L274:
	ldrh	r0, [r2, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x8]
	b	.L233
.L283:
	.align	2, 0
.L282:
	.word	0xfffe
	.word	gSprites
.L264:
	mov	r1, #0x0
	strh	r1, [r2, #0xe]
	mov	r3, #0x22
	ldrsh	r0, [r2, r3]
	cmp	r1, r0
	bge	.L266	@cond_branch
	ldr	r6, .L284
	add	r3, r2, #0
	add	r3, r3, #0x8
	mov	r5, #0x0
.L268:
	mov	r7, #0xe
	ldrsh	r0, [r2, r7]
	add	r0, r0, #0xe
	lsl	r0, r0, #0x1
	add	r0, r3, r0
	mov	r7, #0x0
	ldrsh	r1, [r0, r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r5, [r0, #0x24]
	ldrh	r0, [r2, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r7, #0x22
	ldrsh	r1, [r2, r7]
	cmp	r0, r1
	blt	.L268	@cond_branch
.L266:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L233:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L285:
	.align	2, 0
.L284:
	.word	gSprites
.Lfe33:
	.size	 sub_8109E2C,.Lfe33-sub_8109E2C
	.align	2, 0
	.globl	AnimTask_BlendBackground
	.type	 AnimTask_BlendBackground,function
	.thumb_func
AnimTask_BlendBackground:
	push	{r4, lr}
	add	sp, sp, #-0x10
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, sp
	bl	sub_80A6B30
	mov	r0, sp
	ldrb	r0, [r0, #0x8]
	lsl	r0, r0, #0x4
	ldr	r1, .L287
	ldrb	r2, [r1]
	ldrh	r3, [r1, #0x2]
	mov	r1, #0x10
	bl	BlendPalette
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.L288:
	.align	2, 0
.L287:
	.word	gBattleAnimArgs
.Lfe34:
	.size	 AnimTask_BlendBackground,.Lfe34-AnimTask_BlendBackground
	.align	2, 0
	.globl	sub_810A094
	.type	 sub_810A094,function
	.thumb_func
sub_810A094:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L298
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	mov	r3, #0x8
	ldrsh	r0, [r2, r3]
	mov	r9, r1
	ldr	r4, .L298+0x4
	mov	r8, r4
	cmp	r0, #0
	bne	.L290	@cond_branch
	ldrh	r0, [r4]
	strh	r0, [r2, #0xa]
	ldrh	r0, [r4, #0x2]
	strh	r0, [r2, #0xc]
	ldrh	r0, [r4, #0x4]
	strh	r0, [r2, #0xe]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r2, #0x10]
.L290:
	ldrh	r0, [r2, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x8]
	ldr	r1, .L298+0x8
	ldr	r0, .L298+0xc
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r6, [r0]
	mov	r5, #0x10
	ldrsh	r0, [r2, r5]
	cmp	r0, #0
	bne	.L291	@cond_branch
	ldr	r4, .L298+0x10
	mov	r1, #0x8
	ldrsh	r0, [r2, r1]
	b	.L297
.L299:
	.align	2, 0
.L298:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattlerSpriteIds
	.word	gBattleAnimTarget
	.word	gUnknown_08595684
.L291:
	ldr	r4, .L300
	mov	r3, #0x8
	ldrsh	r0, [r2, r3]
.L297:
	mov	r1, #0xa
	bl	__modsi3
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r4
	ldrb	r5, [r0]
	lsl	r0, r7, #0x2
	add	r1, r0, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r9
	mov	r4, #0xe
	ldrsh	r1, [r1, r4]
	mov	ip, r0
	cmp	r1, #0x1
	bne	.L293	@cond_branch
	ldr	r2, .L300+0x4
	lsl	r3, r6, #0x4
	add	r0, r3, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	sl, r0
	mov	r0, r8
	mov	r4, #0x2
	ldrsh	r1, [r0, r4]
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x18
	mul	r0, r0, r1
	cmp	r0, #0
	bge	.L294	@cond_branch
	neg	r0, r0
.L294:
	mov	r5, sl
	strh	r0, [r5, #0x26]
	b	.L295
.L301:
	.align	2, 0
.L300:
	.word	gUnknown_08595694
	.word	gSprites
.L293:
	ldr	r3, .L302
	lsl	r4, r6, #0x4
	add	r2, r4, r6
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x18
	mov	r5, r8
	ldrh	r1, [r5, #0x2]
	mul	r0, r0, r1
	strh	r0, [r2, #0x24]
	add	r2, r3, #0
	add	r3, r4, #0
.L295:
	mov	r1, ip
	add	r0, r1, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r9
	mov	r4, #0x8
	ldrsh	r1, [r0, r4]
	mov	r5, #0xa
	ldrsh	r0, [r0, r5]
	cmp	r1, r0
	bne	.L296	@cond_branch
	add	r0, r3, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0x24]
	strh	r1, [r0, #0x26]
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
.L296:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L303:
	.align	2, 0
.L302:
	.word	gSprites
.Lfe35:
	.size	 sub_810A094,.Lfe35-sub_810A094
.text
	.align	2, 0

