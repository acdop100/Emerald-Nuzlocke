@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gUnknown_0859652C
	.section .rodata
	.align	2, 0
	.type	 gUnknown_0859652C,object
gUnknown_0859652C:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x2
	.short	-0x2
	.byte	0xf6
	.byte	0x78
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_0859652C,24
	.globl	gUnknown_08596544
	.align	2, 0
	.type	 gUnknown_08596544,object
gUnknown_08596544:
	.word	gUnknown_0859652C
	.size	 gUnknown_08596544,4
	.globl	gUnknown_08596548
	.align	2, 0
	.type	 gUnknown_08596548,object
	.size	 gUnknown_08596548,24
gUnknown_08596548:
	.short	0x27d4
	.short	0x27d4
	.word	gUnknown_08524A9C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08596544
	.word	sub_80A77C8
	.globl	gUnknown_08596560
	.align	2, 0
	.type	 gUnknown_08596560,object
	.size	 gUnknown_08596560,24
gUnknown_08596560:
	.short	0x27b6
	.short	0x27b6
	.word	gUnknown_08524A3C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810F1EC
	.globl	gUnknown_08596578
	.align	2, 0
	.type	 gUnknown_08596578,object
	.size	 gUnknown_08596578,24
gUnknown_08596578:
	.short	0x27b7
	.short	0x27b7
	.word	gUnknown_08524A3C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810F1EC
	.globl	gUnknown_08596590
	.align	2, 0
	.type	 gUnknown_08596590,object
	.size	 gUnknown_08596590,24
gUnknown_08596590:
	.short	0x27b8
	.short	0x27b8
	.word	gUnknown_08524A3C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810F1EC
	.globl	gUnknown_085965A8
	.align	2, 0
	.type	 gUnknown_085965A8,object
	.size	 gUnknown_085965A8,24
gUnknown_085965A8:
	.short	0x27b9
	.short	0x27b9
	.word	gUnknown_08524A3C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810F1EC
	.globl	gUnknown_085965C0
	.align	2, 0
	.type	 gUnknown_085965C0,object
	.size	 gUnknown_085965C0,24
gUnknown_085965C0:
	.short	0x27ba
	.short	0x27ba
	.word	gUnknown_08524A3C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810F1EC
	.globl	gUnknown_085965D8
	.align	2, 0
	.type	 gUnknown_085965D8,object
gUnknown_085965D8:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x10
	.byte	0x3
	.space	1
	.short	0x20
	.byte	0x3
	.space	1
	.short	0x30
	.byte	0x3
	.space	1
	.short	0x40
	.byte	0x3
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085965D8,24
	.globl	gUnknown_085965F0
	.align	2, 0
	.type	 gUnknown_085965F0,object
gUnknown_085965F0:
	.word	gUnknown_085965D8
	.size	 gUnknown_085965F0,4
	.globl	gUnknown_085965F4
	.align	2, 0
	.type	 gUnknown_085965F4,object
	.size	 gUnknown_085965F4,24
gUnknown_085965F4:
	.short	0x2757
	.short	0x2757
	.word	gUnknown_08524914
	.word	gUnknown_085965F0
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810F58C
	.globl	gUnknown_0859660C
	.align	2, 0
	.type	 gUnknown_0859660C,object
gUnknown_0859660C:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x4
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	0xc
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0859660C,20
	.globl	gUnknown_08596620
	.align	2, 0
	.type	 gUnknown_08596620,object
gUnknown_08596620:
	.word	gUnknown_0859660C
	.size	 gUnknown_08596620,4
	.globl	gUnknown_08596624
	.align	2, 0
	.type	 gUnknown_08596624,object
	.size	 gUnknown_08596624,24
gUnknown_08596624:
	.short	0x2756
	.short	0x2756
	.word	gUnknown_0852490C
	.word	gUnknown_08596620
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810F58C
	.globl	gUnknown_0859663C
	.align	2, 0
	.type	 gUnknown_0859663C,object
	.size	 gUnknown_0859663C,24
gUnknown_0859663C:
	.short	0x27b3
	.short	0x27b3
	.word	gUnknown_08524954
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	TranslateAnimSpriteToTargetMonLocation
	.globl	gUnknown_08596654
	.align	2, 0
	.type	 gUnknown_08596654,object
gUnknown_08596654:
	.short	0x8
	.byte	0x7c
	.space	1
	.short	0x10
	.byte	0x45
	.space	1
	.short	0x8
	.byte	0x45
	.space	1
	.short	0x0
	.byte	0x45
	.space	1
	.short	0x8
	.byte	0x56
	.space	1
	.short	-0x3
	.byte	0x0
	.space	1
	.short	0x10
	.byte	0x45
	.space	1
	.short	0x8
	.byte	0x45
	.space	1
	.short	0x0
	.byte	0x45
	.space	1
	.short	0x8
	.byte	0x45
	.space	1
	.short	-0x3
	.byte	0x1
	.space	1
	.short	0x8
	.byte	0x56
	.space	1
	.short	0x18
	.byte	0x43
	.space	1
	.short	0x20
	.byte	0x43
	.space	1
	.short	0x28
	.byte	0x56
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08596654,64
	.globl	gUnknown_08596694
	.align	2, 0
	.type	 gUnknown_08596694,object
gUnknown_08596694:
	.short	0x8
	.byte	0x3c
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x16
	.space	1
	.short	-0x3
	.byte	0x0
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	-0x3
	.byte	0x1
	.space	1
	.short	0x8
	.byte	0x16
	.space	1
	.short	0x18
	.byte	0x3
	.space	1
	.short	0x20
	.byte	0x3
	.space	1
	.short	0x28
	.byte	0x16
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08596694,64
	.globl	gUnknown_085966D4
	.align	2, 0
	.type	 gUnknown_085966D4,object
gUnknown_085966D4:
	.word	gUnknown_08596654
	.word	gUnknown_08596694
	.size	 gUnknown_085966D4,8
	.globl	gUnknown_085966DC
	.align	2, 0
	.type	 gUnknown_085966DC,object
	.size	 gUnknown_085966DC,24
gUnknown_085966DC:
	.short	0x2771
	.short	0x2771
	.word	gUnknown_08524954
	.word	gUnknown_085966D4
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810F634
	.globl	gUnknown_085966F4
	.align	2, 0
	.type	 gUnknown_085966F4,object
gUnknown_085966F4:
	.short	0x0
	.byte	0x6
	.space	1
	.short	0x10
	.byte	0x6
	.space	1
	.short	0x20
	.byte	0x6
	.space	1
	.short	0x30
	.byte	0x6
	.space	1
	.short	0x40
	.byte	0x6
	.space	1
	.short	0x50
	.byte	0x6
	.space	1
	.short	0x60
	.byte	0x12
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085966F4,32
	.globl	gUnknown_08596714
	.align	2, 0
	.type	 gUnknown_08596714,object
gUnknown_08596714:
	.word	gUnknown_085966F4
	.size	 gUnknown_08596714,4
	.globl	gUnknown_08596718
	.align	2, 0
	.type	 gUnknown_08596718,object
gUnknown_08596718:
	.short	0x0
	.short	0x0
	.byte	0x4
	.byte	0x4
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xfc
	.byte	0x8
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x4
	.byte	0x4
	.space	2
	.short	0x7ffd
	.short	0x2
	.space	4
	.short	0x7fff
	.space	6
	.size	 gUnknown_08596718,40
	.globl	gUnknown_08596740
	.align	2, 0
	.type	 gUnknown_08596740,object
gUnknown_08596740:
	.word	gUnknown_08596718
	.size	 gUnknown_08596740,4
	.globl	gUnknown_08596744
	.align	2, 0
	.type	 gUnknown_08596744,object
	.size	 gUnknown_08596744,24
gUnknown_08596744:
	.short	0x276d
	.short	0x276d
	.word	gUnknown_08524914
	.word	gUnknown_08596714
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810F6B0
	.globl	gUnknown_0859675C
	.align	2, 0
	.type	 gUnknown_0859675C,object
gUnknown_0859675C:
	.short	-0x8
	.short	0xa
	.byte	0x0
	.byte	0x10
	.space	2
	.short	0x12
	.short	-0x12
	.byte	0x0
	.byte	0x10
	.space	2
	.short	-0x14
	.short	0x10
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_0859675C,32
	.globl	gUnknown_0859677C
	.align	2, 0
	.type	 gUnknown_0859677C,object
gUnknown_0859677C:
	.short	0x40
	.short	-0x4
	.byte	0x0
	.byte	0x14
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0xc8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_0859677C,24
	.globl	gUnknown_08596794
	.align	2, 0
	.type	 gUnknown_08596794,object
	.size	 gUnknown_08596794,24
gUnknown_08596794:
	.short	0x2809
	.short	0x2809
	.word	gUnknown_08524A2C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.globl	gUnknown_085967AC
	.align	2, 0
	.type	 gUnknown_085967AC,object
	.size	 gUnknown_085967AC,24
gUnknown_085967AC:
	.short	0x280a
	.short	0x280a
	.word	gUnknown_0852491C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810FBA8
	.globl	gUnknown_085967C4
	.align	2, 0
	.type	 gUnknown_085967C4,object
gUnknown_085967C4:
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gUnknown_085967C4,24
	.globl	gUnknown_085967DC
	.align	2, 0
	.type	 gUnknown_085967DC,object
gUnknown_085967DC:
	.short	0xf0
	.short	0xf0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0x2
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gUnknown_085967DC,40
	.globl	gUnknown_08596804
	.align	2, 0
	.type	 gUnknown_08596804,object
gUnknown_08596804:
	.short	0xd0
	.short	0xd0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0x4
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0x4
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gUnknown_08596804,40
	.globl	gUnknown_0859682C
	.align	2, 0
	.type	 gUnknown_0859682C,object
gUnknown_0859682C:
	.short	0xb0
	.short	0xb0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0x2
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gUnknown_0859682C,40
	.globl	gUnknown_08596854
	.align	2, 0
	.type	 gUnknown_08596854,object
gUnknown_08596854:
	.word	gUnknown_085967C4
	.word	gUnknown_085967DC
	.word	gUnknown_08596804
	.word	gUnknown_0859682C
	.size	 gUnknown_08596854,16
	.globl	gUnknown_08596864
	.align	2, 0
	.type	 gUnknown_08596864,object
	.size	 gUnknown_08596864,24
gUnknown_08596864:
	.short	0x280b
	.short	0x280b
	.word	gUnknown_0852496C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08596854
	.word	sub_810FDF0
	.globl	gUnknown_0859687C
	.align	2, 0
	.type	 gUnknown_0859687C,object
gUnknown_0859687C:
	.short	0x20
	.short	0x20
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x4
	.short	0x4
	.byte	0x0
	.byte	0x78
	.space	2
	.short	0x7fff
	.short	0x1
	.space	4
	.size	 gUnknown_0859687C,24
	.globl	gUnknown_08596894
	.align	2, 0
	.type	 gUnknown_08596894,object
gUnknown_08596894:
	.word	gUnknown_0859687C
	.size	 gUnknown_08596894,4
	.globl	gUnknown_08596898
	.align	2, 0
	.type	 gUnknown_08596898,object
	.size	 gUnknown_08596898,24
gUnknown_08596898:
	.short	0x281b
	.short	0x281b
	.word	gUnknown_08524AFC
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08596894
	.word	sub_80A77C8
	.globl	gUnknown_085968B0
	.align	2, 0
	.type	 gUnknown_085968B0,object
gUnknown_085968B0:
	.short	0x20
	.short	0x20
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x11
	.space	2
	.short	0x7ffd
	.short	0x0
	.space	4
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0xa
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0xa
	.space	2
	.short	0x7ffd
	.short	0x4
	.space	4
	.short	0x7ffd
	.short	0x0
	.space	4
	.short	-0x10
	.short	-0x10
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x7ffd
	.short	0x7
	.space	4
	.short	0x7fff
	.space	6
	.size	 gUnknown_085968B0,88
	.globl	gUnknown_08596908
	.align	2, 0
	.type	 gUnknown_08596908,object
gUnknown_08596908:
	.short	-0x14
	.short	0x18
	.byte	0x0
	.byte	0xf
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08596908,16
	.globl	gUnknown_08596918
	.align	2, 0
	.type	 gUnknown_08596918,object
gUnknown_08596918:
	.word	gUnknown_085968B0
	.word	gUnknown_08596908
	.size	 gUnknown_08596918,8
	.globl	gUnknown_08596920
	.align	2, 0
	.type	 gUnknown_08596920,object
	.size	 gUnknown_08596920,24
gUnknown_08596920:
	.short	0x27e4
	.short	0x27e4
	.word	gUnknown_08524AFC
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08596918
	.word	sub_8110240
.text
	.align	2, 0
	.globl	sub_810F1EC
	.type	 sub_810F1EC,function
	.thumb_func
sub_810F1EC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r0, #0
	bl	IsContest
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, .L18
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L4	@cond_branch
	mov	r0, r8
	cmp	r0, #0
	beq	.L16	@cond_branch
.L4:
	ldrb	r1, [r5, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	add	r1, r5, #0
	add	r1, r1, #0x43
	mov	r0, #0xc8
	strb	r0, [r1]
	mov	r1, r8
	cmp	r1, #0
	bne	.L9	@cond_branch
.L16:
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r7, r4, #0
	add	r0, r4, #0
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	eor	r0, r0, r1
	neg	r1, r0
	orr	r1, r1, r0
	lsr	r6, r1, #0x1f
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L7	@cond_branch
	add	r0, r4, #0
	add	r1, r6, #0
	mov	r2, #0x0
	bl	MoveBattlerSpriteToBG
.L7:
	mov	r0, #0x2
	add	r4, r0, #0
	eor	r4, r4, r7
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L5	@cond_branch
	mov	r0, #0x1
	eor	r6, r6, r0
	add	r0, r4, #0
	add	r1, r6, #0
	mov	r2, #0x0
	bl	MoveBattlerSpriteToBG
.L5:
	mov	r0, r8
	cmp	r0, #0
	bne	.L9	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L9	@cond_branch
	ldr	r0, .L18
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L10	@cond_branch
	mov	r0, #0x48
	strh	r0, [r5, #0x20]
	mov	r0, #0x50
	b	.L17
.L19:
	.align	2, 0
.L18:
	.word	gBattleAnimAttacker
.L10:
	mov	r0, #0xb0
	strh	r0, [r5, #0x20]
	mov	r0, #0x28
	b	.L17
.L9:
	ldr	r6, .L20
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L13	@cond_branch
	ldr	r1, .L20+0x4
	ldrh	r0, [r1]
	neg	r0, r0
	strh	r0, [r1]
.L13:
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L20+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r4]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r6]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r4, [r4, #0x2]
	add	r0, r0, r4
.L17:
	strh	r0, [r5, #0x22]
	ldr	r0, .L20+0x4
	ldrh	r0, [r0, #0x4]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	strh	r0, [r5, #0x2e]
	mov	r0, r8
	cmp	r0, #0
	beq	.L14	@cond_branch
	ldrh	r0, [r5, #0x22]
	add	r0, r0, #0x9
	strh	r0, [r5, #0x22]
	ldr	r1, .L20+0x8
	str	r1, [r5, #0x1c]
	add	r0, r5, #0
	bl	_call_via_r1
	b	.L15
.L21:
	.align	2, 0
.L20:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	sub_810F3C8
.L14:
	ldr	r0, .L22
	str	r0, [r5, #0x1c]
.L15:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	sub_810F340
.Lfe1:
	.size	 sub_810F1EC,.Lfe1-sub_810F1EC
	.align	2, 0
	.type	 sub_810F340,function
	.thumb_func
sub_810F340:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r1, #0x3c
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L25	@cond_branch
	mov	r0, #0x1
	strh	r0, [r5, #0x3c]
	b	.L24
.L25:
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L26	@cond_branch
	ldr	r2, .L28
	ldr	r0, .L28+0x4
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L26:
	mov	r0, #0x2
	eor	r4, r4, r0
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L27	@cond_branch
	ldr	r2, .L28
	ldr	r0, .L28+0x4
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L27:
	ldr	r1, .L28+0x8
	str	r1, [r5, #0x1c]
	add	r0, r5, #0
	bl	_call_via_r1
.L24:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L29:
	.align	2, 0
.L28:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	sub_810F3C8
.Lfe2:
	.size	 sub_810F340,.Lfe2-sub_810F340
	.align	2, 0
	.type	 sub_810F3C8,function
	.thumb_func
sub_810F3C8:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x34]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldrh	r1, [r4, #0x34]
	mov	r2, #0x34
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xd
	bne	.L31	@cond_branch
	ldr	r0, .L33
	str	r0, [r4, #0x1c]
	b	.L32
.L34:
	.align	2, 0
.L33:
	.word	sub_810F400
.L31:
	add	r0, r1, #0x1
	strh	r0, [r4, #0x34]
.L32:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 sub_810F3C8,.Lfe3-sub_810F3C8
	.align	2, 0
	.type	 sub_810F400,function
	.thumb_func
sub_810F400:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L36	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x30]
	ldrh	r4, [r3, #0x2e]
	ldr	r1, .L43
	add	r0, r4, #0
	add	r0, r0, #0x8
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r7, [r0]
	mov	r5, #0x8
	add	r6, r1, #0
	add	r1, r4, #0x7
	lsl	r0, r4, #0x1
	add	r0, r0, r6
	add	r2, r0, #0
	add	r2, r2, #0x10
	lsl	r1, r1, #0x1
	add	r1, r1, r6
.L40:
	ldrh	r0, [r1]
	strh	r0, [r2]
	sub	r1, r1, #0x2
	sub	r2, r2, #0x2
	sub	r5, r5, #0x1
	cmp	r5, #0
	bgt	.L40	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	strh	r7, [r0]
	ldrh	r0, [r3, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	bne	.L36	@cond_branch
	ldr	r0, .L43+0x4
	str	r0, [r3, #0x1c]
.L36:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L44:
	.align	2, 0
.L43:
	.word	gPlttBufferFaded
	.word	sub_810F46C
.Lfe4:
	.size	 sub_810F400,.Lfe4-sub_810F400
	.align	2, 0
	.type	 sub_810F46C,function
	.thumb_func
sub_810F46C:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x34]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldrh	r0, [r5, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L46	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L47	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r6, r4, #0
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L48	@cond_branch
	ldr	r2, .L50
	ldr	r0, .L50+0x4
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
.L48:
	mov	r0, #0x2
	add	r4, r0, #0
	eor	r4, r4, r6
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L47	@cond_branch
	ldr	r2, .L50
	ldr	r0, .L50+0x4
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
.L47:
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L50+0x8
	str	r0, [r5, #0x1c]
.L46:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L51:
	.align	2, 0
.L50:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	sub_810F524
.Lfe5:
	.size	 sub_810F46C,.Lfe5-sub_810F46C
	.align	2, 0
	.type	 sub_810F524,function
	.thumb_func
sub_810F524:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L53	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	eor	r0, r0, r1
	neg	r1, r0
	orr	r1, r1, r0
	lsr	r5, r1, #0x1f
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L55	@cond_branch
	add	r0, r5, #0
	bl	sub_80A477C
.L55:
	mov	r0, #0x2
	eor	r4, r4, r0
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L53	@cond_branch
	mov	r0, #0x1
	eor	r5, r5, r0
	add	r0, r5, #0
	bl	sub_80A477C
.L53:
	ldr	r0, .L57
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L58:
	.align	2, 0
.L57:
	.word	DestroyAnimSprite
.Lfe6:
	.size	 sub_810F524,.Lfe6-sub_810F524
	.align	2, 0
	.globl	sub_810F58C
	.type	 sub_810F58C,function
	.thumb_func
sub_810F58C:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L60	@cond_branch
	ldr	r5, .L70
	mov	r1, #0x6
	ldrsh	r0, [r5, r1]
	mov	r6, #0x0
	cmp	r0, #0
	bne	.L61	@cond_branch
	mov	r6, #0x1
.L61:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L62	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L62	@cond_branch
	ldr	r0, .L70+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L63	@cond_branch
	ldrh	r0, [r5]
	mov	r1, #0x48
	sub	r1, r1, r0
	strh	r1, [r4, #0x20]
	ldrh	r0, [r5, #0x2]
	add	r0, r0, #0x50
	strh	r0, [r4, #0x22]
	b	.L65
.L71:
	.align	2, 0
.L70:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L63:
	ldrh	r0, [r5]
	add	r0, r0, #0xb0
	strh	r0, [r4, #0x20]
	ldrh	r0, [r5, #0x2]
	add	r0, r0, #0x28
	strh	r0, [r4, #0x22]
	b	.L65
.L62:
	ldr	r0, .L72
	mov	r1, #0x4
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L66	@cond_branch
	add	r0, r4, #0
	add	r1, r6, #0
	bl	InitSpritePosToAnimAttacker
	b	.L65
.L73:
	.align	2, 0
.L72:
	.word	gBattleAnimArgs
.L66:
	add	r0, r4, #0
	add	r1, r6, #0
	bl	InitSpritePosToAnimTarget
.L65:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L68
.L60:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x30
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L68	@cond_branch
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
.L68:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 sub_810F58C,.Lfe7-sub_810F58C
	.align	2, 0
	.globl	sub_810F634
	.type	 sub_810F634,function
	.thumb_func
sub_810F634:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L78
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L75	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldrh	r0, [r5, #0x20]
	sub	r0, r0, #0x28
	strh	r0, [r5, #0x20]
	ldrh	r0, [r5, #0x22]
	add	r0, r0, #0xa
	strh	r0, [r5, #0x22]
	ldr	r0, .L78+0x4
	b	.L77
.L79:
	.align	2, 0
.L78:
	.word	gBattleAnimAttacker
	.word	0xffff
.L75:
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x28
	strh	r0, [r5, #0x20]
	ldrh	r0, [r5, #0x22]
	sub	r0, r0, #0xa
	strh	r0, [r5, #0x22]
	mov	r0, #0x1
.L77:
	strh	r0, [r5, #0x30]
	ldr	r1, .L80
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L80+0x4
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L81:
	.align	2, 0
.L80:
	.word	DestroyAnimSprite
	.word	RunStoredCallbackWhenAnimEnds
.Lfe8:
	.size	 sub_810F634,.Lfe8-sub_810F634
	.align	2, 0
	.globl	sub_810F6B0
	.type	 sub_810F6B0,function
	.thumb_func
sub_810F6B0:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	ldr	r6, .L85
	ldrb	r0, [r6]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoordAttr
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	lsr	r0, r0, #0x1f
	add	r1, r1, r0
	lsl	r1, r1, #0xf
	lsr	r4, r1, #0x10
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoordAttr
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	lsr	r0, r0, #0x1f
	add	r1, r1, r0
	asr	r1, r1, #0x1
	neg	r1, r1
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L83	@cond_branch
	lsl	r0, r4, #0x10
	neg	r0, r0
	lsr	r4, r0, #0x10
.L83:
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	strh	r0, [r5, #0x20]
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r7
	strh	r0, [r5, #0x22]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf
	bgt	.L84	@cond_branch
	mov	r0, #0x10
	strh	r0, [r5, #0x22]
.L84:
	ldr	r1, .L85+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L85+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L86:
	.align	2, 0
.L85:
	.word	gBattleAnimAttacker
	.word	sub_810F740
	.word	RunStoredCallbackWhenAnimEnds
.Lfe9:
	.size	 sub_810F6B0,.Lfe9-sub_810F6B0
	.align	2, 0
	.type	 sub_810F740,function
	.thumb_func
sub_810F740:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r1, [r4, #0x1]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r4, #0x1]
	ldr	r0, .L88
	str	r0, [r4, #0x10]
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	add	r0, r4, #0
	bl	InitSpriteAffineAnim
	ldr	r0, .L88+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L89:
	.align	2, 0
.L88:
	.word	gUnknown_08596740
	.word	sub_810F774
.Lfe10:
	.size	 sub_810F740,.Lfe10-sub_810F740
	.align	2, 0
	.type	 sub_810F774,function
	.thumb_func
sub_810F774:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L92	@cond_branch
	cmp	r0, #0x1
	beq	.L94	@cond_branch
	b	.L91
.L92:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L91	@cond_branch
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	ldrb	r1, [r4, #0x1]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r4, #0x1]
	mov	r0, #0x12
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L91
.L94:
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L91	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L91:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 sub_810F774,.Lfe11-sub_810F774
	.align	2, 0
	.globl	sub_810F7D4
	.type	 sub_810F7D4,function
	.thumb_func
sub_810F7D4:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L99
	add	r4, r4, r0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	strh	r1, [r4, #0x8]
	ldr	r2, .L99+0x4
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r0, .L99+0x8
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L100:
	.align	2, 0
.L99:
	.word	gTasks
	.word	gUnknown_0859675C
	.word	sub_810F810
.Lfe12:
	.size	 sub_810F7D4,.Lfe12-sub_810F7D4
	.align	2, 0
	.type	 sub_810F810,function
	.thumb_func
sub_810F810:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L103
	add	r0, r0, r1
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L102	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L102:
	pop	{r4}
	pop	{r0}
	bx	r0
.L104:
	.align	2, 0
.L103:
	.word	gTasks
.Lfe13:
	.size	 sub_810F810,.Lfe13-sub_810F810
	.align	2, 0
	.globl	sub_810F83C
	.type	 sub_810F83C,function
	.thumb_func
sub_810F83C:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L108
	add	r4, r1, r0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	strh	r0, [r4, #0x8]
	strh	r1, [r4, #0xa]
	strh	r1, [r4, #0xc]
	ldr	r0, .L108+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r1, #0x8
	cmp	r0, #0
	beq	.L106	@cond_branch
	mov	r1, #0x4
.L106:
	strh	r1, [r4, #0xe]
	ldrb	r1, [r4, #0x8]
	ldr	r2, .L108+0x8
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r0, .L108+0xc
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L109:
	.align	2, 0
.L108:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	gUnknown_0859677C
	.word	sub_810F898
.Lfe14:
	.size	 sub_810F83C,.Lfe14-sub_810F83C
	.align	2, 0
	.type	 sub_810F898,function
	.thumb_func
sub_810F898:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L119
	add	r4, r0, r1
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L112	@cond_branch
	cmp	r0, #0x1
	beq	.L114	@cond_branch
	b	.L111
.L120:
	.align	2, 0
.L119:
	.word	gTasks
.L112:
	add	r0, r4, #0
	bl	RunAffineAnimFromTaskData
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x13
	ble	.L111	@cond_branch
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	b	.L111
.L114:
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L115	@cond_branch
	ldr	r2, .L121
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x26]
	sub	r1, r1, #0x8
	strh	r1, [r0, #0x26]
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	b	.L111
.L122:
	.align	2, 0
.L121:
	.word	gSprites
.L115:
	ldr	r3, .L123
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x88
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	ldrb	r0, [r4, #0x8]
	bl	ResetSpriteRotScale
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L111:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L124:
	.align	2, 0
.L123:
	.word	gSprites
.Lfe15:
	.size	 sub_810F898,.Lfe15-sub_810F898
	.align	2, 0
	.globl	sub_810F940
	.type	 sub_810F940,function
	.thumb_func
sub_810F940:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L127
	add	r5, r1, r0
	mov	r1, #0x0
	mov	r0, #0x10
	strh	r0, [r5, #0xe]
	strh	r1, [r5, #0x10]
	ldr	r4, .L127+0x4
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x24]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoordAttr
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoordAttr
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r0, #0
	cmp	r0, r6
	bcs	.L126	@cond_branch
	add	r1, r6, #0
.L126:
	strh	r1, [r5, #0x20]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x10
	bl	SetGpuReg
	ldr	r0, .L127+0x8
	str	r0, [r5]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L128:
	.align	2, 0
.L127:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	sub_810F9D4
.Lfe16:
	.size	 sub_810F940,.Lfe16-sub_810F940
	.align	2, 0
	.type	 sub_810F9D4,function
	.thumb_func
sub_810F9D4:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L160
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	cmp	r1, #0x1
	beq	.L143	@cond_branch
	cmp	r1, #0x1
	bgt	.L157	@cond_branch
	cmp	r1, #0
	beq	.L131	@cond_branch
	b	.L130
.L161:
	.align	2, 0
.L160:
	.word	gTasks
.L157:
	cmp	r1, #0x2
	bne	.LCB1378
	b	.L153	@long jump
.LCB1378:
	cmp	r1, #0x3
	bne	.LCB1380
	b	.L154	@long jump
.LCB1380:
	b	.L130
.L131:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	bgt	.LCB1392
	b	.L130	@long jump
.LCB1392:
	strh	r1, [r4, #0xa]
	ldr	r0, .L162
	mov	r2, #0x22
	ldrsh	r1, [r4, r2]
	mov	r3, #0x24
	ldrsh	r2, [r4, r3]
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r0, #0xc
	ldrsh	r1, [r4, r0]
	add	r1, r1, #0x8
	lsl	r1, r1, #0x1
	add	r0, r4, #0
	add	r0, r0, #0x8
	add	r0, r0, r1
	strh	r2, [r0]
	cmp	r2, #0x40
	beq	.L133	@cond_branch
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L136	@cond_branch
	cmp	r0, #0x1
	bgt	.L141	@cond_branch
	cmp	r0, #0
	beq	.L135	@cond_branch
	b	.L133
.L163:
	.align	2, 0
.L162:
	.word	gUnknown_08596794
.L141:
	cmp	r0, #0x2
	beq	.L137	@cond_branch
	cmp	r0, #0x3
	beq	.L138	@cond_branch
	b	.L133
.L135:
	ldr	r0, .L164
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r4, #0x20]
	b	.L158
.L165:
	.align	2, 0
.L164:
	.word	gSprites
.L136:
	ldr	r0, .L166
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r4, #0x20]
	neg	r0, r0
	strh	r0, [r1, #0x24]
	ldrh	r0, [r4, #0x20]
	b	.L159
.L167:
	.align	2, 0
.L166:
	.word	gSprites
.L137:
	ldr	r1, .L168
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r4, #0x20]
	strh	r1, [r0, #0x24]
	ldrh	r1, [r4, #0x20]
	strh	r1, [r0, #0x26]
	b	.L133
.L169:
	.align	2, 0
.L168:
	.word	gSprites
.L138:
	ldr	r0, .L170
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r4, #0x20]
	neg	r0, r0
.L158:
	strh	r0, [r1, #0x24]
	ldrh	r0, [r4, #0x20]
	neg	r0, r0
.L159:
	strh	r0, [r1, #0x26]
.L133:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L130	@cond_branch
	b	.L153
.L171:
	.align	2, 0
.L170:
	.word	gSprites
.L143:
	ldrh	r0, [r4, #0xa]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L144	@cond_branch
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	b	.L145
.L144:
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
.L145:
	ldrh	r1, [r4, #0x10]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0xe]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x20
	bne	.L130	@cond_branch
	mov	r5, #0x8
	add	r6, r4, #0
	add	r6, r6, #0x8
.L150:
	lsl	r0, r5, #0x1
	add	r1, r6, r0
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x40
	beq	.L149	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L172
	add	r0, r0, r1
	bl	DestroySprite
.L149:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0xc
	bls	.L150	@cond_branch
.L153:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L130
.L173:
	.align	2, 0
.L172:
	.word	gSprites
.L154:
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L130:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 sub_810F9D4,.Lfe17-sub_810F9D4
	.align	2, 0
	.type	 sub_810FB60,function
	.thumb_func
sub_810FB60:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x30
	ldrsh	r1, [r4, r0]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	sub	r0, r0, #0xa
	cmp	r1, r0
	ble	.L175	@cond_branch
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x1
	and	r1, r1, r0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L175:
	mov	r0, #0x30
	ldrsh	r1, [r4, r0]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L176	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L176:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 sub_810FB60,.Lfe18-sub_810FB60
	.align	2, 0
	.globl	sub_810FBA8
	.type	 sub_810FBA8,function
	.thumb_func
sub_810FBA8:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L179
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L178	@cond_branch
	ldr	r4, .L179+0x4
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
.L178:
	ldrh	r0, [r6, #0x2]
	strh	r0, [r5, #0x2e]
	ldr	r0, .L179+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L180:
	.align	2, 0
.L179:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	sub_810FB60
.Lfe19:
	.size	 sub_810FBA8,.Lfe19-sub_810FBA8
	.align	2, 0
	.globl	sub_810FBF0
	.type	 sub_810FBF0,function
	.thumb_func
sub_810FBF0:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L190
	add	r5, r1, r0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L182	@cond_branch
	ldr	r0, .L190+0x4
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x1
	bne	.L183	@cond_branch
	ldr	r0, .L190+0x8
	strh	r0, [r5, #0x1c]
	ldr	r4, .L190+0xc
	ldrb	r0, [r4]
	mov	r1, #0x5
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x8
	strh	r0, [r5, #0x1e]
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
	strh	r0, [r5, #0x20]
	ldr	r4, .L190+0x10
	ldrb	r0, [r4]
	mov	r1, #0x5
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x8
	strh	r0, [r5, #0x22]
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
	b	.L188
.L191:
	.align	2, 0
.L190:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	0xfff6
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
.L183:
	mov	r0, #0xa
	strh	r0, [r5, #0x1c]
	ldr	r4, .L192
	ldrb	r0, [r4]
	mov	r1, #0x4
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
	strh	r0, [r5, #0x1e]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x8
	strh	r0, [r5, #0x20]
	ldr	r4, .L192+0x4
	ldrb	r0, [r4]
	mov	r1, #0x4
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
	b	.L189
.L193:
	.align	2, 0
.L192:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L182:
	ldr	r0, .L194
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x1
	bne	.L186	@cond_branch
	ldr	r0, .L194+0x4
	strh	r0, [r5, #0x1c]
	ldr	r4, .L194+0x8
	ldrb	r0, [r4]
	mov	r1, #0x4
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
	strh	r0, [r5, #0x1e]
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
	strh	r0, [r5, #0x20]
	ldr	r4, .L194+0xc
	ldrb	r0, [r4]
	mov	r1, #0x4
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
	strh	r0, [r5, #0x22]
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
	b	.L188
.L195:
	.align	2, 0
.L194:
	.word	gBattleAnimArgs
	.word	0xfff6
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
.L186:
	mov	r0, #0xa
	strh	r0, [r5, #0x1c]
	ldr	r4, .L196
	ldrb	r0, [r4]
	mov	r1, #0x5
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x8
	strh	r0, [r5, #0x1e]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x8
	strh	r0, [r5, #0x20]
	ldr	r4, .L196+0x4
	ldrb	r0, [r4]
	mov	r1, #0x5
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x8
.L189:
	strh	r0, [r5, #0x22]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x8
.L188:
	strh	r0, [r5, #0x24]
	mov	r0, #0x6
	strh	r0, [r5, #0xa]
	ldr	r0, .L196+0x8
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L197:
	.align	2, 0
.L196:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	sub_810FD3C
.Lfe20:
	.size	 sub_810FBF0,.Lfe20-sub_810FBF0
	.align	2, 0
	.type	 sub_810FD3C,function
	.thumb_func
sub_810FD3C:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L208
	add	r5, r0, r1
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	cmp	r1, #0
	beq	.L200	@cond_branch
	cmp	r1, #0x1
	beq	.L204	@cond_branch
	b	.L199
.L209:
	.align	2, 0
.L208:
	.word	gTasks
.L200:
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	ble	.L199	@cond_branch
	strh	r1, [r5, #0xa]
	ldr	r0, .L210
	mov	r2, #0x1e
	ldrsh	r1, [r5, r2]
	mov	r3, #0x20
	ldrsh	r2, [r5, r3]
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x40
	beq	.L202	@cond_branch
	ldr	r0, .L210+0x4
	lsl	r4, r1, #0x4
	add	r4, r4, r1
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	mov	r0, #0x10
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x22]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r5, #0x24]
	strh	r0, [r4, #0x36]
	ldrh	r0, [r5, #0x1c]
	strh	r0, [r4, #0x38]
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldrb	r0, [r5, #0xc]
	mov	r1, #0x3
	and	r1, r1, r0
	add	r0, r4, #0
	bl	StartSpriteAffineAnim
.L202:
	ldrh	r0, [r5, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xc
	bne	.L199	@cond_branch
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	b	.L199
.L211:
	.align	2, 0
.L210:
	.word	gUnknown_08596864
	.word	gSprites
.L204:
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x11
	ble	.L199	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L199:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 sub_810FD3C,.Lfe21-sub_810FD3C
	.align	2, 0
	.globl	sub_810FDF0
	.type	 sub_810FDF0,function
	.thumb_func
sub_810FDF0:
	push	{r4, lr}
	add	r4, r0, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L213	@cond_branch
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
.L213:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe22:
	.size	 sub_810FDF0,.Lfe22-sub_810FDF0
	.align	2, 0
	.globl	sub_810FE14
	.type	 sub_810FE14,function
	.thumb_func
sub_810FE14:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L231
	add	r4, r1, r0
	ldr	r0, .L231+0x4
	ldrb	r0, [r0]
	bl	GetBattlerYCoordWithElevation
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	add	r0, r1, #0
	sub	r0, r0, #0x20
	strh	r0, [r4, #0x24]
	ldr	r0, .L231+0x8
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	cmp	r0, #0x1
	beq	.L217	@cond_branch
	cmp	r0, #0x1
	bgt	.L221	@cond_branch
	cmp	r0, #0
	beq	.L216	@cond_branch
	b	.L215
.L232:
	.align	2, 0
.L231:
	.word	gTasks
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L221:
	cmp	r0, #0x2
	beq	.L218	@cond_branch
	b	.L215
.L216:
	mov	r0, #0x2
	strh	r0, [r4, #0x1e]
	mov	r0, #0x5
	strh	r0, [r4, #0x20]
	mov	r0, #0x40
	b	.L229
.L217:
	mov	r0, #0x2
	strh	r0, [r4, #0x1e]
	mov	r0, #0x5
	strh	r0, [r4, #0x20]
	mov	r0, #0xc0
	b	.L229
.L218:
	mov	r0, #0x4
	strh	r0, [r4, #0x1e]
	strh	r0, [r4, #0x20]
	mov	r0, #0x0
.L229:
	strh	r0, [r4, #0x22]
	add	r0, r1, #0
	add	r0, r0, #0x20
	strh	r0, [r4, #0x26]
.L215:
	mov	r1, #0x24
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bge	.L222	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x24]
.L222:
	ldr	r0, .L233
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L223	@cond_branch
	ldr	r0, .L233+0x4
	ldrh	r0, [r0]
	strh	r0, [r4, #0x1c]
	ldr	r0, .L233+0x8
	b	.L230
.L234:
	.align	2, 0
.L233:
	.word	gBattleAnimTarget
	.word	gBattle_BG1_X
	.word	0x4000014
.L223:
	ldr	r0, .L235
	ldrh	r0, [r0]
	strh	r0, [r4, #0x1c]
	ldr	r0, .L235+0x4
.L230:
	str	r0, [sp]
	ldrh	r1, [r4, #0x24]
	lsl	r3, r1, #0x10
	asr	r1, r3, #0x10
	mov	r2, #0x24
	ldrsh	r0, [r4, r2]
	add	r0, r0, #0x40
	cmp	r1, r0
	bgt	.L226	@cond_branch
	ldr	r5, .L235+0x8
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r6, r5, r0
.L227:
	asr	r3, r3, #0x10
	lsl	r1, r3, #0x1
	add	r2, r1, r5
	ldrh	r0, [r4, #0x1c]
	strh	r0, [r2]
	add	r1, r1, r6
	ldrh	r0, [r4, #0x1c]
	strh	r0, [r1]
	add	r3, r3, #0x1
	lsl	r3, r3, #0x10
	asr	r1, r3, #0x10
	mov	r2, #0x24
	ldrsh	r0, [r4, r2]
	add	r0, r0, #0x40
	cmp	r1, r0
	ble	.L227	@cond_branch
.L226:
	ldr	r0, .L235+0xc
	str	r0, [sp, #0x4]
	mov	r1, sp
	mov	r2, #0x0
	mov	r0, #0x1
	strb	r0, [r1, #0x8]
	mov	r0, sp
	strb	r2, [r0, #0x9]
	ldr	r0, [sp]
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp, #0x8]
	bl	ScanlineEffect_SetParams
	ldr	r0, .L235+0x10
	str	r0, [r4]
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L236:
	.align	2, 0
.L235:
	.word	gBattle_BG2_X
	.word	0x4000018
	.word	gScanlineEffectRegBuffers
	.word	-0x5d9fffff
	.word	sub_810FF34
.Lfe23:
	.size	 sub_810FE14,.Lfe23-sub_810FE14
	.align	2, 0
	.type	 sub_810FF34,function
	.thumb_func
sub_810FF34:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L255
	add	r5, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L248	@cond_branch
	cmp	r0, #0x1
	bgt	.L252	@cond_branch
	cmp	r0, #0
	beq	.L239	@cond_branch
	b	.L238
.L256:
	.align	2, 0
.L255:
	.word	gTasks
.L252:
	cmp	r0, #0x2
	beq	.L249	@cond_branch
	b	.L238
.L239:
	ldrh	r3, [r5, #0x22]
	ldrh	r4, [r5, #0x24]
	mov	r2, #0x24
	ldrsh	r1, [r5, r2]
	mov	r2, #0x26
	ldrsh	r0, [r5, r2]
	cmp	r1, r0
	bgt	.L241	@cond_branch
	ldr	r0, .L257
	mov	r9, r0
	mov	r7, #0x3
	ldr	r1, .L257+0x4
	mov	ip, r1
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r2, r2, ip
	mov	r8, r2
.L242:
	lsl	r2, r3, #0x10
	asr	r0, r2, #0xf
	add	r0, r0, r9
	mov	r3, #0x0
	ldrsh	r0, [r0, r3]
	mov	r3, #0x20
	ldrsh	r1, [r5, r3]
	asr	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	asr	r3, r0, #0x10
	add	r6, r2, #0
	cmp	r3, #0
	ble	.L243	@cond_branch
	ldrh	r1, [r5, #0xa]
	add	r0, r7, #0
	and	r0, r0, r1
	add	r0, r3, r0
	b	.L253
.L258:
	.align	2, 0
.L257:
	.word	gSineTable
	.word	gScanlineEffectRegBuffers
.L243:
	cmp	r3, #0
	bge	.L244	@cond_branch
	ldrh	r1, [r5, #0xa]
	add	r0, r7, #0
	and	r0, r0, r1
	sub	r0, r3, r0
.L253:
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
.L244:
	lsl	r2, r4, #0x10
	asr	r2, r2, #0x10
	lsl	r3, r2, #0x1
	mov	r0, ip
	add	r4, r3, r0
	ldrh	r0, [r5, #0x1c]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r1, r0
	strh	r0, [r4]
	add	r3, r3, r8
	ldrh	r0, [r5, #0x1c]
	add	r1, r1, r0
	strh	r1, [r3]
	asr	r0, r6, #0x10
	ldrh	r1, [r5, #0x1e]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	add	r2, r2, #0x1
	lsl	r2, r2, #0x10
	lsr	r4, r2, #0x10
	asr	r2, r2, #0x10
	mov	r1, #0x26
	ldrsh	r0, [r5, r1]
	cmp	r2, r0
	ble	.L242	@cond_branch
.L241:
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x17
	ble	.L238	@cond_branch
	b	.L254
.L248:
	ldr	r1, .L259
	mov	r0, #0x3
	strb	r0, [r1, #0x15]
.L254:
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	b	.L238
.L260:
	.align	2, 0
.L259:
	.word	gScanlineEffect
.L249:
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L238:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 sub_810FF34,.Lfe24-sub_810FF34
	.align	2, 0
	.globl	sub_8110034
	.type	 sub_8110034,function
	.thumb_func
sub_8110034:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r8, r4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L264
	add	r7, r0, r1
	bl	AllocOamMatrix
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	sl, r5
	add	r6, r5, #0
	cmp	r6, #0xff
	bne	.L262	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L261
.L265:
	.align	2, 0
.L264:
	.word	gTasks
.L262:
	ldr	r1, .L266
	ldrb	r0, [r1]
	bl	CloneBattlerSpriteWithBlend
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	mov	r9, r1
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L263	@cond_branch
	add	r0, r5, #0
	bl	FreeOamMatrix
	mov	r0, r8
	bl	DestroyAnimVisualTask
	b	.L261
.L267:
	.align	2, 0
.L266:
	.word	gBattleAnimArgs
.L263:
	ldr	r2, .L268
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r0, r2, #0
	add	r0, r0, #0x1c
	add	r0, r4, r0
	ldr	r1, .L268+0x4
	str	r1, [r0]
	add	r4, r4, r2
	ldrb	r0, [r4, #0x1]
	mov	r1, #0x3
	orr	r0, r0, r1
	strb	r0, [r4, #0x1]
	mov	r0, #0x1f
	and	r6, r6, r0
	lsl	r2, r6, #0x1
	ldrb	r1, [r4, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r4, #0x3]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r1, r4, #0
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	mov	r1, r9
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldrb	r3, [r4, #0x1]
	lsr	r1, r3, #0x6
	ldrb	r2, [r4, #0x3]
	lsr	r2, r2, #0x6
	lsl	r3, r3, #0x1e
	lsr	r3, r3, #0x1e
	add	r0, r4, #0
	bl	CalcCenterToCornerVec
	ldr	r1, .L268+0x8
	ldrb	r0, [r1]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7, #0x22]
	mov	r0, sl
	strh	r0, [r7, #0x24]
	mov	r1, r9
	strh	r1, [r7, #0x26]
	ldr	r0, .L268+0xc
	str	r0, [r7]
.L261:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L269:
	.align	2, 0
.L268:
	.word	gSprites
	.word	SpriteCallbackDummy
	.word	gBattleAnimArgs
	.word	sub_8110134
.Lfe25:
	.size	 sub_8110034,.Lfe25-sub_8110034
	.align	2, 0
	.type	 sub_8110134,function
	.thumb_func
sub_8110134:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L282
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L274	@cond_branch
	cmp	r0, #0x1
	bgt	.L280	@cond_branch
	cmp	r0, #0
	beq	.L272	@cond_branch
	b	.L271
.L283:
	.align	2, 0
.L282:
	.word	gTasks
.L280:
	cmp	r0, #0x2
	beq	.L276	@cond_branch
	cmp	r0, #0x3
	beq	.L277	@cond_branch
	b	.L271
.L272:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x4
	strh	r0, [r4, #0xa]
	ldr	r1, .L284
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x11
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	sub	r0, r0, r1
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0xc
	ldrsh	r2, [r4, r1]
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x22]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	SetBattlerSpriteYOffsetFromOtherYScale
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x30
	bne	.L271	@cond_branch
	b	.L281
.L285:
	.align	2, 0
.L284:
	.word	gSineTable
.L274:
	ldrh	r0, [r4, #0xa]
	sub	r0, r0, #0x4
	strh	r0, [r4, #0xa]
	ldr	r1, .L286
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x11
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	sub	r0, r0, r1
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0xc
	ldrsh	r2, [r4, r1]
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x22]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	SetBattlerSpriteYOffsetFromOtherYScale
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L271	@cond_branch
	b	.L281
.L287:
	.align	2, 0
.L286:
	.word	gSineTable
.L276:
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L288
	add	r0, r0, r1
	bl	obj_delete_but_dont_free_vram
.L281:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L271
.L289:
	.align	2, 0
.L288:
	.word	gSprites
.L277:
	ldrh	r0, [r4, #0x24]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	FreeOamMatrix
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L271:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 sub_8110134,.Lfe26-sub_8110134
	.align	2, 0
	.globl	sub_8110240
	.type	 sub_8110240,function
	.thumb_func
sub_8110240:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L294	@cond_branch
	cmp	r0, #0x1
	bgt	.L302	@cond_branch
	cmp	r0, #0
	beq	.L292	@cond_branch
	b	.L291
.L302:
	cmp	r0, #0x2
	beq	.L296	@cond_branch
	cmp	r0, #0x3
	beq	.L299	@cond_branch
	b	.L291
.L292:
	ldr	r4, .L304
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L293	@cond_branch
	ldrh	r0, [r5, #0x22]
	add	r0, r0, #0xc
	strh	r0, [r5, #0x22]
.L293:
	mov	r0, #0x8
	strh	r0, [r5, #0x30]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r0, [r5, #0x30]
	mov	r1, #0x10
	sub	r1, r1, r0
	lsl	r1, r1, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	b	.L303
.L305:
	.align	2, 0
.L304:
	.word	gBattleAnimAttacker
.L294:
	add	r0, r5, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L291	@cond_branch
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xcb
	bl	PlaySE12WithPanning
	add	r0, r5, #0
	mov	r1, #0x1
	bl	ChangeSpriteAffineAnim
.L303:
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	b	.L291
.L296:
	ldrh	r0, [r5, #0x32]
	add	r1, r0, #0x1
	strh	r1, [r5, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L297	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x32]
	ldrh	r1, [r5, #0x30]
	sub	r1, r1, #0x1
	strh	r1, [r5, #0x30]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x30
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L297	@cond_branch
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L297:
	mov	r0, #0xe0
	lsl	r0, r0, #0x2
	add	r2, r0, #0
	ldrh	r1, [r5, #0x34]
	add	r2, r2, r1
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r5, #0x26]
	sub	r0, r0, r1
	strh	r0, [r5, #0x26]
	mov	r0, #0xff
	and	r2, r2, r0
	strh	r2, [r5, #0x34]
	b	.L291
.L299:
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r5, #0
	bl	DestroyAnimSprite
.L291:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 sub_8110240,.Lfe27-sub_8110240
.text
	.align	2, 0

