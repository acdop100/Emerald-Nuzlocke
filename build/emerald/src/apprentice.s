@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gApprentices
	.section .rodata
	.align	2, 0
	.type	 gApprentices,object
gApprentices:
	.byte	0x5b
	.byte	0x91
	.byte	0x6b
	.byte	0x7b
	.byte	0xff
	.space	3
	.byte	0xbb
	.byte	0xc6
	.byte	0xbb
	.byte	0xc8
	.byte	0xc8
	.byte	0xff
	.space	2
	.byte	0xbb
	.byte	0xc6
	.byte	0xbb
	.byte	0xc3
	.byte	0xc8
	.byte	0xff
	.space	2
	.byte	0xbb
	.byte	0xbe
	.byte	0xbf
	.byte	0xc6
	.byte	0xc0
	.byte	0xc9
	.byte	0xff
	.space	1
	.byte	0xbd
	.byte	0xc6
	.byte	0xbb
	.byte	0xcf
	.byte	0xcd
	.byte	0xff
	.space	2
	.byte	0xce
	.byte	0xbf
	.byte	0xc9
	.byte	0xff
	.space	4
	.short	0xbdc9
	.byte	0x43
	.space	1
	.short	0x124
	.short	0x126
	.short	0x183
	.short	0x12c
	.short	0x133
	.short	0x12e
	.short	0x12f
	.short	0x7f
	.short	0xd6
	.short	0x182
	.byte	0x0
	.space	1
	.short	0x81d
	.short	0x143e
	.short	0xc00
	.short	0xa01
	.short	0x630
	.short	0x1444
	.space	2
	.byte	0x6b
	.byte	0x7b
	.byte	0x55
	.byte	0xff
	.space	4
	.byte	0xc6
	.byte	0xc3
	.byte	0xc9
	.byte	0xc8
	.byte	0xbf
	.byte	0xc6
	.byte	0xff
	.space	1
	.byte	0xc6
	.byte	0xc3
	.byte	0xc9
	.byte	0xc8
	.byte	0xbf
	.byte	0xc6
	.byte	0xff
	.space	1
	.byte	0xbd
	.byte	0xbb
	.byte	0xc3
	.byte	0xc9
	.byte	0xff
	.space	3
	.byte	0xc6
	.byte	0xcf
	.byte	0xbe
	.byte	0xd1
	.byte	0xc3
	.byte	0xc1
	.byte	0xff
	.space	1
	.byte	0xc6
	.byte	0xbf
	.byte	0xc9
	.byte	0xff
	.space	4
	.short	0xcf09
	.byte	0x2b
	.space	1
	.short	0x131
	.short	0x170
	.short	0xd5
	.short	0x152
	.short	0x141
	.short	0x150
	.short	0x11f
	.short	0x129
	.short	0x147
	.short	0x144
	.byte	0x1
	.space	1
	.short	0xc38
	.short	0xa01
	.short	0x630
	.short	0xa06
	.short	0x1020
	.short	0x2213
	.space	2
	.byte	0x59
	.byte	0x52
	.byte	0x8d
	.byte	0xff
	.space	4
	.byte	0xcd
	.byte	0xc9
	.byte	0xc8
	.byte	0xc8
	.byte	0xd3
	.byte	0xff
	.space	2
	.byte	0xc2
	.byte	0xbf
	.byte	0xcc
	.byte	0xd0
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0xc0
	.byte	0xbf
	.byte	0xbe
	.byte	0xcc
	.byte	0xc9
	.byte	0xff
	.space	2
	.byte	0xd1
	.byte	0xbf
	.byte	0xc8
	.byte	0xd4
	.byte	0xbf
	.byte	0xc6
	.byte	0xff
	.space	1
	.byte	0xcd
	.byte	0xbb
	.byte	0xc8
	.byte	0xce
	.byte	0xc3
	.byte	0xff
	.space	2
	.short	0x2e34
	.byte	0x26
	.space	1
	.short	0x121
	.short	0x11f
	.short	0x144
	.short	0x17c
	.short	0x17b
	.short	0x26
	.short	0x13d
	.short	0xd5
	.short	0x152
	.short	0x44
	.byte	0x2
	.space	1
	.short	0xa01
	.short	0x160a
	.short	0xe15
	.short	0x630
	.short	0xc3b
	.short	0xc04
	.space	2
	.byte	0x75
	.byte	0x77
	.byte	0xff
	.space	5
	.byte	0xc6
	.byte	0xbb
	.byte	0xd3
	.byte	0xc6
	.byte	0xbb
	.byte	0xff
	.space	2
	.byte	0xc6
	.byte	0xbb
	.byte	0xd3
	.byte	0xc6
	.byte	0xbb
	.byte	0xff
	.space	2
	.byte	0xbb
	.byte	0xcd
	.byte	0xce
	.byte	0xcc
	.byte	0xc3
	.byte	0xbe
	.byte	0xff
	.space	1
	.byte	0xcd
	.byte	0xc9
	.byte	0xc8
	.byte	0xc4
	.byte	0xbb
	.byte	0xff
	.space	2
	.byte	0xc6
	.byte	0xc9
	.byte	0xc6
	.byte	0xbb
	.byte	0xff
	.space	3
	.short	0x84ef
	.byte	0x47
	.space	1
	.short	0x170
	.short	0xb2
	.short	0x167
	.short	0x37
	.short	0x14e
	.short	0x41
	.short	0x18a
	.short	0x13a
	.short	0x160
	.short	0x11f
	.byte	0x3
	.space	1
	.short	0x100b
	.short	0x1e0f
	.short	0x1039
	.short	0x1421
	.short	0xc03
	.short	0xffff
	.space	2
	.byte	0x76
	.byte	0x53
	.byte	0x56
	.byte	0xff
	.space	4
	.byte	0xc7
	.byte	0xbb
	.byte	0xbd
	.byte	0xd3
	.byte	0xff
	.space	3
	.byte	0xbb
	.byte	0xc7
	.byte	0xbf
	.byte	0xc6
	.byte	0xc3
	.byte	0xbf
	.byte	0xff
	.space	1
	.byte	0xbd
	.byte	0xc6
	.byte	0xbf
	.byte	0xc9
	.byte	0xff
	.space	3
	.byte	0xc7
	.byte	0xbb
	.byte	0xcc
	.byte	0xc3
	.byte	0xbb
	.byte	0xff
	.space	2
	.byte	0xbf
	.byte	0xc6
	.byte	0xc3
	.byte	0xcd
	.byte	0xbb
	.byte	0xff
	.space	2
	.short	0x1e43
	.byte	0x27
	.space	1
	.short	0x28
	.short	0x121
	.short	0xe6
	.short	0x13c
	.short	0x1a
	.short	0x16
	.short	0x79
	.short	0x165
	.short	0x12c
	.short	0x124
	.byte	0x4
	.space	1
	.short	0x1e0f
	.short	0x1014
	.short	0x1006
	.short	0x280f
	.short	0x1c1c
	.short	0x1c13
	.space	2
	.byte	0x74
	.byte	0x5d
	.byte	0x5c
	.byte	0xff
	.space	4
	.byte	0xbe
	.byte	0xc9
	.byte	0xc8
	.byte	0xce
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0xbc
	.byte	0xcc
	.byte	0xbb
	.byte	0xc2
	.byte	0xc3
	.byte	0xc7
	.byte	0xff
	.space	1
	.byte	0xc1
	.byte	0xc6
	.byte	0xbb
	.byte	0xcf
	.byte	0xbd
	.byte	0xc9
	.byte	0xff
	.space	1
	.byte	0xc4
	.byte	0xc9
	.byte	0xcd
	.byte	0xbf
	.byte	0xc0
	.byte	0xff
	.space	2
	.byte	0xcc
	.byte	0xc9
	.byte	0xcb
	.byte	0xcf
	.byte	0xbf
	.byte	0xff
	.space	2
	.short	0x379f
	.byte	0x30
	.space	1
	.short	0x79
	.short	0x55
	.short	0x180
	.short	0x52
	.short	0x44
	.short	0x187
	.short	0xd6
	.short	0x140
	.short	0x174
	.short	0x11f
	.byte	0x5
	.space	1
	.short	0xa29
	.short	0x1408
	.short	0x102f
	.short	0x1638
	.short	0x820
	.short	0xc00
	.space	2
	.byte	0x70
	.byte	0x5b
	.byte	0x55
	.byte	0xff
	.space	4
	.byte	0xbb
	.byte	0xc7
	.byte	0xc3
	.byte	0xcc
	.byte	0xbb
	.byte	0xff
	.space	2
	.byte	0xc6
	.byte	0xbb
	.byte	0xcf
	.byte	0xcc
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0xbe
	.byte	0xbb
	.byte	0xc0
	.byte	0xc8
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0xbb
	.byte	0xc7
	.byte	0xbf
	.byte	0xc6
	.byte	0xc3
	.byte	0xbf
	.byte	0xff
	.space	1
	.byte	0xc6
	.byte	0xbb
	.byte	0xcc
	.byte	0xbb
	.byte	0xff
	.space	3
	.short	0xf555
	.byte	0x31
	.space	1
	.short	0x79
	.short	0x55
	.short	0x52
	.short	0x165
	.short	0x11f
	.short	0x15b
	.short	0x4c
	.short	0x65
	.short	0x136
	.short	0x14b
	.byte	0x6
	.space	1
	.short	0xc0b
	.short	0x123e
	.short	0xc00
	.short	0xa31
	.short	0x1430
	.short	0xc00
	.space	2
	.byte	0x56
	.byte	0x8e
	.byte	0x5b
	.byte	0xff
	.space	4
	.byte	0xc5
	.byte	0xbb
	.byte	0xc6
	.byte	0xc3
	.byte	0xff
	.space	3
	.byte	0xc4
	.byte	0xc9
	.byte	0xbe
	.byte	0xc3
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0xc3
	.byte	0xc6
	.byte	0xbf
	.byte	0xc8
	.byte	0xc3
	.byte	0xbb
	.byte	0xff
	.space	1
	.byte	0xc5
	.byte	0xbb
	.byte	0xcc
	.byte	0xc9
	.byte	0xff
	.space	3
	.byte	0xbf
	.byte	0xc6
	.byte	0xcd
	.byte	0xbb
	.byte	0xff
	.space	3
	.short	0x8d26
	.byte	0x14
	.space	1
	.short	0x26
	.short	0x41
	.short	0x117
	.short	0x18d
	.short	0x37
	.short	0x163
	.short	0x6e
	.short	0xab
	.short	0x18a
	.short	0x149
	.byte	0x7
	.space	1
	.short	0xa06
	.short	0x620
	.short	0xa1f
	.short	0xa02
	.short	0xc03
	.short	0xffff
	.space	2
	.byte	0x5d
	.byte	0x70
	.byte	0x7a
	.byte	0xff
	.space	4
	.byte	0xbb
	.byte	0xc8
	.byte	0xc8
	.byte	0xc3
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0xbb
	.byte	0xc8
	.byte	0xc8
	.byte	0xc3
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0xc3
	.byte	0xc7
	.byte	0xbf
	.byte	0xc6
	.byte	0xbe
	.byte	0xbb
	.byte	0xff
	.space	1
	.byte	0xc3
	.byte	0xc8
	.byte	0xbf
	.byte	0xcd
	.byte	0xff
	.space	3
	.byte	0xcc
	.byte	0xc9
	.byte	0xcd
	.byte	0xbb
	.byte	0xff
	.space	3
	.short	0x800c
	.byte	0xd
	.space	1
	.short	0x117
	.short	0x2d
	.short	0xb6
	.short	0x16b
	.short	0xde
	.short	0x14e
	.short	0x133
	.short	0x149
	.short	0x167
	.short	0x185
	.byte	0x8
	.space	1
	.short	0x1e22
	.short	0x433
	.short	0x20e
	.short	0xa02
	.short	0x101e
	.short	0xc00
	.space	2
	.byte	0x51
	.byte	0x57
	.byte	0x69
	.byte	0x78
	.byte	0xff
	.space	3
	.byte	0xbe
	.byte	0xc3
	.byte	0xc6
	.byte	0xc6
	.byte	0xbf
	.byte	0xc8
	.byte	0xff
	.space	1
	.byte	0xcc
	.byte	0xbf
	.byte	0xc8
	.byte	0xbf
	.byte	0xff
	.space	3
	.byte	0xc3
	.byte	0xc8
	.byte	0xbe
	.byte	0xcc
	.byte	0xc9
	.byte	0xff
	.space	2
	.byte	0xbe
	.byte	0xbf
	.byte	0xce
	.byte	0xc6
	.byte	0xbf
	.byte	0xc0
	.byte	0xff
	.space	1
	.byte	0xca
	.byte	0xbf
	.byte	0xbe
	.byte	0xcc
	.byte	0xc9
	.byte	0xff
	.space	2
	.short	0x469f
	.byte	0x0
	.space	1
	.short	0xe3
	.short	0x4c
	.short	0x11a
	.short	0x154
	.short	0xe8
	.short	0x59
	.short	0x18d
	.short	0x171
	.short	0x15d
	.short	0x70
	.byte	0x9
	.space	1
	.short	0xa3d
	.short	0x1011
	.short	0xe1e
	.short	0x201c
	.short	0xc04
	.short	0xffff
	.space	2
	.byte	0x64
	.byte	0x53
	.byte	0x90
	.byte	0x53
	.byte	0xff
	.space	3
	.byte	0xbe
	.byte	0xbb
	.byte	0xc6
	.byte	0xc6
	.byte	0xbb
	.byte	0xcd
	.byte	0xff
	.space	1
	.byte	0xbc
	.byte	0xcc
	.byte	0xcf
	.byte	0xc8
	.byte	0xc9
	.byte	0xff
	.space	2
	.byte	0xc6
	.byte	0xbf
	.byte	0xbb
	.byte	0xcc
	.byte	0xbd
	.byte	0xc9
	.byte	0xff
	.space	1
	.byte	0xbb
	.byte	0xc8
	.byte	0xcd
	.byte	0xc1
	.byte	0xbb
	.byte	0xcc
	.byte	0xff
	.space	1
	.byte	0xc7
	.byte	0xbb
	.byte	0xc8
	.byte	0xc9
	.byte	0xc6
	.byte	0xc9
	.byte	0xff
	.space	1
	.short	0x71fc
	.byte	0x2d
	.space	1
	.short	0x77
	.short	0x79
	.short	0x37
	.short	0x49
	.short	0xe0
	.short	0x177
	.short	0x15b
	.short	0x13a
	.short	0x14b
	.short	0xe6
	.byte	0xa
	.space	1
	.short	0xa05
	.short	0x606
	.short	0x160e
	.short	0xa14
	.short	0xc00
	.short	0xffff
	.space	2
	.byte	0x5e
	.byte	0x52
	.byte	0x74
	.byte	0xff
	.space	4
	.byte	0xc0
	.byte	0xcc
	.byte	0xbb
	.byte	0xc8
	.byte	0xc5
	.byte	0xff
	.space	2
	.byte	0xc0
	.byte	0xcc
	.byte	0xbb
	.byte	0xc8
	.byte	0xc5
	.byte	0xff
	.space	2
	.byte	0xc9
	.byte	0xc6
	.byte	0xc3
	.byte	0xc8
	.byte	0xbe
	.byte	0xc9
	.byte	0xff
	.space	1
	.byte	0xc0
	.byte	0xcc
	.byte	0xbb
	.byte	0xc8
	.byte	0xc5
	.byte	0xff
	.space	2
	.byte	0xc7
	.byte	0xbb
	.byte	0xcf
	.byte	0xcc
	.byte	0xc9
	.byte	0xff
	.space	2
	.short	0xa39e
	.byte	0x3a
	.space	1
	.short	0xc3
	.short	0x79
	.short	0x136
	.short	0x147
	.short	0x13a
	.short	0x82
	.short	0x11d
	.short	0xab
	.short	0x144
	.short	0xd5
	.byte	0xb
	.space	1
	.short	0x280e
	.short	0x103d
	.short	0x240f
	.short	0xa14
	.short	0x1e23
	.short	0x1024
	.space	2
	.byte	0x78
	.byte	0x85
	.byte	0x53
	.byte	0x8d
	.byte	0xff
	.space	3
	.byte	0xc6
	.byte	0xbb
	.byte	0xc7
	.byte	0xc9
	.byte	0xc8
	.byte	0xce
	.byte	0xff
	.space	1
	.byte	0xd2
	.byte	0xbb
	.byte	0xd0
	.byte	0xff
	.space	4
	.byte	0xc9
	.byte	0xcc
	.byte	0xc0
	.byte	0xbf
	.byte	0xc9
	.byte	0xff
	.space	2
	.byte	0xc4
	.byte	0xf3
	.byte	0xcc
	.byte	0xc1
	.byte	0xbf
	.byte	0xc8
	.byte	0xff
	.space	1
	.byte	0xc4
	.byte	0xc9
	.byte	0xcc
	.byte	0xc1
	.byte	0xbf
	.byte	0xff
	.space	2
	.short	0xe590
	.byte	0x19
	.space	1
	.short	0x178
	.short	0xa9
	.short	0x174
	.short	0x52
	.short	0x14b
	.short	0x152
	.short	0x190
	.short	0x65
	.short	0x140
	.short	0x6e
	.byte	0xc
	.space	1
	.short	0x1020
	.short	0x62e
	.short	0x100b
	.short	0x1e22
	.short	0x1e0f
	.short	0x100b
	.space	2
	.byte	0x56
	.byte	0x62
	.byte	0x51
	.byte	0x57
	.byte	0xff
	.space	3
	.byte	0xce
	.byte	0xd3
	.byte	0xcc
	.byte	0xbf
	.byte	0xcd
	.byte	0xbf
	.byte	0xff
	.space	1
	.byte	0xbb
	.byte	0xc8
	.byte	0xbe
	.byte	0xd3
	.byte	0xff
	.space	3
	.byte	0xca
	.byte	0xbb
	.byte	0xcc
	.byte	0xc3
	.byte	0xbe
	.byte	0xbf
	.byte	0xff
	.space	1
	.byte	0xbe
	.byte	0xbb
	.byte	0xd0
	.byte	0xc3
	.byte	0xbe
	.byte	0xff
	.space	2
	.byte	0xbd
	.byte	0xc2
	.byte	0xc3
	.byte	0xbd
	.byte	0xc2
	.byte	0xc9
	.byte	0xff
	.space	1
	.short	0xd018
	.byte	0xa
	.space	1
	.short	0x11a
	.short	0x4c
	.short	0x44
	.short	0x70
	.short	0x150
	.short	0x180
	.short	0x165
	.short	0x17c
	.short	0x16d
	.short	0x16e
	.byte	0xd
	.space	1
	.short	0xa29
	.short	0x63a
	.short	0xe15
	.short	0x1435
	.short	0x1034
	.short	0x61e
	.space	2
	.byte	0x64
	.byte	0x5c
	.byte	0x70
	.byte	0x62
	.byte	0xff
	.space	3
	.byte	0xbe
	.byte	0xbb
	.byte	0xc8
	.byte	0xce
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0xbe
	.byte	0xbb
	.byte	0xc8
	.byte	0xce
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0xcc
	.byte	0xbb
	.byte	0xc9
	.byte	0xcf
	.byte	0xc6
	.byte	0xff
	.space	2
	.byte	0xc6
	.byte	0xc9
	.byte	0xce
	.byte	0xc2
	.byte	0xbb
	.byte	0xcc
	.byte	0xff
	.space	1
	.byte	0xca
	.byte	0xbb
	.byte	0xbc
	.byte	0xc6
	.byte	0xc9
	.byte	0xff
	.space	2
	.short	0xbc75
	.byte	0xe
	.space	1
	.short	0x117
	.short	0x1c
	.short	0x14e
	.short	0x13f
	.short	0x187
	.short	0xa9
	.short	0x185
	.short	0x15d
	.short	0x15c
	.short	0x4c
	.byte	0xe
	.space	1
	.short	0xa01
	.short	0x1017
	.short	0x1243
	.short	0x1e22
	.short	0x100b
	.short	0x280f
	.space	2
	.byte	0x7b
	.byte	0xae
	.byte	0x53
	.byte	0x82
	.byte	0x7e
	.byte	0xff
	.space	2
	.byte	0xbb
	.byte	0xcc
	.byte	0xce
	.byte	0xcf
	.byte	0xcc
	.byte	0xc9
	.byte	0xff
	.space	1
	.byte	0xbb
	.byte	0xcc
	.byte	0xce
	.byte	0xcf
	.byte	0xcc
	.byte	0xc9
	.byte	0xff
	.space	1
	.byte	0xcc
	.byte	0xc9
	.byte	0xc7
	.byte	0xc9
	.byte	0xc6
	.byte	0xc9
	.byte	0xff
	.space	1
	.byte	0xbc
	.byte	0xcc
	.byte	0xc3
	.byte	0xbb
	.byte	0xc8
	.byte	0xff
	.space	2
	.byte	0xbb
	.byte	0xcc
	.byte	0xce
	.byte	0xcf
	.byte	0xcc
	.byte	0xc9
	.byte	0xff
	.space	1
	.short	0xfa02
	.byte	0x20
	.space	1
	.short	0x178
	.short	0x11f
	.short	0x41
	.short	0x17a
	.short	0x26
	.short	0x13f
	.short	0x59
	.short	0x18d
	.short	0x157
	.short	0x16a
	.byte	0xf
	.space	1
	.short	0x1e0f
	.short	0x1404
	.short	0x102f
	.short	0x1006
	.short	0x1020
	.short	0xe03
	.space	2
	.size	 gApprentices,1408
	.align	2, 0
	.type	 gUnknown_08610EF0,object
gUnknown_08610EF0:
	.word	gText_082B7229
	.word	gText_082B731C
	.word	gText_082B735B
	.word	gText_082B7423
	.word	gText_082B74C1
	.word	gText_082B756F
	.word	gText_082B75B2
	.word	gText_082B763F
	.word	gText_082B76AC
	.word	gText_082B7772
	.word	gText_082B77CE
	.word	gText_082B7871
	.word	gText_082B78D4
	.word	gText_082B7B1A
	.word	gText_082B7C13
	.word	gText_082B7D18
	.word	gText_082B7DD4
	.word	gText_082B7EE5
	.word	gText_082B7F35
	.word	gText_082B7FE8
	.word	gText_082B8087
	.word	gText_082B822B
	.word	gText_082B8286
	.word	gText_082B8356
	.word	gText_082B83CE
	.word	gText_082B84FC
	.word	gText_082B8559
	.word	gText_082B8656
	.word	gText_082B86EA
	.word	gText_082B87DA
	.word	gText_082B887C
	.word	gText_082B8957
	.word	gText_082B89C6
	.word	gText_082B8ACF
	.word	gText_082B8B66
	.word	gText_082B8C20
	.word	gText_082B8CAA
	.word	gText_082B8DD3
	.word	gText_082B8E24
	.word	gText_082B8ED5
	.word	gText_082B8F45
	.word	gText_082B905F
	.word	gText_082B910E
	.word	gText_082B9204
	.word	gText_082B929C
	.word	gText_082B9438
	.word	gText_082B9488
	.word	gText_082B9564
	.word	gText_082B95D8
	.word	gText_082B9763
	.word	gText_082B97E5
	.word	gText_082B989A
	.word	gText_082B992D
	.word	gText_082B9A84
	.word	gText_082B9AB9
	.word	gText_082B9B76
	.word	gText_082B9BF2
	.word	gText_082B9D83
	.word	gText_082B9DF9
	.word	gText_082B9EAA
	.word	gText_082B9F55
	.word	gText_082BA084
	.word	gText_082BA11D
	.word	gText_082BA1F3
	.size	 gUnknown_08610EF0,256
	.align	2, 0
	.type	 gUnknown_08610FF0,object
gUnknown_08610FF0:
	.word	gText_082BE50D
	.word	gText_082BE5F5
	.word	gText_082BE679
	.word	gText_082BE71E
	.word	gText_082BE762
	.word	gText_082BE7F8
	.word	gText_082BE850
	.word	gText_082BE99C
	.word	gText_082BEA1B
	.word	gText_082BEAE9
	.word	gText_082BEB72
	.word	gText_082BEC8E
	.word	gText_082BED16
	.word	gText_082BEE29
	.word	gText_082BEEB4
	.word	gText_082BEFE2
	.word	gText_082BF04E
	.word	gText_082BF11D
	.word	gText_082BF1A8
	.word	gText_082BF268
	.word	gText_082BF2D1
	.word	gText_082BF3CF
	.word	gText_082BF46A
	.word	gText_082BF551
	.word	gText_082BF5C3
	.word	gText_082BF6E5
	.word	gText_082BF773
	.word	gText_082BF869
	.word	gText_082BF8DD
	.word	gText_082BF9BA
	.word	gText_082BFA5A
	.word	gText_082BFB4E
	.size	 gUnknown_08610FF0,128
	.align	2, 0
	.type	 gUnknown_08611070,object
gUnknown_08611070:
	.word	gText_082BA2A3
	.word	gText_082BA34E
	.word	gText_082BA380
	.word	gText_082BA3D2
	.word	gText_082BA448
	.word	gText_082BA4D3
	.word	gText_082BA58C
	.word	gText_082BA5BF
	.word	gText_082BA5F3
	.word	gText_082BA635
	.word	gText_082BA6E6
	.word	gText_082BA742
	.word	gText_082BA770
	.word	gText_082BA78F
	.word	gText_082BA7D8
	.word	gText_082BA867
	.word	gText_082BA96B
	.word	gText_082BA9B7
	.word	gText_082BAA1B
	.word	gText_082BAA81
	.word	gText_082BAB22
	.word	gText_082BAC43
	.word	gText_082BAC78
	.word	gText_082BAD17
	.word	gText_082BADB6
	.word	gText_082BAE36
	.word	gText_082BAF4E
	.word	gText_082BAF8F
	.word	gText_082BAFDB
	.word	gText_082BB05F
	.word	gText_082BB0D4
	.word	gText_082BB18C
	.word	gText_082BB1CE
	.word	gText_082BB242
	.word	gText_082BB2D9
	.word	gText_082BB370
	.word	gText_082BB4C3
	.word	gText_082BB4FB
	.word	gText_082BB575
	.word	gText_082BB5E1
	.word	gText_082BB656
	.word	gText_082BB6E5
	.word	gText_082BB72C
	.word	gText_082BB7A2
	.word	gText_082BB84A
	.word	gText_082BB8CD
	.word	gText_082BB970
	.word	gText_082BB9AE
	.word	gText_082BBA05
	.word	gText_082BBA6C
	.word	gText_082BBB01
	.word	gText_082BBC1C
	.word	gText_082BBC4B
	.word	gText_082BBCF6
	.word	gText_082BBD90
	.word	gText_082BBE0B
	.word	gText_082BBEE5
	.word	gText_082BBF25
	.word	gText_082BBFA4
	.word	gText_082BC024
	.word	gText_082BC0C8
	.word	gText_082BC213
	.word	gText_082BC247
	.word	gText_082BC2DD
	.word	gText_082BC373
	.word	gText_082BC40E
	.word	gText_082BC514
	.word	gText_082BC555
	.word	gText_082BC5CE
	.word	gText_082BC666
	.word	gText_082BC714
	.word	gText_082BC808
	.word	gText_082BC84D
	.word	gText_082BC8EA
	.word	gText_082BC984
	.word	gText_082BCA4D
	.word	gText_082BCB75
	.word	gText_082BCBA6
	.word	gText_082BCBFC
	.word	gText_082BCCA4
	.size	 gUnknown_08611070,320
	.align	2, 0
	.type	 gUnknown_086111B0,object
gUnknown_086111B0:
	.word	gText_082BFBF2
	.word	gText_082BFCAE
	.word	gText_082BFD26
	.word	gText_082BFDB1
	.word	gText_082BFE24
	.word	gText_082BFEAD
	.word	gText_082BFF0A
	.word	gText_082C0032
	.word	gText_082C0090
	.word	gText_082C016E
	.word	gText_082C01F7
	.word	gText_082C034C
	.word	gText_082C03CA
	.word	gText_082C046E
	.word	gText_082C04F9
	.word	gText_082C0598
	.word	gText_082C0602
	.word	gText_082C06D8
	.word	gText_082C074A
	.word	gText_082C0809
	.word	gText_082C086E
	.word	gText_082C0982
	.word	gText_082C0A1D
	.word	gText_082C0AFD
	.word	gText_082C0B6F
	.word	gText_082C0C7D
	.word	gText_082C0D0B
	.word	gText_082C0DFE
	.word	gText_082C0E71
	.word	gText_082C0F6D
	.word	gText_082C1003
	.word	gText_082C1122
	.size	 gUnknown_086111B0,128
	.align	2, 0
	.type	 gUnknown_08611230,object
gUnknown_08611230:
	.word	gText_082BCD68
	.word	gText_082BCE64
	.word	gText_082BCEF2
	.word	gText_082BCF61
	.word	gText_082BCFA1
	.word	gText_082BD03C
	.word	gText_082BD06D
	.word	gText_082BD18A
	.word	gText_082BD222
	.word	gText_082BD325
	.word	gText_082BD3B1
	.word	gText_082BD493
	.word	gText_082BD51C
	.word	gText_082BD609
	.word	gText_082BD697
	.word	gText_082BD797
	.word	gText_082BD806
	.word	gText_082BD8F5
	.word	gText_082BD9BE
	.word	gText_082BDAE1
	.word	gText_082BDB4E
	.word	gText_082BDC6B
	.word	gText_082BDD0D
	.word	gText_082BDDEC
	.word	gText_082BDE68
	.word	gText_082BDF4D
	.word	gText_082BDFD8
	.word	gText_082BE0FD
	.word	gText_082BE189
	.word	gText_082BE2A5
	.word	gText_082BE33E
	.word	gText_082BE46C
	.size	 gUnknown_08611230,128
	.align	2, 0
	.type	 gUnknown_086112B0,object
gUnknown_086112B0:
	.word	gText_082C11D1
	.word	gText_082C12D5
	.word	gText_082C13AB
	.word	gText_082C1444
	.word	gText_082C1501
	.word	gText_082C15B6
	.word	gText_082C165E
	.word	gText_082C174F
	.word	gText_082C1862
	.word	gText_082C19A0
	.word	gText_082C1A76
	.word	gText_082C1C16
	.word	gText_082C1CF5
	.word	gText_082C1DC1
	.word	gText_082C1EDC
	.word	gText_082C1FEC
	.word	gText_082C20D1
	.word	gText_082C21FF
	.word	gText_082C231C
	.word	gText_082C2407
	.word	gText_082C24B5
	.word	gText_082C25B1
	.word	gText_082C2707
	.word	gText_082C27D4
	.word	gText_082C28D6
	.word	gText_082C2A0B
	.word	gText_082C2B50
	.word	gText_082C2C77
	.word	gText_082C2D67
	.word	gText_082C2E41
	.word	gText_082C2EF5
	.word	gText_082C3023
	.size	 gUnknown_086112B0,128
	.align	2, 0
	.type	 gUnknown_08611330,object
gUnknown_08611330:
	.word	gText_082B6EA5
	.word	gText_082B6EEC
	.word	gText_082B6F16
	.word	gText_082B6F4C
	.word	gText_082B6F92
	.word	gText_082B6FC9
	.word	gText_082B700C
	.word	gText_082B703A
	.word	gText_082B706A
	.word	gText_082B709C
	.word	gText_082B70CC
	.word	gText_082B710A
	.word	gText_082B714D
	.word	gText_082B7185
	.word	gText_082B71C1
	.word	gText_082B71F9
	.size	 gUnknown_08611330,64
	.type	 gUnknown_08611370,object
	.size	 gUnknown_08611370,355
gUnknown_08611370:
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.type	 gUnknown_086114D3,object
gUnknown_086114D3:
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 gUnknown_086114D3,13
	.align	2, 0
	.type	 sApprenticeFunctions,object
sApprenticeFunctions:
	.word	Script_IsPlayersApprenticeActive
	.word	Script_SetPlayersApprenticeLvlMode
	.word	sub_81A0978
	.word	sub_819FC60
	.word	sub_81A0984
	.word	sub_81A0990
	.word	sub_81A09D0
	.word	Script_CreateApprenticeMenu
	.word	Script_PrintMessage
	.word	Script_ResetPlayerApprentice
	.word	sub_81A1638
	.word	sub_81A0CC0
	.word	sub_81A09B4
	.word	sub_81A0D40
	.word	sub_81A0DD4
	.word	sub_81A0FE4
	.word	sub_81A0FFC
	.word	sub_81A0D80
	.word	sub_81A11F8
	.word	sub_81A1218
	.word	sub_81A1224
	.word	sub_81A1438
	.word	sub_81A150C
	.word	Script_SetPlayerApprenticeTrainerGfxId
	.word	sub_81A1644
	.word	sub_81A1370
	.size	 sApprenticeFunctions,104
	.type	 gUnknown_08611548,object
	.size	 gUnknown_08611548,8
gUnknown_08611548:
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.byte	0x6
	.byte	0x7
	.byte	0x8
	.byte	0x9
.text
	.align	2, 0
	.globl	CopyFriendsApprenticeChallengeText
	.type	 CopyFriendsApprenticeChallengeText,function
	.thumb_func
CopyFriendsApprenticeChallengeText:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r2, .L9
	ldr	r1, [r2]
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	add	r1, r1, #0xde
	ldrb	r1, [r1]
	mov	r6, #0x0
	add	r7, r2, #0
	ldr	r0, .L9+0x4
	mov	r8, r0
	cmp	r1, #0
	beq	.L4	@cond_branch
.L5:
	add	r0, r1, #0
	mov	r1, #0xa
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r1, #0
	beq	.L4	@cond_branch
	cmp	r6, #0x3
	bls	.L5	@cond_branch
.L4:
	lsl	r4, r5, #0x4
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	ldr	r1, [r7]
	add	r1, r4, r1
	mov	r0, #0x8a
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	mov	r0, r8
	bl	StringCopy7
	ldr	r0, [r7]
	add	r0, r0, r4
	ldr	r1, .L9+0x8
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, r8
	bl	ConvertInternationalString
	ldr	r0, .L9+0xc
	ldr	r1, [r7]
	add	r1, r1, r4
	add	r1, r1, #0xde
	ldrb	r1, [r1]
	mov	r2, #0x1
	add	r3, r6, #0
	bl	ConvertIntToDecimalStringN
	ldr	r1, .L9+0x10
	ldr	r0, [r7]
	add	r0, r0, r4
	add	r0, r0, #0xdc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x19
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, .L9+0x14
	bl	StringExpandPlaceholders
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L10:
	.align	2, 0
.L9:
	.word	gSaveBlock2Ptr
	.word	gStringVar1
	.word	0x11b
	.word	gStringVar2
	.word	gUnknown_08611330
	.word	gStringVar4
.Lfe1:
	.size	 CopyFriendsApprenticeChallengeText,.Lfe1-CopyFriendsApprenticeChallengeText
	.align	2, 0
	.globl	Apprentice_EnableBothScriptContexts
	.type	 Apprentice_EnableBothScriptContexts,function
	.thumb_func
Apprentice_EnableBothScriptContexts:
	push	{lr}
	bl	EnableBothScriptContexts
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 Apprentice_EnableBothScriptContexts,.Lfe2-Apprentice_EnableBothScriptContexts
	.align	2, 0
	.globl	ResetApprenticeStruct
	.type	 ResetApprenticeStruct,function
	.thumb_func
ResetApprenticeStruct:
	push	{r4, r5, lr}
	add	r3, r0, #0
	mov	r2, #0x0
	add	r4, r3, #0
	add	r4, r4, #0x28
	ldr	r0, .L18
	add	r5, r0, #0
.L16:
	lsl	r0, r2, #0x1
	add	r0, r4, r0
	ldrh	r1, [r0]
	orr	r1, r1, r5
	strh	r1, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x5
	bls	.L16	@cond_branch
	add	r1, r3, #0
	add	r1, r1, #0x38
	mov	r0, #0xff
	strb	r0, [r1]
	ldrb	r1, [r3]
	mov	r0, #0x20
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r3]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L19:
	.align	2, 0
.L18:
	.word	0xffff
.Lfe3:
	.size	 ResetApprenticeStruct,.Lfe3-ResetApprenticeStruct
	.align	2, 0
	.globl	ResetAllApprenticeData
	.type	 ResetAllApprenticeData,function
	.thumb_func
ResetAllApprenticeData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r3, .L36
	ldr	r1, [r3]
	add	r1, r1, #0xb2
	ldrb	r2, [r1]
	mov	r0, #0x19
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	mov	r0, #0x0
	mov	ip, r0
	add	r5, r3, #0
	mov	r8, r0
	ldr	r1, .L36+0x4
	mov	sl, r1
.L24:
	mov	r2, #0x0
	mov	r3, ip
	lsl	r7, r3, #0x4
	mov	r4, #0x1
	add	r4, r4, ip
	mov	r9, r4
	add	r0, r7, r3
	lsl	r3, r0, #0x2
.L28:
	ldr	r1, [r5]
	lsl	r0, r2, #0x1
	add	r0, r0, r3
	mov	r4, #0x82
	lsl	r4, r4, #0x1
	add	r1, r1, r4
	add	r1, r1, r0
	ldrh	r0, [r1]
	mov	r4, sl
	orr	r0, r0, r4
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x5
	bls	.L28	@cond_branch
	ldr	r2, [r5]
	mov	r0, ip
	add	r3, r7, r0
	lsl	r3, r3, #0x2
	add	r2, r2, r3
	add	r2, r2, #0xdc
	ldrb	r1, [r2]
	mov	r0, #0x20
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r5]
	add	r0, r0, r3
	mov	r1, #0x8a
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	ldr	r1, [r5]
	add	r1, r1, r3
	add	r1, r1, #0xdc
	ldrb	r2, [r1]
	mov	r0, #0x61
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r5]
	add	r0, r0, r3
	add	r0, r0, #0xde
	mov	r4, r8
	strb	r4, [r0]
	ldr	r0, [r5]
	add	r0, r0, r3
	add	r0, r0, #0xdd
	strb	r4, [r0]
	mov	r2, #0x0
	ldr	r6, .L36
	mov	r4, #0x88
	lsl	r4, r4, #0x1
.L33:
	ldr	r0, [r6]
	add	r1, r2, r3
	add	r0, r0, r4
	add	r0, r0, r1
	mov	r1, r8
	strb	r1, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L33	@cond_branch
	ldr	r0, [r5]
	mov	r3, ip
	add	r2, r7, r3
	lsl	r2, r2, #0x2
	add	r0, r0, r2
	ldr	r4, .L36+0x8
	ldrb	r1, [r4]
	ldr	r3, .L36+0xc
	add	r0, r0, r3
	strb	r1, [r0]
	ldr	r0, [r5]
	mov	r4, #0x8e
	lsl	r4, r4, #0x1
	add	r0, r0, r4
	add	r0, r0, r2
	mov	r1, r8
	str	r1, [r0]
	mov	r3, r9
	lsl	r0, r3, #0x18
	lsr	r0, r0, #0x18
	mov	ip, r0
	cmp	r0, #0x3
	bls	.L24	@cond_branch
	bl	Script_ResetPlayerApprentice
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L37:
	.align	2, 0
.L36:
	.word	gSaveBlock2Ptr
	.word	0xffff
	.word	gGameLanguage
	.word	0x11b
.Lfe4:
	.size	 ResetAllApprenticeData,.Lfe4-ResetAllApprenticeData
	.align	2, 0
	.type	 IsPlayersApprenticeActive,function
	.thumb_func
IsPlayersApprenticeActive:
	ldr	r0, .L40
	ldr	r0, [r0]
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	mov	r1, #0x3
	and	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
	bx	lr
.L41:
	.align	2, 0
.L40:
	.word	gSaveBlock2Ptr
.Lfe5:
	.size	 IsPlayersApprenticeActive,.Lfe5-IsPlayersApprenticeActive
	.align	2, 0
	.type	 sub_819FBC8,function
	.thumb_func
sub_819FBC8:
	push	{r4, r5, lr}
	ldr	r2, .L55
	ldr	r0, [r2]
	add	r0, r0, #0xde
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L43	@cond_branch
	add	r4, r2, #0
	ldr	r5, .L55+0x4
.L44:
	bl	Random
	ldr	r2, [r4]
	lsl	r0, r0, #0x10
	mov	r1, #0xe0
	lsl	r1, r1, #0xb
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	add	r1, r1, r5
	ldrb	r0, [r1]
	add	r2, r2, #0xb0
	strb	r0, [r2]
	ldr	r0, [r4]
	add	r1, r0, #0
	add	r1, r1, #0xb0
	add	r0, r0, #0xdc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	ldrb	r1, [r1]
	lsr	r0, r0, #0x1b
	cmp	r1, r0
	beq	.L44	@cond_branch
	b	.L49
.L56:
	.align	2, 0
.L55:
	.word	gSaveBlock2Ptr
	.word	gUnknown_08611548
.L43:
	add	r4, r2, #0
.L50:
	bl	Random
	ldr	r2, [r4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xf
	and	r0, r0, r1
	add	r2, r2, #0xb0
	strb	r0, [r2]
	ldr	r0, [r4]
	add	r1, r0, #0
	add	r1, r1, #0xb0
	add	r0, r0, #0xdc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	ldrb	r1, [r1]
	lsr	r0, r0, #0x1b
	cmp	r1, r0
	beq	.L50	@cond_branch
.L49:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 sub_819FBC8,.Lfe6-sub_819FBC8
	.align	2, 0
	.type	 SetPlayersApprenticeLvlMode,function
	.thumb_func
SetPlayersApprenticeLvlMode:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L58
	ldr	r2, [r1]
	add	r2, r2, #0xb1
	mov	r1, #0x3
	and	r0, r0, r1
	ldrb	r3, [r2]
	sub	r1, r1, #0x7
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r2]
	bx	lr
.L59:
	.align	2, 0
.L58:
	.word	gSaveBlock2Ptr
.Lfe7:
	.size	 SetPlayersApprenticeLvlMode,.Lfe7-SetPlayersApprenticeLvlMode
	.align	2, 0
	.type	 sub_819FC60,function
	.thumb_func
sub_819FC60:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	mov	r5, #0x0
.L64:
	mov	r1, sp
	add	r0, r1, r5
	strb	r5, [r0]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x9
	bls	.L64	@cond_branch
	mov	r5, #0x0
.L69:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r7, sp
	add	r2, r7, r4
	ldrb	r3, [r2]
	add	r1, r7, r0
	ldrb	r0, [r1]
	strb	r0, [r2]
	strb	r3, [r1]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x31
	bls	.L69	@cond_branch
	mov	r5, #0x0
	ldr	r6, .L76
	mov	r4, #0xf
.L74:
	ldr	r3, [r6]
	add	r3, r3, #0xb4
	add	r3, r3, r5
	lsl	r2, r5, #0x1
	mov	r1, sp
	add	r0, r1, r2
	ldrb	r0, [r0]
	add	r1, r4, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x4
	add	r2, r2, #0x1
	mov	r7, sp
	add	r0, r7, r2
	ldrb	r2, [r0]
	add	r0, r4, #0
	and	r0, r0, r2
	orr	r1, r1, r0
	strb	r1, [r3]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x2
	bls	.L74	@cond_branch
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L77:
	.align	2, 0
.L76:
	.word	gSaveBlock2Ptr
.Lfe8:
	.size	 sub_819FC60,.Lfe8-sub_819FC60
	.align	2, 0
	.type	 sub_819FCF8,function
	.thumb_func
sub_819FCF8:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	cmp	r0, #0x2
	bne	.L79	@cond_branch
	ldr	r6, .L93
.L80:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r3, #0x0
	mov	r2, #0x0
	ldr	r1, [r6]
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r4, r0, #0x1
	add	r1, r1, #0x2
.L86:
	lsl	r0, r2, #0x1
	add	r0, r0, r4
	add	r0, r1, r0
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L85	@cond_branch
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L85:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x4
	bls	.L86	@cond_branch
	cmp	r3, #0x3
	bhi	.L80	@cond_branch
	b	.L91
.L94:
	.align	2, 0
.L93:
	.word	gUnknown_030062EC
.L79:
	cmp	r0, #0x1
	bne	.L91	@cond_branch
	ldrb	r0, [r2]
	add	r1, r1, r0
	ldrb	r5, [r1]
	add	r0, r0, #0x1
	strb	r0, [r2]
.L91:
	add	r0, r5, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 sub_819FCF8,.Lfe9-sub_819FCF8
	.align	2, 0
	.type	 sub_819FD64,function
	.thumb_func
sub_819FD64:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	mov	r5, #0x0
	mov	r0, sp
	add	r0, r0, #0xc
	str	r0, [sp, #0x14]
	mov	r1, sp
	add	r1, r1, #0x10
	str	r1, [sp, #0x18]
	add	r1, r0, #0
.L99:
	add	r0, r1, r5
	strb	r5, [r0]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x2
	bls	.L99	@cond_branch
	mov	r5, #0x0
	ldr	r6, [sp, #0x14]
.L104:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r2, r6, r4
	ldrb	r3, [r2]
	add	r1, r6, r0
	ldrb	r0, [r1]
	strb	r0, [r2]
	strb	r3, [r1]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x9
	bls	.L104	@cond_branch
	mov	r5, #0x0
	ldr	r2, .L144
.L109:
	mov	r4, sp
	add	r1, r4, r5
	add	r0, r5, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x9
	bls	.L109	@cond_branch
	mov	r5, #0x0
.L114:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r6, sp
	add	r2, r6, r4
	ldrb	r3, [r2]
	add	r1, r6, r0
	ldrb	r0, [r1]
	strb	r0, [r2]
	strb	r3, [r1]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x31
	bls	.L114	@cond_branch
	ldr	r4, .L144+0x4
	mov	r0, #0x30
	bl	AllocZeroed
	str	r0, [r4]
	mov	r1, #0x0
	strb	r1, [r0]
	mov	r5, #0x0
	mov	r2, #0x4
.L119:
	mov	r3, #0x0
.L123:
	ldr	r0, [r4]
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	add	r1, r5, r1
	add	r0, r0, #0x20
	add	r0, r0, r1
	strb	r2, [r0]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x2
	bls	.L123	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x4
	bls	.L119	@cond_branch
	mov	r0, #0x0
	ldr	r7, [sp, #0x18]
	strb	r0, [r7]
	mov	r5, #0x0
.L129:
	ldr	r0, .L144+0x8
	ldr	r3, [r0]
	lsl	r4, r5, #0x2
	add	r3, r3, r4
	mov	r1, sp
	add	r6, r1, r5
	ldrb	r0, [r6]
	add	r3, r3, #0xb8
	mov	r2, #0x3
	and	r2, r2, r0
	ldrb	r0, [r3]
	mov	r7, #0x4
	neg	r7, r7
	add	r1, r7, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r3]
	ldrb	r0, [r6]
	add	r5, r5, #0x1
	str	r5, [sp, #0x1c]
	mov	r8, r4
	cmp	r0, #0x3
	beq	.L128	@cond_branch
	ldrb	r0, [r6]
	ldr	r1, [sp, #0x14]
	ldr	r2, [sp, #0x18]
	bl	sub_819FCF8
	ldr	r1, .L144+0x8
	ldr	r3, [r1]
	add	r3, r3, r8
	add	r3, r3, #0xb8
	mov	r2, #0x3
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r0, [r3]
	mov	r4, #0xd
	neg	r4, r4
	add	r1, r4, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r3]
	ldr	r7, .L144+0x8
	ldr	r0, [r7]
	add	r0, r0, r8
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	lsr	r7, r0, #0x1e
	ldrb	r0, [r6]
	cmp	r0, #0x2
	bne	.L128	@cond_branch
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	mov	sl, r0
	ldr	r0, .L144+0x4
	mov	r9, r0
.L132:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r1, #0x3
	and	r4, r4, r1
	mov	r3, #0x0
	mov	r6, r9
	ldr	r2, [r6]
	ldrb	r0, [r2]
	add	r1, r0, #0x1
	lsl	r5, r7, #0x2
	cmp	r3, r1
	bge	.L134	@cond_branch
	add	r2, r2, #0x20
	mov	r6, sl
	add	r0, r2, r6
	ldrb	r0, [r0]
	cmp	r0, r4
	beq	.L134	@cond_branch
	add	r6, r1, #0
	add	r1, r5, r7
.L137:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r6
	bge	.L134	@cond_branch
	add	r0, r3, r1
	add	r0, r2, r0
	ldrb	r0, [r0]
	cmp	r0, r4
	bne	.L137	@cond_branch
.L134:
	mov	r1, r9
	ldr	r0, [r1]
	ldrb	r0, [r0]
	add	r0, r0, #0x1
	ldr	r1, .L144+0x4
	cmp	r3, r0
	bne	.L132	@cond_branch
	ldr	r0, [r1]
	orr	r5, r5, r7
	ldrb	r2, [r0]
	add	r1, r5, r2
	add	r0, r0, #0x20
	add	r0, r0, r1
	strb	r4, [r0]
	ldr	r6, .L144+0x8
	ldr	r2, [r6]
	add	r2, r2, r8
	add	r2, r2, #0xb8
	mov	r7, #0x3
	and	r4, r4, r7
	lsl	r3, r4, #0x4
	ldrb	r0, [r2]
	mov	r4, #0x31
	neg	r4, r4
	add	r1, r4, #0
	and	r0, r0, r1
	orr	r0, r0, r3
	strb	r0, [r2]
	ldr	r0, [r6]
	add	r0, r0, r8
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1e
	bl	sub_819FF98
	ldr	r1, [r6]
	add	r1, r1, r8
	add	r1, r1, #0xba
	strh	r0, [r1]
.L128:
	ldr	r6, [sp, #0x1c]
	lsl	r0, r6, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x8
	bhi	.LCB1080
	b	.L129	@long jump
.LCB1080:
	ldr	r4, .L144+0x4
	ldr	r0, [r4]
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L145:
	.align	2, 0
.L144:
	.word	gUnknown_086114D3
	.word	gUnknown_030062EC
	.word	gSaveBlock2Ptr
.Lfe10:
	.size	 sub_819FD64,.Lfe10-sub_819FD64
	.align	2, 0
	.type	 sub_819FF98,function
	.thumb_func
sub_819FF98:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0xc]
	mov	r7, #0x0
	ldr	r1, [sp]
	cmp	r1, #0x2
	bhi	.L147	@cond_branch
	ldr	r2, .L205
	ldr	r1, [r2]
	add	r0, r1, #0
	add	r0, r0, #0xb4
	ldr	r3, [sp]
	add	r0, r0, r3
	ldrb	r4, [r0]
	add	r1, r1, #0xb2
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1d
	asr	r0, r0, r3
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	asr	r4, r4, r0
	mov	r0, #0xf
	and	r4, r4, r0
	b	.L153
.L206:
	.align	2, 0
.L205:
	.word	gSaveBlock2Ptr
.L147:
	mov	r4, #0x0
	ldr	r2, .L207
.L153:
	ldr	r3, .L207+0x4
	lsl	r1, r4, #0x1
	ldr	r4, [r2]
	add	r0, r4, #0
	add	r0, r0, #0xb0
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r3, r3, #0x34
	add	r1, r1, r3
	ldrh	r1, [r1]
	str	r1, [sp, #0x8]
	ldr	r1, .L207+0x8
	ldr	r2, [sp, #0x8]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r6, [r0]
	mov	r3, #0x0
	add	r4, r4, #0xb1
	ldrb	r1, [r4]
	mov	r0, #0x3
	and	r0, r0, r1
	mov	r5, #0x3c
	cmp	r0, #0x1
	bne	.L154	@cond_branch
	mov	r5, #0x32
.L154:
	ldrh	r1, [r6]
	ldr	r4, .L207+0xc
	cmp	r1, r4
	beq	.L157	@cond_branch
	mov	r2, #0xfe
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	and	r0, r0, r1
	lsl	r1, r5, #0x9
	cmp	r0, r1
	bgt	.L157	@cond_branch
	add	r5, r2, #0
	add	r2, r1, #0
.L158:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r0, r3, #0x1
	add	r0, r0, r6
	ldrh	r1, [r0]
	cmp	r1, r4
	beq	.L157	@cond_branch
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, r2
	ble	.L158	@cond_branch
.L157:
	add	r5, r3, #0
	mov	r3, #0x0
	str	r3, [sp, #0x4]
.L164:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L166	@cond_branch
	ldr	r0, [sp, #0xc]
	cmp	r0, #0x1
	bne	.L165	@cond_branch
.L166:
	ldr	r1, .L207+0x10
	mov	r8, r1
.L170:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3a
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, [sp, #0x8]
	add	r1, r4, #0
	bl	CanSpeciesLearnTMHM
	add	r2, r0, #0
	cmp	r2, #0
	beq	.L170	@cond_branch
	ldr	r2, .L207+0x14
	add	r0, r4, r2
	bl	ItemIdToBattleMoveId
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	mov	r2, #0x1
	cmp	r5, #0x4
	bhi	.L175	@cond_branch
	mov	r3, #0x0
	b	.L202
.L208:
	.align	2, 0
.L207:
	.word	gSaveBlock2Ptr
	.word	gApprentices
	.word	gLevelUpLearnsets
	.word	0xffff
	.word	0x1ff
	.word	0x121
.L175:
	sub	r0, r5, #0x4
	b	.L204
.L179:
	add	r0, r3, #0x1
.L204:
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L202:
	cmp	r3, r5
	bcs	.L169	@cond_branch
	lsl	r0, r3, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r1, r8
	and	r0, r0, r1
	cmp	r0, r7
	bne	.L179	@cond_branch
	mov	r2, #0x0
.L169:
	cmp	r2, #0x1
	bne	.L170	@cond_branch
	b	.L185
.L165:
	cmp	r5, #0x4
	bhi	.L186	@cond_branch
	mov	r2, #0x1
	str	r2, [sp, #0xc]
	b	.L162
.L186:
	sub	r4, r5, #0x4
	ldr	r3, .L209
	mov	sl, r3
	mov	r8, r3
	lsl	r0, r4, #0x18
	mov	r9, r0
.L188:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r4, #0
	bl	__modsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r7, r8
	and	r7, r7, r0
	mov	r2, #0x1
	mov	r1, r9
	lsr	r3, r1, #0x18
	cmp	r3, r5
	bcs	.L190	@cond_branch
	lsl	r0, r3, #0x1
	add	r0, r0, r6
	ldrh	r1, [r0]
	mov	r0, r8
	b	.L203
.L210:
	.align	2, 0
.L209:
	.word	0x1ff
.L193:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r5
	bcs	.L190	@cond_branch
	lsl	r0, r3, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r1, sl
.L203:
	and	r0, r0, r1
	cmp	r0, r7
	bne	.L193	@cond_branch
	mov	r2, #0x0
.L190:
	cmp	r2, #0x1
	bne	.L188	@cond_branch
.L185:
	ldr	r0, [sp]
	add	r1, r7, #0
	bl	sub_81A0194
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L162	@cond_branch
	ldr	r0, .L211
	add	r0, r7, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L163	@cond_branch
	ldr	r0, [sp, #0x4]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
.L162:
	ldr	r2, [sp, #0x4]
	cmp	r2, #0x4
	bhi	.LCB1468
	b	.L164	@long jump
.LCB1468:
.L163:
	ldr	r0, .L211+0x4
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	add	r0, r7, #0
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L212:
	.align	2, 0
.L211:
	.word	gUnknown_08611370
	.word	gUnknown_030062EC
.Lfe11:
	.size	 sub_819FF98,.Lfe11-sub_819FF98
	.align	2, 0
	.type	 sub_81A0194,function
	.thumb_func
sub_81A0194:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	mov	r3, #0x0
	ldr	r0, .L221
	mov	ip, r0
	ldr	r2, [r0]
	lsl	r1, r4, #0x2
	add	r0, r1, r4
	lsl	r6, r0, #0x1
	add	r2, r2, #0x2
	add	r7, r1, #0
.L217:
	lsl	r0, r3, #0x1
	add	r0, r0, r6
	add	r0, r2, r0
	ldrh	r0, [r0]
	cmp	r0, r5
	bne	.L216	@cond_branch
	mov	r0, #0x0
	b	.L220
.L222:
	.align	2, 0
.L221:
	.word	gUnknown_030062EC
.L216:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x4
	bls	.L217	@cond_branch
	mov	r2, ip
	ldr	r1, [r2]
	add	r0, r7, r4
	ldrb	r2, [r1]
	add	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r1, r1, #0x2
	add	r1, r1, r0
	strh	r5, [r1]
	mov	r0, #0x1
.L220:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 sub_81A0194,.Lfe12-sub_81A0194
	.align	2, 0
	.type	 GetLatestLearnedMoves,function
	.thumb_func
GetLatestLearnedMoves:
	push	{r4, r5, r6, r7, lr}
	mov	ip, r1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r0, .L238
	ldr	r0, [r0]
	add	r0, r0, #0xb1
	ldrb	r1, [r0]
	mov	r0, #0x3
	and	r0, r0, r1
	mov	r4, #0x3c
	cmp	r0, #0x1
	bne	.L224	@cond_branch
	mov	r4, #0x32
.L224:
	ldr	r1, .L238+0x4
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r6, [r0]
	mov	r5, #0x0
	ldrh	r1, [r6]
	ldr	r3, .L238+0x8
	cmp	r1, r3
	beq	.L227	@cond_branch
	mov	r2, #0xfe
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	and	r0, r0, r1
	lsl	r1, r4, #0x9
	cmp	r0, r1
	bgt	.L227	@cond_branch
	add	r4, r2, #0
	add	r2, r1, #0
.L228:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x1
	add	r0, r0, r6
	ldrh	r1, [r0]
	cmp	r1, r3
	beq	.L227	@cond_branch
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, r2
	ble	.L228	@cond_branch
.L227:
	add	r4, r5, #0
	cmp	r4, #0x4
	bls	.L232	@cond_branch
	mov	r4, #0x4
.L232:
	mov	r2, #0x0
	cmp	r2, r4
	bcs	.L234	@cond_branch
	ldr	r7, .L238+0xc
.L236:
	lsl	r3, r2, #0x1
	add	r3, r3, ip
	add	r2, r2, #0x1
	sub	r0, r5, r2
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r1, [r0]
	add	r0, r7, #0
	and	r0, r0, r1
	strh	r0, [r3]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	cmp	r2, r4
	bcc	.L236	@cond_branch
.L234:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L239:
	.align	2, 0
.L238:
	.word	gSaveBlock2Ptr
	.word	gLevelUpLearnsets
	.word	0xffff
	.word	0x1ff
.Lfe13:
	.size	 GetLatestLearnedMoves,.Lfe13-GetLatestLearnedMoves
	.align	2, 0
	.type	 sub_81A0284,function
	.thumb_func
sub_81A0284:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	ldr	r1, .L256
	ldr	r2, [r1]
	add	r0, r2, #0
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	add	r7, r1, #0
	cmp	r0, #0x2
	bhi	.L241	@cond_branch
	mov	r0, #0x0
	b	.L255
.L257:
	.align	2, 0
.L256:
	.word	gSaveBlock2Ptr
.L241:
	mov	r4, #0x0
	mov	r3, #0x0
	add	r0, r2, #0
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	ldr	r1, .L258
	mov	ip, r1
	lsl	r6, r6, #0x1
	lsl	r5, r5, #0x1
	mov	r9, r5
	cmp	r0, #0
	beq	.L243	@cond_branch
	add	r2, r7, #0
.L246:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x8
	bhi	.L243	@cond_branch
	ldr	r0, [r2]
	lsl	r1, r3, #0x2
	add	r0, r0, r1
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bne	.L246	@cond_branch
.L243:
	ldr	r0, [r7]
	add	r0, r0, #0xb0
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r6, r0
	mov	r1, ip
	add	r1, r1, #0x34
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r1, sp
	bl	GetLatestLearnedMoves
	mov	r3, #0x0
	cmp	r3, r4
	bcs	.L249	@cond_branch
	ldr	r1, [r7]
	add	r0, r1, #0
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	sub	r0, r0, #0x3
	cmp	r3, r0
	bge	.L249	@cond_branch
	add	r6, r7, #0
	add	r5, r1, #0
.L251:
	lsl	r0, r3, #0x2
	add	r2, r5, r0
	add	r0, r2, #0
	add	r0, r0, #0xb8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1e
	lsr	r0, r0, #0x1e
	cmp	r0, #0x2
	bne	.L250	@cond_branch
	lsl	r0, r1, #0x1c
	lsr	r0, r0, #0x1e
	cmp	r0, r8
	bne	.L250	@cond_branch
	lsr	r0, r1, #0x6
	cmp	r0, #0
	beq	.L250	@cond_branch
	lsl	r0, r1, #0x1a
	lsr	r0, r0, #0x1e
	lsl	r0, r0, #0x1
	mov	r7, sp
	add	r1, r7, r0
	add	r0, r2, #0
	add	r0, r0, #0xba
	ldrh	r0, [r0]
	strh	r0, [r1]
.L250:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r4
	bcs	.L249	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	sub	r0, r0, #0x3
	cmp	r3, r0
	blt	.L251	@cond_branch
.L249:
	mov	r0, sp
	add	r0, r0, r9
	ldrh	r0, [r0]
.L255:
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L259:
	.align	2, 0
.L258:
	.word	gApprentices
.Lfe14:
	.size	 sub_81A0284,.Lfe14-sub_81A0284
	.align	2, 0
	.type	 sub_81A0390,function
	.thumb_func
sub_81A0390:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r5, #0x0
	ldr	r7, .L296
	add	r6, r7, #0
	mov	r4, #0x0
.L264:
	ldr	r0, [r6]
	lsl	r2, r5, #0x1
	add	r2, r2, r5
	lsl	r2, r2, #0x2
	add	r0, r0, r2
	add	r1, r0, #0
	add	r1, r1, #0xe0
	strh	r4, [r1]
	add	r0, r0, #0xea
	strh	r4, [r0]
	mov	r3, #0x0
.L268:
	ldr	r0, [r6]
	lsl	r1, r3, #0x1
	add	r1, r1, r2
	add	r0, r0, #0xe2
	add	r0, r0, r1
	strh	r4, [r0]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L268	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x2
	bls	.L264	@cond_branch
	ldr	r0, [r7]
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsr	r3, r0, #0x6
	mov	r5, #0x0
.L274:
	lsl	r0, r3, #0x2
	mov	r1, sp
	add	r2, r1, r0
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, #0xe0
	ldr	r1, [r7]
	add	r1, r1, r0
	str	r1, [r2]
	add	r0, r3, #0x1
	mov	r1, #0x3
	bl	__modsi3
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x2
	bls	.L274	@cond_branch
	mov	r5, #0x0
	ldr	r7, .L296
	ldr	r6, .L296+0x4
.L279:
	ldr	r0, [r7]
	mov	ip, r0
	add	r0, r0, #0xb4
	add	r0, r0, r5
	ldrb	r2, [r0]
	mov	r0, ip
	add	r0, r0, #0xb2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1d
	asr	r0, r0, r5
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	asr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	lsl	r0, r5, #0x2
	mov	r1, sp
	add	r3, r1, r0
	ldr	r4, [r3]
	lsl	r2, r2, #0x1
	mov	r0, ip
	add	r0, r0, #0xb0
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r2, r2, r0
	add	r2, r2, r6
	ldrh	r0, [r2]
	strh	r0, [r4]
	ldr	r1, [r3]
	ldrh	r0, [r1]
	add	r1, r1, #0x2
	bl	GetLatestLearnedMoves
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x2
	bls	.L279	@cond_branch
	mov	r5, #0x0
	cmp	r5, r8
	bcs	.L287	@cond_branch
	ldr	r7, .L296
.L289:
	ldr	r1, [r7]
	lsl	r0, r5, #0x2
	add	r4, r1, r0
	add	r0, r4, #0
	add	r0, r0, #0xb8
	ldrb	r2, [r0]
	lsl	r0, r2, #0x1e
	lsr	r1, r0, #0x1e
	lsl	r0, r2, #0x1c
	lsr	r3, r0, #0x1e
	add	r6, r3, #0
	cmp	r1, #0x1
	bne	.L290	@cond_branch
	lsr	r0, r2, #0x6
	cmp	r0, #0
	beq	.L288	@cond_branch
	lsl	r0, r3, #0x2
	add	r0, r0, sp
	ldr	r1, [r0]
	add	r0, r4, #0
	add	r0, r0, #0xba
	ldrh	r0, [r0]
	strh	r0, [r1, #0xa]
	b	.L288
.L297:
	.align	2, 0
.L296:
	.word	gSaveBlock2Ptr
	.word	gApprentices+0x34
.L290:
	cmp	r1, #0x2
	bne	.L288	@cond_branch
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x1e
	cmp	r0, #0
	beq	.L288	@cond_branch
	lsl	r2, r2, #0x1a
	lsr	r2, r2, #0x1e
	lsl	r0, r6, #0x2
	add	r0, r0, sp
	ldr	r1, [r0]
	lsl	r2, r2, #0x1
	add	r1, r1, #0x2
	add	r1, r1, r2
	add	r0, r4, #0
	add	r0, r0, #0xba
	ldrh	r0, [r0]
	strh	r0, [r1]
.L288:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, r8
	bcc	.L289	@cond_branch
.L287:
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 sub_81A0390,.Lfe15-sub_81A0390
	.align	2, 0
	.type	 CreateMenuWithAnswers,function
	.thumb_func
CreateMenuWithAnswers:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r7, #0x2
	cmp	r0, #0x6
	bls	.LCB2146
	b	.L317	@long jump
.LCB2146:
	lsl	r0, r0, #0x2
	ldr	r1, .L330
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L331:
	.align	2, 0
.L330:
	.word	.L318
	.align	2, 0
	.align	2, 0
.L318:
	.word	.L300
	.word	.L301
	.word	.L312
	.word	.L314
	.word	.L315
	.word	.L317
	.word	.L316
.L300:
	mov	r0, #0x12
	mov	sl, r0
	mov	r6, #0x8
	ldr	r0, .L332
	str	r0, [sp, #0xc]
	ldr	r0, .L332+0x4
	str	r0, [sp, #0x10]
	b	.L299
.L333:
	.align	2, 0
.L332:
	.word	gText_Lv50
	.word	gText_OpenLevel
.L301:
	mov	r7, #0x3
	mov	r1, #0x12
	mov	sl, r1
	mov	r6, #0x6
	mov	r4, #0x0
	ldr	r0, .L334
	mov	r9, r0
	ldr	r0, .L334+0x4
	ldr	r3, [r0]
	mov	r1, #0xb2
	add	r1, r1, r3
	mov	ip, r1
	add	r5, r3, #0
	add	r5, r5, #0xb0
	ldr	r0, .L334+0x8
	mov	r8, r0
.L305:
	add	r0, r3, #0
	add	r0, r0, #0xb4
	add	r0, r0, r4
	ldrb	r2, [r0]
	mov	r1, ip
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1d
	asr	r0, r0, r4
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	asr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	lsl	r2, r2, #0x1
	ldrb	r1, [r5]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r2, r2, r0
	add	r2, r2, r8
	ldrh	r1, [r2]
	lsl	r0, r4, #0x2
	mov	r2, sp
	add	r2, r2, r0
	add	r2, r2, #0xc
	mov	r0, #0xb
	mul	r0, r0, r1
	add	r0, r0, r9
	str	r0, [r2]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bls	.L305	@cond_branch
	b	.L299
.L335:
	.align	2, 0
.L334:
	.word	gSpeciesNames
	.word	gSaveBlock2Ptr
	.word	gApprentices+0x34
.L312:
	mov	r0, #0x12
	mov	sl, r0
	mov	r6, #0x8
	ldr	r0, .L336
	ldr	r0, [r0]
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	cmp	r0, #0x2
	bls	.LCB2272
	b	.L298	@long jump
.LCB2272:
	ldr	r0, .L336+0x4
	ldr	r3, [r0]
	ldrh	r0, [r3, #0x2]
	mov	r2, #0xb
	mul	r0, r0, r2
	ldr	r1, .L336+0x8
	add	r0, r0, r1
	str	r0, [sp, #0x10]
	ldrh	r0, [r3]
	mul	r0, r0, r2
	add	r0, r0, r1
	str	r0, [sp, #0xc]
	b	.L299
.L337:
	.align	2, 0
.L336:
	.word	gSaveBlock2Ptr
	.word	gUnknown_030062F0
	.word	gSpeciesNames
.L314:
	mov	r1, #0x11
	mov	sl, r1
	mov	r6, #0x8
	ldr	r0, .L338
	ldr	r3, [r0]
	ldrh	r0, [r3, #0x4]
	mov	r2, #0xd
	mul	r0, r0, r2
	ldr	r1, .L338+0x4
	add	r0, r0, r1
	str	r0, [sp, #0xc]
	ldrh	r0, [r3, #0x6]
	mul	r0, r0, r2
	add	r0, r0, r1
	str	r0, [sp, #0x10]
	b	.L299
.L339:
	.align	2, 0
.L338:
	.word	gUnknown_030062F0
	.word	gMoveNames
.L315:
	mov	r0, #0x12
	mov	sl, r0
	mov	r6, #0x8
	ldr	r0, .L340
	str	r0, [sp, #0xc]
	ldr	r0, .L340+0x4
	str	r0, [sp, #0x10]
	b	.L299
.L341:
	.align	2, 0
.L340:
	.word	gText_Give
	.word	gText_NoNeed
.L316:
	mov	r1, #0x14
	mov	sl, r1
	mov	r6, #0x8
	ldr	r0, .L342
	str	r0, [sp, #0xc]
	ldr	r0, .L342+0x4
	str	r0, [sp, #0x10]
	b	.L299
.L343:
	.align	2, 0
.L342:
	.word	gText_Yes
	.word	gText_No
.L317:
	mov	r0, #0x0
	mov	sl, r0
	mov	r6, #0x0
.L299:
	mov	r5, #0x0
	mov	r4, #0x0
	lsl	r1, r7, #0x19
	mov	r8, r1
	cmp	r4, r7
	bcs	.L320	@cond_branch
.L322:
	lsl	r0, r4, #0x2
	add	r0, r0, sp
	add	r0, r0, #0xc
	ldr	r1, [r0]
	mov	r0, #0x1
	mov	r2, #0x0
	bl	GetStringWidth
	cmp	r0, r5
	ble	.L321	@cond_branch
	add	r5, r0, #0
.L321:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r7
	bcc	.L322	@cond_branch
.L320:
	add	r0, r5, #0
	bl	convert_pixel_width_to_tile_width
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, sl
	add	r1, r4, #0
	bl	sub_80E2D5C
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	mov	r0, r8
	lsr	r3, r0, #0x18
	mov	r0, sl
	add	r1, r6, #0
	add	r2, r4, #0
	bl	CreateAndShowWindow
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r5, #0
	mov	r1, #0x0
	bl	SetStandardWindowBorderStyle
	mov	r4, #0x0
	cmp	r4, r7
	bcs	.L326	@cond_branch
.L328:
	lsl	r0, r4, #0x2
	add	r0, r0, sp
	add	r0, r0, #0xc
	ldr	r2, [r0]
	lsl	r0, r4, #0x4
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	add	r0, r5, #0
	mov	r1, #0x1
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r7
	bcc	.L328	@cond_branch
.L326:
	add	r0, r5, #0
	add	r1, r7, #0
	mov	r2, #0x0
	bl	InitMenuInUpperLeftCornerPlaySoundWhenAPressed
	mov	r0, #0x1
	add	r1, r7, #0
	add	r2, r5, #0
	bl	CreateChooseAnswerTask
.L298:
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 CreateMenuWithAnswers,.Lfe16-CreateMenuWithAnswers
	.align	2, 0
	.type	 Task_ChooseAnswer,function
	.thumb_func
Task_ChooseAnswer:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L354
	add	r4, r0, r1
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L345	@cond_branch
	bl	Menu_ProcessInputNoWrap
	b	.L353
.L355:
	.align	2, 0
.L354:
	.word	gTasks+0x8
.L345:
	bl	Menu_ProcessInput
.L353:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	mov	r0, #0x2
	neg	r0, r0
	cmp	r1, r0
	beq	.L344	@cond_branch
	add	r0, r0, #0x1
	cmp	r1, r0
	bne	.L351	@cond_branch
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L344	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L356
	mov	r0, #0x7f
	strh	r0, [r1]
	b	.L347
.L357:
	.align	2, 0
.L356:
	.word	gSpecialVar_Result
.L351:
	ldr	r0, .L358
	strh	r1, [r0]
.L347:
	ldrb	r0, [r4, #0xc]
	bl	RemoveAndHideWindow
	add	r0, r5, #0
	bl	DestroyTask
	bl	EnableBothScriptContexts
.L344:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L359:
	.align	2, 0
.L358:
	.word	gSpecialVar_Result
.Lfe17:
	.size	 Task_ChooseAnswer,.Lfe17-Task_ChooseAnswer
	.align	2, 0
	.type	 CreateAndShowWindow,function
	.thumb_func
CreateAndShowWindow:
	push	{r4, r5, lr}
	add	sp, sp, #-0x20
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	add	r4, r4, r0
	lsr	r4, r4, #0x18
	add	r5, r5, r0
	lsr	r5, r5, #0x18
	str	r2, [sp]
	str	r3, [sp, #0x4]
	mov	r0, #0xf
	str	r0, [sp, #0x8]
	mov	r0, #0x64
	str	r0, [sp, #0xc]
	add	r0, sp, #0x10
	mov	r1, #0x0
	add	r2, r4, #0
	add	r3, r5, #0
	bl	CreateWindowTemplate
	ldr	r0, [sp, #0x10]		@ created by thumb_load_double_from_address
	ldr	r1, [sp, #0x14]		@ created by thumb_load_double_from_address
	str	r0, [sp, #0x18]
	str	r1, [sp, #0x1c]
	add	r0, sp, #0x18
	bl	AddWindow
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	PutWindowTilemap
	add	r0, r4, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	r0, r4, #0
	add	sp, sp, #0x20
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 CreateAndShowWindow,.Lfe18-CreateAndShowWindow
	.align	2, 0
	.type	 RemoveAndHideWindow,function
	.thumb_func
RemoveAndHideWindow:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x1
	bl	ClearStdWindowAndFrameToTransparent
	add	r0, r4, #0
	bl	RemoveWindow
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 RemoveAndHideWindow,.Lfe19-RemoveAndHideWindow
	.align	2, 0
	.type	 CreateChooseAnswerTask,function
	.thumb_func
CreateChooseAnswerTask:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	ldr	r0, .L366
	mov	r1, #0x50
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L366+0x4
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	strh	r4, [r1, #0x10]
	cmp	r5, #0x3
	bls	.L363	@cond_branch
	mov	r0, #0x1
	b	.L365
.L367:
	.align	2, 0
.L366:
	.word	Task_ChooseAnswer
	.word	gTasks
.L363:
	mov	r0, #0x0
.L365:
	strh	r0, [r1, #0x12]
	ldr	r1, .L368
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r6, [r0, #0x14]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L369:
	.align	2, 0
.L368:
	.word	gTasks
.Lfe20:
	.size	 CreateChooseAnswerTask,.Lfe20-CreateChooseAnswerTask
	.align	2, 0
	.globl	CallApprenticeFunction
	.type	 CallApprenticeFunction,function
	.thumb_func
CallApprenticeFunction:
	push	{lr}
	ldr	r1, .L371
	ldr	r0, .L371+0x4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	pop	{r0}
	bx	r0
.L372:
	.align	2, 0
.L371:
	.word	sApprenticeFunctions
	.word	gSpecialVar_0x8004
.Lfe21:
	.size	 CallApprenticeFunction,.Lfe21-CallApprenticeFunction
	.align	2, 0
	.type	 Script_ResetPlayerApprentice,function
	.thumb_func
Script_ResetPlayerApprentice:
	push	{r4, r5, r6, r7, lr}
	bl	sub_819FBC8
	ldr	r3, .L384
	ldr	r1, [r3]
	add	r1, r1, #0xb1
	ldrb	r2, [r1]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, [r3]
	add	r1, r1, #0xb1
	ldrb	r2, [r1]
	mov	r0, #0x3d
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, [r3]
	add	r1, r1, #0xb1
	ldrb	r2, [r1]
	mov	r0, #0x3f
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, [r3]
	add	r1, r1, #0xb2
	ldrb	r2, [r1]
	mov	r0, #0x8
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	mov	r4, #0x0
	mov	r1, #0x0
.L377:
	ldr	r0, [r3]
	add	r0, r0, #0xb4
	add	r0, r0, r4
	strb	r1, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bls	.L377	@cond_branch
	mov	r4, #0x0
	ldr	r5, .L384
	mov	r0, #0x4
	neg	r0, r0
	mov	ip, r0
	mov	r7, #0xd
	neg	r7, r7
	mov	r6, #0x31
	neg	r6, r6
.L382:
	ldr	r1, [r5]
	lsl	r3, r4, #0x2
	add	r1, r1, r3
	add	r1, r1, #0xb8
	ldrb	r2, [r1]
	mov	r0, ip
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, [r5]
	add	r1, r1, r3
	add	r1, r1, #0xb8
	ldrb	r2, [r1]
	add	r0, r7, #0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, [r5]
	add	r1, r1, r3
	add	r1, r1, #0xb8
	ldrb	r2, [r1]
	add	r0, r6, #0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, [r5]
	add	r1, r1, r3
	add	r1, r1, #0xb8
	ldrb	r2, [r1]
	mov	r0, #0x3f
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r5]
	add	r0, r0, r3
	add	r0, r0, #0xba
	mov	r1, #0x0
	strh	r1, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x8
	bls	.L382	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L385:
	.align	2, 0
.L384:
	.word	gSaveBlock2Ptr
.Lfe22:
	.size	 Script_ResetPlayerApprentice,.Lfe22-Script_ResetPlayerApprentice
	.align	2, 0
	.type	 Script_IsPlayersApprenticeActive,function
	.thumb_func
Script_IsPlayersApprenticeActive:
	push	{lr}
	bl	IsPlayersApprenticeActive
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L387	@cond_branch
	ldr	r0, .L389
	strh	r1, [r0]
	b	.L388
.L390:
	.align	2, 0
.L389:
	.word	gSpecialVar_Result
.L387:
	ldr	r1, .L391
	mov	r0, #0x1
	strh	r0, [r1]
.L388:
	pop	{r0}
	bx	r0
.L392:
	.align	2, 0
.L391:
	.word	gSpecialVar_Result
.Lfe23:
	.size	 Script_IsPlayersApprenticeActive,.Lfe23-Script_IsPlayersApprenticeActive
	.align	2, 0
	.type	 Script_SetPlayersApprenticeLvlMode,function
	.thumb_func
Script_SetPlayersApprenticeLvlMode:
	push	{lr}
	ldr	r0, .L394
	ldrb	r0, [r0]
	bl	SetPlayersApprenticeLvlMode
	pop	{r0}
	bx	r0
.L395:
	.align	2, 0
.L394:
	.word	gSpecialVar_0x8005
.Lfe24:
	.size	 Script_SetPlayersApprenticeLvlMode,.Lfe24-Script_SetPlayersApprenticeLvlMode
	.align	2, 0
	.type	 sub_81A0978,function
	.thumb_func
sub_81A0978:
	push	{lr}
	bl	sub_819FBC8
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 sub_81A0978,.Lfe25-sub_81A0978
	.align	2, 0
	.type	 sub_81A0984,function
	.thumb_func
sub_81A0984:
	push	{lr}
	bl	sub_819FD64
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 sub_81A0984,.Lfe26-sub_81A0984
	.align	2, 0
	.type	 sub_81A0990,function
	.thumb_func
sub_81A0990:
	ldr	r0, .L399
	ldr	r2, [r0]
	add	r2, r2, #0xb1
	ldrb	r3, [r2]
	lsl	r1, r3, #0x1a
	lsr	r1, r1, #0x1c
	add	r1, r1, #0x1
	mov	r0, #0xf
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x3d
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	bx	lr
.L400:
	.align	2, 0
.L399:
	.word	gSaveBlock2Ptr
.Lfe27:
	.size	 sub_81A0990,.Lfe27-sub_81A0990
	.align	2, 0
	.type	 sub_81A09B4,function
	.thumb_func
sub_81A09B4:
	ldr	r1, .L402
	ldr	r0, .L402+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	strh	r0, [r1]
	bx	lr
.L403:
	.align	2, 0
.L402:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
.Lfe28:
	.size	 sub_81A09B4,.Lfe28-sub_81A09B4
	.align	2, 0
	.type	 sub_81A09D0,function
	.thumb_func
sub_81A09D0:
	push	{lr}
	ldr	r3, .L411
	ldr	r0, [r3]
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	sub	r1, r0, #0x3
	cmp	r1, #0
	bge	.L405	@cond_branch
	ldr	r1, .L411+0x4
	mov	r0, #0x0
	strh	r0, [r1]
	b	.L406
.L412:
	.align	2, 0
.L411:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_Result
.L405:
	ldr	r2, .L413
	cmp	r1, #0x8
	ble	.L407	@cond_branch
	mov	r0, #0x1
	strh	r0, [r2]
.L407:
	ldr	r0, [r3]
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bne	.L408	@cond_branch
	mov	r0, #0x1
	b	.L410
.L414:
	.align	2, 0
.L413:
	.word	gSpecialVar_Result
.L408:
	mov	r0, #0x0
.L410:
	strh	r0, [r2]
.L406:
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 sub_81A09D0,.Lfe29-sub_81A09D0
	.align	2, 0
	.type	 Script_CreateApprenticeMenu,function
	.thumb_func
Script_CreateApprenticeMenu:
	push	{lr}
	ldr	r0, .L416
	ldrb	r0, [r0]
	bl	CreateMenuWithAnswers
	pop	{r0}
	bx	r0
.L417:
	.align	2, 0
.L416:
	.word	gSpecialVar_0x8005
.Lfe30:
	.size	 Script_CreateApprenticeMenu,.Lfe30-Script_CreateApprenticeMenu
	.align	2, 0
	.type	 Task_WaitForPrintingMessage,function
	.thumb_func
Task_WaitForPrintingMessage:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	RunTextPrintersAndIsPrinter0Active
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L419	@cond_branch
	add	r0, r4, #0
	bl	DestroyTask
	ldr	r0, .L422
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L420	@cond_branch
	ldr	r0, .L422+0x4
	bl	ExecuteFuncAfterButtonPress
	b	.L419
.L423:
	.align	2, 0
.L422:
	.word	gSpecialVar_0x8005
	.word	EnableBothScriptContexts
.L420:
	bl	EnableBothScriptContexts
.L419:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 Task_WaitForPrintingMessage,.Lfe31-Task_WaitForPrintingMessage
	.align	2, 0
	.type	 PrintMessage,function
	.thumb_func
PrintMessage:
	push	{lr}
	ldr	r1, .L461
	ldrh	r0, [r1]
	cmp	r0, #0x6
	bne	.L425	@cond_branch
	ldr	r1, .L461+0x4
	ldr	r0, .L461+0x8
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	b	.L459
.L462:
	.align	2, 0
.L461:
	.word	gSpecialVar_0x8006
	.word	gUnknown_08610FF0
	.word	gSaveBlock2Ptr
.L425:
	cmp	r0, #0x7
	bne	.L427	@cond_branch
	ldr	r1, .L463
	ldr	r0, .L463+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r1, r1, #0x4
	b	.L459
.L464:
	.align	2, 0
.L463:
	.word	gUnknown_08610FF0
	.word	gSaveBlock2Ptr
.L427:
	cmp	r0, #0x8
	bne	.L429	@cond_branch
	ldr	r1, .L465
	ldr	r0, .L465+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	b	.L459
.L466:
	.align	2, 0
.L465:
	.word	gUnknown_086111B0
	.word	gSaveBlock2Ptr
.L429:
	cmp	r0, #0x9
	bne	.L431	@cond_branch
	ldr	r1, .L467
	ldr	r0, .L467+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r1, r1, #0x4
	b	.L459
.L468:
	.align	2, 0
.L467:
	.word	gUnknown_086111B0
	.word	gSaveBlock2Ptr
.L431:
	cmp	r0, #0x4
	bne	.L433	@cond_branch
	ldr	r1, .L469
	ldr	r0, .L469+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	b	.L459
.L470:
	.align	2, 0
.L469:
	.word	gUnknown_08611230
	.word	gSaveBlock2Ptr
.L433:
	cmp	r0, #0x5
	bne	.L435	@cond_branch
	ldr	r1, .L471
	ldr	r0, .L471+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r1, r1, #0x4
	b	.L459
.L472:
	.align	2, 0
.L471:
	.word	gUnknown_08611230
	.word	gSaveBlock2Ptr
.L435:
	cmp	r0, #0xa
	bne	.L437	@cond_branch
	ldr	r2, .L473
	ldr	r0, .L473+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	b	.L460
.L474:
	.align	2, 0
.L473:
	.word	gUnknown_08611070
	.word	gSaveBlock2Ptr
.L437:
	cmp	r0, #0xb
	bne	.L439	@cond_branch
	ldr	r1, .L475
	ldr	r0, .L475+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	b	.L459
.L476:
	.align	2, 0
.L475:
	.word	gUnknown_086112B0
	.word	gSaveBlock2Ptr
.L439:
	cmp	r0, #0xc
	bne	.L441	@cond_branch
	ldr	r2, .L477
	ldr	r0, .L477+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0xc
	b	.L460
.L478:
	.align	2, 0
.L477:
	.word	gUnknown_08611070
	.word	gSaveBlock2Ptr
.L441:
	cmp	r0, #0xd
	bne	.L443	@cond_branch
	ldr	r2, .L479
	ldr	r0, .L479+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x4
	b	.L460
.L480:
	.align	2, 0
.L479:
	.word	gUnknown_08611070
	.word	gSaveBlock2Ptr
.L443:
	ldrh	r0, [r1]
	cmp	r0, #0x10
	bne	.L445	@cond_branch
	ldr	r2, .L481
	ldr	r0, .L481+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x10
	b	.L460
.L482:
	.align	2, 0
.L481:
	.word	gUnknown_08611070
	.word	gSaveBlock2Ptr
.L445:
	cmp	r0, #0xe
	bne	.L447	@cond_branch
	ldr	r2, .L483
	ldr	r0, .L483+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x8
.L460:
	add	r0, r0, r2
	ldr	r1, [r0]
	b	.L426
.L484:
	.align	2, 0
.L483:
	.word	gUnknown_08611070
	.word	gSaveBlock2Ptr
.L447:
	cmp	r0, #0xf
	bne	.L449	@cond_branch
	ldr	r1, .L485
	ldr	r0, .L485+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r1, r1, #0x4
	b	.L459
.L486:
	.align	2, 0
.L485:
	.word	gUnknown_086112B0
	.word	gSaveBlock2Ptr
.L449:
	cmp	r0, #0
	bne	.L451	@cond_branch
	ldr	r1, .L487
	ldr	r0, .L487+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	b	.L459
.L488:
	.align	2, 0
.L487:
	.word	gUnknown_08610EF0
	.word	gSaveBlock2Ptr
.L451:
	cmp	r0, #0x1
	bne	.L453	@cond_branch
	ldr	r1, .L489
	ldr	r0, .L489+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r1, r1, #0x4
	b	.L459
.L490:
	.align	2, 0
.L489:
	.word	gUnknown_08610EF0
	.word	gSaveBlock2Ptr
.L453:
	cmp	r0, #0x2
	bne	.L455	@cond_branch
	ldr	r1, .L491
	ldr	r0, .L491+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r1, r1, #0x8
	b	.L459
.L492:
	.align	2, 0
.L491:
	.word	gUnknown_08610EF0
	.word	gSaveBlock2Ptr
.L455:
	cmp	r0, #0x3
	bne	.L457	@cond_branch
	ldr	r1, .L493
	ldr	r0, .L493+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r1, r1, #0xc
.L459:
	add	r0, r0, r1
	ldr	r1, [r0]
	b	.L426
.L494:
	.align	2, 0
.L493:
	.word	gUnknown_08610EF0
	.word	gSaveBlock2Ptr
.L457:
	bl	EnableBothScriptContexts
	b	.L424
.L426:
	ldr	r0, .L495
	bl	StringExpandPlaceholders
	mov	r0, #0x1
	bl	AddTextPrinterForMessage
	ldr	r0, .L495+0x4
	mov	r1, #0x1
	bl	CreateTask
.L424:
	pop	{r0}
	bx	r0
.L496:
	.align	2, 0
.L495:
	.word	gStringVar4
	.word	Task_WaitForPrintingMessage
.Lfe32:
	.size	 PrintMessage,.Lfe32-PrintMessage
	.align	2, 0
	.type	 Script_PrintMessage,function
	.thumb_func
Script_PrintMessage:
	push	{lr}
	bl	ScriptContext2_Enable
	bl	FreezeEventObjects
	bl	sub_808B864
	bl	sub_808BCF4
	mov	r0, #0x0
	mov	r1, #0x1
	bl	DrawDialogueFrame
	bl	PrintMessage
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 Script_PrintMessage,.Lfe33-Script_PrintMessage
	.align	2, 0
	.type	 sub_81A0CC0,function
	.thumb_func
sub_81A0CC0:
	push	{lr}
	ldr	r0, .L511
	ldr	r2, [r0]
	add	r0, r2, #0
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x1a
	lsr	r0, r1, #0x1c
	cmp	r0, #0x2
	bhi	.L499	@cond_branch
	ldr	r1, .L511+0x4
	mov	r0, #0x2
	b	.L510
.L512:
	.align	2, 0
.L511:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_Result
.L499:
	lsr	r0, r1, #0x1c
	cmp	r0, #0xb
	bhi	.L507	@cond_branch
	lsr	r0, r1, #0x1c
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x2
	add	r0, r2, r0
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	cmp	r0, #0x2
	beq	.L505	@cond_branch
	cmp	r0, #0x2
	bgt	.L509	@cond_branch
	cmp	r0, #0x1
	beq	.L504	@cond_branch
	b	.L507
.L509:
	cmp	r0, #0x3
	beq	.L506	@cond_branch
	b	.L507
.L504:
	ldr	r1, .L513
	mov	r0, #0x4
	b	.L510
.L514:
	.align	2, 0
.L513:
	.word	gSpecialVar_Result
.L505:
	ldr	r1, .L515
	mov	r0, #0x3
	b	.L510
.L516:
	.align	2, 0
.L515:
	.word	gSpecialVar_Result
.L506:
	ldr	r1, .L517
	mov	r0, #0x1
	b	.L510
.L518:
	.align	2, 0
.L517:
	.word	gSpecialVar_Result
.L507:
	ldr	r1, .L519
	mov	r0, #0x5
.L510:
	strh	r0, [r1]
	pop	{r0}
	bx	r0
.L520:
	.align	2, 0
.L519:
	.word	gSpecialVar_Result
.Lfe34:
	.size	 sub_81A0CC0,.Lfe34-sub_81A0CC0
	.align	2, 0
	.type	 sub_81A0D40,function
	.thumb_func
sub_81A0D40:
	push	{r4, lr}
	ldr	r0, .L523
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L522	@cond_branch
	ldr	r4, .L523+0x4
	ldr	r0, .L523+0x8
	ldr	r2, [r0]
	add	r2, r2, #0xb2
	ldrb	r3, [r2]
	lsl	r0, r3, #0x1d
	lsr	r0, r0, #0x1d
	mov	r1, #0x1
	ldrb	r4, [r4]
	lsl	r1, r1, r4
	orr	r1, r1, r0
	mov	r0, #0x7
	and	r1, r1, r0
	mov	r0, #0x8
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
.L522:
	pop	{r4}
	pop	{r0}
	bx	r0
.L524:
	.align	2, 0
.L523:
	.word	gSpecialVar_0x8005
	.word	gSpecialVar_0x8006
	.word	gSaveBlock2Ptr
.Lfe35:
	.size	 sub_81A0D40,.Lfe35-sub_81A0D40
	.align	2, 0
	.type	 sub_81A0D80,function
	.thumb_func
sub_81A0D80:
	push	{lr}
	ldr	r0, .L529
	ldr	r3, [r0]
	add	r0, r3, #0
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x1a
	lsr	r0, r1, #0x1c
	cmp	r0, #0x2
	bls	.L526	@cond_branch
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L529+0x4
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L527	@cond_branch
	lsl	r2, r2, #0x2
	add	r2, r3, r2
	add	r2, r2, #0xb8
	ldrb	r1, [r2]
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
	b	.L526
.L530:
	.align	2, 0
.L529:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8005
.L527:
	lsl	r0, r2, #0x2
	add	r0, r3, r0
	add	r0, r0, #0xb8
	ldrb	r2, [r0]
	mov	r1, #0x3f
	and	r1, r1, r2
	strb	r1, [r0]
.L526:
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 sub_81A0D80,.Lfe36-sub_81A0D80
	.align	2, 0
	.type	 sub_81A0DD4,function
	.thumb_func
sub_81A0DD4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r6, #0x0
	mov	r2, #0x0
	ldr	r1, .L547
	ldr	r0, [r1]
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	ldr	r3, .L547+0x4
	mov	r9, r3
	cmp	r0, #0
	beq	.L533	@cond_branch
	add	r3, r1, #0
.L534:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x8
	bhi	.L533	@cond_branch
	ldr	r0, [r3]
	lsl	r1, r2, #0x2
	add	r0, r0, r1
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bne	.L534	@cond_branch
.L533:
	mov	r4, r9
	mov	r0, #0x8
	bl	AllocZeroed
	add	r7, r0, #0
	str	r7, [r4]
	ldr	r0, .L547+0x8
	ldrh	r0, [r0]
	cmp	r0, #0x2
	bne	.L538	@cond_branch
	ldr	r0, .L547
	ldr	r5, [r0]
	add	r6, r5, #0
	add	r6, r6, #0xb1
	ldrb	r0, [r6]
	lsl	r1, r0, #0x1a
	lsr	r0, r1, #0x1c
	cmp	r0, #0x2
	bls	.LCB3822
	b	.L540	@long jump
.LCB3822:
	add	r2, r5, #0
	add	r2, r2, #0xb4
	add	r0, r2, r0
	ldrb	r0, [r0]
	lsr	r4, r0, #0x4
	ldr	r3, .L547+0xc
	lsl	r1, r4, #0x1
	add	r5, r5, #0xb0
	ldrb	r0, [r5]
	mov	r4, #0x58
	mul	r0, r0, r4
	add	r1, r1, r0
	add	r3, r3, #0x34
	add	r1, r1, r3
	ldrh	r0, [r1]
	strh	r0, [r7, #0x2]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	add	r2, r2, r0
	ldrb	r1, [r2]
	mov	r0, #0xf
	and	r0, r0, r1
	lsl	r0, r0, #0x1
	ldrb	r1, [r5]
	mul	r1, r1, r4
	add	r0, r0, r1
	add	r0, r0, r3
	b	.L546
.L548:
	.align	2, 0
.L547:
	.word	gSaveBlock2Ptr
	.word	gUnknown_030062F0
	.word	gSpecialVar_0x8005
	.word	gApprentices
.L538:
	cmp	r0, #0x3
	bne	.L541	@cond_branch
	ldr	r0, .L549
	mov	r8, r0
	ldr	r5, [r0]
	mov	r1, #0xb1
	add	r1, r1, r5
	mov	ip, r1
	ldrb	r0, [r1]
	lsl	r2, r0, #0x1a
	lsr	r0, r2, #0x1c
	cmp	r0, #0x2
	bhi	.LCB3889
	b	.L540	@long jump
.LCB3889:
	add	r1, r0, #0
	add	r0, r6, #0x3
	cmp	r1, r0
	blt	.LCB3895
	b	.L540	@long jump
.LCB3895:
	add	r0, r1, #0
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x2
	add	r0, r5, r0
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	cmp	r0, #0x2
	beq	.LCB3909
	b	.L540	@long jump
.LCB3909:
	add	r0, r1, #0
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x2
	add	r0, r5, r0
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	lsr	r6, r0, #0x1e
	add	r0, r5, #0
	add	r0, r0, #0xb2
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1d
	asr	r1, r1, r6
	mov	r0, #0x1
	and	r1, r1, r0
	add	r0, r5, #0
	add	r0, r0, #0xb4
	add	r0, r0, r6
	ldrb	r4, [r0]
	lsl	r1, r1, #0x2
	asr	r4, r4, r1
	mov	r0, #0xf
	and	r4, r4, r0
	ldr	r2, .L549+0x4
	lsl	r1, r4, #0x1
	add	r0, r5, #0
	add	r0, r0, #0xb0
	ldrb	r3, [r0]
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r1, r1, r0
	add	r2, r2, #0x34
	add	r1, r1, r2
	ldrh	r0, [r1]
	strh	r0, [r7]
	mov	r3, ip
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x2
	add	r0, r5, r0
	add	r0, r0, #0xb8
	ldrb	r2, [r0]
	lsl	r2, r2, #0x1a
	lsr	r2, r2, #0x1e
	add	r0, r6, #0
	add	r1, r4, #0
	bl	sub_81A0284
	mov	r1, r9
	ldr	r2, [r1]
	strh	r0, [r2, #0x4]
	mov	r3, r8
	ldr	r1, [r3]
	add	r0, r1, #0
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	add	r1, r1, #0xba
	ldrh	r0, [r1]
	strh	r0, [r2, #0x6]
	b	.L540
.L550:
	.align	2, 0
.L549:
	.word	gSaveBlock2Ptr
	.word	gApprentices
.L541:
	cmp	r0, #0x4
	bne	.L540	@cond_branch
	ldr	r0, .L551
	ldr	r3, [r0]
	add	r0, r3, #0
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r2, r0, #0x1a
	lsr	r0, r2, #0x1c
	cmp	r0, #0x2
	bls	.L540	@cond_branch
	add	r1, r0, #0
	add	r0, r6, #0x3
	cmp	r1, r0
	bge	.L540	@cond_branch
	add	r0, r1, #0
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x2
	add	r0, r3, r0
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	cmp	r0, #0x1
	bne	.L540	@cond_branch
	add	r0, r1, #0
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x2
	add	r0, r3, r0
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	lsr	r6, r0, #0x1e
	add	r0, r3, #0
	add	r0, r0, #0xb2
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1d
	asr	r1, r1, r6
	mov	r0, #0x1
	and	r1, r1, r0
	add	r0, r3, #0
	add	r0, r0, #0xb4
	add	r0, r0, r6
	ldrb	r0, [r0]
	lsl	r1, r1, #0x2
	asr	r0, r0, r1
	mov	r1, #0xf
	and	r0, r0, r1
	ldr	r2, .L551+0x4
	lsl	r0, r0, #0x1
	add	r1, r3, #0
	add	r1, r1, #0xb0
	ldrb	r3, [r1]
	mov	r1, #0x58
	mul	r1, r1, r3
	add	r0, r0, r1
	add	r2, r2, #0x34
	add	r0, r0, r2
.L546:
	ldrh	r0, [r0]
	strh	r0, [r7]
.L540:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L552:
	.align	2, 0
.L551:
	.word	gSaveBlock2Ptr
	.word	gApprentices
.Lfe37:
	.size	 sub_81A0DD4,.Lfe37-sub_81A0DD4
	.align	2, 0
	.type	 sub_81A0FE4,function
	.thumb_func
sub_81A0FE4:
	push	{r4, lr}
	ldr	r4, .L554
	ldr	r0, [r4]
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L555:
	.align	2, 0
.L554:
	.word	gUnknown_030062F0
.Lfe38:
	.size	 sub_81A0FE4,.Lfe38-sub_81A0FE4
	.align	2, 0
	.type	 sub_81A0FFC,function
	.thumb_func
sub_81A0FFC:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x10
	ldr	r0, .L587
	ldrh	r0, [r0]
	cmp	r0, #0x1
	beq	.L559	@cond_branch
	cmp	r0, #0x1
	bgt	.L563	@cond_branch
	cmp	r0, #0
	beq	.L558	@cond_branch
	b	.L556
.L588:
	.align	2, 0
.L587:
	.word	gSpecialVar_0x8005
.L563:
	cmp	r0, #0x2
	beq	.L560	@cond_branch
	b	.L556
.L558:
	ldr	r5, .L589
	b	.L557
.L590:
	.align	2, 0
.L589:
	.word	gStringVar1
.L559:
	ldr	r5, .L591
	b	.L557
.L592:
	.align	2, 0
.L591:
	.word	gStringVar2
.L560:
	ldr	r5, .L593
.L557:
	ldr	r0, .L593+0x4
	ldrh	r0, [r0]
	cmp	r0, #0x9
	bls	.LCB4182
	b	.L556	@long jump
.LCB4182:
	lsl	r0, r0, #0x2
	ldr	r1, .L593+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L594:
	.align	2, 0
.L593:
	.word	gStringVar3
	.word	gSpecialVar_0x8006
	.word	.L584
	.align	2, 0
	.align	2, 0
.L584:
	.word	.L565
	.word	.L566
	.word	.L567
	.word	.L568
	.word	.L569
	.word	.L570
	.word	.L571
	.word	.L575
	.word	.L572
	.word	.L576
.L565:
	ldr	r0, .L595
	ldr	r0, [r0]
	ldrh	r1, [r0]
	mov	r0, #0xb
	mul	r1, r1, r0
	ldr	r0, .L595+0x4
	add	r1, r1, r0
	b	.L586
.L596:
	.align	2, 0
.L595:
	.word	gUnknown_030062F0
	.word	gSpeciesNames
.L566:
	ldr	r0, .L597
	ldr	r0, [r0]
	ldrh	r1, [r0, #0x2]
	mov	r0, #0xb
	mul	r1, r1, r0
	ldr	r0, .L597+0x4
	add	r1, r1, r0
	b	.L586
.L598:
	.align	2, 0
.L597:
	.word	gUnknown_030062F0
	.word	gSpeciesNames
.L567:
	ldr	r0, .L599
	ldr	r0, [r0]
	ldrh	r1, [r0]
	mov	r0, #0xb
	mul	r1, r1, r0
	ldr	r0, .L599+0x4
	add	r1, r1, r0
	b	.L586
.L600:
	.align	2, 0
.L599:
	.word	gUnknown_030062F0
	.word	gSpeciesNames
.L568:
	ldr	r0, .L601
	ldr	r0, [r0]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0xd
	mul	r1, r1, r0
	ldr	r0, .L601+0x4
	add	r1, r1, r0
	b	.L586
.L602:
	.align	2, 0
.L601:
	.word	gUnknown_030062F0
	.word	gMoveNames
.L569:
	ldr	r0, .L603
	ldr	r0, [r0]
	ldrh	r1, [r0, #0x6]
	mov	r0, #0xd
	mul	r1, r1, r0
	ldr	r0, .L603+0x4
	add	r1, r1, r0
	b	.L586
.L604:
	.align	2, 0
.L603:
	.word	gUnknown_030062F0
	.word	gMoveNames
.L570:
	ldr	r0, .L605
	ldr	r1, [r0]
	add	r0, r1, #0
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	add	r1, r1, #0xba
	ldrh	r0, [r1]
	bl	ItemId_GetName
	add	r1, r0, #0
	b	.L586
.L606:
	.align	2, 0
.L605:
	.word	gSaveBlock2Ptr
.L571:
	ldr	r0, .L607
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	mov	r1, #0x2
	bl	GetApprenticeNameInLanguage
	add	r1, r0, #0
	mov	r0, sp
	mov	r2, #0x2
	bl	TVShowConvertInternationalString
	add	r0, r5, #0
	mov	r1, sp
	bl	StringCopy
	b	.L556
.L608:
	.align	2, 0
.L607:
	.word	gSaveBlock2Ptr
.L572:
	ldr	r0, .L609
	ldr	r0, [r0]
	add	r0, r0, #0xb1
	ldrb	r1, [r0]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L573	@cond_branch
	ldr	r1, .L609+0x4
	b	.L586
.L610:
	.align	2, 0
.L609:
	.word	gSaveBlock2Ptr
	.word	gText_Lv50
.L573:
	ldr	r1, .L611
	b	.L586
.L612:
	.align	2, 0
.L611:
	.word	gText_OpenLevel
.L575:
	ldr	r0, .L613
	ldr	r0, [r0]
	mov	r1, #0x82
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	bl	FrontierSpeechToString
	ldr	r1, .L613+0x4
.L586:
	add	r0, r5, #0
	bl	StringCopy
	b	.L556
.L614:
	.align	2, 0
.L613:
	.word	gSaveBlock2Ptr
	.word	gStringVar4
.L576:
	ldr	r0, .L615
	ldr	r3, [r0]
	add	r1, r3, #0
	add	r1, r1, #0xb1
	ldrb	r1, [r1]
	lsl	r4, r1, #0x18
	lsr	r1, r4, #0x1e
	add	r6, r0, #0
	cmp	r1, #0x2
	bhi	.L577	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xb4
	add	r0, r0, r1
	ldrb	r2, [r0]
	add	r0, r3, #0
	add	r0, r0, #0xb2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1d
	asr	r0, r0, r1
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	asr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	b	.L583
.L616:
	.align	2, 0
.L615:
	.word	gSaveBlock2Ptr
.L577:
	mov	r2, #0x0
.L583:
	ldr	r3, .L617
	lsl	r1, r2, #0x1
	ldr	r0, [r6]
	add	r0, r0, #0xb0
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r3, r3, #0x34
	add	r1, r1, r3
	ldrh	r1, [r1]
	mov	r0, #0xb
	mul	r1, r1, r0
	ldr	r0, .L617+0x4
	add	r1, r1, r0
	add	r0, r5, #0
	bl	StringCopy
.L556:
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L618:
	.align	2, 0
.L617:
	.word	gApprentices
	.word	gSpeciesNames
.Lfe39:
	.size	 sub_81A0FFC,.Lfe39-sub_81A0FFC
	.align	2, 0
	.type	 sub_81A11F8,function
	.thumb_func
sub_81A11F8:
	ldr	r0, .L620
	ldr	r2, [r0]
	ldr	r0, .L620+0x4
	ldrb	r1, [r0]
	add	r2, r2, #0xb1
	lsl	r1, r1, #0x6
	ldrb	r3, [r2]
	mov	r0, #0x3f
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	bx	lr
.L621:
	.align	2, 0
.L620:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8005
.Lfe40:
	.size	 sub_81A11F8,.Lfe40-sub_81A11F8
	.align	2, 0
	.type	 sub_81A1218,function
	.thumb_func
sub_81A1218:
	push	{lr}
	bl	sub_81AAC28
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 sub_81A1218,.Lfe41-sub_81A1218
	.align	2, 0
	.type	 sub_81A1224,function
	.thumb_func
sub_81A1224:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r1, .L643
	ldr	r3, [r1]
	add	r0, r3, #0
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	add	r7, r1, #0
	cmp	r0, #0x2
	bhi	.LCB4542
	b	.L623	@long jump
.LCB4542:
	mov	r5, #0x0
	mov	r2, #0x0
	add	r0, r3, #0
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	ldr	r1, .L643+0x4
	mov	ip, r1
	ldr	r1, .L643+0x8
	mov	r8, r1
	cmp	r0, #0
	beq	.L626	@cond_branch
	add	r3, r7, #0
.L627:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x8
	bhi	.L626	@cond_branch
	ldr	r0, [r3]
	lsl	r1, r2, #0x2
	add	r0, r0, r1
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bne	.L627	@cond_branch
.L626:
	mov	r4, #0x0
	cmp	r4, r5
	bcs	.L632	@cond_branch
	ldr	r0, [r7]
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	sub	r0, r0, #0x3
	cmp	r4, r0
	bge	.L632	@cond_branch
	add	r6, r7, #0
	mov	r9, r4
.L634:
	ldr	r3, [r6]
	lsl	r0, r4, #0x2
	add	r2, r3, r0
	add	r0, r2, #0
	add	r0, r0, #0xb8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1e
	lsr	r0, r0, #0x1e
	cmp	r0, #0x1
	bne	.L633	@cond_branch
	lsr	r0, r1, #0x6
	cmp	r0, #0
	beq	.L633	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xba
	ldrh	r0, [r0]
	mov	r2, ip
	ldrh	r2, [r2]
	cmp	r0, r2
	bne	.L633	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x2
	add	r0, r3, r0
	add	r0, r0, #0xb8
	ldrb	r2, [r0]
	mov	r1, #0x3f
	and	r1, r1, r2
	strb	r1, [r0]
	ldr	r1, [r6]
	add	r0, r1, #0
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	mov	r2, ip
	ldrh	r0, [r2]
	add	r1, r1, #0xba
	strh	r0, [r1]
	mov	r1, r9
	mov	r0, r8
	strh	r1, [r0]
	b	.L623
.L644:
	.align	2, 0
.L643:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8005
	.word	gSpecialVar_Result
.L633:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r5
	bcs	.L632	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	sub	r0, r0, #0x3
	cmp	r4, r0
	blt	.L634	@cond_branch
.L632:
	ldr	r2, [r7]
	add	r0, r2, #0
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	add	r2, r2, #0xb8
	ldrb	r1, [r2]
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, [r7]
	add	r0, r1, #0
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	mov	r2, ip
	ldrh	r0, [r2]
	add	r1, r1, #0xba
	strh	r0, [r1]
	mov	r0, #0x1
	mov	r1, r8
	strh	r0, [r1]
.L623:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 sub_81A1224,.Lfe42-sub_81A1224
	.align	2, 0
	.type	 sub_81A1370,function
	.thumb_func
sub_81A1370:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L660
	ldr	r1, [r0]
	mov	r2, #0x8a
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	add	r4, r0, #0
	cmp	r1, #0xff
	beq	.L645	@cond_branch
	mov	r5, #0x0
.L650:
	ldr	r1, [r4]
	add	r2, r5, #0x1
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r3, r1, r0
	mov	r5, #0x8a
	lsl	r5, r5, #0x1
	add	r0, r3, r5
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L649	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xdc
	add	r1, r1, #0xdc
	mov	r2, #0x44
	bl	memcpy
	b	.L645
.L661:
	.align	2, 0
.L660:
	.word	gSaveBlock2Ptr
.L649:
	add	r5, r2, #0
	cmp	r5, #0x2
	ble	.L650	@cond_branch
	ldr	r0, .L662
	mov	sl, r0
	mov	r2, #0x1
	neg	r2, r2
	mov	r9, r2
	mov	r5, #0x1
	ldr	r7, .L662+0x4
	mov	r0, #0x90
	lsl	r0, r0, #0x1
	mov	r8, r0
	mov	r6, #0x44
.L656:
	ldr	r0, [r7]
	add	r0, r0, r8
	add	r0, r0, #0x34
	bl	GetTrainerId
	add	r4, r0, #0
	ldr	r0, [r7]
	add	r0, r0, #0xa
	bl	GetTrainerId
	cmp	r4, r0
	bne	.L655	@cond_branch
	ldr	r0, [r7]
	add	r0, r0, r6
	add	r0, r0, #0xde
	ldrb	r0, [r0]
	cmp	r0, sl
	bge	.L655	@cond_branch
	mov	sl, r0
	mov	r9, r5
.L655:
	mov	r2, #0x44
	add	r8, r8, r2
	add	r6, r6, #0x44
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L656	@cond_branch
	mov	r5, r9
	cmp	r5, #0
	ble	.L645	@cond_branch
	ldr	r0, .L662+0x4
	ldr	r1, [r0]
	lsl	r0, r5, #0x4
	add	r0, r0, r9
	lsl	r0, r0, #0x2
	add	r0, r1, r0
	add	r0, r0, #0xdc
	add	r1, r1, #0xdc
	bl	memcpy
.L645:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L663:
	.align	2, 0
.L662:
	.word	0xffff
	.word	gSaveBlock2Ptr
.Lfe43:
	.size	 sub_81A1370,.Lfe43-sub_81A1370
	.align	2, 0
	.type	 sub_81A1438,function
	.thumb_func
sub_81A1438:
	push	{r4, r5, lr}
	ldr	r4, .L678
	ldr	r2, [r4]
	add	r0, r2, #0
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	add	r2, r2, #0xdc
	mov	r1, #0x1f
	and	r1, r1, r0
	ldrb	r3, [r2]
	mov	r0, #0x20
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, [r4]
	add	r0, r2, #0
	add	r0, r0, #0xb1
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1e
	add	r2, r2, #0xdc
	lsr	r1, r1, #0x19
	ldrb	r3, [r2]
	mov	r0, #0x61
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r2, #0x0
	ldr	r0, [r4]
	b	.L677
.L679:
	.align	2, 0
.L678:
	.word	gSaveBlock2Ptr
.L667:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x8
	bhi	.L666	@cond_branch
	ldr	r0, [r4]
	lsl	r1, r2, #0x2
	add	r0, r0, r1
.L677:
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bne	.L667	@cond_branch
.L666:
	ldr	r4, .L680
	ldr	r0, [r4]
	add	r0, r0, #0xdd
	strb	r2, [r0]
	ldr	r0, [r4]
	add	r1, r0, #0
	add	r1, r1, #0xde
	ldrb	r0, [r1]
	cmp	r0, #0xfe
	bhi	.L671	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1]
.L671:
	ldr	r0, [r4]
	add	r0, r0, #0xdd
	ldrb	r0, [r0]
	bl	sub_81A0390
	mov	r2, #0x0
	add	r3, r4, #0
	mov	r4, #0x88
	lsl	r4, r4, #0x1
	add	r5, r3, #0
.L675:
	ldr	r0, [r3]
	add	r1, r0, r4
	add	r1, r1, r2
	add	r0, r0, #0xa
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L675	@cond_branch
	ldr	r1, [r5]
	mov	r2, #0x8a
	lsl	r2, r2, #0x1
	add	r0, r1, r2
	bl	StringCopy
	ldr	r1, [r5]
	ldr	r0, .L680+0x4
	ldrb	r0, [r0]
	ldr	r2, .L680+0x8
	add	r1, r1, r2
	strb	r0, [r1]
	ldr	r0, [r5]
	add	r0, r0, #0xdc
	bl	CalcApprenticeChecksum
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L681:
	.align	2, 0
.L680:
	.word	gSaveBlock2Ptr
	.word	gGameLanguage
	.word	0x11b
.Lfe44:
	.size	 sub_81A1438,.Lfe44-sub_81A1438
	.align	2, 0
	.type	 sub_81A150C,function
	.thumb_func
sub_81A150C:
	push	{lr}
	ldr	r2, .L697
	ldr	r0, .L697+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xdc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	mov	r1, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x32
	ldrb	r2, [r0]
	mov	r1, #0x0
	ldr	r3, .L697+0x8
	ldrb	r0, [r3]
	cmp	r0, r2
	beq	.L684	@cond_branch
.L685:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x1d
	bhi	.L684	@cond_branch
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.L685	@cond_branch
.L684:
	cmp	r1, #0x1e
	beq	.L689	@cond_branch
	ldr	r0, .L697+0xc
	add	r0, r1, r0
	ldrb	r1, [r0]
	ldr	r0, .L697+0x10
	bl	VarSet
	b	.L682
.L698:
	.align	2, 0
.L697:
	.word	gApprentices
	.word	gSaveBlock2Ptr
	.word	gTowerMaleFacilityClasses
	.word	gTowerMaleTrainerGfxIds
	.word	0x4010
.L689:
	mov	r1, #0x0
	ldr	r3, .L699
	ldrb	r0, [r3]
	cmp	r0, r2
	beq	.L691	@cond_branch
.L692:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x13
	bhi	.L691	@cond_branch
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.L692	@cond_branch
.L691:
	cmp	r1, #0x14
	beq	.L682	@cond_branch
	ldr	r0, .L699+0x4
	add	r0, r1, r0
	ldrb	r1, [r0]
	ldr	r0, .L699+0x8
	bl	VarSet
.L682:
	pop	{r0}
	bx	r0
.L700:
	.align	2, 0
.L699:
	.word	gTowerFemaleFacilityClasses
	.word	gTowerFemaleTrainerGfxIds
	.word	0x4010
.Lfe45:
	.size	 sub_81A150C,.Lfe45-sub_81A150C
	.align	2, 0
	.type	 Script_SetPlayerApprenticeTrainerGfxId,function
	.thumb_func
Script_SetPlayerApprenticeTrainerGfxId:
	push	{lr}
	ldr	r2, .L716
	ldr	r0, .L716+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x32
	ldrb	r2, [r0]
	mov	r1, #0x0
	ldr	r3, .L716+0x8
	ldrb	r0, [r3]
	cmp	r0, r2
	beq	.L703	@cond_branch
.L704:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x1d
	bhi	.L703	@cond_branch
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.L704	@cond_branch
.L703:
	cmp	r1, #0x1e
	beq	.L708	@cond_branch
	ldr	r0, .L716+0xc
	add	r0, r1, r0
	ldrb	r1, [r0]
	ldr	r0, .L716+0x10
	bl	VarSet
	b	.L701
.L717:
	.align	2, 0
.L716:
	.word	gApprentices
	.word	gSaveBlock2Ptr
	.word	gTowerMaleFacilityClasses
	.word	gTowerMaleTrainerGfxIds
	.word	0x4010
.L708:
	mov	r1, #0x0
	ldr	r3, .L718
	ldrb	r0, [r3]
	cmp	r0, r2
	beq	.L710	@cond_branch
.L711:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x13
	bhi	.L710	@cond_branch
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.L711	@cond_branch
.L710:
	cmp	r1, #0x14
	beq	.L701	@cond_branch
	ldr	r0, .L718+0x4
	add	r0, r1, r0
	ldrb	r1, [r0]
	ldr	r0, .L718+0x8
	bl	VarSet
.L701:
	pop	{r0}
	bx	r0
.L719:
	.align	2, 0
.L718:
	.word	gTowerFemaleFacilityClasses
	.word	gTowerFemaleTrainerGfxIds
	.word	0x4010
.Lfe46:
	.size	 Script_SetPlayerApprenticeTrainerGfxId,.Lfe46-Script_SetPlayerApprenticeTrainerGfxId
	.align	2, 0
	.type	 sub_81A1638,function
	.thumb_func
sub_81A1638:
	ldr	r1, .L721
	mov	r0, #0x1
	strh	r0, [r1]
	bx	lr
.L722:
	.align	2, 0
.L721:
	.word	gSpecialVar_0x8004
.Lfe47:
	.size	 sub_81A1638,.Lfe47-sub_81A1638
	.align	2, 0
	.type	 sub_81A1644,function
	.thumb_func
sub_81A1644:
	ldr	r1, .L724
	mov	r0, #0x1
	strh	r0, [r1]
	bx	lr
.L725:
	.align	2, 0
.L724:
	.word	gSpecialVar_0x8004
.Lfe48:
	.size	 sub_81A1644,.Lfe48-sub_81A1644
	.align	2, 0
	.globl	GetApprenticeNameInLanguage
	.type	 GetApprenticeNameInLanguage,function
	.thumb_func
GetApprenticeNameInLanguage:
	push	{lr}
	mov	r2, #0x58
	mul	r2, r2, r0
	ldr	r0, .L738
	add	r2, r2, r0
	sub	r0, r1, #0x1
	cmp	r0, #0x6
	bhi	.L734	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L738+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L739:
	.align	2, 0
.L738:
	.word	gApprentices
	.word	.L735
	.align	2, 0
	.align	2, 0
.L735:
	.word	.L728
	.word	.L729
	.word	.L730
	.word	.L731
	.word	.L732
	.word	.L734
	.word	.L734
.L728:
	add	r0, r2, #0
	b	.L736
.L729:
	add	r0, r2, #0
	add	r0, r0, #0x8
	b	.L737
.L730:
	add	r0, r2, #0
	add	r0, r0, #0x10
	b	.L737
.L731:
	add	r0, r2, #0
	add	r0, r0, #0x18
	b	.L737
.L732:
	add	r0, r2, #0
	add	r0, r0, #0x20
	b	.L737
.L734:
	add	r0, r2, #0
	add	r0, r0, #0x28
.L737:
.L736:
	pop	{r1}
	bx	r1
.Lfe49:
	.size	 GetApprenticeNameInLanguage,.Lfe49-GetApprenticeNameInLanguage
	.align	2, 0
	.type	 sub_81A16B4,function
	.thumb_func
sub_81A16B4:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L743
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L742	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L741	@cond_branch
.L742:
	add	r0, r2, #0
	bl	SwitchTaskToFollowupFunc
.L741:
	pop	{r0}
	bx	r0
.L744:
	.align	2, 0
.L743:
	.word	gMain
.Lfe50:
	.size	 sub_81A16B4,.Lfe50-sub_81A16B4
	.align	2, 0
	.type	 Task_ExecuteFuncAfterButtonPress,function
	.thumb_func
Task_ExecuteFuncAfterButtonPress:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L748
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L747	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L746	@cond_branch
.L747:
	ldr	r2, .L748+0x4
	ldr	r1, .L748+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x8]
	mov	r3, #0xa
	ldrsh	r0, [r0, r3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	str	r1, [r2]
	bl	_call_via_r1
	add	r0, r4, #0
	bl	DestroyTask
.L746:
	pop	{r4}
	pop	{r0}
	bx	r0
.L749:
	.align	2, 0
.L748:
	.word	gMain
	.word	gUnknown_030062F4
	.word	gTasks
.Lfe51:
	.size	 Task_ExecuteFuncAfterButtonPress,.Lfe51-Task_ExecuteFuncAfterButtonPress
	.align	2, 0
	.type	 ExecuteFuncAfterButtonPress,function
	.thumb_func
ExecuteFuncAfterButtonPress:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L751
	mov	r1, #0x1
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L751+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0x8]
	lsr	r4, r4, #0x10
	strh	r4, [r1, #0xa]
	pop	{r4}
	pop	{r0}
	bx	r0
.L752:
	.align	2, 0
.L751:
	.word	Task_ExecuteFuncAfterButtonPress
	.word	gTasks
.Lfe52:
	.size	 ExecuteFuncAfterButtonPress,.Lfe52-ExecuteFuncAfterButtonPress
	.align	2, 0
	.type	 sub_81A175C,function
	.thumb_func
sub_81A175C:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L754
	add	r0, r4, #0
	mov	r1, #0x1
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r4, #0
	add	r2, r5, #0
	bl	SetTaskFuncWithFollowupFunc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L755:
	.align	2, 0
.L754:
	.word	sub_81A16B4
.Lfe53:
	.size	 sub_81A175C,.Lfe53-sub_81A175C
	.comm	gUnknown_030062EC, 4	@ 4
	.comm	gUnknown_030062F0, 4	@ 4
	.comm	gUnknown_030062F4, 4	@ 4
.text
	.align	2, 0

