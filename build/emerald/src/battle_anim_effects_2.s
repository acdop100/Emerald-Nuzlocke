@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gUnknown_08593264
	.section .rodata
	.align	2, 0
	.type	 gUnknown_08593264,object
	.size	 gUnknown_08593264,24
gUnknown_08593264:
	.short	0x2750
	.short	0x2750
	.word	gUnknown_08524914
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8103448
	.globl	gUnknown_0859327C
	.align	2, 0
	.type	 gUnknown_0859327C,object
gUnknown_0859327C:
	.short	0x4
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0859327C,8
	.globl	gUnknown_08593284
	.align	2, 0
	.type	 gUnknown_08593284,object
gUnknown_08593284:
	.word	gUnknown_0859327C
	.size	 gUnknown_08593284,4
	.globl	gUnknown_08593288
	.align	2, 0
	.type	 gUnknown_08593288,object
	.size	 gUnknown_08593288,24
gUnknown_08593288:
	.short	0x2758
	.short	0x2758
	.word	gUnknown_0852490C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8103498
	.globl	gUnknown_085932A0
	.align	2, 0
	.type	 gUnknown_085932A0,object
	.size	 gUnknown_085932A0,24
gUnknown_085932A0:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810358C
	.globl	gUnknown_085932B8
	.align	2, 0
	.type	 gUnknown_085932B8,object
	.size	 gUnknown_085932B8,24
gUnknown_085932B8:
	.short	0x27a1
	.short	0x27a1
	.word	gUnknown_08524A9C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08597060
	.word	sub_8103620
	.globl	gUnknown_085932D0
	.align	2, 0
	.type	 gUnknown_085932D0,object
gUnknown_085932D0:
	.short	0x0
	.byte	0x9
	.space	1
	.short	0x10
	.byte	0x3
	.space	1
	.short	0x20
	.byte	0x3
	.space	1
	.short	0x30
	.byte	0x3
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085932D0,20
	.globl	gUnknown_085932E4
	.align	2, 0
	.type	 gUnknown_085932E4,object
gUnknown_085932E4:
	.word	gUnknown_085932D0
	.size	 gUnknown_085932E4,4
	.globl	gUnknown_085932E8
	.align	2, 0
	.type	 gUnknown_085932E8,object
gUnknown_085932E8:
	.short	0x50
	.short	0x50
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x9
	.short	0x9
	.byte	0x0
	.byte	0x12
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_085932E8,24
	.globl	gUnknown_08593300
	.align	2, 0
	.type	 gUnknown_08593300,object
gUnknown_08593300:
	.word	gUnknown_085932E8
	.size	 gUnknown_08593300,4
	.globl	gUnknown_08593304
	.align	2, 0
	.type	 gUnknown_08593304,object
	.size	 gUnknown_08593304,24
gUnknown_08593304:
	.short	0x2717
	.short	0x2717
	.word	gUnknown_08524974
	.word	gUnknown_085932E4
	.word	0x0
	.word	gUnknown_08593300
	.word	sub_80A77C8
	.globl	gUnknown_0859331C
	.align	2, 0
	.type	 gUnknown_0859331C,object
gUnknown_0859331C:
	.short	0x0
	.byte	0x43
	.space	1
	.short	0x8
	.byte	0x43
	.space	1
	.short	0x10
	.byte	0x43
	.space	1
	.short	0x18
	.byte	0x43
	.space	1
	.short	0x20
	.byte	0x43
	.space	1
	.short	0x28
	.byte	0x43
	.space	1
	.short	0x30
	.byte	0x43
	.space	1
	.short	-0x3
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0859331C,36
	.globl	gUnknown_08593340
	.align	2, 0
	.type	 gUnknown_08593340,object
gUnknown_08593340:
	.word	gUnknown_0859331C
	.size	 gUnknown_08593340,4
	.globl	gKinesisZapEnergySpriteTemplate
	.align	2, 0
	.type	 gKinesisZapEnergySpriteTemplate,object
	.size	 gKinesisZapEnergySpriteTemplate,24
gKinesisZapEnergySpriteTemplate:
	.short	0x275b
	.short	0x275b
	.word	gUnknown_08524934
	.word	gUnknown_08593340
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	Anim_KinesisZapEnergy
	.globl	gUnknown_0859335C
	.align	2, 0
	.type	 gUnknown_0859335C,object
gUnknown_0859335C:
	.short	0x10
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x14
	.short	0x0
	.byte	0x0
	.byte	0xc
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x20
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_0859335C,32
	.globl	gUnknown_0859337C
	.align	2, 0
	.type	 gUnknown_0859337C,object
gUnknown_0859337C:
	.word	gUnknown_0859335C
	.size	 gUnknown_0859337C,4
	.globl	gSwordsDanceBladeSpriteTemplate
	.align	2, 0
	.type	 gSwordsDanceBladeSpriteTemplate,object
	.size	 gSwordsDanceBladeSpriteTemplate,24
gSwordsDanceBladeSpriteTemplate:
	.short	0x2715
	.short	0x2715
	.word	gUnknown_08524ADC
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_0859337C
	.word	Anim_SwordsDanceBlade
	.globl	gSonicBoomSpriteTemplate
	.align	2, 0
	.type	 gSonicBoomSpriteTemplate,object
	.size	 gSonicBoomSpriteTemplate,24
gSonicBoomSpriteTemplate:
	.short	0x2713
	.short	0x2713
	.word	gUnknown_08524B14
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSonicBoomProjectile
	.globl	gUnknown_085933B0
	.align	2, 0
	.type	 gUnknown_085933B0,object
	.size	 gUnknown_085933B0,24
gUnknown_085933B0:
	.short	0x2713
	.short	0x2713
	.word	gUnknown_08524A54
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8103AA4
	.globl	gUnknown_085933C8
	.align	2, 0
	.type	 gUnknown_085933C8,object
gUnknown_085933C8:
	.short	0x20
	.short	0x20
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7
	.short	0x7
	.byte	0x0
	.byte	0xc8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_085933C8,24
	.globl	gUnknown_085933E0
	.align	2, 0
	.type	 gUnknown_085933E0,object
gUnknown_085933E0:
	.short	0x5
	.short	0x5
	.byte	0x0
	.byte	0xa
	.space	2
	.short	-0xa
	.short	-0xa
	.byte	0x0
	.byte	0xa
	.space	2
	.short	0xa
	.short	0xa
	.byte	0x0
	.byte	0xa
	.space	2
	.short	-0xa
	.short	-0xa
	.byte	0x0
	.byte	0xa
	.space	2
	.short	0xa
	.short	0xa
	.byte	0x0
	.byte	0xa
	.space	2
	.short	-0xa
	.short	-0xa
	.byte	0x0
	.byte	0xa
	.space	2
	.short	0xa
	.short	0xa
	.byte	0x0
	.byte	0xa
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_085933E0,64
	.globl	gUnknown_08593420
	.align	2, 0
	.type	 gUnknown_08593420,object
gUnknown_08593420:
	.word	gUnknown_085933C8
	.size	 gUnknown_08593420,4
	.globl	gUnknown_08593424
	.align	2, 0
	.type	 gUnknown_08593424,object
gUnknown_08593424:
	.word	gUnknown_085933E0
	.size	 gUnknown_08593424,4
	.globl	gSupersonicWaveSpriteTemplate
	.align	2, 0
	.type	 gSupersonicWaveSpriteTemplate,object
	.size	 gSupersonicWaveSpriteTemplate,24
gSupersonicWaveSpriteTemplate:
	.short	0x27b3
	.short	0x27b3
	.word	gUnknown_08524A14
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08593420
	.word	TranslateAnimSpriteToTargetMonLocation
	.globl	gScreechWaveSpriteTemplate
	.align	2, 0
	.type	 gScreechWaveSpriteTemplate,object
	.size	 gScreechWaveSpriteTemplate,24
gScreechWaveSpriteTemplate:
	.short	0x27b4
	.short	0x27b4
	.word	gUnknown_08524A14
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08593420
	.word	TranslateAnimSpriteToTargetMonLocation
	.globl	gUnknown_08593458
	.align	2, 0
	.type	 gUnknown_08593458,object
	.size	 gUnknown_08593458,24
gUnknown_08593458:
	.short	0x2814
	.short	0x2814
	.word	gUnknown_08524A1C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08593420
	.word	TranslateAnimSpriteToTargetMonLocation
	.globl	gUnknown_08593470
	.align	2, 0
	.type	 gUnknown_08593470,object
	.size	 gUnknown_08593470,24
gUnknown_08593470:
	.short	0x2830
	.short	0x2830
	.word	gUnknown_08524A14
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08593424
	.word	sub_8108C94
	.globl	gUnknown_08593488
	.align	2, 0
	.type	 gUnknown_08593488,object
	.size	 gUnknown_08593488,24
gUnknown_08593488:
	.short	0x27bf
	.short	0x27bf
	.word	gUnknown_0852490C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_80A78AC
	.globl	gUnknown_085934A0
	.align	2, 0
	.type	 gUnknown_085934A0,object
	.size	 gUnknown_085934A0,24
gUnknown_085934A0:
	.short	0x27c2
	.short	0x27c2
	.word	gUnknown_08524A3C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8103FE8
	.globl	gUnknown_085934B8
	.align	2, 0
	.type	 gUnknown_085934B8,object
gUnknown_085934B8:
	.short	0x8
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085934B8,8
	.globl	gUnknown_085934C0
	.align	2, 0
	.type	 gUnknown_085934C0,object
gUnknown_085934C0:
	.word	gUnknown_085934B8
	.size	 gUnknown_085934C0,4
	.globl	gUnknown_085934C4
	.align	2, 0
	.type	 gUnknown_085934C4,object
gUnknown_085934C4:
	.short	0x0
	.short	0x0
	.byte	0xa
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gUnknown_085934C4,16
	.globl	gUnknown_085934D4
	.align	2, 0
	.type	 gUnknown_085934D4,object
gUnknown_085934D4:
	.word	gUnknown_085934C4
	.size	 gUnknown_085934D4,4
	.globl	gUnknown_085934D8
	.align	2, 0
	.type	 gUnknown_085934D8,object
	.size	 gUnknown_085934D8,24
gUnknown_085934D8:
	.short	0x2774
	.short	0x2774
	.word	gUnknown_0852496C
	.word	gUnknown_085934C0
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8104088
	.globl	gUnknown_085934F0
	.align	2, 0
	.type	 gUnknown_085934F0,object
	.size	 gUnknown_085934F0,24
gUnknown_085934F0:
	.short	0x2774
	.short	0x2774
	.word	gUnknown_0852496C
	.word	gUnknown_085934C0
	.word	0x0
	.word	gUnknown_085934D4
	.word	sub_810413C
	.globl	gUnknown_08593508
	.align	2, 0
	.type	 gUnknown_08593508,object
gUnknown_08593508:
	.short	0x0
	.short	0x0
	.byte	0x14
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gUnknown_08593508,16
	.globl	gUnknown_08593518
	.align	2, 0
	.type	 gUnknown_08593518,object
gUnknown_08593518:
	.word	gUnknown_08593508
	.size	 gUnknown_08593518,4
	.globl	gUnknown_0859351C
	.align	2, 0
	.type	 gUnknown_0859351C,object
	.size	 gUnknown_0859351C,24
gUnknown_0859351C:
	.short	0x2716
	.short	0x2716
	.word	gUnknown_0852496C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08593518
	.word	sub_81041C4
	.globl	gUnknown_08593534
	.align	2, 0
	.type	 gUnknown_08593534,object
gUnknown_08593534:
	.short	0x10
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x4
	.short	0x0
	.byte	0x0
	.byte	0x28
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08593534,24
	.globl	gUnknown_0859354C
	.align	2, 0
	.type	 gUnknown_0859354C,object
gUnknown_0859354C:
	.word	gUnknown_08593534
	.size	 gUnknown_0859354C,4
	.globl	gRazorWindTornadoSpriteTemplate
	.align	2, 0
	.type	 gRazorWindTornadoSpriteTemplate,object
	.size	 gRazorWindTornadoSpriteTemplate,24
gRazorWindTornadoSpriteTemplate:
	.short	0x2719
	.short	0x2719
	.word	gUnknown_085249BC
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_0859354C
	.word	Anim_RazorWindTornado
	.globl	gUnknown_08593568
	.align	2, 0
	.type	 gUnknown_08593568,object
gUnknown_08593568:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x10
	.byte	0x3
	.space	1
	.short	0x20
	.byte	0x14
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08593568,16
	.globl	gUnknown_08593578
	.align	2, 0
	.type	 gUnknown_08593578,object
gUnknown_08593578:
	.short	0x0
	.byte	0xc3
	.space	1
	.short	0x10
	.byte	0xc3
	.space	1
	.short	0x20
	.byte	0xd4
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08593578,16
	.globl	gUnknown_08593588
	.align	2, 0
	.type	 gUnknown_08593588,object
gUnknown_08593588:
	.word	gUnknown_08593568
	.word	gUnknown_08593578
	.size	 gUnknown_08593588,8
	.globl	gViceGripSpriteTemplate
	.align	2, 0
	.type	 gViceGripSpriteTemplate,object
	.size	 gViceGripSpriteTemplate,24
gViceGripSpriteTemplate:
	.short	0x279a
	.short	0x279a
	.word	gUnknown_08524A34
	.word	gUnknown_08593588
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	Anim_ViceGripPincer
	.globl	gUnknown_085935A8
	.align	2, 0
	.type	 gUnknown_085935A8,object
gUnknown_085935A8:
	.short	0x0
	.byte	0x2
	.space	1
	.short	0x10
	.byte	0x2
	.space	1
	.short	0x20
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085935A8,16
	.globl	gUnknown_085935B8
	.align	2, 0
	.type	 gUnknown_085935B8,object
gUnknown_085935B8:
	.short	0x0
	.byte	0xc2
	.space	1
	.short	0x10
	.byte	0xc2
	.space	1
	.short	0x20
	.byte	0xc1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085935B8,16
	.globl	gUnknown_085935C8
	.align	2, 0
	.type	 gUnknown_085935C8,object
gUnknown_085935C8:
	.word	gUnknown_085935A8
	.word	gUnknown_085935B8
	.size	 gUnknown_085935C8,8
	.globl	gGuillotineSpriteTemplate
	.align	2, 0
	.type	 gGuillotineSpriteTemplate,object
	.size	 gGuillotineSpriteTemplate,24
gGuillotineSpriteTemplate:
	.short	0x279a
	.short	0x279a
	.word	gUnknown_08524A34
	.word	gUnknown_085935C8
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	Anim_GuillotinePincer
	.globl	gSplashEffectAffineAnimCmds
	.align	2, 0
	.type	 gSplashEffectAffineAnimCmds,object
gSplashEffectAffineAnimCmds:
	.short	-0x6
	.short	0x4
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0xa
	.short	-0xa
	.byte	0x0
	.byte	0x8
	.space	2
	.short	-0x4
	.short	0x6
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gSplashEffectAffineAnimCmds,32
	.globl	gGrowAndShrinkAffineAnimCmds
	.align	2, 0
	.type	 gGrowAndShrinkAffineAnimCmds,object
gGrowAndShrinkAffineAnimCmds:
	.short	-0x4
	.short	-0x5
	.byte	0x0
	.byte	0xc
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x18
	.space	2
	.short	0x4
	.short	0x5
	.byte	0x0
	.byte	0xc
	.space	2
	.short	0x7fff
	.space	6
	.size	 gGrowAndShrinkAffineAnimCmds,32
	.globl	gUnknown_08593628
	.align	2, 0
	.type	 gUnknown_08593628,object
gUnknown_08593628:
	.short	0x0
	.byte	0x44
	.space	1
	.short	0x4
	.byte	0x68
	.space	1
	.short	0x8
	.byte	0x44
	.space	1
	.short	0xc
	.byte	0x44
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08593628,20
	.globl	gUnknown_0859363C
	.align	2, 0
	.type	 gUnknown_0859363C,object
gUnknown_0859363C:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x4
	.byte	0x28
	.space	1
	.short	0x8
	.byte	0x4
	.space	1
	.short	0xc
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0859363C,20
	.globl	gUnknown_08593650
	.align	2, 0
	.type	 gUnknown_08593650,object
gUnknown_08593650:
	.word	gUnknown_08593628
	.word	gUnknown_0859363C
	.size	 gUnknown_08593650,8
	.globl	gBreathPuffSpriteTemplate
	.align	2, 0
	.type	 gBreathPuffSpriteTemplate,object
	.size	 gBreathPuffSpriteTemplate,24
gBreathPuffSpriteTemplate:
	.short	0x2766
	.short	0x2766
	.word	gUnknown_0852490C
	.word	gUnknown_08593650
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	Anim_BreathPuff
	.globl	gUnknown_08593670
	.align	2, 0
	.type	 gUnknown_08593670,object
gUnknown_08593670:
	.short	0xb
	.short	0xb
	.byte	0x0
	.byte	0x8
	.space	2
	.short	-0xb
	.short	-0xb
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08593670,24
	.globl	gUnknown_08593688
	.align	2, 0
	.type	 gUnknown_08593688,object
gUnknown_08593688:
	.word	gUnknown_08593670
	.size	 gUnknown_08593688,4
	.globl	gAngerMarkSpriteTemplate
	.align	2, 0
	.type	 gAngerMarkSpriteTemplate,object
	.size	 gAngerMarkSpriteTemplate,24
gAngerMarkSpriteTemplate:
	.short	0x2767
	.short	0x2767
	.word	gUnknown_0852496C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08593688
	.word	Anim_AngerMark
	.globl	gUnknown_085936A4
	.align	2, 0
	.type	 gUnknown_085936A4,object
gUnknown_085936A4:
	.short	-0xa
	.short	0x9
	.byte	0x0
	.byte	0x7
	.space	2
	.short	0x14
	.short	-0x14
	.byte	0x0
	.byte	0x7
	.space	2
	.short	-0x14
	.short	0x14
	.byte	0x0
	.byte	0x7
	.space	2
	.short	0xa
	.short	-0x9
	.byte	0x0
	.byte	0x7
	.space	2
	.short	0x7ffd
	.short	0x2
	.space	4
	.short	0x7fff
	.space	6
	.size	 gUnknown_085936A4,48
	.globl	gUnknown_085936D4
	.align	2, 0
	.type	 gUnknown_085936D4,object
	.size	 gUnknown_085936D4,24
gUnknown_085936D4:
	.short	0x2712
	.short	0x2712
	.word	gUnknown_08524914
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810501C
	.globl	gUnknown_085936EC
	.align	2, 0
	.type	 gUnknown_085936EC,object
	.size	 gUnknown_085936EC,24
gUnknown_085936EC:
	.short	0x27d5
	.short	0x27d5
	.word	gUnknown_08524914
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_80A7938
	.globl	gUnknown_08593704
	.align	2, 0
	.type	 gUnknown_08593704,object
gUnknown_08593704:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0x20
	.byte	0x5
	.space	1
	.short	0x30
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08593704,20
	.globl	gUnknown_08593718
	.align	2, 0
	.type	 gUnknown_08593718,object
gUnknown_08593718:
	.word	gUnknown_08593704
	.size	 gUnknown_08593718,4
	.globl	gBattleAnimSpriteTemplate_859371C
	.align	2, 0
	.type	 gBattleAnimSpriteTemplate_859371C,object
	.size	 gBattleAnimSpriteTemplate_859371C,24
gBattleAnimSpriteTemplate_859371C:
	.short	0x27d6
	.short	0x27d6
	.word	gUnknown_08524914
	.word	gUnknown_08593718
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_80A77C8
	.globl	gUnknown_08593734
	.align	2, 0
	.type	 gUnknown_08593734,object
gUnknown_08593734:
	.short	0x0
	.short	0x0
	.byte	0xf8
	.byte	0x2
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x8
	.byte	0x4
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xf8
	.byte	0x2
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gUnknown_08593734,32
	.globl	gUnknown_08593754
	.align	2, 0
	.type	 gUnknown_08593754,object
gUnknown_08593754:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08593754,16
	.globl	gUnknown_08593764
	.align	2, 0
	.type	 gUnknown_08593764,object
gUnknown_08593764:
	.short	-0x8
	.short	0x4
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7ffd
	.short	0x0
	.space	4
	.short	0x10
	.short	-0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	-0x10
	.short	0x8
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7ffd
	.short	0x1
	.space	4
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0xf
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08593764,64
	.globl	gUnknown_085937A4
	.align	2, 0
	.type	 gUnknown_085937A4,object
gUnknown_085937A4:
	.word	gUnknown_08593734
	.word	gUnknown_08593754
	.word	gUnknown_08593764
	.size	 gUnknown_085937A4,12
	.globl	gUnknown_085937B0
	.align	2, 0
	.type	 gUnknown_085937B0,object
	.size	 gUnknown_085937B0,24
gUnknown_085937B0:
	.short	0x27da
	.short	0x27da
	.word	gUnknown_08524AF4
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_085937A4
	.word	sub_8105538
	.globl	gUnknown_085937C8
	.align	2, 0
	.type	 gUnknown_085937C8,object
gUnknown_085937C8:
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x1e
	.space	2
	.short	0x7fff
	.short	0x1
	.space	4
	.size	 gUnknown_085937C8,24
	.globl	gUnknown_085937E0
	.align	2, 0
	.type	 gUnknown_085937E0,object
gUnknown_085937E0:
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x20
	.short	0x20
	.byte	0x0
	.byte	0xf
	.space	2
	.short	0x7fff
	.short	0x1
	.space	4
	.size	 gUnknown_085937E0,24
	.globl	gUnknown_085937F8
	.align	2, 0
	.type	 gUnknown_085937F8,object
gUnknown_085937F8:
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0xb
	.short	0xb
	.byte	0x0
	.byte	0x2d
	.space	2
	.short	0x7fff
	.short	0x1
	.space	4
	.size	 gUnknown_085937F8,24
	.globl	gUnknown_08593810
	.align	2, 0
	.type	 gUnknown_08593810,object
gUnknown_08593810:
	.word	gUnknown_085937C8
	.word	gUnknown_085937E0
	.size	 gUnknown_08593810,8
	.globl	gUnknown_08593818
	.align	2, 0
	.type	 gUnknown_08593818,object
gUnknown_08593818:
	.word	gUnknown_085937F8
	.size	 gUnknown_08593818,4
	.globl	gUnknown_0859381C
	.align	2, 0
	.type	 gUnknown_0859381C,object
	.size	 gUnknown_0859381C,24
gUnknown_0859381C:
	.short	0x27db
	.short	0x27db
	.word	gUnknown_085249DC
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08593810
	.word	sub_80A77C8
	.globl	gUnknown_08593834
	.align	2, 0
	.type	 gUnknown_08593834,object
gUnknown_08593834:
	.short	0x200
	.short	0x200
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x10
	.short	-0x10
	.byte	0x0
	.byte	0x1e
	.space	2
	.short	0x7fff
	.short	0x1
	.space	4
	.size	 gUnknown_08593834,24
	.globl	gUnknown_0859384C
	.align	2, 0
	.type	 gUnknown_0859384C,object
gUnknown_0859384C:
	.word	gUnknown_08593834
	.size	 gUnknown_0859384C,4
	.globl	gUnknown_08593850
	.align	2, 0
	.type	 gUnknown_08593850,object
	.size	 gUnknown_08593850,24
gUnknown_08593850:
	.short	0x27db
	.short	0x27db
	.word	gUnknown_08524AFC
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_0859384C
	.word	sub_80A77C8
	.globl	gUnknown_08593868
	.align	2, 0
	.type	 gUnknown_08593868,object
	.size	 gUnknown_08593868,24
gUnknown_08593868:
	.short	0x27db
	.short	0x27db
	.word	gUnknown_08524AFC
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08593810
	.word	sub_81051C4
	.globl	gUnknown_08593880
	.align	2, 0
	.type	 gUnknown_08593880,object
	.size	 gUnknown_08593880,24
gUnknown_08593880:
	.short	0x27db
	.short	0x27db
	.word	gUnknown_08524AFC
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08593818
	.word	sub_81052A4
	.globl	gBattleAnimSpriteTemplate_8593898
	.align	2, 0
	.type	 gBattleAnimSpriteTemplate_8593898,object
	.size	 gBattleAnimSpriteTemplate_8593898,24
gBattleAnimSpriteTemplate_8593898:
	.short	0x27db
	.short	0x27db
	.word	gUnknown_08524AFC
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08593810
	.word	sub_81054E8
	.globl	gUnknown_085938B0
	.align	2, 0
	.type	 gUnknown_085938B0,object
gUnknown_085938B0:
	.short	0x60
	.short	-0xd
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_085938B0,16
	.globl	gUnknown_085938C0
	.align	2, 0
	.type	 gUnknown_085938C0,object
gUnknown_085938C0:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x4
	.byte	0x3
	.space	1
	.short	0x8
	.byte	0x3
	.space	1
	.short	0x4
	.byte	0x3
	.space	1
	.short	0x0
	.byte	0x3
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085938C0,24
	.globl	gUnknown_085938D8
	.align	2, 0
	.type	 gUnknown_085938D8,object
gUnknown_085938D8:
	.word	gUnknown_085938C0
	.size	 gUnknown_085938D8,4
	.globl	gUnknown_085938DC
	.align	2, 0
	.type	 gUnknown_085938DC,object
	.size	 gUnknown_085938DC,24
gUnknown_085938DC:
	.short	0x27df
	.short	0x27df
	.word	gUnknown_0852490C
	.word	gUnknown_085938D8
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8105C48
	.globl	gUnknown_085938F4
	.type	 gUnknown_085938F4,object
gUnknown_085938F4:
	.byte	0x1e
	.byte	0x1c
	.byte	-0x14
	.byte	0x18
	.byte	0x10
	.byte	0x1a
	.byte	-0xa
	.byte	0x1c
	.size	 gUnknown_085938F4,8
	.globl	gUnknown_085938FC
	.align	2, 0
	.type	 gUnknown_085938FC,object
gUnknown_085938FC:
	.short	0x0
	.byte	0x6
	.space	1
	.short	0x10
	.byte	0x6
	.space	1
	.short	0x20
	.byte	0xf
	.space	1
	.short	0x10
	.byte	0x6
	.space	1
	.short	0x0
	.byte	0x6
	.space	1
	.short	0x10
	.byte	0x46
	.space	1
	.short	0x20
	.byte	0x4f
	.space	1
	.short	0x10
	.byte	0x46
	.space	1
	.short	0x0
	.byte	0x6
	.space	1
	.short	0x10
	.byte	0x6
	.space	1
	.short	0x20
	.byte	0xf
	.space	1
	.short	0x10
	.byte	0x6
	.space	1
	.short	0x0
	.byte	0x6
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085938FC,56
	.globl	gUnknown_08593934
	.align	2, 0
	.type	 gUnknown_08593934,object
gUnknown_08593934:
	.word	gUnknown_085938FC
	.size	 gUnknown_08593934,4
	.globl	gUnknown_08593938
	.align	2, 0
	.type	 gUnknown_08593938,object
	.size	 gUnknown_08593938,24
gUnknown_08593938:
	.short	0x27dd
	.short	0x27dd
	.word	gUnknown_08524914
	.word	gUnknown_08593934
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_80A77C8
	.globl	gUnknown_08593950
	.align	1, 0
	.type	 gUnknown_08593950,object
gUnknown_08593950:
	.short	0x27de
	.short	0x270f
	.short	0x270e
	.size	 gUnknown_08593950,6
	.globl	gUnknown_08593958
	.align	2, 0
	.type	 gUnknown_08593958,object
	.size	 gUnknown_08593958,24
gUnknown_08593958:
	.short	0x27de
	.short	0x27de
	.word	gUnknown_0852490C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8105DE8
	.globl	gMagentaHeartSpriteTemplate
	.align	2, 0
	.type	 gMagentaHeartSpriteTemplate,object
	.size	 gMagentaHeartSpriteTemplate,24
gMagentaHeartSpriteTemplate:
	.short	0x27e2
	.short	0x27e2
	.word	gUnknown_0852490C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8105E60
	.globl	gUnknown_08593988
	.align	2, 0
	.type	 gUnknown_08593988,object
gUnknown_08593988:
	.short	0xa
	.short	-0xd
	.byte	0x0
	.byte	0xa
	.space	2
	.short	-0xa
	.short	0xd
	.byte	0x0
	.byte	0xa
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08593988,24
	.globl	gUnknown_085939A0
	.align	2, 0
	.type	 gUnknown_085939A0,object
	.size	 gUnknown_085939A0,24
gUnknown_085939A0:
	.short	0x27e8
	.short	0x27e8
	.word	gUnknown_0852490C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8106140
	.globl	gBattleAnimSpriteTemplate_85939B8
	.align	2, 0
	.type	 gBattleAnimSpriteTemplate_85939B8,object
	.size	 gBattleAnimSpriteTemplate_85939B8,24
gBattleAnimSpriteTemplate_85939B8:
	.short	0x27e8
	.short	0x27e8
	.word	gUnknown_0852490C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_81061C4
	.globl	gUnknown_085939D0
	.align	2, 0
	.type	 gUnknown_085939D0,object
	.size	 gUnknown_085939D0,24
gUnknown_085939D0:
	.short	0x27e8
	.short	0x27e8
	.word	gUnknown_0852490C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810624C
	.globl	gUnknown_085939E8
	.align	2, 0
	.type	 gUnknown_085939E8,object
gUnknown_085939E8:
	.short	0x80
	.short	0x80
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gUnknown_085939E8,24
	.globl	gUnknown_08593A00
	.align	2, 0
	.type	 gUnknown_08593A00,object
gUnknown_08593A00:
	.word	gUnknown_085939E8
	.size	 gUnknown_08593A00,4
	.globl	gHiddenPowerOrbSpriteTemplate
	.align	2, 0
	.type	 gHiddenPowerOrbSpriteTemplate,object
	.size	 gHiddenPowerOrbSpriteTemplate,24
gHiddenPowerOrbSpriteTemplate:
	.short	0x27e9
	.short	0x27e9
	.word	gUnknown_0852496C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08593A00
	.word	AnimOrbitFast
	.globl	gHiddenPowerOrbScatterSpriteTemplate
	.align	2, 0
	.type	 gHiddenPowerOrbScatterSpriteTemplate,object
	.size	 gHiddenPowerOrbScatterSpriteTemplate,24
gHiddenPowerOrbScatterSpriteTemplate:
	.short	0x27e9
	.short	0x27e9
	.word	gUnknown_085249CC
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08593A00
	.word	AnimOrbitScatter
	.globl	gUnknown_08593A34
	.align	2, 0
	.type	 gUnknown_08593A34,object
gUnknown_08593A34:
	.short	0x80
	.short	0x80
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gUnknown_08593A34,24
	.globl	gUnknown_08593A4C
	.align	2, 0
	.type	 gUnknown_08593A4C,object
gUnknown_08593A4C:
	.word	gUnknown_08593A34
	.size	 gUnknown_08593A4C,4
	.globl	gUnknown_08593A50
	.align	2, 0
	.type	 gUnknown_08593A50,object
	.size	 gUnknown_08593A50,24
gUnknown_08593A50:
	.short	0x27fd
	.short	0x27fd
	.word	gUnknown_085249C4
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08593A4C
	.word	sub_8106944
	.globl	gUnknown_08593A68
	.align	2, 0
	.type	 gUnknown_08593A68,object
gUnknown_08593A68:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x4
	.byte	0x4
	.space	1
	.short	0x8
	.byte	0x4
	.space	1
	.short	0x4
	.byte	0x4
	.space	1
	.short	0x0
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08593A68,24
	.globl	gUnknown_08593A80
	.align	2, 0
	.type	 gUnknown_08593A80,object
gUnknown_08593A80:
	.word	gUnknown_08593A68
	.size	 gUnknown_08593A80,4
	.globl	gUnknown_08593A84
	.align	2, 0
	.type	 gUnknown_08593A84,object
	.size	 gUnknown_08593A84,24
gUnknown_08593A84:
	.short	0x27ea
	.short	0x27ea
	.word	gUnknown_0852490C
	.word	gUnknown_08593A80
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_81069B8
	.globl	gUnknown_08593A9C
	.align	2, 0
	.type	 gUnknown_08593A9C,object
gUnknown_08593A9C:
	.short	0x0
	.byte	0x18
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08593A9C,8
	.globl	gUnknown_08593AA4
	.align	2, 0
	.type	 gUnknown_08593AA4,object
gUnknown_08593AA4:
	.word	gUnknown_08593A9C
	.size	 gUnknown_08593AA4,4
	.globl	gUnknown_08593AA8
	.align	2, 0
	.type	 gUnknown_08593AA8,object
	.size	 gUnknown_08593AA8,24
gUnknown_08593AA8:
	.short	0x27ec
	.short	0x27ec
	.word	gUnknown_08524914
	.word	gUnknown_08593AA4
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_81069D0
	.globl	gUnknown_08593AC0
	.align	2, 0
	.type	 gUnknown_08593AC0,object
	.size	 gUnknown_08593AC0,24
gUnknown_08593AC0:
	.short	0x27eb
	.short	0x27eb
	.word	gUnknown_0852490C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8106AD0
	.globl	gUnknown_08593AD8
	.align	2, 0
	.type	 gUnknown_08593AD8,object
gUnknown_08593AD8:
	.short	0x0
	.byte	0x3
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_08593AD8,8
	.globl	gUnknown_08593AE0
	.align	2, 0
	.type	 gUnknown_08593AE0,object
gUnknown_08593AE0:
	.short	0x10
	.byte	0x3
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_08593AE0,8
	.globl	gUnknown_08593AE8
	.align	2, 0
	.type	 gUnknown_08593AE8,object
gUnknown_08593AE8:
	.word	gUnknown_08593AD8
	.word	gUnknown_08593AE0
	.size	 gUnknown_08593AE8,8
	.globl	gUnknown_08593AF0
	.align	2, 0
	.type	 gUnknown_08593AF0,object
	.size	 gUnknown_08593AF0,24
gUnknown_08593AF0:
	.short	0x27ed
	.short	0x27ed
	.word	gUnknown_08524914
	.word	gUnknown_08593AE8
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8106B54
	.globl	gUnknown_08593B08
	.align	2, 0
	.type	 gUnknown_08593B08,object
gUnknown_08593B08:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x30
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08593B08,20
	.globl	gUnknown_08593B1C
	.align	2, 0
	.type	 gUnknown_08593B1C,object
gUnknown_08593B1C:
	.short	0x0
	.byte	0x44
	.space	1
	.short	0x10
	.byte	0x44
	.space	1
	.short	0x20
	.byte	0x44
	.space	1
	.short	0x30
	.byte	0x44
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08593B1C,20
	.globl	gUnknown_08593B30
	.align	2, 0
	.type	 gUnknown_08593B30,object
gUnknown_08593B30:
	.word	gUnknown_08593B08
	.word	gUnknown_08593B1C
	.size	 gUnknown_08593B30,8
	.globl	gUnknown_08593B38
	.align	2, 0
	.type	 gUnknown_08593B38,object
	.size	 gUnknown_08593B38,24
gUnknown_08593B38:
	.short	0x27ee
	.short	0x27ee
	.word	gUnknown_08524914
	.word	gUnknown_08593B30
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8106C80
	.globl	gUnknown_08593B50
	.align	2, 0
	.type	 gUnknown_08593B50,object
gUnknown_08593B50:
	.short	0x0
	.byte	0x8
	.space	1
	.short	0x10
	.byte	0x8
	.space	1
	.short	0x20
	.byte	0x8
	.space	1
	.short	0x10
	.byte	0x8
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08593B50,20
	.globl	gUnknown_08593B64
	.align	2, 0
	.type	 gUnknown_08593B64,object
gUnknown_08593B64:
	.short	0x10
	.byte	0x48
	.space	1
	.short	0x20
	.byte	0x48
	.space	1
	.short	0x10
	.byte	0x48
	.space	1
	.short	0x0
	.byte	0x48
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08593B64,20
	.globl	gUnknown_08593B78
	.align	2, 0
	.type	 gUnknown_08593B78,object
gUnknown_08593B78:
	.word	gUnknown_08593B50
	.word	gUnknown_08593B64
	.size	 gUnknown_08593B78,8
	.globl	gUnknown_08593B80
	.align	2, 0
	.type	 gUnknown_08593B80,object
	.size	 gUnknown_08593B80,24
gUnknown_08593B80:
	.short	0x27e7
	.short	0x27e7
	.word	gUnknown_08524914
	.word	gUnknown_08593B78
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8106CD0
	.globl	gUnknown_08593B98
	.align	2, 0
	.type	 gUnknown_08593B98,object
gUnknown_08593B98:
	.short	-0xc
	.short	0x8
	.byte	0x0
	.byte	0x4
	.space	2
	.short	0x14
	.short	-0x14
	.byte	0x0
	.byte	0x4
	.space	2
	.short	-0x8
	.short	0xc
	.byte	0x0
	.byte	0x4
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08593B98,32
	.globl	gBattleAnimSpriteTemplate_8593BB8
	.align	2, 0
	.type	 gBattleAnimSpriteTemplate_8593BB8,object
	.size	 gBattleAnimSpriteTemplate_8593BB8,24
gBattleAnimSpriteTemplate_8593BB8:
	.short	0x27f1
	.short	0x27f1
	.word	gUnknown_08524914
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8106E00
	.globl	gUnknown_08593BD0
	.align	2, 0
	.type	 gUnknown_08593BD0,object
gUnknown_08593BD0:
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08593BD0,16
	.globl	gUnknown_08593BE0
	.align	2, 0
	.type	 gUnknown_08593BE0,object
gUnknown_08593BE0:
	.short	0x0
	.short	0x0
	.byte	0xf8
	.byte	0x10
	.space	2
	.short	0x7fff
	.short	0x1
	.space	4
	.size	 gUnknown_08593BE0,16
	.globl	gUnknown_08593BF0
	.align	2, 0
	.type	 gUnknown_08593BF0,object
gUnknown_08593BF0:
	.short	0x0
	.short	0x0
	.byte	0x8
	.byte	0x10
	.space	2
	.short	0x7fff
	.short	0x1
	.space	4
	.size	 gUnknown_08593BF0,16
	.globl	gUnknown_08593C00
	.align	2, 0
	.type	 gUnknown_08593C00,object
gUnknown_08593C00:
	.word	gUnknown_08593BD0
	.word	gUnknown_08593BE0
	.word	gUnknown_08593BF0
	.size	 gUnknown_08593C00,12
	.globl	gUnknown_08593C0C
	.align	2, 0
	.type	 gUnknown_08593C0C,object
	.size	 gUnknown_08593C0C,24
gUnknown_08593C0C:
	.short	0x27de
	.short	0x27de
	.word	gUnknown_0852496C
	.word	gUnknown_08592FCC
	.word	0x0
	.word	gUnknown_08593C00
	.word	sub_8106F60
	.globl	gUnknown_08593C24
	.align	2, 0
	.type	 gUnknown_08593C24,object
	.size	 gUnknown_08593C24,24
gUnknown_08593C24:
	.short	0x27de
	.short	0x27de
	.word	gUnknown_0852496C
	.word	gUnknown_08592FCC
	.word	0x0
	.word	gUnknown_08593C00
	.word	sub_8106F00
	.globl	gUnknown_08593C3C
	.align	2, 0
	.type	 gUnknown_08593C3C,object
gUnknown_08593C3C:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08593C3C,16
	.globl	gUnknown_08593C4C
	.align	2, 0
	.type	 gUnknown_08593C4C,object
gUnknown_08593C4C:
	.short	0x200
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08593C4C,16
	.globl	gUnknown_08593C5C
	.align	2, 0
	.type	 gUnknown_08593C5C,object
gUnknown_08593C5C:
	.word	gUnknown_08593C3C
	.word	gUnknown_08593C4C
	.size	 gUnknown_08593C5C,8
	.globl	gUnknown_08593C64
	.align	2, 0
	.type	 gUnknown_08593C64,object
	.size	 gUnknown_08593C64,24
gUnknown_08593C64:
	.short	0x2804
	.short	0x2804
	.word	gUnknown_08524B1C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08593C5C
	.word	sub_81070AC
.text
	.align	2, 0
	.globl	sub_8103448
	.type	 sub_8103448,function
	.thumb_func
sub_8103448:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r5, .L3
	mov	r0, #0x0
	ldrsh	r1, [r5, r0]
	add	r0, r4, #0
	bl	SetAnimSpriteInitialXOffset
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r5, #0xa]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x36]
	ldr	r1, .L3+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r1, .L3+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	gBattleAnimArgs
	.word	DestroySpriteAndMatrix
	.word	TranslateSpriteInEllipseOverDuration
.Lfe1:
	.size	 sub_8103448,.Lfe1-sub_8103448
	.align	2, 0
	.globl	sub_8103498
	.type	 sub_8103498,function
	.thumb_func
sub_8103498:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L9
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L6	@cond_branch
	ldr	r0, .L9+0x4
	b	.L8
.L10:
	.align	2, 0
.L9:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L6:
	ldr	r0, .L11
.L8:
	ldrb	r0, [r0]
	add	r1, r4, #0
	bl	sub_810310C
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	strh	r0, [r4, #0x30]
	ldr	r0, .L11+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L12:
	.align	2, 0
.L11:
	.word	gBattleAnimTarget
	.word	sub_81034D8
.Lfe2:
	.size	 sub_8103498,.Lfe2-sub_8103498
	.align	2, 0
	.type	 sub_81034D8,function
	.thumb_func
sub_81034D8:
	push	{lr}
	add	r1, r0, #0
	mov	r2, #0x2e
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x1
	beq	.L17	@cond_branch
	cmp	r0, #0x1
	bgt	.L23	@cond_branch
	cmp	r0, #0
	beq	.L15	@cond_branch
	b	.L14
.L23:
	cmp	r0, #0x2
	beq	.L19	@cond_branch
	b	.L14
.L15:
	ldrh	r0, [r1, #0x26]
	sub	r0, r0, #0x3
	strh	r0, [r1, #0x26]
	ldrh	r0, [r1, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	bne	.L14	@cond_branch
	b	.L24
.L17:
	ldrh	r0, [r1, #0x26]
	add	r0, r0, #0x3
	strh	r0, [r1, #0x26]
	ldrh	r0, [r1, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L14	@cond_branch
.L24:
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x2e]
	b	.L14
.L19:
	ldrh	r0, [r1, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x40
	bne	.L14	@cond_branch
	add	r0, r1, #0
	bl	DestroyAnimSprite
.L14:
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 sub_81034D8,.Lfe3-sub_81034D8
	.align	2, 0
	.type	 sub_810353C,function
	.thumb_func
sub_810353C:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r3, .L27
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r4, #0x30]
	ldrh	r2, [r0, #0x24]
	add	r1, r1, r2
	strh	r1, [r0, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	neg	r0, r0
	strh	r0, [r4, #0x30]
	mov	r0, #0x2e
	ldrsh	r2, [r4, r0]
	cmp	r2, #0
	bne	.L26	@cond_branch
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r2, [r0, #0x24]
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
.L26:
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	pop	{r4}
	pop	{r0}
	bx	r0
.L28:
	.align	2, 0
.L27:
	.word	gSprites
.Lfe4:
	.size	 sub_810353C,.Lfe4-sub_810353C
	.align	2, 0
	.globl	sub_810358C
	.type	 sub_810358C,function
	.thumb_func
sub_810358C:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r4, .L32
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r1, .L32+0x4
	ldr	r0, .L32+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r6, [r0]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L30	@cond_branch
	ldr	r0, .L32+0xc
	ldrh	r1, [r5, #0x20]
	ldrh	r2, [r0]
	sub	r1, r1, r2
	strh	r1, [r5, #0x20]
	add	r1, r0, #0
	b	.L31
.L33:
	.align	2, 0
.L32:
	.word	gBattleAnimAttacker
	.word	gBattlerSpriteIds
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L30:
	ldr	r1, .L34
	ldrh	r0, [r1]
	ldrh	r2, [r5, #0x20]
	add	r0, r0, r2
	strh	r0, [r5, #0x20]
.L31:
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r5, #0x22]
	add	r0, r0, r2
	strh	r0, [r5, #0x22]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r5, #0x30]
	strh	r6, [r5, #0x32]
	ldr	r0, .L34+0x4
	str	r0, [r5, #0x1c]
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L35:
	.align	2, 0
.L34:
	.word	gBattleAnimArgs
	.word	sub_810353C
.Lfe5:
	.size	 sub_810358C,.Lfe5-sub_810358C
	.align	2, 0
	.globl	sub_8103620
	.type	 sub_8103620,function
	.thumb_func
sub_8103620:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r1, .L37
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x38]
	ldr	r0, .L37+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L37+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4}
	pop	{r0}
	bx	r0
.L38:
	.align	2, 0
.L37:
	.word	gBattleAnimArgs
	.word	WaitAnimForDuration
	.word	sub_8103658
.Lfe6:
	.size	 sub_8103620,.Lfe6-sub_8103620
	.align	2, 0
	.type	 sub_8103658,function
	.thumb_func
sub_8103658:
	push	{lr}
	ldrh	r1, [r0, #0x30]
	strh	r1, [r0, #0x2e]
	ldrh	r1, [r0, #0x20]
	strh	r1, [r0, #0x32]
	ldrh	r1, [r0, #0x22]
	add	r1, r1, #0xf
	strh	r1, [r0, #0x36]
	ldr	r1, .L40
	str	r1, [r0, #0x1c]
	ldr	r1, .L40+0x4
	bl	StoreSpriteCallbackInData6
	pop	{r0}
	bx	r0
.L41:
	.align	2, 0
.L40:
	.word	StartAnimLinearTranslation
	.word	sub_8103680
.Lfe7:
	.size	 sub_8103658,.Lfe7-sub_8103658
	.align	2, 0
	.type	 sub_8103680,function
	.thumb_func
sub_8103680:
	push	{lr}
	add	r1, r0, #0
	ldrh	r2, [r1, #0x38]
	mov	r3, #0x38
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	bne	.L43	@cond_branch
	add	r0, r1, #0
	bl	DestroyAnimSprite
	b	.L44
.L43:
	sub	r0, r2, #0x1
	strh	r0, [r1, #0x38]
.L44:
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 sub_8103680,.Lfe8-sub_8103680
	.align	2, 0
	.globl	AnimTask_Withdraw
	.type	 AnimTask_Withdraw,function
	.thumb_func
AnimTask_Withdraw:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L46
	ldr	r0, .L46+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	ldr	r1, .L46+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L46+0xc
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L47:
	.align	2, 0
.L46:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gTasks
	.word	AnimTask_WithdrawStep
.Lfe9:
	.size	 AnimTask_Withdraw,.Lfe9-AnimTask_Withdraw
	.align	2, 0
	.type	 AnimTask_WithdrawStep,function
	.thumb_func
AnimTask_WithdrawStep:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L62
	ldr	r0, .L62+0x4
	ldrb	r0, [r0]
	add	r1, r0, r1
	ldrb	r4, [r1]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L49	@cond_branch
	ldr	r1, .L62+0x8
	lsl	r2, r5, #0x2
	add	r0, r2, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x8]
	neg	r0, r0
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	add	r6, r2, #0
	b	.L50
.L63:
	.align	2, 0
.L62:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gTasks
.L49:
	ldr	r2, .L64
	lsl	r1, r5, #0x2
	add	r0, r1, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r3, [r0, #0x8]
	add	r6, r1, #0
.L50:
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r4, #0
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldr	r1, .L64
	add	r0, r6, r5
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	mov	r2, #0xa
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L51	@cond_branch
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0xb0
	strh	r0, [r1, #0x8]
	ldr	r1, .L64+0x4
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0, #0x26]
	add	r1, r1, #0x1
	b	.L60
.L65:
	.align	2, 0
.L64:
	.word	gTasks
	.word	gSprites
.L51:
	cmp	r0, #0x1
	bne	.L53	@cond_branch
	ldrh	r0, [r1, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r1, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1e
	bne	.L48	@cond_branch
	mov	r0, #0x2
	b	.L61
.L53:
	ldrh	r0, [r1, #0x8]
	sub	r0, r0, #0xb0
	strh	r0, [r1, #0x8]
	ldr	r1, .L66
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0, #0x26]
	sub	r1, r1, #0x1
.L60:
	strh	r1, [r0, #0x26]
	add	r0, r4, #0
	bl	SetBattlerSpriteYOffsetFromRotation
	ldr	r0, .L66+0x4
	add	r1, r6, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r3, #0x8
	ldrsh	r2, [r1, r3]
	mov	r0, #0xf2
	lsl	r0, r0, #0x4
	cmp	r2, r0
	beq	.L57	@cond_branch
	cmp	r2, #0
	bne	.L48	@cond_branch
.L57:
	ldrh	r2, [r1, #0xa]
	mov	r3, #0xa
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x2
	bne	.L58	@cond_branch
	add	r0, r4, #0
	bl	ResetSpriteRotScale
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	b	.L48
.L67:
	.align	2, 0
.L66:
	.word	gSprites
	.word	gTasks
.L58:
	add	r0, r2, #0x1
.L61:
	strh	r0, [r1, #0xa]
.L48:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 AnimTask_WithdrawStep,.Lfe10-AnimTask_WithdrawStep
	.align	2, 0
	.globl	Anim_KinesisZapEnergy
	.type	 Anim_KinesisZapEnergy,function
	.thumb_func
Anim_KinesisZapEnergy:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r0, .L75
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L69	@cond_branch
	ldr	r0, .L75+0x4
	ldrh	r1, [r4, #0x20]
	ldrh	r2, [r0]
	sub	r1, r1, r2
	strh	r1, [r4, #0x20]
	add	r5, r0, #0
	b	.L70
.L76:
	.align	2, 0
.L75:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L69:
	ldr	r1, .L77
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	add	r5, r1, #0
.L70:
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldr	r0, .L77+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L71	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3f
	ldrb	r0, [r3]
	mov	r1, #0x1
	add	r2, r0, #0
	orr	r2, r2, r1
	strb	r2, [r3]
	mov	r1, #0x4
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L73	@cond_branch
	mov	r0, #0x2
	orr	r2, r2, r0
	strb	r2, [r3]
	b	.L73
.L78:
	.align	2, 0
.L77:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L71:
	mov	r2, #0x4
	ldrsh	r0, [r5, r2]
	cmp	r0, #0
	beq	.L73	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3f
	ldrb	r0, [r2]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2]
.L73:
	ldr	r0, .L79
	str	r0, [r4, #0x1c]
	ldr	r1, .L79+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L80:
	.align	2, 0
.L79:
	.word	RunStoredCallbackWhenAnimEnds
	.word	DestroyAnimSprite
.Lfe11:
	.size	 Anim_KinesisZapEnergy,.Lfe11-Anim_KinesisZapEnergy
	.align	2, 0
	.globl	Anim_SwordsDanceBlade
	.type	 Anim_SwordsDanceBlade,function
	.thumb_func
Anim_SwordsDanceBlade:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L82
	str	r0, [r4, #0x1c]
	ldr	r1, .L82+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4}
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	RunStoredCallbackWhenAffineAnimEnds
	.word	Anim_SwordsDanceBladeStep
.Lfe12:
	.size	 Anim_SwordsDanceBlade,.Lfe12-Anim_SwordsDanceBlade
	.align	2, 0
	.type	 Anim_SwordsDanceBladeStep,function
	.thumb_func
Anim_SwordsDanceBladeStep:
	push	{lr}
	mov	r1, #0x6
	strh	r1, [r0, #0x2e]
	ldrh	r1, [r0, #0x20]
	strh	r1, [r0, #0x32]
	ldrh	r1, [r0, #0x22]
	sub	r1, r1, #0x20
	strh	r1, [r0, #0x36]
	ldr	r1, .L85
	str	r1, [r0, #0x1c]
	ldr	r1, .L85+0x4
	bl	StoreSpriteCallbackInData6
	pop	{r0}
	bx	r0
.L86:
	.align	2, 0
.L85:
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe13:
	.size	 Anim_SwordsDanceBladeStep,.Lfe13-Anim_SwordsDanceBladeStep
	.align	2, 0
	.globl	AnimSonicBoomProjectile
	.type	 AnimSonicBoomProjectile,function
	.thumb_func
AnimSonicBoomProjectile:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L88	@cond_branch
	ldr	r1, .L92
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
	b	.L89
.L93:
	.align	2, 0
.L92:
	.word	gBattleAnimArgs
.L88:
	ldr	r0, .L94
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L89	@cond_branch
	ldr	r1, .L94+0x4
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
	ldrh	r0, [r1, #0x6]
	neg	r0, r0
	strh	r0, [r1, #0x6]
.L89:
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r4, .L94+0x8
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r6, .L94+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x4]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r2, [r6, #0x6]
	add	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r7, r0, #0
	ldrh	r1, [r5, #0x20]
	mov	r2, r8
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r2, [r5, #0x22]
	lsl	r1, r7, #0x10
	asr	r1, r1, #0x10
	sub	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	ArcTan2Neg
	lsl	r0, r0, #0x10
	mov	r1, #0xf0
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r4, r0, #0x10
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L91	@cond_branch
	ldr	r2, .L94+0xc
	add	r0, r4, r2
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L91:
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	str	r4, [sp]
	add	r0, r5, #0
	mov	r1, #0x0
	add	r2, r3, #0
	bl	TrySetSpriteRotScale
	ldrh	r0, [r6, #0x8]
	strh	r0, [r5, #0x2e]
	mov	r0, r8
	strh	r0, [r5, #0x32]
	strh	r7, [r5, #0x36]
	ldr	r0, .L94+0x10
	str	r0, [r5, #0x1c]
	ldr	r1, .L94+0x14
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L95:
	.align	2, 0
.L94:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	-0x6000
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe14:
	.size	 AnimSonicBoomProjectile,.Lfe14-AnimSonicBoomProjectile
	.align	2, 0
	.type	 sub_81039CC,function
	.thumb_func
sub_81039CC:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x2e]
	sub	r1, r0, #0x1
	strh	r1, [r3, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L97	@cond_branch
	ldr	r2, .L98
	mov	r0, #0x3c
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0xa]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0xa]
	add	r0, r3, #0
	bl	DestroySprite
.L97:
	pop	{r0}
	bx	r0
.L99:
	.align	2, 0
.L98:
	.word	gTasks
.Lfe15:
	.size	 sub_81039CC,.Lfe15-sub_81039CC
	.align	2, 0
	.type	 sub_8103A00,function
	.thumb_func
sub_8103A00:
	push	{r4, lr}
	add	r2, r0, #0
	mov	r0, #0x3c
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L111
	add	r4, r0, r1
	mov	r3, #0x2e
	ldrsh	r1, [r2, r3]
	mov	r3, #0x12
	ldrsh	r0, [r4, r3]
	cmp	r1, r0
	ble	.L101	@cond_branch
	ldrh	r0, [r2, #0x34]
	ldrh	r1, [r2, #0x38]
	add	r0, r0, r1
	strh	r0, [r2, #0x38]
	ldrh	r0, [r2, #0x36]
	ldrh	r3, [r2, #0x3a]
	add	r0, r0, r3
	b	.L108
.L112:
	.align	2, 0
.L111:
	.word	gTasks
.L101:
	ldrh	r0, [r2, #0x38]
	ldrh	r1, [r2, #0x34]
	sub	r0, r0, r1
	strh	r0, [r2, #0x38]
	ldrh	r0, [r2, #0x3a]
	ldrh	r1, [r2, #0x36]
	sub	r0, r0, r1
.L108:
	strh	r0, [r2, #0x3a]
	ldrh	r0, [r2, #0x38]
	ldrh	r1, [r2, #0x30]
	add	r3, r0, r1
	strh	r3, [r2, #0x30]
	ldrh	r0, [r2, #0x3a]
	ldrh	r1, [r2, #0x32]
	add	r0, r0, r1
	strh	r0, [r2, #0x32]
	ldrh	r1, [r4, #0x16]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L103	@cond_branch
	lsl	r0, r3, #0x10
	lsr	r0, r0, #0x18
	neg	r0, r0
	b	.L109
.L103:
	lsl	r0, r3, #0x10
	lsr	r0, r0, #0x18
.L109:
	strh	r0, [r2, #0x24]
	ldrh	r1, [r4, #0x18]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L105	@cond_branch
	ldrh	r0, [r2, #0x32]
	lsr	r0, r0, #0x8
	neg	r0, r0
	b	.L110
.L105:
	ldrh	r0, [r2, #0x32]
	lsr	r0, r0, #0x8
.L110:
	strh	r0, [r2, #0x26]
	ldrh	r0, [r2, #0x2e]
	sub	r1, r0, #0x1
	strh	r1, [r2, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L107	@cond_branch
	mov	r0, #0x1e
	strh	r0, [r2, #0x2e]
	ldr	r0, .L113
	str	r0, [r2, #0x1c]
.L107:
	pop	{r4}
	pop	{r0}
	bx	r0
.L114:
	.align	2, 0
.L113:
	.word	sub_81039CC
.Lfe16:
	.size	 sub_8103A00,.Lfe16-sub_8103A00
	.align	2, 0
	.globl	sub_8103AA4
	.type	 sub_8103AA4,function
	.thumb_func
sub_8103AA4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r0, #0
	mov	r0, #0x3c
	ldrsh	r1, [r7, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L129
	add	r6, r0, r1
	ldrh	r2, [r6, #0x16]
	mov	r1, #0x2
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r2
	ldrh	r3, [r7, #0x30]
	add	r2, r0, r3
	strh	r2, [r7, #0x30]
	ldrh	r0, [r6, #0x18]
	and	r1, r1, r0
	ldrh	r0, [r7, #0x32]
	add	r1, r1, r0
	strh	r1, [r7, #0x32]
	ldrh	r1, [r6, #0x16]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L116	@cond_branch
	lsl	r0, r2, #0x10
	lsr	r0, r0, #0x18
	neg	r0, r0
	b	.L125
.L130:
	.align	2, 0
.L129:
	.word	gTasks
.L116:
	lsl	r0, r2, #0x10
	lsr	r0, r0, #0x18
.L125:
	strh	r0, [r7, #0x24]
	ldrh	r1, [r6, #0x18]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L118	@cond_branch
	ldrh	r0, [r7, #0x32]
	lsr	r0, r0, #0x8
	neg	r0, r0
	b	.L126
.L118:
	ldrh	r0, [r7, #0x32]
	lsr	r0, r0, #0x8
.L126:
	strh	r0, [r7, #0x26]
	ldrh	r0, [r7, #0x2e]
	sub	r1, r0, #0x1
	strh	r1, [r7, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L120	@cond_branch
	mov	r4, #0x0
	mov	r0, #0x8
	strh	r0, [r7, #0x2e]
	mov	r0, #0x4
	strh	r0, [r6, #0x12]
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	bl	sub_8151624
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldrh	r0, [r7, #0x24]
	ldrh	r1, [r7, #0x20]
	add	r2, r0, r1
	strh	r2, [r7, #0x20]
	ldrh	r0, [r7, #0x26]
	ldrh	r3, [r7, #0x22]
	add	r0, r0, r3
	strh	r0, [r7, #0x22]
	strh	r4, [r7, #0x26]
	strh	r4, [r7, #0x24]
	ldrh	r3, [r6, #0x1e]
	mov	r0, #0x1e
	ldrsh	r1, [r6, r0]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	cmp	r1, r0
	blt	.L121	@cond_branch
	sub	r0, r3, r2
	b	.L127
.L121:
	sub	r0, r2, r3
.L127:
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x10
	ldrh	r3, [r6, #0x20]
	mov	r0, #0x20
	ldrsh	r1, [r6, r0]
	ldrh	r2, [r7, #0x22]
	mov	r6, #0x22
	ldrsh	r0, [r7, r6]
	cmp	r1, r0
	blt	.L123	@cond_branch
	sub	r0, r3, r2
	b	.L128
.L123:
	sub	r0, r2, r3
.L128:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x10
	mov	r8, r0
	mov	r0, #0x0
	strh	r0, [r7, #0x32]
	strh	r0, [r7, #0x30]
	strh	r0, [r7, #0x3a]
	strh	r0, [r7, #0x38]
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	add	r1, r5, #0
	bl	sub_8151534
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r6, #0xe0
	lsl	r6, r6, #0x1
	add	r0, r6, #0
	bl	sub_8151624
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	sub_8151534
	strh	r0, [r7, #0x34]
	mov	r1, r8
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	add	r1, r5, #0
	bl	sub_8151534
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	add	r0, r6, #0
	bl	sub_8151624
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	sub_8151534
	strh	r0, [r7, #0x36]
	ldr	r0, .L131
	str	r0, [r7, #0x1c]
.L120:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L132:
	.align	2, 0
.L131:
	.word	sub_8103A00
.Lfe17:
	.size	 sub_8103AA4,.Lfe17-sub_8103AA4
	.align	2, 0
	.type	 sub_8103BE4,function
	.thumb_func
sub_8103BE4:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L135
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0xa
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L134	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L134:
	pop	{r0}
	bx	r0
.L136:
	.align	2, 0
.L135:
	.word	gTasks
.Lfe18:
	.size	 sub_8103BE4,.Lfe18-sub_8103BE4
	.align	2, 0
	.type	 sub_8103C0C,function
	.thumb_func
sub_8103C0C:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L145
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r0, [r5, #0x8]
	sub	r1, r0, #0x1
	strh	r1, [r5, #0x8]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L138	@cond_branch
	ldr	r0, .L145+0x4
	mov	r2, #0x1a
	ldrsh	r1, [r5, r2]
	mov	r3, #0x1c
	ldrsh	r2, [r5, r3]
	ldrb	r3, [r5, #0xc]
	ldrb	r4, [r5, #0xa]
	sub	r3, r3, r4
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	ip, r0
	lsl	r0, r0, #0x4
	add	r0, r0, ip
	lsl	r0, r0, #0x2
	ldr	r1, .L145+0x8
	add	r6, r0, r1
	mov	r1, #0x10
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L140	@cond_branch
	cmp	r0, #0x2
	beq	.L141	@cond_branch
	b	.L139
.L146:
	.align	2, 0
.L145:
	.word	gTasks
	.word	gUnknown_085933B0
	.word	gSprites
.L140:
	ldrb	r2, [r6, #0x3]
	lsl	r1, r2, #0x1a
	lsr	r1, r1, #0x1b
	mov	r0, #0x18
	orr	r1, r1, r0
	lsl	r1, r1, #0x1
	sub	r0, r0, #0x57
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r6, #0x3]
	b	.L139
.L141:
	ldrb	r0, [r6, #0x3]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x10
	orr	r1, r1, r0
	strb	r1, [r6, #0x3]
.L139:
	ldr	r3, .L147
	lsl	r2, r7, #0x2
	add	r2, r2, r7
	lsl	r2, r2, #0x3
	add	r4, r2, r3
	ldrh	r0, [r4, #0x12]
	ldrh	r1, [r4, #0x14]
	sub	r0, r0, r1
	strh	r0, [r6, #0x2e]
	strh	r7, [r6, #0x3c]
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	add	r0, r0, #0xd
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	add	r3, r3, #0x8
	add	r0, r0, r3
	mov	r2, ip
	strh	r2, [r0]
	ldrh	r0, [r4, #0xe]
	strh	r0, [r4, #0x8]
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	mov	r0, #0x3f
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x9a
	bl	PlaySE12WithPanning
	mov	r3, #0xa
	ldrsh	r0, [r4, r3]
	cmp	r0, #0x2
	ble	.L138	@cond_branch
	ldr	r0, .L147+0x4
	str	r0, [r4]
.L138:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L148:
	.align	2, 0
.L147:
	.word	gTasks
	.word	sub_8103BE4
.Lfe19:
	.size	 sub_8103C0C,.Lfe19-sub_8103C0C
	.align	2, 0
	.globl	sub_8103CF0
	.type	 sub_8103CF0,function
	.thumb_func
sub_8103CF0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x0
	mov	r9, r0
	mov	r5, #0x0
	mov	r0, sp
	mov	r1, r9
	strh	r1, [r0]
	mov	r4, sp
	add	r4, r4, #0x2
	strh	r1, [r4]
	bl	IsContest
	lsl	r0, r0, #0x18
	mov	sl, r4
	cmp	r0, #0
	beq	.L150	@cond_branch
	ldr	r1, .L173
	lsl	r2, r7, #0x2
	add	r0, r2, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x2
	strh	r1, [r0, #0x10]
	ldr	r3, .L173+0x4
	ldrh	r0, [r3]
	neg	r0, r0
	strh	r0, [r3]
	ldrh	r1, [r3, #0x4]
	mov	r0, #0x1
	and	r0, r0, r1
	mov	r8, r2
	cmp	r0, #0
	beq	.L151	@cond_branch
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strh	r0, [r3, #0x4]
	b	.L153
.L174:
	.align	2, 0
.L173:
	.word	gTasks
	.word	gBattleAnimArgs
.L151:
	mov	r0, #0x1
	orr	r0, r0, r1
	strh	r0, [r3, #0x4]
	b	.L153
.L150:
	ldr	r1, .L175
	ldr	r0, .L175+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r3, #0x1
	add	r0, r3, #0
	and	r0, r0, r1
	lsl	r2, r7, #0x2
	mov	r8, r2
	cmp	r0, #0
	bne	.L153	@cond_branch
	ldr	r1, .L175+0x8
	add	r0, r2, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r3, [r0, #0x10]
	ldr	r2, .L175+0xc
	ldrh	r0, [r2]
	neg	r0, r0
	strh	r0, [r2]
	ldrh	r0, [r2, #0x2]
	neg	r0, r0
	strh	r0, [r2, #0x2]
	ldrh	r1, [r2, #0x4]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L155	@cond_branch
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	b	.L170
.L176:
	.align	2, 0
.L175:
	.word	gBattlerPositions
	.word	gBattleAnimTarget
	.word	gTasks
	.word	gBattleAnimArgs
.L155:
	mov	r0, #0x1
	orr	r0, r0, r1
.L170:
	strh	r0, [r2, #0x4]
.L153:
	ldr	r5, .L177
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	ldr	r1, .L177+0x4
	mov	r3, r8
	add	r4, r3, r7
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x1a]
	add	r6, r0, #0
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x1c]
	mov	r9, r0
	ldr	r0, .L177+0x8
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L157	@cond_branch
	ldr	r4, .L177+0xc
	ldrb	r1, [r4]
	mov	r0, #0x2
	eor	r0, r0, r1
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L157	@cond_branch
	ldrb	r0, [r4]
	mov	r1, #0x0
	mov	r2, sp
	mov	r3, sl
	bl	SetAverageBattlerPositions
	b	.L158
.L178:
	.align	2, 0
.L177:
	.word	gBattleAnimAttacker
	.word	gTasks
	.word	gBattleTypeFlags
	.word	gBattleAnimTarget
.L157:
	mov	r5, sp
	ldr	r4, .L179
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, sl
	strh	r0, [r1]
.L158:
	mov	r4, sp
	ldr	r0, .L179+0x4
	mov	r2, r8
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, sp
	ldr	r3, .L179+0x8
	ldrh	r0, [r3]
	ldrh	r2, [r2]
	add	r0, r0, r2
	strh	r0, [r1, #0x1e]
	strh	r0, [r4]
	ldrh	r0, [r3, #0x2]
	mov	r3, sl
	ldrh	r3, [r3]
	add	r0, r0, r3
	strh	r0, [r1, #0x20]
	mov	r1, sl
	strh	r0, [r1]
	mov	r0, sp
	ldrh	r2, [r0]
	mov	r3, #0x0
	ldrsh	r0, [r0, r3]
	add	r1, r6, #0
	cmp	r0, r1
	blt	.L159	@cond_branch
	sub	r0, r2, r1
	b	.L171
.L180:
	.align	2, 0
.L179:
	.word	gBattleAnimTarget
	.word	gTasks
	.word	gBattleAnimArgs
.L159:
	sub	r0, r1, r2
.L171:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r4, r0, #0x10
	asr	r4, r4, #0x10
	ldr	r5, .L181
	ldrh	r1, [r5, #0x4]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	bl	sub_8151624
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	sub_8151534
	ldr	r2, .L181+0x4
	mov	r3, r8
	add	r1, r3, r7
	lsl	r1, r1, #0x3
	add	r6, r1, r2
	strh	r0, [r6, #0x12]
	mov	r1, #0x12
	ldrsh	r0, [r6, r1]
	mov	r1, #0x80
	bl	sub_8151534
	strh	r0, [r6, #0x14]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r6, #0x16]
	mov	r2, sl
	ldrh	r1, [r2]
	mov	r3, #0x0
	ldrsh	r0, [r2, r3]
	mov	r4, r9
	cmp	r0, r4
	blt	.L161	@cond_branch
	sub	r4, r1, r4
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r1, #0x12
	ldrsh	r0, [r6, r1]
	bl	sub_8151624
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	sub_8151534
	mov	r1, #0x2
	neg	r1, r1
	and	r1, r1, r0
	strh	r1, [r6, #0x18]
	b	.L162
.L182:
	.align	2, 0
.L181:
	.word	gBattleAnimArgs
	.word	gTasks
.L161:
	sub	r4, r4, r1
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r2, #0x12
	ldrsh	r0, [r6, r2]
	bl	sub_8151624
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	sub_8151534
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r6, #0x18]
.L162:
	ldr	r1, .L183
	mov	r3, r8
	add	r0, r3, r7
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldr	r4, .L183+0x4
	ldrh	r0, [r4, #0x6]
	strh	r0, [r5, #0xe]
	ldrh	r1, [r4, #0x8]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L163	@cond_branch
	mov	r0, #0x80
	eor	r0, r0, r1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3f
	ble	.L167	@cond_branch
	ldr	r0, .L183+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L183+0xc
	add	r1, r2, #0
	ldrh	r4, [r4, #0x8]
	add	r1, r1, r4
	add	r0, r0, r1
	b	.L172
.L184:
	.align	2, 0
.L183:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	0xffc0
.L163:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3f
	ble	.L167	@cond_branch
	ldr	r0, .L185
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L185+0x4
	add	r1, r3, #0
	ldrh	r4, [r4, #0x8]
	add	r1, r1, r4
	add	r0, r0, r1
	b	.L172
.L186:
	.align	2, 0
.L185:
	.word	gBattleAnimTarget
	.word	0xffc0
.L167:
	ldr	r0, .L187
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x8]
	sub	r0, r0, r1
.L172:
	strh	r0, [r5, #0xc]
	ldr	r0, .L187+0x4
	mov	r2, r8
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r3, #0xc
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x2
	bgt	.L169	@cond_branch
	mov	r0, #0x3
	strh	r0, [r1, #0xc]
.L169:
	ldr	r0, .L187+0x8
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L188:
	.align	2, 0
.L187:
	.word	gBattleAnimTarget
	.word	gTasks
	.word	sub_8103C0C
.Lfe20:
	.size	 sub_8103CF0,.Lfe20-sub_8103CF0
	.align	2, 0
	.globl	sub_8103FE8
	.type	 sub_8103FE8,function
	.thumb_func
sub_8103FE8:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L190
	ldrh	r0, [r0, #0x2]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	strh	r0, [r4, #0x2e]
	ldr	r0, .L190+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L191:
	.align	2, 0
.L190:
	.word	gUnknown_085934A0
	.word	sub_8104018
.Lfe21:
	.size	 sub_8103FE8,.Lfe21-sub_8103FE8
	.align	2, 0
	.type	 sub_8104018,function
	.thumb_func
sub_8104018:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L193	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r5, [r4, #0x2e]
	ldr	r1, .L200
	add	r0, r5, #0
	add	r0, r0, #0x8
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r7, [r0]
	add	r6, r1, #0
	add	r1, r5, #0
	add	r1, r1, #0x9
	lsl	r0, r5, #0x1
	add	r0, r0, r6
	add	r2, r0, #0
	add	r2, r2, #0x10
	mov	r3, #0x7
	lsl	r1, r1, #0x1
	add	r1, r1, r6
.L197:
	ldrh	r0, [r1]
	strh	r0, [r2]
	add	r1, r1, #0x2
	add	r2, r2, #0x2
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L197	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0xf
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	strh	r7, [r0]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x18
	bne	.L193	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L193:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L201:
	.align	2, 0
.L200:
	.word	gPlttBufferFaded
.Lfe22:
	.size	 sub_8104018,.Lfe22-sub_8104018
	.align	2, 0
	.globl	sub_8104088
	.type	 sub_8104088,function
	.thumb_func
sub_8104088:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r4, .L204
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L204+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x6]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldr	r0, .L204+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L203	@cond_branch
	ldrh	r0, [r4, #0x4]
	neg	r0, r0
	strh	r0, [r4, #0x4]
.L203:
	lsl	r0, r6, #0x10
	asr	r0, r0, #0x10
	ldrh	r1, [r4, #0x4]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	ldrh	r1, [r5, #0x20]
	lsr	r6, r0, #0x10
	asr	r0, r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r2, [r5, #0x22]
	lsl	r1, r7, #0x10
	asr	r1, r1, #0x10
	sub	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	ArcTan2Neg
	lsl	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	str	r0, [sp]
	add	r0, r5, #0
	mov	r1, #0x0
	add	r2, r3, #0
	bl	TrySetSpriteRotScale
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x2e]
	strh	r6, [r5, #0x32]
	strh	r7, [r5, #0x36]
	ldr	r0, .L204+0xc
	str	r0, [r5, #0x1c]
	ldr	r1, .L204+0x10
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L205:
	.align	2, 0
.L204:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	sub_80A7000
	.word	DestroyAnimSprite
.Lfe23:
	.size	 sub_8104088,.Lfe23-sub_8104088
	.align	2, 0
	.globl	sub_810413C
	.type	 sub_810413C,function
	.thumb_func
sub_810413C:
	ldr	r1, .L207
	strh	r1, [r0, #0x32]
	ldrh	r1, [r0, #0x22]
	add	r1, r1, #0x8
	strh	r1, [r0, #0x22]
	ldr	r1, .L207+0x4
	str	r1, [r0, #0x1c]
	bx	lr
.L208:
	.align	2, 0
.L207:
	.word	0xfff0
	.word	sub_8104154
.Lfe24:
	.size	 sub_810413C,.Lfe24-sub_810413C
	.align	2, 0
	.type	 sub_8104154,function
	.thumb_func
sub_8104154:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x80
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	ldr	r0, .L213
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L210	@cond_branch
	ldrh	r0, [r4, #0x24]
	neg	r0, r0
	strh	r0, [r4, #0x24]
.L210:
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x5
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7e
	ble	.L211	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L211	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L211:
	pop	{r4}
	pop	{r0}
	bx	r0
.L214:
	.align	2, 0
.L213:
	.word	gBattleAnimAttacker
.Lfe25:
	.size	 sub_8104154,.Lfe25-sub_8104154
	.align	2, 0
	.globl	sub_81041C4
	.type	 sub_81041C4,function
	.thumb_func
sub_81041C4:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	mov	r0, #0x14
	strh	r0, [r4, #0x2e]
	ldr	r5, .L216
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	ldr	r0, .L216+0x4
	str	r0, [r4, #0x1c]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L216+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L217:
	.align	2, 0
.L216:
	.word	gBattleAnimTarget
	.word	StartAnimLinearTranslation
	.word	sub_810421C
.Lfe26:
	.size	 sub_81041C4,.Lfe26-sub_81041C4
	.align	2, 0
	.type	 sub_810421C,function
	.thumb_func
sub_810421C:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xa6
	bl	PlaySE12WithPanning
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x26]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	strh	r1, [r4, #0x26]
	strh	r1, [r4, #0x24]
	mov	r2, #0x0
	mov	r1, #0x7
	add	r0, r4, #0
	add	r0, r0, #0x3c
.L222:
	strh	r2, [r0]
	sub	r0, r0, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L222	@cond_branch
	bl	Random2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x7
	and	r0, r0, r1
	ldr	r2, .L224
	add	r1, r2, #0
	sub	r1, r1, r0
	strh	r1, [r4, #0x3a]
	bl	Random2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa0
	bl	__umodsi3
	add	r0, r0, #0xa0
	strh	r0, [r4, #0x3c]
	ldr	r0, .L224+0x4
	str	r0, [r4, #0x1c]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	pop	{r4}
	pop	{r0}
	bx	r0
.L225:
	.align	2, 0
.L224:
	.word	0xfff4
	.word	sub_81042A0
.Lfe27:
	.size	 sub_810421C,.Lfe27-sub_810421C
	.align	2, 0
	.type	 sub_81042A0,function
	.thumb_func
sub_81042A0:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x3c]
	ldrh	r2, [r4, #0x2e]
	add	r0, r1, r2
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x18
	strh	r2, [r4, #0x24]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L227	@cond_branch
	neg	r0, r2
	strh	r0, [r4, #0x24]
.L227:
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r2, #0x3a
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x8
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7e
	ble	.L228	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L228	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L228:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 sub_81042A0,.Lfe28-sub_81042A0
	.align	2, 0
	.globl	Anim_RazorWindTornado
	.type	 Anim_RazorWindTornado,function
	.thumb_func
Anim_RazorWindTornado:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L232
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L231	@cond_branch
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x10
	strh	r0, [r4, #0x22]
.L231:
	ldr	r1, .L232+0x4
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0xa]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r1, #0xc]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x36]
	ldr	r0, .L232+0x8
	str	r0, [r4, #0x1c]
	ldr	r1, .L232+0xc
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L233:
	.align	2, 0
.L232:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	TranslateSpriteInCircleOverDuration
	.word	DestroyAnimSprite
.Lfe29:
	.size	 Anim_RazorWindTornado,.Lfe29-Anim_RazorWindTornado
	.align	2, 0
	.globl	Anim_ViceGripPincer
	.type	 Anim_ViceGripPincer,function
	.thumb_func
Anim_ViceGripPincer:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r0, #0
	mov	r7, #0x20
	ldr	r4, .L236
	mov	r0, #0x10
	mov	r8, r0
	ldr	r6, .L236+0x4
	ldr	r0, .L236+0x8
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L235	@cond_branch
	add	r7, r4, #0
	mov	r4, #0x20
	mov	r8, r6
	mov	r6, #0x10
	add	r0, r5, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
.L235:
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	ldrh	r1, [r5, #0x20]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	ldrh	r1, [r5, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	mov	r0, #0x6
	strh	r0, [r5, #0x2e]
	ldr	r4, .L236+0xc
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r8
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r6
	strh	r0, [r5, #0x36]
	ldr	r0, .L236+0x10
	str	r0, [r5, #0x1c]
	ldr	r1, .L236+0x14
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L237:
	.align	2, 0
.L236:
	.word	0xffe0
	.word	0xfff0
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	StartAnimLinearTranslation
	.word	Anim_ViceGripPincerStep
.Lfe30:
	.size	 Anim_ViceGripPincer,.Lfe30-Anim_ViceGripPincer
	.align	2, 0
	.type	 Anim_ViceGripPincerStep,function
	.thumb_func
Anim_ViceGripPincerStep:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L239	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L239:
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 Anim_ViceGripPincerStep,.Lfe31-Anim_ViceGripPincerStep
	.align	2, 0
	.globl	Anim_GuillotinePincer
	.type	 Anim_GuillotinePincer,function
	.thumb_func
Anim_GuillotinePincer:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r5, r0, #0
	mov	r0, #0x20
	mov	r8, r0
	ldr	r4, .L242
	mov	r2, #0x10
	mov	r9, r2
	ldr	r6, .L242+0x4
	ldr	r7, .L242+0x8
	ldrh	r1, [r7]
	mov	r2, #0x0
	ldrsh	r0, [r7, r2]
	cmp	r0, #0
	beq	.L241	@cond_branch
	mov	r8, r4
	mov	r4, #0x20
	mov	r9, r6
	mov	r6, #0x10
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	bl	StartSpriteAnim
.L241:
	mov	r0, r8
	lsl	r1, r0, #0x10
	asr	r1, r1, #0x10
	ldrh	r2, [r5, #0x20]
	add	r1, r1, r2
	strh	r1, [r5, #0x20]
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	ldrh	r2, [r5, #0x22]
	add	r0, r0, r2
	strh	r0, [r5, #0x22]
	mov	r0, #0x6
	strh	r0, [r5, #0x2e]
	strh	r1, [r5, #0x30]
	ldr	r4, .L242+0xc
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r9
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x22]
	strh	r0, [r5, #0x34]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r6
	strh	r0, [r5, #0x36]
	add	r0, r5, #0
	bl	InitAnimLinearTranslation
	ldrh	r0, [r7]
	strh	r0, [r5, #0x38]
	ldrh	r0, [r5, #0x2e]
	strh	r0, [r5, #0x3a]
	ldr	r0, .L242+0x10
	str	r0, [r5, #0x1c]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L243:
	.align	2, 0
.L242:
	.word	0xffe0
	.word	0xfff0
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	Anim_GuillotinePincerStep1
.Lfe32:
	.size	 Anim_GuillotinePincer,.Lfe32-Anim_GuillotinePincer
	.align	2, 0
	.type	 Anim_GuillotinePincerStep1,function
	.thumb_func
Anim_GuillotinePincerStep1:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L245	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L245	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	SeekSpriteAnim
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	mov	r2, #0x0
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	mov	r0, #0x2
	strh	r0, [r4, #0x24]
	ldr	r0, .L246
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x3a]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x32]
	eor	r0, r0, r1
	strh	r0, [r4, #0x32]
	strh	r2, [r4, #0x36]
	strh	r2, [r4, #0x34]
	ldr	r0, .L246+0x4
	str	r0, [r4, #0x1c]
.L245:
	pop	{r4}
	pop	{r0}
	bx	r0
.L247:
	.align	2, 0
.L246:
	.word	0xfffe
	.word	Anim_GuillotinePincerStep2
.Lfe33:
	.size	 Anim_GuillotinePincerStep1,.Lfe33-Anim_GuillotinePincerStep1
	.align	2, 0
	.type	 Anim_GuillotinePincerStep2,function
	.thumb_func
Anim_GuillotinePincerStep2:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L249	@cond_branch
	ldrh	r0, [r4, #0x24]
	neg	r0, r0
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x26]
	neg	r0, r0
	strh	r0, [r4, #0x26]
.L249:
	ldrh	r0, [r4, #0x34]
	mov	r1, #0x1
	eor	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x33
	bne	.L250	@cond_branch
	strh	r1, [r4, #0x26]
	strh	r1, [r4, #0x24]
	strh	r1, [r4, #0x36]
	strh	r1, [r4, #0x34]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r4, #0x38]
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldr	r0, .L251
	str	r0, [r4, #0x1c]
.L250:
	pop	{r4}
	pop	{r0}
	bx	r0
.L252:
	.align	2, 0
.L251:
	.word	Anim_GuillotinePincerStep3
.Lfe34:
	.size	 Anim_GuillotinePincerStep2,.Lfe34-Anim_GuillotinePincerStep2
	.align	2, 0
	.type	 Anim_GuillotinePincerStep3,function
	.thumb_func
Anim_GuillotinePincerStep3:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L254	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L254:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 Anim_GuillotinePincerStep3,.Lfe35-Anim_GuillotinePincerStep3
	.align	2, 0
	.globl	AnimTask_GrowAndGreyscale
	.type	 AnimTask_GrowAndGreyscale,function
	.thumb_func
AnimTask_GrowAndGreyscale:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x1
	bl	PrepareBattlerSpriteForRotScale
	add	r0, r4, #0
	mov	r1, #0xd0
	mov	r2, #0xd0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldr	r1, .L256
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	mov	r1, #0x0
	bl	SetGreyscaleOrOriginalPalette
	ldr	r1, .L256+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x50
	strh	r1, [r0, #0x8]
	ldr	r1, .L256+0x8
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L257:
	.align	2, 0
.L256:
	.word	gSprites
	.word	gTasks
	.word	AnimTask_GrowAndGreyscaleStep
.Lfe36:
	.size	 AnimTask_GrowAndGreyscale,.Lfe36-AnimTask_GrowAndGreyscale
	.align	2, 0
	.type	 AnimTask_GrowAndGreyscaleStep,function
	.thumb_func
AnimTask_GrowAndGreyscaleStep:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L260
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x8]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L259	@cond_branch
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	ResetSpriteRotScale
	ldr	r1, .L260+0x4
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	mov	r1, #0x1
	bl	SetGreyscaleOrOriginalPalette
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L259:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L261:
	.align	2, 0
.L260:
	.word	gTasks
	.word	gSprites
.Lfe37:
	.size	 AnimTask_GrowAndGreyscaleStep,.Lfe37-AnimTask_GrowAndGreyscaleStep
	.align	2, 0
	.globl	AnimTask_Minimize
	.type	 AnimTask_Minimize,function
	.thumb_func
AnimTask_Minimize:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L263
	add	r4, r4, r0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	strh	r0, [r4, #0x8]
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	strh	r5, [r4, #0xa]
	strh	r5, [r4, #0xc]
	strh	r5, [r4, #0xe]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	strh	r5, [r4, #0x12]
	strh	r5, [r4, #0x14]
	ldr	r0, .L263+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x16]
	ldr	r0, .L263+0x8
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L264:
	.align	2, 0
.L263:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	AnimTask_MinimizeStep1
.Lfe38:
	.size	 AnimTask_Minimize,.Lfe38-AnimTask_Minimize
	.align	2, 0
	.type	 AnimTask_MinimizeStep1,function
	.thumb_func
AnimTask_MinimizeStep1:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L285
	add	r4, r0, r1
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x5
	bls	.LCB3081
	b	.L266	@long jump
.LCB3081:
	lsl	r0, r0, #0x2
	ldr	r1, .L285+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L286:
	.align	2, 0
.L285:
	.word	gTasks
	.word	.L281
	.align	2, 0
	.align	2, 0
.L281:
	.word	.L267
	.word	.L271
	.word	.L275
	.word	.L276
	.word	.L278
	.word	.L280
.L267:
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L269	@cond_branch
	cmp	r0, #0x3
	beq	.L269	@cond_branch
	cmp	r0, #0x6
	bne	.L268	@cond_branch
.L269:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	CreateMinimizeSprite
.L268:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x28
	strh	r0, [r4, #0x10]
	ldrb	r0, [r4, #0x8]
	mov	r1, #0x10
	ldrsh	r2, [r4, r1]
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldrb	r0, [r4, #0x8]
	bl	SetBattlerSpriteYOffsetFromYScale
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x20
	bne	.L266	@cond_branch
	ldrh	r0, [r4, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x12]
	b	.L283
.L271:
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L266	@cond_branch
	mov	r2, #0x12
	ldrsh	r1, [r4, r2]
	cmp	r1, #0x3
	bne	.L273	@cond_branch
	strh	r0, [r4, #0xc]
	strh	r1, [r4, #0xa]
	b	.L266
.L273:
	strh	r0, [r4, #0xc]
	strh	r0, [r4, #0xe]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	strh	r2, [r4, #0x10]
	ldrb	r0, [r4, #0x8]
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldrb	r0, [r4, #0x8]
	bl	SetBattlerSpriteYOffsetFromYScale
	mov	r0, #0x2
	strh	r0, [r4, #0xa]
	b	.L266
.L275:
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	b	.L266
.L276:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x20
	ble	.L266	@cond_branch
	b	.L284
.L278:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x2
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x10]
	sub	r0, r0, #0x50
	strh	r0, [r4, #0x10]
	ldrb	r0, [r4, #0x8]
	mov	r1, #0x10
	ldrsh	r2, [r4, r1]
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldrb	r0, [r4, #0x8]
	bl	SetBattlerSpriteYOffsetFromYScale
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x20
	bne	.L266	@cond_branch
.L284:
	mov	r0, #0x0
	strh	r0, [r4, #0xc]
.L283:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	b	.L266
.L280:
	ldrb	r0, [r4, #0x8]
	bl	ResetSpriteRotScale
	ldr	r2, .L287
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0x26]
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L266:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L288:
	.align	2, 0
.L287:
	.word	gSprites
.Lfe39:
	.size	 AnimTask_MinimizeStep1,.Lfe39-AnimTask_MinimizeStep1
	.align	2, 0
	.type	 CreateMinimizeSprite,function
	.thumb_func
CreateMinimizeSprite:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	mov	r0, #0x0
	bl	CloneBattlerSpriteWithBlend
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	lsl	r0, r0, #0x10
	asr	r4, r0, #0x10
	cmp	r4, #0
	blt	.L290	@cond_branch
	bl	AllocOamMatrix
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0xff
	bne	.L291	@cond_branch
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r1, .L293
	add	r0, r0, r1
	bl	obj_delete_but_dont_free_vram
	b	.L290
.L294:
	.align	2, 0
.L293:
	.word	gSprites
.L291:
	ldr	r5, .L295
	lsl	r3, r4, #0x4
	add	r3, r3, r4
	lsl	r3, r3, #0x2
	add	r4, r3, r5
	ldrb	r1, [r4, #0x1]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	mov	r1, #0x3
	orr	r0, r0, r1
	strb	r0, [r4, #0x1]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x1f
	and	r6, r6, r0
	lsl	r2, r6, #0x1
	ldrb	r1, [r4, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r4, #0x3]
	ldrb	r0, [r7, #0x16]
	ldrb	r1, [r7, #0xe]
	sub	r0, r0, r1
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrh	r0, [r7, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r7, #0xe]
	ldrh	r0, [r7, #0x14]
	add	r0, r0, #0x1
	strh	r0, [r7, #0x14]
	mov	r0, #0x10
	strh	r0, [r4, #0x2e]
	mov	r0, r9
	strh	r0, [r4, #0x30]
	mov	r0, #0x6
	strh	r0, [r4, #0x32]
	add	r5, r5, #0x1c
	add	r3, r3, r5
	ldr	r0, .L295+0x4
	str	r0, [r3]
	mov	r1, r8
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x10
	ldrsh	r2, [r7, r1]
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldrb	r0, [r4, #0x1]
	mov	r3, #0x4
	neg	r3, r3
	and	r3, r3, r0
	mov	r0, #0x1
	orr	r3, r3, r0
	strb	r3, [r4, #0x1]
	lsr	r1, r3, #0x6
	ldrb	r2, [r4, #0x3]
	lsr	r2, r2, #0x6
	lsl	r3, r3, #0x1e
	lsr	r3, r3, #0x1e
	add	r0, r4, #0
	bl	CalcCenterToCornerVec
.L290:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L296:
	.align	2, 0
.L295:
	.word	gSprites
	.word	ClonedMinizeSprite_Step
.Lfe40:
	.size	 CreateMinimizeSprite,.Lfe40-CreateMinimizeSprite
	.align	2, 0
	.type	 ClonedMinizeSprite_Step,function
	.thumb_func
ClonedMinizeSprite_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L298	@cond_branch
	ldr	r3, .L299
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x30
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	add	r0, r4, #0
	bl	obj_delete_but_dont_free_vram
.L298:
	pop	{r4}
	pop	{r0}
	bx	r0
.L300:
	.align	2, 0
.L299:
	.word	gTasks
.Lfe41:
	.size	 ClonedMinizeSprite_Step,.Lfe41-ClonedMinizeSprite_Step
	.align	2, 0
	.globl	AnimTask_Splash
	.type	 AnimTask_Splash,function
	.thumb_func
AnimTask_Splash:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L304
	add	r4, r0, r1
	ldr	r5, .L304+0x4
	mov	r1, #0x2
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L302	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	b	.L303
.L305:
	.align	2, 0
.L304:
	.word	gTasks
	.word	gBattleAnimArgs
.L302:
	ldrb	r0, [r5]
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r2, #0x0
	strh	r1, [r4, #0x8]
	strh	r2, [r4, #0xa]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0xc]
	strh	r2, [r4, #0xe]
	strh	r2, [r4, #0x10]
	ldr	r2, .L306
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r0, .L306+0x4
	str	r0, [r4]
.L303:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L307:
	.align	2, 0
.L306:
	.word	gSplashEffectAffineAnimCmds
	.word	AnimTask_SplashStep
.Lfe42:
	.size	 AnimTask_Splash,.Lfe42-AnimTask_Splash
	.align	2, 0
	.type	 AnimTask_SplashStep,function
	.thumb_func
AnimTask_SplashStep:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L324
	add	r4, r0, r1
	mov	r0, #0xa
	ldrsh	r5, [r4, r0]
	cmp	r5, #0x1
	beq	.L312	@cond_branch
	cmp	r5, #0x1
	bgt	.L323	@cond_branch
	cmp	r5, #0
	beq	.L310	@cond_branch
	b	.L309
.L325:
	.align	2, 0
.L324:
	.word	gTasks
.L323:
	cmp	r5, #0x2
	beq	.L314	@cond_branch
	cmp	r5, #0x3
	beq	.L317	@cond_branch
	b	.L309
.L310:
	add	r0, r4, #0
	bl	RunAffineAnimFromTaskData
	ldrh	r2, [r4, #0x10]
	add	r2, r2, #0x3
	strh	r2, [r4, #0x10]
	ldr	r3, .L326
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x26]
	add	r1, r1, r2
	strh	r1, [r0, #0x26]
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7
	ble	.L309	@cond_branch
	strh	r5, [r4, #0xe]
	b	.L315
.L327:
	.align	2, 0
.L326:
	.word	gSprites
.L312:
	add	r0, r4, #0
	bl	RunAffineAnimFromTaskData
	ldr	r2, .L328
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x10]
	ldrh	r2, [r0, #0x26]
	add	r1, r1, r2
	strh	r1, [r0, #0x26]
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7
	ble	.L309	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xe]
	b	.L315
.L329:
	.align	2, 0
.L328:
	.word	gSprites
.L314:
	mov	r1, #0x10
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L315	@cond_branch
	ldr	r2, .L330
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x26]
	sub	r1, r1, #0x2
	strh	r1, [r0, #0x26]
	ldrh	r0, [r4, #0x10]
	sub	r0, r0, #0x2
	strh	r0, [r4, #0x10]
	b	.L309
.L331:
	.align	2, 0
.L330:
	.word	gSprites
.L315:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	b	.L309
.L317:
	add	r0, r4, #0
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L309	@cond_branch
	ldrh	r0, [r4, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L319	@cond_branch
	ldr	r2, .L332
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r5, [r0, #0x26]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	b	.L309
.L333:
	.align	2, 0
.L332:
	.word	gSprites
.L319:
	ldrb	r1, [r4, #0x8]
	ldr	r2, .L334
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	strh	r5, [r4, #0xa]
.L309:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L335:
	.align	2, 0
.L334:
	.word	gSplashEffectAffineAnimCmds
.Lfe43:
	.size	 AnimTask_SplashStep,.Lfe43-AnimTask_SplashStep
	.align	2, 0
	.globl	AnimTask_GrowAndShrink
	.type	 AnimTask_GrowAndShrink,function
	.thumb_func
AnimTask_GrowAndShrink:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L337
	add	r4, r4, r0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L337+0x4
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r0, .L337+0x8
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L338:
	.align	2, 0
.L337:
	.word	gTasks
	.word	gGrowAndShrinkAffineAnimCmds
	.word	AnimTask_GrowAndShrinkStep
.Lfe44:
	.size	 AnimTask_GrowAndShrink,.Lfe44-AnimTask_GrowAndShrink
	.align	2, 0
	.type	 AnimTask_GrowAndShrinkStep,function
	.thumb_func
AnimTask_GrowAndShrinkStep:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L341
	add	r0, r0, r1
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L340	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L340:
	pop	{r4}
	pop	{r0}
	bx	r0
.L342:
	.align	2, 0
.L341:
	.word	gTasks
.Lfe45:
	.size	 AnimTask_GrowAndShrinkStep,.Lfe45-AnimTask_GrowAndShrinkStep
	.align	2, 0
	.globl	Anim_BreathPuff
	.type	 Anim_BreathPuff,function
	.thumb_func
Anim_BreathPuff:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L347
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L344	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	StartSpriteAnim
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x20
	strh	r0, [r4, #0x20]
	mov	r0, #0x40
	b	.L346
.L348:
	.align	2, 0
.L347:
	.word	gBattleAnimAttacker
.L344:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x20
	strh	r0, [r4, #0x20]
	ldr	r0, .L349
.L346:
	strh	r0, [r4, #0x30]
	ldr	r0, .L349+0x4
	ldrb	r0, [r0]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	strh	r0, [r4, #0x22]
	mov	r0, #0x34
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x32]
	strh	r1, [r4, #0x34]
	strh	r1, [r4, #0x36]
	ldr	r1, .L349+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L349+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L350:
	.align	2, 0
.L349:
	.word	0xffc0
	.word	gBattleAnimAttacker
	.word	DestroyAnimSprite
	.word	TranslateSpriteLinearFixedPoint
.Lfe46:
	.size	 Anim_BreathPuff,.Lfe46-Anim_BreathPuff
	.align	2, 0
	.globl	Anim_AngerMark
	.type	 Anim_AngerMark,function
	.thumb_func
Anim_AngerMark:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	ldr	r0, .L357
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L352	@cond_branch
	ldr	r0, .L357+0x4
	b	.L356
.L358:
	.align	2, 0
.L357:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L352:
	ldr	r0, .L359
.L356:
	ldrb	r5, [r0]
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L354	@cond_branch
	ldr	r1, .L359+0x4
	mov	r2, #0x2
	ldrsh	r0, [r1, r2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
.L354:
	add	r0, r5, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L359+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	strh	r0, [r6, #0x20]
	add	r0, r5, #0
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r4, [r4, #0x4]
	add	r0, r0, r4
	strh	r0, [r6, #0x22]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7
	bgt	.L355	@cond_branch
	mov	r0, #0x8
	strh	r0, [r6, #0x22]
.L355:
	ldr	r1, .L359+0x8
	add	r0, r6, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L359+0xc
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L360:
	.align	2, 0
.L359:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	DestroySpriteAndMatrix
	.word	RunStoredCallbackWhenAffineAnimEnds
.Lfe47:
	.size	 Anim_AngerMark,.Lfe47-Anim_AngerMark
	.align	2, 0
	.globl	sub_8104C38
	.type	 sub_8104C38,function
	.thumb_func
sub_8104C38:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L362
	add	r4, r4, r0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x0
	strh	r1, [r4, #0x8]
	strh	r0, [r4, #0xa]
	ldr	r2, .L362+0x4
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r0, .L362+0x8
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L363:
	.align	2, 0
.L362:
	.word	gTasks
	.word	gUnknown_085936A4
	.word	sub_8104C78
.Lfe48:
	.size	 sub_8104C38,.Lfe48-sub_8104C38
	.align	2, 0
	.type	 sub_8104C78,function
	.thumb_func
sub_8104C78:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L366
	add	r0, r0, r1
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L365	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L365:
	pop	{r4}
	pop	{r0}
	bx	r0
.L367:
	.align	2, 0
.L366:
	.word	gTasks
.Lfe49:
	.size	 sub_8104C78,.Lfe49-sub_8104C78
	.align	2, 0
	.globl	sub_8104CA4
	.type	 sub_8104CA4,function
	.thumb_func
sub_8104CA4:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L370
	add	r4, r1, r0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x0
	strh	r0, [r4, #0x8]
	strh	r2, [r4, #0xa]
	mov	r0, #0x4
	strh	r0, [r4, #0xc]
	mov	r0, #0x7
	strh	r0, [r4, #0xe]
	mov	r0, #0x3
	strh	r0, [r4, #0x10]
	ldr	r3, .L370+0x4
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r0, [r0, #0x20]
	strh	r0, [r4, #0x12]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r0, [r0, #0x22]
	strh	r0, [r4, #0x14]
	strh	r2, [r4, #0x16]
	strh	r2, [r4, #0x18]
	mov	r0, #0x2
	strh	r0, [r4, #0x1a]
	ldr	r0, .L370+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L369	@cond_branch
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	neg	r0, r0
	strh	r0, [r4, #0xc]
.L369:
	ldr	r0, .L370+0xc
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L371:
	.align	2, 0
.L370:
	.word	gTasks
	.word	gSprites
	.word	gBattleAnimAttacker
	.word	sub_8104D28
.Lfe50:
	.size	 sub_8104CA4,.Lfe50-sub_8104CA4
	.align	2, 0
	.type	 sub_8104D28,function
	.thumb_func
sub_8104D28:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L390
	add	r3, r0, r1
	ldrh	r0, [r3, #0x16]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x16]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L373	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x16]
	ldrh	r0, [r3, #0x18]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x18]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L374	@cond_branch
	ldr	r2, .L390+0x4
	mov	r0, #0x8
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x1a]
	ldrh	r2, [r0, #0x22]
	add	r1, r1, r2
	b	.L389
.L391:
	.align	2, 0
.L390:
	.word	gTasks
	.word	gSprites
.L374:
	ldr	r2, .L392
	mov	r5, #0x8
	ldrsh	r1, [r3, r5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x22]
	ldrh	r2, [r3, #0x1a]
	sub	r1, r1, r2
.L389:
	strh	r1, [r0, #0x22]
.L373:
	mov	r1, #0xa
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x1
	beq	.L379	@cond_branch
	cmp	r0, #0x1
	bgt	.L388	@cond_branch
	cmp	r0, #0
	beq	.L377	@cond_branch
	b	.L376
.L393:
	.align	2, 0
.L392:
	.word	gSprites
.L388:
	cmp	r0, #0x2
	beq	.L381	@cond_branch
	b	.L376
.L377:
	ldr	r2, .L394
	mov	r5, #0x8
	ldrsh	r1, [r3, r5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0xc]
	ldrh	r2, [r0, #0x20]
	add	r1, r1, r2
	strh	r1, [r0, #0x20]
	ldrh	r0, [r3, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0xe]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L376	@cond_branch
	mov	r0, #0xe
	strh	r0, [r3, #0xe]
	mov	r0, #0x1
	strh	r0, [r3, #0xa]
	b	.L376
.L395:
	.align	2, 0
.L394:
	.word	gSprites
.L379:
	ldr	r2, .L396
	mov	r5, #0x8
	ldrsh	r1, [r3, r5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x20]
	ldrh	r2, [r3, #0xc]
	sub	r1, r1, r2
	strh	r1, [r0, #0x20]
	ldrh	r0, [r3, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0xe]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L376	@cond_branch
	mov	r0, #0x7
	strh	r0, [r3, #0xe]
	mov	r0, #0x2
	strh	r0, [r3, #0xa]
	b	.L376
.L397:
	.align	2, 0
.L396:
	.word	gSprites
.L381:
	ldr	r2, .L398
	mov	r0, #0x8
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0xc]
	ldrh	r5, [r0, #0x20]
	add	r1, r1, r5
	strh	r1, [r0, #0x20]
	ldrh	r0, [r3, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0xe]
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	cmp	r1, #0
	bne	.L376	@cond_branch
	ldrh	r0, [r3, #0x10]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x10]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L383	@cond_branch
	mov	r0, #0x7
	strh	r0, [r3, #0xe]
	strh	r1, [r3, #0xa]
	b	.L376
.L399:
	.align	2, 0
.L398:
	.word	gSprites
.L383:
	ldrh	r1, [r3, #0x18]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L385	@cond_branch
	mov	r0, #0x8
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x22]
	ldrh	r2, [r3, #0x1a]
	sub	r1, r1, r2
	strh	r1, [r0, #0x22]
.L385:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L376:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 sub_8104D28,.Lfe51-sub_8104D28
	.align	2, 0
	.globl	sub_8104E74
	.type	 sub_8104E74,function
	.thumb_func
sub_8104E74:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L410
	add	r5, r1, r0
	ldr	r4, .L410+0x4
	ldrb	r0, [r4]
	bl	GetBattlerYCoordWithElevation
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x20
	mov	r1, #0x0
	strh	r0, [r5, #0x8]
	mov	r0, #0x4
	strh	r0, [r5, #0xa]
	strh	r1, [r5, #0xc]
	strh	r1, [r5, #0xe]
	strh	r1, [r5, #0x10]
	strh	r1, [r5, #0x12]
	ldrb	r0, [r4]
	bl	GetBattlerSpriteCoordAttr
	strh	r0, [r5, #0x26]
	ldrb	r0, [r4]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L401	@cond_branch
	ldr	r0, .L410+0x8
	ldrh	r0, [r0]
	strh	r0, [r5, #0x14]
	ldr	r0, .L410+0xc
	b	.L409
.L411:
	.align	2, 0
.L410:
	.word	gTasks
	.word	gBattleAnimTarget
	.word	gBattle_BG1_X
	.word	0x4000014
.L401:
	ldr	r0, .L412
	ldrh	r0, [r0]
	strh	r0, [r5, #0x14]
	ldr	r0, .L412+0x4
.L409:
	str	r0, [sp]
	ldrh	r0, [r5, #0x8]
	add	r1, r0, #0
	sub	r1, r1, #0x40
	lsl	r2, r1, #0x10
	lsl	r0, r0, #0x10
	cmp	r2, r0
	bgt	.L404	@cond_branch
	ldr	r4, .L412+0x8
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r6, r4, r0
.L406:
	asr	r3, r2, #0x10
	cmp	r3, #0
	blt	.L405	@cond_branch
	lsl	r1, r3, #0x1
	add	r2, r1, r4
	ldrh	r0, [r5, #0x14]
	add	r0, r0, #0xf0
	strh	r0, [r2]
	add	r1, r1, r6
	ldrh	r0, [r5, #0x14]
	add	r0, r0, #0xf0
	strh	r0, [r1]
.L405:
	add	r0, r3, #0x1
	lsl	r2, r0, #0x10
	asr	r1, r2, #0x10
	mov	r3, #0x8
	ldrsh	r0, [r5, r3]
	cmp	r1, r0
	ble	.L406	@cond_branch
.L404:
	ldr	r0, .L412+0xc
	str	r0, [sp, #0x4]
	mov	r1, sp
	mov	r2, #0x0
	mov	r0, #0x1
	strb	r0, [r1, #0x8]
	mov	r0, sp
	strb	r2, [r0, #0x9]
	ldr	r0, [sp]
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp, #0x8]
	bl	ScanlineEffect_SetParams
	ldr	r0, .L412+0x10
	str	r0, [r5]
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L413:
	.align	2, 0
.L412:
	.word	gBattle_BG2_X
	.word	0x4000018
	.word	gScanlineEffectRegBuffers
	.word	-0x5d9fffff
	.word	sub_8104F54
.Lfe52:
	.size	 sub_8104E74,.Lfe52-sub_8104E74
	.align	2, 0
	.type	 sub_8104F54,function
	.thumb_func
sub_8104F54:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L433
	add	r3, r0, r1
	mov	r1, #0x10
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	beq	.L416	@cond_branch
	cmp	r0, #0x1
	beq	.L418	@cond_branch
	b	.L415
.L434:
	.align	2, 0
.L433:
	.word	gTasks
.L416:
	ldrh	r0, [r3, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	ble	.L415	@cond_branch
	ldrh	r0, [r3, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x10]
	b	.L415
.L418:
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L415	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0xa]
	ldrh	r1, [r3, #0xe]
	mov	r0, #0x3
	and	r0, r0, r1
	strh	r0, [r3, #0xc]
	ldrh	r0, [r3, #0x8]
	sub	r0, r0, r1
	strh	r0, [r3, #0x12]
	mov	r2, #0xc
	ldrsh	r1, [r3, r2]
	cmp	r1, #0x1
	beq	.L422	@cond_branch
	cmp	r1, #0x1
	ble	.L420	@cond_branch
	cmp	r1, #0x2
	beq	.L423	@cond_branch
	cmp	r1, #0x3
	beq	.L424	@cond_branch
	b	.L420
.L422:
	sub	r0, r0, #0x2
	b	.L432
.L423:
.L424:
	add	r0, r0, #0x1
.L432:
	strh	r0, [r3, #0x12]
.L420:
	mov	r1, #0x12
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	blt	.L428	@cond_branch
	ldr	r2, .L435
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r1, [r3, #0x14]
	strh	r1, [r0]
	mov	r1, #0x12
	ldrsh	r0, [r3, r1]
	lsl	r0, r0, #0x1
	mov	r1, #0xf0
	lsl	r1, r1, #0x3
	add	r2, r2, r1
	add	r0, r0, r2
	ldrh	r1, [r3, #0x14]
	strh	r1, [r0]
.L428:
	ldrh	r0, [r3, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x26
	ldrsh	r1, [r3, r2]
	cmp	r0, r1
	blt	.L415	@cond_branch
	ldr	r1, .L435+0x4
	mov	r0, #0x3
	strb	r0, [r1, #0x15]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L415:
	pop	{r4}
	pop	{r0}
	bx	r0
.L436:
	.align	2, 0
.L435:
	.word	gScanlineEffectRegBuffers
	.word	gScanlineEffect
.Lfe53:
	.size	 sub_8104F54,.Lfe53-sub_8104F54
	.align	2, 0
	.globl	sub_810501C
	.type	 sub_810501C,function
	.thumb_func
sub_810501C:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r6, .L438
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x10
	mov	r5, #0x0
	strh	r0, [r4, #0x20]
	ldrb	r0, [r6]
	bl	GetBattlerYCoordWithElevation
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x10
	strh	r0, [r4, #0x22]
	strh	r5, [r4, #0x2e]
	strh	r5, [r4, #0x30]
	strh	r5, [r4, #0x32]
	mov	r0, #0x10
	strh	r0, [r4, #0x34]
	strh	r5, [r4, #0x36]
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x2
	strh	r0, [r4, #0x38]
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x3a]
	ldr	r0, .L438+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L439:
	.align	2, 0
.L438:
	.word	gBattleAnimTarget
	.word	sub_8105078
.Lfe54:
	.size	 sub_810501C,.Lfe54-sub_810501C
	.align	2, 0
	.type	 sub_8105078,function
	.thumb_func
sub_8105078:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	cmp	r1, #0x1
	beq	.L445	@cond_branch
	cmp	r1, #0x1
	bgt	.L457	@cond_branch
	cmp	r1, #0
	beq	.L442	@cond_branch
	b	.L441
.L457:
	cmp	r1, #0x2
	beq	.L452	@cond_branch
	b	.L441
.L442:
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L443	@cond_branch
	strh	r1, [r4, #0x32]
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsr	r1, r2, #0x2
	mov	r0, #0x1
	eor	r1, r1, r0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L443:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	ble	.L441	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r0
	strb	r1, [r2]
	b	.L458
.L445:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L446	@cond_branch
	ldrh	r2, [r4, #0x32]
	mov	r3, #0x32
	ldrsh	r1, [r4, r3]
	mov	r3, #0x38
	ldrsh	r0, [r4, r3]
	cmp	r1, r0
	bge	.L446	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x22]
	add	r0, r2, #0x1
	strh	r0, [r4, #0x32]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	mov	r1, #0xa
	bl	__modsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L446	@cond_branch
	ldrh	r1, [r4, #0x3a]
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xcd
	bl	PlaySE12WithPanning
.L446:
	ldrh	r0, [r4, #0x34]
	ldrh	r2, [r4, #0x36]
	add	r1, r0, r2
	strh	r1, [r4, #0x36]
	lsl	r0, r1, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0x1f
	ble	.L448	@cond_branch
	mov	r0, #0x40
	b	.L459
.L448:
	mov	r0, #0x20
	neg	r0, r0
	cmp	r2, r0
	bgt	.L449	@cond_branch
	mov	r2, #0x40
	neg	r2, r2
	add	r0, r2, #0
.L459:
	sub	r0, r0, r1
	strh	r0, [r4, #0x36]
	mov	r3, #0x34
	ldrsh	r0, [r4, r3]
	neg	r0, r0
	strh	r0, [r4, #0x34]
.L449:
	ldrh	r0, [r4, #0x36]
	mov	r2, #0x0
	strh	r0, [r4, #0x24]
	mov	r0, #0x38
	ldrsh	r1, [r4, r0]
	mov	r3, #0x32
	ldrsh	r0, [r4, r3]
	cmp	r1, r0
	bne	.L441	@cond_branch
	strh	r2, [r4, #0x30]
	strh	r2, [r4, #0x32]
.L458:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L441
.L452:
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L453	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsr	r1, r2, #0x2
	mov	r0, #0x1
	eor	r1, r1, r0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L453:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	ble	.L441	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L441:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 sub_8105078,.Lfe55-sub_8105078
	.align	2, 0
	.globl	sub_81051C4
	.type	 sub_81051C4,function
	.thumb_func
sub_81051C4:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	mov	r5, #0x0
	mov	r0, sp
	strh	r5, [r0]
	mov	r1, sp
	add	r1, r1, #0x2
	strh	r5, [r1]
	ldr	r0, .L470
	mov	r3, #0x4
	ldrsh	r2, [r0, r3]
	add	r7, r1, #0
	add	r1, r0, #0
	cmp	r2, #0
	bne	.L461	@cond_branch
	ldr	r0, .L470+0x4
	b	.L468
.L471:
	.align	2, 0
.L470:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L461:
	ldr	r0, .L472
.L468:
	ldrb	r5, [r0]
	ldrb	r1, [r1, #0x6]
	mov	r0, #0x1
	add	r4, r0, #0
	eor	r4, r4, r1
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L463	@cond_branch
	mov	r1, #0x2
	add	r0, r5, #0
	eor	r0, r0, r1
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L463	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, sp
	add	r3, r7, #0
	bl	SetAverageBattlerPositions
	cmp	r4, #0
	bne	.L464	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x0
	b	.L469
.L473:
	.align	2, 0
.L472:
	.word	gBattleAnimTarget
.L464:
	add	r0, r5, #0
	mov	r1, #0x2
.L469:
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L466	@cond_branch
	ldr	r2, .L474
	mov	r0, sp
	ldrh	r1, [r0]
	sub	r1, r1, r4
	ldrh	r0, [r2]
	sub	r1, r1, r0
	sub	r0, r0, r1
	strh	r0, [r2]
	b	.L463
.L475:
	.align	2, 0
.L474:
	.word	gBattleAnimArgs
.L466:
	ldr	r1, .L476
	mov	r0, sp
	ldrh	r0, [r0]
	sub	r0, r0, r4
	strh	r0, [r1]
.L463:
	ldr	r1, .L476+0x4
	str	r1, [r6, #0x1c]
	add	r0, r6, #0
	bl	_call_via_r1
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L477:
	.align	2, 0
.L476:
	.word	gBattleAnimArgs
	.word	sub_80A77C8
.Lfe56:
	.size	 sub_81051C4,.Lfe56-sub_81051C4
	.align	2, 0
	.globl	sub_8105284
	.type	 sub_8105284,function
	.thumb_func
sub_8105284:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L479	@cond_branch
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L479:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 sub_8105284,.Lfe57-sub_8105284
	.align	2, 0
	.globl	sub_81052A4
	.type	 sub_81052A4,function
	.thumb_func
sub_81052A4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	add	r5, r0, #0
	mov	r6, #0x0
	mov	r0, sp
	strh	r6, [r0]
	mov	r1, sp
	add	r1, r1, #0x2
	strh	r6, [r1]
	ldr	r0, .L501
	mov	r2, #0xa
	ldrsh	r0, [r0, r2]
	cmp	r0, #0
	bne	.L481	@cond_branch
	ldr	r0, .L501+0x4
	ldrb	r7, [r0]
	ldr	r0, .L501+0x8
	b	.L497
.L502:
	.align	2, 0
.L501:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L481:
	ldr	r0, .L503
	ldrb	r7, [r0]
	ldr	r0, .L503+0x4
.L497:
	ldrb	r0, [r0]
	mov	r8, r0
	ldr	r0, .L503+0x8
	mov	r3, #0xc
	ldrsh	r0, [r0, r3]
	cmp	r0, #0
	bne	.L483	@cond_branch
	mov	r0, #0x0
	mov	sl, r0
	mov	r1, #0x1
	str	r1, [sp, #0x4]
	b	.L484
.L504:
	.align	2, 0
.L503:
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L483:
	mov	r2, #0x2
	mov	sl, r2
	mov	r3, #0x3
	str	r3, [sp, #0x4]
.L484:
	add	r0, r7, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L485	@cond_branch
	add	r0, r7, #0
	mov	r1, sl
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r1, .L505
	lsr	r0, r0, #0x18
	ldrh	r1, [r1]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	mov	r0, #0x2
	mov	r4, r8
	eor	r4, r4, r0
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L486	@cond_branch
	ldr	r2, .L505+0x4
	ldr	r0, .L505+0x8
	add	r0, r4, r0
	b	.L498
.L506:
	.align	2, 0
.L505:
	.word	gBattleAnimArgs
	.word	gSprites
	.word	gBattlerSpriteIds
.L486:
	ldr	r2, .L507
	ldr	r0, .L507+0x4
	add	r0, r0, r8
	b	.L498
.L508:
	.align	2, 0
.L507:
	.word	gSprites
	.word	gBattlerSpriteIds
.L485:
	add	r0, r7, #0
	mov	r1, sl
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L509
	ldrh	r1, [r1]
	sub	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L489	@cond_branch
	mov	r0, #0x2
	add	r4, r7, #0
	eor	r4, r4, r0
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L489	@cond_branch
	ldr	r3, .L509+0x4
	ldr	r2, .L509+0x8
	add	r0, r7, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r6, r0, r3
	add	r2, r4, r2
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r3
	mov	r0, #0x20
	ldrsh	r1, [r6, r0]
	mov	r3, #0x20
	ldrsh	r0, [r2, r3]
	cmp	r1, r0
	bge	.L490	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x43
	ldrb	r0, [r0]
	add	r0, r0, #0x1
	b	.L499
.L510:
	.align	2, 0
.L509:
	.word	gBattleAnimArgs
	.word	gSprites
	.word	gBattlerSpriteIds
.L490:
	add	r0, r6, #0
	b	.L500
.L489:
	ldr	r2, .L511
	ldr	r0, .L511+0x4
	add	r0, r7, r0
.L498:
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
.L500:
	add	r0, r0, #0x43
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
.L499:
	add	r1, r5, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	add	r0, r7, #0
	ldr	r1, [sp, #0x4]
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L511+0x8
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L493	@cond_branch
	mov	r1, #0x2
	mov	r0, r8
	eor	r0, r0, r1
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L493	@cond_branch
	ldrb	r1, [r4, #0xc]
	mov	r0, r8
	mov	r2, sp
	mov	r3, sp
	add	r3, r3, #0x2
	bl	SetAverageBattlerPositions
	b	.L494
.L512:
	.align	2, 0
.L511:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimArgs
.L493:
	mov	r4, sp
	mov	r0, r8
	mov	r1, sl
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	mov	r0, r8
	ldr	r1, [sp, #0x4]
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, sp
	strh	r0, [r2, #0x2]
.L494:
	mov	r0, r8
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L495	@cond_branch
	mov	r3, sp
	mov	r2, sp
	ldr	r1, .L513
	ldrh	r0, [r1, #0x6]
	ldrh	r2, [r2]
	add	r0, r0, r2
	strh	r0, [r3]
	add	r2, r1, #0
	b	.L496
.L514:
	.align	2, 0
.L513:
	.word	gBattleAnimArgs
.L495:
	mov	r3, sp
	mov	r0, sp
	ldr	r2, .L515
	ldrh	r0, [r0]
	ldrh	r1, [r2, #0x6]
	sub	r0, r0, r1
	strh	r0, [r3]
.L496:
	ldrh	r1, [r2, #0x8]
	mov	r3, sp
	ldrh	r3, [r3, #0x2]
	add	r1, r1, r3
	mov	r0, sp
	strh	r1, [r0, #0x2]
	mov	r3, r9
	strh	r3, [r5, #0x30]
	strh	r3, [r5, #0x20]
	strh	r6, [r5, #0x34]
	strh	r6, [r5, #0x22]
	ldrh	r0, [r0]
	strh	r0, [r5, #0x32]
	strh	r1, [r5, #0x36]
	ldrh	r0, [r2]
	strh	r0, [r5, #0x2e]
	add	r0, r5, #0
	bl	InitAnimLinearTranslation
	ldr	r1, .L515+0x4
	str	r1, [r5, #0x1c]
	add	r0, r5, #0
	bl	_call_via_r1
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L516:
	.align	2, 0
.L515:
	.word	gBattleAnimArgs
	.word	sub_8105284
.Lfe58:
	.size	 sub_81052A4,.Lfe58-sub_81052A4
	.align	2, 0
	.globl	sub_81054E8
	.type	 sub_81054E8,function
	.thumb_func
sub_81054E8:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L519
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L518	@cond_branch
	lsl	r0, r0, #0x14
	ldr	r1, .L519+0x4
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	ldr	r1, .L519+0x8
	ldrb	r2, [r1, #0xa]
	ldrh	r3, [r1, #0x8]
	mov	r1, #0xf
	bl	BlendPalette
.L518:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	ldr	r1, .L519+0xc
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L520:
	.align	2, 0
.L519:
	.word	0x27db
	.word	0x1010000
	.word	gBattleAnimArgs
	.word	sub_80A77C8
.Lfe59:
	.size	 sub_81054E8,.Lfe59-sub_81054E8
	.align	2, 0
	.globl	sub_8105538
	.type	 sub_8105538,function
	.thumb_func
sub_8105538:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L524
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r1, #0xa0
	cmp	r0, #0
	beq	.L522	@cond_branch
	ldr	r1, .L524+0x4
.L522:
	mov	r0, #0xe0
	lsl	r0, r0, #0x2
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	ldr	r0, .L524+0x8
	ldrh	r0, [r0, #0x4]
	strh	r0, [r4, #0x3c]
	ldr	r0, .L524+0xc
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L525:
	.align	2, 0
.L524:
	.word	gBattleAnimAttacker
	.word	0xff60
	.word	gBattleAnimArgs
	.word	sub_810557C
.Lfe60:
	.size	 sub_8105538,.Lfe60-sub_8105538
	.align	2, 0
	.type	 sub_810557C,function
	.thumb_func
sub_810557C:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r2, [r4, #0x2e]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x26]
	sub	r1, r1, r0
	mov	r5, #0x0
	strh	r1, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	sub	r2, r2, #0x20
	strh	r2, [r4, #0x2e]
	ldr	r0, .L530
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r1, #0xa0
	cmp	r0, #0
	beq	.L527	@cond_branch
	ldr	r1, .L530+0x4
.L527:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	ldrh	r1, [r4, #0x30]
	add	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x26]
	mov	r2, #0x26
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L529	@cond_branch
	ldrh	r2, [r4, #0x22]
	add	r0, r1, r2
	strh	r0, [r4, #0x22]
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	strh	r5, [r4, #0x26]
	strh	r5, [r4, #0x24]
	strh	r5, [r4, #0x2e]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	ldr	r0, .L530+0x8
	str	r0, [r4, #0x1c]
.L529:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L531:
	.align	2, 0
.L530:
	.word	gBattleAnimAttacker
	.word	0xff60
	.word	sub_81055F4
.Lfe61:
	.size	 sub_810557C,.Lfe61-sub_810557C
	.align	2, 0
	.type	 sub_81055F4,function
	.thumb_func
sub_81055F4:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x13
	ble	.L533	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	bl	StartSpriteAffineAnim
	ldr	r0, .L534
	str	r0, [r4, #0x1c]
.L533:
	pop	{r4}
	pop	{r0}
	bx	r0
.L535:
	.align	2, 0
.L534:
	.word	sub_810561C
.Lfe62:
	.size	 sub_81055F4,.Lfe62-sub_81055F4
	.align	2, 0
	.type	 sub_810561C,function
	.thumb_func
sub_810561C:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L537	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L538	@cond_branch
	ldrh	r2, [r4, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x10
	ldr	r3, .L541
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r0, .L541+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	ldr	r0, .L541+0x8
	b	.L540
.L542:
	.align	2, 0
.L541:
	.word	0x3ff
	.word	-0x400
	.word	sub_8105694
.L538:
	ldrh	r2, [r4, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x20
	ldr	r3, .L543
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r0, .L543+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	ldr	r0, .L543+0x8
.L540:
	str	r0, [r4, #0x1c]
.L537:
	pop	{r4}
	pop	{r0}
	bx	r0
.L544:
	.align	2, 0
.L543:
	.word	0x3ff
	.word	-0x400
	.word	sub_810571C
.Lfe63:
	.size	 sub_810561C,.Lfe63-sub_810561C
	.align	2, 0
	.type	 sub_8105694,function
	.thumb_func
sub_8105694:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x26]
	sub	r0, r0, #0x2
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9
	bne	.L546	@cond_branch
	mov	r0, #0x10
	strh	r0, [r4, #0x2e]
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r0, .L547
	str	r0, [r4, #0x1c]
.L546:
	pop	{r4}
	pop	{r0}
	bx	r0
.L548:
	.align	2, 0
.L547:
	.word	sub_81056D4
.Lfe64:
	.size	 sub_8105694,.Lfe64-sub_8105694
	.align	2, 0
	.type	 sub_81056D4,function
	.thumb_func
sub_81056D4:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__modsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L550	@cond_branch
	ldrh	r1, [r4, #0x2e]
	sub	r1, r1, #0x1
	strh	r1, [r4, #0x2e]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L550	@cond_branch
	ldr	r0, .L552
	str	r0, [r4, #0x1c]
.L550:
	pop	{r4}
	pop	{r0}
	bx	r0
.L553:
	.align	2, 0
.L552:
	.word	sub_810571C
.Lfe65:
	.size	 sub_81056D4,.Lfe65-sub_81056D4
	.align	2, 0
	.type	 sub_810571C,function
	.thumb_func
sub_810571C:
	push	{lr}
	add	r3, r0, #0
	ldr	r0, .L559
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L559+0x4
	cmp	r1, r0
	bne	.L555	@cond_branch
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r1, #0x3c
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bne	.L556	@cond_branch
	ldr	r0, .L559+0x8
	b	.L558
.L560:
	.align	2, 0
.L559:
	.word	gBattleAnimArgs
	.word	0xffff
	.word	sub_810575C
.L556:
	ldr	r0, .L561
.L558:
	str	r0, [r3, #0x1c]
.L555:
	pop	{r0}
	bx	r0
.L562:
	.align	2, 0
.L561:
	.word	DestroyAnimSprite
.Lfe66:
	.size	 sub_810571C,.Lfe66-sub_810571C
	.align	2, 0
	.type	 sub_810575C,function
	.thumb_func
sub_810575C:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyAnimSprite
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe67:
	.size	 sub_810575C,.Lfe67-sub_810575C
	.align	2, 0
	.globl	sub_810577C
	.type	 sub_810577C,function
	.thumb_func
sub_810577C:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L565
	add	r4, r4, r0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	strh	r1, [r4, #0x8]
	ldr	r2, .L565+0x4
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r0, .L565+0x8
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L566:
	.align	2, 0
.L565:
	.word	gTasks
	.word	gUnknown_085938B0
	.word	sub_81057B8
.Lfe68:
	.size	 sub_810577C,.Lfe68-sub_810577C
	.align	2, 0
	.type	 sub_81057B8,function
	.thumb_func
sub_81057B8:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L569
	add	r4, r0, r1
	add	r0, r4, #0
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	bne	.L568	@cond_branch
	ldr	r2, .L569+0x4
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r3, [r0, #0x26]
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L568:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L570:
	.align	2, 0
.L569:
	.word	gTasks
	.word	gSprites
.Lfe69:
	.size	 sub_81057B8,.Lfe69-sub_81057B8
	.align	2, 0
	.globl	sub_8105810
	.type	 sub_8105810,function
	.thumb_func
sub_8105810:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L575
	add	r4, r1, r0
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	strh	r0, [r4, #0xa]
	strh	r0, [r4, #0xc]
	strh	r0, [r4, #0xe]
	mov	r0, #0x3
	strh	r0, [r4, #0x20]
	ldr	r0, .L575+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L572	@cond_branch
	ldr	r0, .L575+0x8
	strh	r0, [r4, #0x22]
	mov	r0, #0x8
	b	.L574
.L576:
	.align	2, 0
.L575:
	.word	gTasks
	.word	gBattleAnimTarget
	.word	0xffff
.L572:
	mov	r0, #0x1
	strh	r0, [r4, #0x22]
	ldr	r0, .L577
.L574:
	strh	r0, [r4, #0x24]
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldr	r0, .L577+0x4
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L578:
	.align	2, 0
.L577:
	.word	0xfff8
	.word	sub_8105878
.Lfe70:
	.size	 sub_8105810,.Lfe70-sub_8105810
	.align	2, 0
	.type	 sub_8105878,function
	.thumb_func
sub_8105878:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L597
	add	r3, r0, r1
	mov	r0, #0x8
	ldrsh	r4, [r3, r0]
	cmp	r4, #0x1
	beq	.L582	@cond_branch
	cmp	r4, #0x1
	bgt	.L595	@cond_branch
	cmp	r4, #0
	beq	.L581	@cond_branch
	b	.L580
.L598:
	.align	2, 0
.L597:
	.word	gTasks
.L595:
	cmp	r4, #0x2
	beq	.L588	@cond_branch
	cmp	r4, #0x3
	beq	.L591	@cond_branch
	b	.L580
.L581:
	ldr	r2, .L599
	mov	r0, #0x26
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x24]
	ldrh	r2, [r0, #0x24]
	add	r1, r1, r2
	strh	r1, [r0, #0x24]
	strh	r4, [r3, #0xa]
	strh	r4, [r3, #0xc]
	strh	r4, [r3, #0xe]
	b	.L589
.L600:
	.align	2, 0
.L599:
	.word	gSprites
.L582:
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L580	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0xa]
	ldrh	r0, [r3, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xc]
	and	r0, r0, r4
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L584	@cond_branch
	ldr	r2, .L601
	mov	r4, #0x26
	ldrsh	r1, [r3, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x24]
	add	r1, r1, #0x6
	b	.L596
.L602:
	.align	2, 0
.L601:
	.word	gSprites
.L584:
	ldr	r2, .L603
	mov	r0, #0x26
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x24]
	sub	r1, r1, #0x6
.L596:
	strh	r1, [r0, #0x24]
	ldrh	r0, [r3, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L580	@cond_branch
	ldrh	r1, [r3, #0xc]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L589	@cond_branch
	mov	r1, #0x26
	ldrsh	r0, [r3, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1, #0x24]
	sub	r0, r0, #0x6
	strh	r0, [r1, #0x24]
	b	.L589
.L604:
	.align	2, 0
.L603:
	.word	gSprites
.L588:
	ldrh	r0, [r3, #0x20]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x20]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L589	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x8]
	b	.L580
.L589:
	ldrh	r0, [r3, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x8]
	b	.L580
.L591:
	ldr	r2, .L605
	mov	r4, #0x26
	ldrsh	r1, [r3, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x22]
	ldrh	r4, [r0, #0x24]
	add	r1, r1, r4
	strh	r1, [r0, #0x24]
	mov	r0, #0x26
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x24
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L580	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L580:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L606:
	.align	2, 0
.L605:
	.word	gSprites
.Lfe71:
	.size	 sub_8105878,.Lfe71-sub_8105878
	.align	2, 0
	.globl	sub_810599C
	.type	 sub_810599C,function
	.thumb_func
sub_810599C:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L608
	add	r4, r4, r0
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	strh	r0, [r4, #0xa]
	strh	r0, [r4, #0xc]
	strh	r0, [r4, #0xe]
	mov	r0, #0x1
	strh	r0, [r4, #0x10]
	mov	r0, #0xe
	strh	r0, [r4, #0x22]
	mov	r0, #0x2
	strh	r0, [r4, #0x24]
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldr	r0, .L608+0x4
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L609:
	.align	2, 0
.L608:
	.word	gTasks
	.word	sub_81059E0
.Lfe72:
	.size	 sub_810599C,.Lfe72-sub_810599C
	.align	2, 0
	.type	 sub_81059E0,function
	.thumb_func
sub_81059E0:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L618
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r2, [r4, r0]
	cmp	r2, #0
	bne	.L611	@cond_branch
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x10
	ldrsh	r1, [r4, r3]
	cmp	r0, r1
	ble	.L611	@cond_branch
	strh	r2, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L612	@cond_branch
	ldr	r3, .L618+0x4
	mov	r6, #0x26
	ldrsh	r1, [r4, r6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	b	.L617
.L619:
	.align	2, 0
.L618:
	.word	gTasks
	.word	gSprites
.L612:
	ldr	r3, .L620
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
.L617:
	strb	r1, [r0]
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	mov	r2, #0x0
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r6, #0x22
	ldrsh	r1, [r4, r6]
	cmp	r0, r1
	blt	.L611	@cond_branch
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r6, #0x24
	ldrsh	r1, [r4, r6]
	cmp	r0, r1
	bge	.L615	@cond_branch
	strh	r2, [r4, #0xa]
	strh	r2, [r4, #0xc]
	strh	r2, [r4, #0xe]
	b	.L611
.L621:
	.align	2, 0
.L620:
	.word	gSprites
.L615:
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L611:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe73:
	.size	 sub_81059E0,.Lfe73-sub_81059E0
	.align	2, 0
	.globl	sub_8105AAC
	.type	 sub_8105AAC,function
	.thumb_func
sub_8105AAC:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L623
	add	r4, r4, r0
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	mov	r1, #0x4
	strh	r1, [r4, #0xa]
	strh	r0, [r4, #0xc]
	strh	r0, [r4, #0xe]
	strh	r0, [r4, #0x10]
	strh	r0, [r4, #0x12]
	strh	r0, [r4, #0x14]
	strh	r0, [r4, #0x16]
	strh	r0, [r4, #0x18]
	strh	r0, [r4, #0x22]
	ldr	r5, .L623+0x4
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldr	r0, .L623+0x8
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L624:
	.align	2, 0
.L623:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	sub_8105B08
.Lfe74:
	.size	 sub_8105AAC,.Lfe74-sub_8105AAC
	.align	2, 0
	.type	 sub_8105B08,function
	.thumb_func
sub_8105B08:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L648
	add	r4, r0, r1
	mov	r0, #0x18
	ldrsh	r2, [r4, r0]
	cmp	r2, #0x1
	beq	.L632	@cond_branch
	cmp	r2, #0x1
	bgt	.L637	@cond_branch
	cmp	r2, #0
	beq	.L627	@cond_branch
	b	.L626
.L649:
	.align	2, 0
.L648:
	.word	gTasks
.L637:
	cmp	r2, #0x2
	beq	.L634	@cond_branch
	b	.L626
.L627:
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L626	@cond_branch
	strh	r2, [r4, #0x10]
	ldrh	r0, [r4, #0x12]
	add	r0, r0, #0x1
	mov	r1, #0x1
	and	r0, r0, r1
	strh	r0, [r4, #0x12]
	ldrh	r0, [r4, #0x14]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x14]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	ble	.L626	@cond_branch
	mov	r1, #0x16
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L630	@cond_branch
	strh	r2, [r4, #0x14]
	mov	r0, #0x1
	strh	r0, [r4, #0x18]
	b	.L626
.L630:
	mov	r0, #0x2
	strh	r0, [r4, #0x18]
	b	.L626
.L632:
	mov	r1, #0x0
	strh	r1, [r4, #0x12]
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	ble	.L626	@cond_branch
	strh	r2, [r4, #0x16]
	strh	r1, [r4, #0x18]
	b	.L626
.L634:
	mov	r0, #0x1
	strh	r0, [r4, #0x12]
.L626:
	mov	r2, #0x8
	ldrsh	r5, [r4, r2]
	cmp	r5, #0
	beq	.L639	@cond_branch
	cmp	r5, #0x1
	beq	.L644	@cond_branch
	b	.L638
.L639:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L638	@cond_branch
	strh	r5, [r4, #0xa]
	ldr	r0, .L650
	mov	r3, #0x24
	ldrsh	r1, [r4, r3]
	mov	r3, #0x26
	ldrsh	r2, [r4, r3]
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x40
	beq	.L638	@cond_branch
	ldr	r0, .L650+0x4
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	strh	r6, [r1, #0x2e]
	mov	r0, #0xd
	strh	r0, [r1, #0x30]
	ldr	r2, .L650+0x8
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	strh	r0, [r1, #0x24]
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	lsl	r0, r0, #0x1
	add	r2, r2, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	strh	r0, [r1, #0x26]
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x22]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L638	@cond_branch
	strh	r5, [r4, #0xc]
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	ble	.L638	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L638
.L651:
	.align	2, 0
.L650:
	.word	gUnknown_085938DC
	.word	gSprites
	.word	gUnknown_085938F4
.L644:
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L638	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L638:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe75:
	.size	 sub_8105B08,.Lfe75-sub_8105B08
	.align	2, 0
	.globl	sub_8105C48
	.type	 sub_8105C48,function
	.thumb_func
sub_8105C48:
	push	{r4, lr}
	add	r3, r0, #0
	ldr	r4, .L654
	mov	r0, #0x2e
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x3e
	add	r1, r1, r3
	mov	ip, r1
	mov	r2, #0x1
	ldrb	r1, [r0, #0x12]
	and	r1, r1, r2
	lsl	r1, r1, #0x2
	mov	r0, ip
	ldrb	r2, [r0]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	add	r0, r3, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L653	@cond_branch
	mov	r0, #0x30
	ldrsh	r1, [r3, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x2e
	ldrsh	r2, [r3, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r0, r4, #0
	add	r0, r0, #0x8
	add	r1, r1, r0
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	add	r0, r3, #0
	bl	DestroySprite
.L653:
	pop	{r4}
	pop	{r0}
	bx	r0
.L655:
	.align	2, 0
.L654:
	.word	gTasks
.Lfe76:
	.size	 sub_8105C48,.Lfe76-sub_8105C48
	.align	2, 0
	.globl	sub_8105CB4
	.type	 sub_8105CB4,function
	.thumb_func
sub_8105CB4:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L667
	bl	IndexOfSpritePaletteTag
	mov	r1, sp
	strb	r0, [r1]
	mov	r4, #0x1
	ldr	r0, .L667+0x4
	add	r5, r0, #0
.L660:
	sub	r0, r5, r4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	AllocSpritePalette
	mov	r2, sp
	add	r1, r2, r4
	strb	r0, [r1]
	add	r4, r4, #0x1
	cmp	r4, #0x2
	ble	.L660	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	bl	AllocZeroed
	add	r1, r0, #0
	ldr	r0, .L667+0x8
	ldr	r0, [r0]
	mov	r2, #0xbe
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	str	r1, [r0]
	ldr	r0, .L667+0xc
	bl	LZDecompressWram
	mov	r4, #0x0
.L665:
	ldr	r5, .L667+0x8
	ldr	r0, [r5]
	mov	r1, #0xbe
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r4, #0x6
	ldr	r0, [r0]
	add	r0, r0, r1
	mov	r2, sp
	add	r1, r2, r4
	ldrb	r1, [r1]
	lsl	r1, r1, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r1, r1, r2
	lsr	r1, r1, #0x10
	mov	r2, #0x20
	bl	LoadPalette
	add	r4, r4, #0x1
	cmp	r4, #0x2
	ble	.L665	@cond_branch
	ldr	r0, [r5]
	mov	r4, #0xbe
	lsl	r4, r4, #0x1
	add	r0, r0, r4
	ldr	r0, [r0]
	bl	Free
	ldr	r0, [r5]
	add	r0, r0, r4
	mov	r1, #0x0
	str	r1, [r0]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L668:
	.align	2, 0
.L667:
	.word	0x27de
	.word	0x2710
	.word	gMonSpritesGfxPtr
	.word	gBattleAnimSpritePal_MusicNotes2
.Lfe77:
	.size	 sub_8105CB4,.Lfe77-sub_8105CB4
	.align	2, 0
	.globl	sub_8105D60
	.type	 sub_8105D60,function
	.thumb_func
sub_8105D60:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r5, .L675
	mov	r4, #0x2
.L673:
	ldrh	r0, [r5]
	bl	FreeSpritePaletteByTag
	add	r5, r5, #0x2
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L673	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L676:
	.align	2, 0
.L675:
	.word	gUnknown_08593950
.Lfe78:
	.size	 sub_8105D60,.Lfe78-sub_8105D60
	.align	2, 0
	.type	 sub_8105D88,function
	.thumb_func
sub_8105D88:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r3, r2, #0x18
	mov	r0, #0x1
	and	r3, r3, r0
	neg	r0, r3
	orr	r0, r0, r3
	asr	r0, r0, #0x1f
	mov	r3, #0x20
	and	r0, r0, r3
	ldrh	r4, [r5, #0x4]
	lsl	r3, r4, #0x16
	lsr	r3, r3, #0x16
	lsr	r1, r1, #0x16
	add	r0, r0, r1
	add	r3, r3, r0
	ldr	r1, .L678
	add	r0, r1, #0
	and	r3, r3, r0
	ldr	r0, .L678+0x4
	and	r0, r0, r4
	orr	r0, r0, r3
	strh	r0, [r5, #0x4]
	ldr	r0, .L678+0x8
	lsr	r2, r2, #0x19
	lsl	r2, r2, #0x1
	add	r2, r2, r0
	ldrh	r0, [r2]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x4
	ldrb	r2, [r5, #0x5]
	mov	r1, #0xf
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0x5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L679:
	.align	2, 0
.L678:
	.word	0x3ff
	.word	-0x400
	.word	gUnknown_08593950
.Lfe79:
	.size	 sub_8105D88,.Lfe79-sub_8105D88
	.align	2, 0
	.globl	sub_8105DE8
	.type	 sub_8105DE8,function
	.thumb_func
sub_8105DE8:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	ldr	r6, .L682
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L681	@cond_branch
	ldr	r1, .L682+0x4
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L681:
	ldr	r4, .L682+0x4
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x2e]
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x4]
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	ldrb	r0, [r6]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x6]
	add	r0, r0, r1
	strh	r0, [r5, #0x36]
	ldr	r0, .L682+0x8
	str	r0, [r5, #0x1c]
	ldr	r1, .L682+0xc
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldrb	r1, [r4, #0xa]
	ldrb	r2, [r4, #0xc]
	add	r0, r5, #0
	bl	sub_8105D88
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L683:
	.align	2, 0
.L682:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe80:
	.size	 sub_8105DE8,.Lfe80-sub_8105DE8
	.align	2, 0
	.globl	sub_8105E60
	.type	 sub_8105E60,function
	.thumb_func
sub_8105E60:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L685	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
.L685:
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x8
	bl	Sin
	strh	r0, [r4, #0x24]
	ldrh	r2, [r4, #0x32]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x7
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	sub	r2, r2, #0x80
	strh	r2, [r4, #0x32]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x3c
	bne	.L686	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L686:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe81:
	.size	 sub_8105E60,.Lfe81-sub_8105E60
	.align	2, 0
	.globl	sub_8105EB0
	.type	 sub_8105EB0,function
	.thumb_func
sub_8105EB0:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	mov	r6, #0xf0
	cmp	r0, #0
	beq	.L688	@cond_branch
	mov	r6, #0x98
.L688:
	mov	r5, #0x0
	ldr	r1, .L690
	strh	r6, [r1]
	ldr	r4, .L690+0x4
	mov	r0, #0xa0
	strh	r0, [r4]
	ldrh	r1, [r1]
	mov	r0, #0x40
	bl	SetGpuReg
	ldrh	r1, [r4]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r1, .L690+0x8
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L690+0xc
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0xc8
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x10
	bl	SetGpuReg
	ldr	r1, .L690+0x10
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r5, [r0, #0x8]
	strh	r6, [r0, #0xa]
	ldr	r1, .L690+0x14
	str	r1, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L691:
	.align	2, 0
.L690:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f1f
	.word	0x3f3f
	.word	gTasks
	.word	sub_8105F30
.Lfe82:
	.size	 sub_8105EB0,.Lfe82-sub_8105EB0
	.align	2, 0
	.type	 sub_8105F30,function
	.thumb_func
sub_8105F30:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L695
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r3, r1, r2
	ldrh	r0, [r3, #0x8]
	add	r4, r0, #0
	add	r4, r4, #0xd
	strh	r4, [r3, #0x8]
	ldrh	r0, [r3, #0xa]
	add	r2, r0, #0
	sub	r2, r2, #0xd
	strh	r2, [r3, #0xa]
	lsl	r1, r4, #0x10
	lsl	r0, r2, #0x10
	cmp	r1, r0
	blt	.L693	@cond_branch
	ldr	r0, .L695+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L695+0x8
	str	r0, [r3]
	b	.L694
.L696:
	.align	2, 0
.L695:
	.word	gTasks
	.word	gBattle_WIN0H
	.word	sub_8105F84
.L693:
	ldr	r1, .L697
	lsl	r0, r4, #0x8
	orr	r2, r2, r0
	strh	r2, [r1]
.L694:
	pop	{r4}
	pop	{r0}
	bx	r0
.L698:
	.align	2, 0
.L697:
	.word	gBattle_WIN0H
.Lfe83:
	.size	 sub_8105F30,.Lfe83-sub_8105F30
	.align	2, 0
	.type	 sub_8105F84,function
	.thumb_func
sub_8105F84:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L703
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r0, [r1, #0x1c]
	add	r0, r0, #0x1
	mov	r4, #0x0
	strh	r0, [r1, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L700	@cond_branch
	mov	r0, #0x88
	strh	r0, [r1, #0x1e]
	mov	r0, #0x50
	mov	r1, #0x88
	bl	SetGpuReg
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_80A75AC
	ldr	r2, .L703+0x4
	mov	r1, #0x10
	bl	BlendPalettes
	b	.L701
.L704:
	.align	2, 0
.L703:
	.word	gTasks
	.word	0x7fff
.L700:
	cmp	r0, #0x4
	ble	.L701	@cond_branch
	ldr	r0, .L705
	strh	r4, [r0]
	ldr	r0, .L705+0x4
	strh	r4, [r0]
	ldr	r4, .L705+0x8
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L701:
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L706:
	.align	2, 0
.L705:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
.Lfe84:
	.size	 sub_8105F84,.Lfe84-sub_8105F84
	.align	2, 0
	.globl	sub_8106020
	.type	 sub_8106020,function
	.thumb_func
sub_8106020:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L711
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L708	@cond_branch
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L711+0x4
	add	r0, r5, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r1, .L711+0x8
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x4
	strh	r1, [r0, #0x24]
	b	.L709
.L712:
	.align	2, 0
.L711:
	.word	gTasks
	.word	gUnknown_08593988
	.word	gSprites
.L708:
	ldr	r1, .L713
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrh	r0, [r4, #0x24]
	neg	r0, r0
	strh	r0, [r4, #0x24]
	add	r0, r5, #0
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L709	@cond_branch
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L709:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L714:
	.align	2, 0
.L713:
	.word	gSprites
.Lfe85:
	.size	 sub_8106020,.Lfe85-sub_8106020
	.align	2, 0
	.globl	sub_81060B0
	.type	 sub_81060B0,function
	.thumb_func
sub_81060B0:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L719
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L716	@cond_branch
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L719+0x4
	add	r0, r5, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r1, .L719+0x8
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x4
	strh	r1, [r0, #0x24]
	b	.L717
.L720:
	.align	2, 0
.L719:
	.word	gTasks
	.word	gUnknown_08593988
	.word	gSprites
.L716:
	ldr	r1, .L721
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrh	r0, [r4, #0x24]
	neg	r0, r0
	strh	r0, [r4, #0x24]
	add	r0, r5, #0
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L717	@cond_branch
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L717:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L722:
	.align	2, 0
.L721:
	.word	gSprites
.Lfe86:
	.size	 sub_81060B0,.Lfe86-sub_81060B0
	.align	2, 0
	.globl	sub_8106140
	.type	 sub_8106140,function
	.thumb_func
sub_8106140:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	mov	r0, #0x5f
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldr	r5, .L724
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	ldr	r0, .L724+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L725:
	.align	2, 0
.L724:
	.word	gBattleAnimTarget
	.word	sub_810618C
.Lfe87:
	.size	 sub_8106140,.Lfe87-sub_8106140
	.align	2, 0
	.type	 sub_810618C,function
	.thumb_func
sub_810618C:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L727	@cond_branch
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0xe
	bl	Sin
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x4
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	b	.L728
.L727:
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L728:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe88:
	.size	 sub_810618C,.Lfe88-sub_810618C
	.align	2, 0
	.globl	sub_81061C4
	.type	 sub_81061C4,function
	.thumb_func
sub_81061C4:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r2, [r4, #0x2e]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L730	@cond_branch
	ldr	r1, .L734
	ldrh	r0, [r1]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x32]
	add	r0, r2, #0x1
	strh	r0, [r4, #0x2e]
	b	.L731
.L735:
	.align	2, 0
.L734:
	.word	gBattleAnimArgs
.L730:
	ldrh	r0, [r4, #0x30]
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	strh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x3
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x34]
	cmp	r0, #0x64
	ble	.L732	@cond_branch
	mov	r0, #0x34
	ldrsh	r1, [r4, r0]
	lsr	r0, r1, #0x1f
	add	r0, r1, r0
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x1
	sub	r1, r1, r0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L732:
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x78
	ble	.L731	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L731:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe89:
	.size	 sub_81061C4,.Lfe89-sub_81061C4
	.align	2, 0
	.globl	sub_810624C
	.type	 sub_810624C,function
	.thumb_func
sub_810624C:
	push	{lr}
	ldr	r2, .L737
	ldrh	r1, [r2]
	strh	r1, [r0, #0x20]
	mov	r1, #0xa0
	strh	r1, [r0, #0x22]
	ldrh	r1, [r2, #0x4]
	strh	r1, [r0, #0x2e]
	ldrh	r1, [r2, #0x2]
	strh	r1, [r0, #0x30]
	ldr	r1, .L737+0x4
	str	r1, [r0, #0x1c]
	ldr	r1, .L737+0x8
	bl	StoreSpriteCallbackInData6
	pop	{r0}
	bx	r0
.L738:
	.align	2, 0
.L737:
	.word	gBattleAnimArgs
	.word	WaitAnimForDuration
	.word	sub_810627C
.Lfe90:
	.size	 sub_810624C,.Lfe90-sub_810624C
	.align	2, 0
	.type	 sub_810627C,function
	.thumb_func
sub_810627C:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x32]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x18
	neg	r0, r0
	strh	r0, [r4, #0x26]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	mov	r1, #0x4
	bl	Sin
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x3
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r5, r0, #0x10
	cmp	r5, #0x48
	bgt	.L740	@cond_branch
	mov	r0, #0x34
	ldrsh	r1, [r4, r0]
	lsr	r0, r1, #0x1f
	add	r0, r1, r0
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x1
	sub	r1, r1, r0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	cmp	r5, #0x40
	bgt	.L740	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L740:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe91:
	.size	 sub_810627C,.Lfe91-sub_810627C
	.align	2, 0
	.globl	AnimTask_HeartsBackground
	.type	 AnimTask_HeartsBackground,function
	.thumb_func
AnimTask_HeartsBackground:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L744
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x3
	bl	SetAnimBgAttribute
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L743	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x1
	bl	SetAnimBgAttribute
.L743:
	ldr	r0, .L744+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r4, .L744+0x8
	strh	r1, [r4]
	mov	r0, #0x14
	mov	r1, #0x0
	bl	SetGpuReg
	ldrh	r1, [r4]
	mov	r0, #0x16
	bl	SetGpuReg
	mov	r0, sp
	bl	sub_80A6B30
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L744+0xc
	mov	r2, sp
	ldrh	r2, [r2, #0xa]
	bl	AnimLoadCompressedBgGfx
	ldr	r1, .L744+0x10
	mov	r0, sp
	mov	r2, #0x0
	bl	sub_80A6D60
	ldr	r0, .L744+0x14
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldr	r1, .L744+0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L744+0x1c
	str	r1, [r0]
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L745:
	.align	2, 0
.L744:
	.word	0x3f42
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gUnknown_08C232E0
	.word	gUnknown_08C23D78
	.word	gUnknown_08C23D50
	.word	gTasks
	.word	sub_81063A8
.Lfe92:
	.size	 AnimTask_HeartsBackground,.Lfe92-AnimTask_HeartsBackground
	.align	2, 0
	.type	 sub_81063A8,function
	.thumb_func
sub_81063A8:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L761
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x20
	ldrsh	r0, [r0, r2]
	add	r2, r1, #0
	cmp	r0, #0x4
	bls	.LCB7911
	b	.L747	@long jump
.LCB7911:
	lsl	r0, r0, #0x2
	ldr	r1, .L761+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L762:
	.align	2, 0
.L761:
	.word	gTasks
	.word	.L759
	.align	2, 0
	.align	2, 0
.L759:
	.word	.L748
	.word	.L751
	.word	.L753
	.word	.L756
	.word	.L757
.L748:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	mov	r5, #0x0
	strh	r0, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L747	@cond_branch
	strh	r5, [r4, #0x1c]
	ldrh	r1, [r4, #0x1e]
	add	r1, r1, #0x1
	strh	r1, [r4, #0x1e]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x1e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L747	@cond_branch
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x20]
	strh	r5, [r4, #0x1e]
	b	.L747
.L751:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrh	r0, [r1, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8d
	bne	.L747	@cond_branch
	mov	r0, #0x10
	strh	r0, [r1, #0x1e]
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x20]
	b	.L747
.L753:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L747	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	ldrh	r1, [r4, #0x1e]
	sub	r1, r1, #0x1
	strh	r1, [r4, #0x1e]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0x1e
	ldrsh	r1, [r4, r2]
	cmp	r1, #0
	bne	.L747	@cond_branch
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x20]
	strh	r1, [r4, #0x1e]
	b	.L747
.L756:
	mov	r0, sp
	bl	sub_80A6B30
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	bl	sub_80A6C68
	ldr	r1, .L763
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	b	.L747
.L764:
	.align	2, 0
.L763:
	.word	gTasks
.L757:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L758	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x0
	bl	SetAnimBgAttribute
.L758:
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L747:
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe93:
	.size	 sub_81063A8,.Lfe93-sub_81063A8
	.align	2, 0
	.globl	sub_81064F8
	.type	 sub_81064F8,function
	.thumb_func
sub_81064F8:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L772
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L766	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x1
	bl	SetAnimBgAttribute
.L766:
	ldr	r0, .L772+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r4, .L772+0x8
	strh	r1, [r4]
	mov	r0, #0x14
	mov	r1, #0x0
	bl	SetGpuReg
	ldrh	r1, [r4]
	mov	r0, #0x16
	bl	SetGpuReg
	mov	r0, sp
	bl	sub_80A6B30
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L767	@cond_branch
	ldr	r1, .L772+0xc
	b	.L771
.L773:
	.align	2, 0
.L772:
	.word	0x3f42
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gBattleAnimBgTilemap_ScaryFaceContest
.L767:
	ldr	r0, .L774
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L769	@cond_branch
	ldr	r1, .L774+0x4
.L771:
	mov	r0, sp
	mov	r2, #0x0
	bl	sub_80A6D60
	b	.L768
.L775:
	.align	2, 0
.L774:
	.word	gBattleAnimTarget
	.word	gBattleAnimBgTilemap_ScaryFacePlayer
.L769:
	ldr	r1, .L776
	mov	r0, sp
	mov	r2, #0x0
	bl	sub_80A6D60
.L768:
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L776+0x4
	mov	r2, sp
	ldrh	r2, [r2, #0xa]
	bl	AnimLoadCompressedBgGfx
	ldr	r0, .L776+0x8
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldr	r1, .L776+0xc
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L776+0x10
	str	r1, [r0]
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L777:
	.align	2, 0
.L776:
	.word	gBattleAnimBgTilemap_ScaryFaceOpponent
	.word	gUnknown_08C249F8
	.word	gUnknown_08C249D0
	.word	gTasks
	.word	sub_81065EC
.Lfe94:
	.size	 sub_81064F8,.Lfe94-sub_81064F8
	.align	2, 0
	.type	 sub_81065EC,function
	.thumb_func
sub_81065EC:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L793
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x20
	ldrsh	r0, [r0, r2]
	add	r2, r1, #0
	cmp	r0, #0x4
	bls	.LCB8253
	b	.L779	@long jump
.LCB8253:
	lsl	r0, r0, #0x2
	ldr	r1, .L793+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L794:
	.align	2, 0
.L793:
	.word	gTasks
	.word	.L791
	.align	2, 0
	.align	2, 0
.L791:
	.word	.L780
	.word	.L783
	.word	.L785
	.word	.L788
	.word	.L789
.L780:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	mov	r5, #0x0
	strh	r0, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L779	@cond_branch
	strh	r5, [r4, #0x1c]
	ldrh	r1, [r4, #0x1e]
	add	r1, r1, #0x1
	strh	r1, [r4, #0x1e]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x1e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xe
	bne	.L779	@cond_branch
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x20]
	strh	r5, [r4, #0x1e]
	b	.L779
.L783:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrh	r0, [r1, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x15
	bne	.L779	@cond_branch
	mov	r0, #0xe
	strh	r0, [r1, #0x1e]
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x20]
	b	.L779
.L785:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L779	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	ldrh	r1, [r4, #0x1e]
	sub	r1, r1, #0x1
	strh	r1, [r4, #0x1e]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0x1e
	ldrsh	r1, [r4, r2]
	cmp	r1, #0
	bne	.L779	@cond_branch
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x20]
	strh	r1, [r4, #0x1e]
	b	.L779
.L788:
	mov	r0, sp
	bl	sub_80A6B30
	mov	r0, #0x1
	bl	sub_80A6C68
	mov	r0, #0x2
	bl	sub_80A6C68
	ldr	r0, .L795
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x20]
.L789:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L790	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x0
	bl	SetAnimBgAttribute
.L790:
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L779:
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L796:
	.align	2, 0
.L795:
	.word	gTasks
.Lfe95:
	.size	 sub_81065EC,.Lfe95-sub_81065EC
	.align	2, 0
	.globl	AnimOrbitFast
	.type	 AnimOrbitFast,function
	.thumb_func
AnimOrbitFast:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L798
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, .L798+0x4
	ldrh	r0, [r1]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x30]
	ldrb	r0, [r5]
	bl	GetBattlerSpriteSubpriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x3c]
	ldr	r1, .L798+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L799:
	.align	2, 0
.L798:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimOrbitFastStep
.Lfe96:
	.size	 AnimOrbitFast,.Lfe96-AnimOrbitFast
	.align	2, 0
	.type	 AnimOrbitFastStep,function
	.thumb_func
AnimOrbitFastStep:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x40
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x7f
	bhi	.L801	@cond_branch
	ldrh	r0, [r4, #0x3c]
	add	r0, r0, #0x1
	b	.L811
.L801:
	ldrh	r0, [r4, #0x3c]
	sub	r0, r0, #0x1
.L811:
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	ldrh	r1, [r4, #0x32]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	ldrh	r1, [r4, #0x34]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x9
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	mov	r3, #0x38
	ldrsh	r2, [r4, r3]
	cmp	r2, #0
	beq	.L806	@cond_branch
	cmp	r2, #0x1
	bne	.L803	@cond_branch
	ldr	r1, .L812
	add	r0, r1, #0
	ldrh	r2, [r4, #0x32]
	add	r0, r0, r2
	strh	r0, [r4, #0x32]
	ldr	r3, .L812+0x4
	add	r0, r3, #0
	ldrh	r1, [r4, #0x34]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	bne	.L803	@cond_branch
	mov	r0, #0x2
	strh	r0, [r4, #0x38]
	b	.L800
.L813:
	.align	2, 0
.L812:
	.word	-0x400
	.word	-0x100
.L806:
	mov	r3, #0x80
	lsl	r3, r3, #0x3
	add	r0, r3, #0
	ldrh	r1, [r4, #0x32]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r0, r3, #0
	ldrh	r1, [r4, #0x34]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x2e
	ldrsh	r1, [r4, r3]
	cmp	r0, r1
	bne	.L803	@cond_branch
	strh	r2, [r4, #0x36]
	mov	r0, #0x1
	strh	r0, [r4, #0x38]
.L803:
	ldr	r0, .L814
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L814+0x4
	cmp	r1, r0
	bne	.L800	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L800:
	pop	{r4}
	pop	{r0}
	bx	r0
.L815:
	.align	2, 0
.L814:
	.word	gBattleAnimArgs
	.word	0xffff
.Lfe97:
	.size	 AnimOrbitFastStep,.Lfe97-AnimOrbitFastStep
	.align	2, 0
	.globl	AnimOrbitScatter
	.type	 AnimOrbitScatter,function
	.thumb_func
AnimOrbitScatter:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L817
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r4, .L817+0x4
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	mov	r1, #0xa
	bl	Sin
	strh	r0, [r5, #0x2e]
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	mov	r1, #0x7
	bl	Cos
	strh	r0, [r5, #0x30]
	ldr	r0, .L817+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L818:
	.align	2, 0
.L817:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimOrbitScatterStep
.Lfe98:
	.size	 AnimOrbitScatter,.Lfe98-AnimOrbitScatter
	.align	2, 0
	.type	 AnimOrbitScatterStep,function
	.thumb_func
AnimOrbitScatterStep:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	ldrh	r1, [r2, #0x24]
	add	r0, r0, r1
	strh	r0, [r2, #0x24]
	ldrh	r0, [r2, #0x30]
	ldrh	r3, [r2, #0x26]
	add	r0, r0, r3
	strh	r0, [r2, #0x26]
	mov	r1, #0x20
	ldrsh	r0, [r2, r1]
	mov	r3, #0x24
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	add	r0, r0, #0x10
	mov	r1, #0x88
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bhi	.L821	@cond_branch
	mov	r0, #0x22
	ldrsh	r1, [r2, r0]
	mov	r3, #0x26
	ldrsh	r0, [r2, r3]
	add	r1, r1, r0
	cmp	r1, #0xa0
	bgt	.L821	@cond_branch
	mov	r0, #0x10
	neg	r0, r0
	cmp	r1, r0
	bge	.L820	@cond_branch
.L821:
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L820:
	pop	{r0}
	bx	r0
.Lfe99:
	.size	 AnimOrbitScatterStep,.Lfe99-AnimOrbitScatterStep
	.align	2, 0
	.type	 sub_8106914,function
	.thumb_func
sub_8106914:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	ldrh	r1, [r2, #0x24]
	add	r0, r0, r1
	strh	r0, [r2, #0x24]
	ldrh	r0, [r2, #0x30]
	ldrh	r3, [r2, #0x26]
	add	r0, r0, r3
	strh	r0, [r2, #0x26]
	ldrh	r0, [r2, #0x34]
	add	r1, r0, #0x1
	strh	r1, [r2, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x32
	ldrsh	r1, [r2, r3]
	cmp	r0, r1
	blt	.L823	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L823:
	pop	{r0}
	bx	r0
.Lfe100:
	.size	 sub_8106914,.Lfe100-sub_8106914
	.align	2, 0
	.globl	sub_8106944
	.type	 sub_8106944,function
	.thumb_func
sub_8106944:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L825
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r4, .L825+0x4
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	mov	r1, #0xa
	bl	Sin
	strh	r0, [r5, #0x2e]
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	mov	r1, #0x7
	bl	Cos
	strh	r0, [r5, #0x30]
	ldrh	r0, [r4, #0x2]
	strh	r0, [r5, #0x32]
	ldr	r0, .L825+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L826:
	.align	2, 0
.L825:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	sub_8106914
.Lfe101:
	.size	 sub_8106944,.Lfe101-sub_8106944
	.align	2, 0
	.type	 sub_810699C,function
	.thumb_func
sub_810699C:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L828	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L828:
	pop	{r0}
	bx	r0
.Lfe102:
	.size	 sub_810699C,.Lfe102-sub_810699C
	.align	2, 0
	.globl	sub_81069B8
	.type	 sub_81069B8,function
	.thumb_func
sub_81069B8:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L830
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L831:
	.align	2, 0
.L830:
	.word	sub_810699C
.Lfe103:
	.size	 sub_81069B8,.Lfe103-sub_81069B8
	.align	2, 0
	.globl	sub_81069D0
	.type	 sub_81069D0,function
	.thumb_func
sub_81069D0:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L833	@cond_branch
	ldr	r0, .L837
	ldrh	r1, [r0]
	ldrh	r2, [r4, #0x20]
	add	r1, r1, r2
	strh	r1, [r4, #0x20]
	ldrh	r0, [r0, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
.L833:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r5, r0, #0x1
	mov	r0, #0xff
	and	r5, r5, r0
	add	r0, r5, #0
	mov	r1, #0x50
	bl	Sin
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4f
	bgt	.L834	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x50
	bl	Cos
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	lsr	r2, r1, #0x1f
	add	r1, r1, r2
	asr	r1, r1, #0x1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	add	r1, r1, r0
	strh	r1, [r4, #0x26]
.L834:
	mov	r0, #0x2e
	ldrsh	r2, [r4, r0]
	cmp	r2, #0x5a
	ble	.L835	@cond_branch
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	lsr	r0, r1, #0x1f
	add	r1, r1, r0
	asr	r1, r1, #0x1
	ldrh	r0, [r4, #0x24]
	sub	r0, r0, r1
	strh	r0, [r4, #0x24]
.L835:
	cmp	r2, #0x64
	ble	.L836	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L836:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L838:
	.align	2, 0
.L837:
	.word	gBattleAnimArgs
.Lfe104:
	.size	 sub_81069D0,.Lfe104-sub_81069D0
	.align	2, 0
	.type	 sub_8106A64,function
	.thumb_func
sub_8106A64:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	mov	r1, #0x5
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x3
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x34]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x14
	ble	.L840	@cond_branch
	add	r1, r0, #0
	lsr	r0, r1, #0x1f
	add	r0, r1, r0
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x1
	sub	r1, r1, r0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L840:
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1e
	ble	.L841	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L841:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe105:
	.size	 sub_8106A64,.Lfe105-sub_8106A64
	.align	2, 0
	.globl	sub_8106AD0
	.type	 sub_8106AD0,function
	.thumb_func
sub_8106AD0:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r2, [r4, #0x2e]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L843	@cond_branch
	ldr	r1, .L846
	ldrh	r0, [r1]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x32]
	add	r0, r2, #0x1
	strh	r0, [r4, #0x2e]
	b	.L844
.L847:
	.align	2, 0
.L846:
	.word	gBattleAnimArgs
.L843:
	ldrh	r0, [r4, #0x30]
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	mov	r5, #0x0
	strh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	bl	Sin
	add	r2, r0, #0
	strh	r2, [r4, #0x26]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x3
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x34]
	cmp	r0, #0x46
	ble	.L844	@cond_branch
	ldr	r0, .L848
	str	r0, [r4, #0x1c]
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r1, [r4, #0x22]
	add	r0, r2, r1
	strh	r0, [r4, #0x22]
	strh	r5, [r4, #0x24]
	strh	r5, [r4, #0x26]
	bl	Random2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xb4
	bl	__umodsi3
	strh	r0, [r4, #0x34]
.L844:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L849:
	.align	2, 0
.L848:
	.word	sub_8106A64
.Lfe106:
	.size	 sub_8106AD0,.Lfe106-sub_8106AD0
	.align	2, 0
	.globl	sub_8106B54
	.type	 sub_8106B54,function
	.thumb_func
sub_8106B54:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L851	@cond_branch
	ldr	r1, .L861
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	StartSpriteAnim
	ldr	r0, .L861+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	sub	r0, r0, #0x1
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	mov	r0, #0x1
	strh	r0, [r4, #0x32]
.L851:
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x2e]
	add	r0, r0, r2
	strh	r0, [r4, #0x2e]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x2
	add	r0, r1, #0
	cmp	r1, #0
	bge	.L852	@cond_branch
	add	r0, r0, #0xff
.L852:
	asr	r0, r0, #0x8
	lsl	r0, r0, #0x8
	sub	r0, r1, r0
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L853	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
.L853:
	mov	r0, #0x30
	ldrsh	r2, [r4, r0]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bge	.L854	@cond_branch
	add	r0, r0, #0x3
.L854:
	asr	r0, r0, #0x2
	mov	r1, #0x1e
	sub	r1, r1, r0
	add	r0, r2, #0
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r0, #0x30
	ldrsh	r2, [r4, r0]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bge	.L855	@cond_branch
	add	r0, r0, #0x7
.L855:
	asr	r0, r0, #0x3
	mov	r1, #0xa
	sub	r1, r1, r0
	add	r0, r2, #0
	bl	Sin
	strh	r0, [r4, #0x26]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x80
	ble	.L856	@cond_branch
	ldrh	r1, [r4, #0x32]
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L856	@cond_branch
	ldr	r0, .L861+0x8
	strh	r0, [r4, #0x32]
.L856:
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L857	@cond_branch
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bge	.L857	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4, #0x32]
.L857:
	ldrh	r0, [r4, #0x34]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x34]
	sub	r0, r0, #0x9
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x46
	bls	.L858	@cond_branch
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsr	r0, r1, #0x1f
	add	r0, r1, r0
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x1
	sub	r1, r1, r0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	b	.L859
.L862:
	.align	2, 0
.L861:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	0xffff
.L858:
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L859:
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x5a
	ble	.L860	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L860:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe107:
	.size	 sub_8106B54,.Lfe107-sub_8106B54
	.align	2, 0
	.globl	sub_8106C80
	.type	 sub_8106C80,function
	.thumb_func
sub_8106C80:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L864	@cond_branch
	ldr	r1, .L867
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldrb	r1, [r1, #0x4]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L865
.L868:
	.align	2, 0
.L867:
	.word	gBattleAnimArgs
.L864:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L865	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L865:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe108:
	.size	 sub_8106C80,.Lfe108-sub_8106C80
	.align	2, 0
	.globl	sub_8106CD0
	.type	 sub_8106CD0,function
	.thumb_func
sub_8106CD0:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r1, .L878
	mov	r2, #0x4
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L870	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimSprite
	b	.L871
.L879:
	.align	2, 0
.L878:
	.word	gBattleAnimArgs
.L870:
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L872	@cond_branch
	ldr	r4, .L880
	b	.L876
.L881:
	.align	2, 0
.L880:
	.word	gBattleAnimAttacker
.L872:
	ldr	r4, .L882
.L876:
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r0, .L882+0x4
	mov	r2, #0x2
	ldrsh	r1, [r0, r2]
	add	r2, r0, #0
	cmp	r1, #0
	bne	.L874	@cond_branch
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x20
	b	.L877
.L883:
	.align	2, 0
.L882:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L874:
	ldrh	r0, [r5, #0x20]
	sub	r0, r0, #0x20
.L877:
	strh	r0, [r5, #0x20]
	ldrh	r0, [r2, #0x4]
	strh	r0, [r5, #0x2e]
	ldrh	r1, [r2, #0x2]
	strh	r1, [r5, #0x30]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r0, .L884
	str	r0, [r5, #0x1c]
.L871:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L885:
	.align	2, 0
.L884:
	.word	sub_8106D5C
.Lfe109:
	.size	 sub_8106CD0,.Lfe109-sub_8106CD0
	.align	2, 0
	.type	 sub_8106D5C,function
	.thumb_func
sub_8106D5C:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L887	@cond_branch
	ldrh	r0, [r2, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L888	@cond_branch
	ldrh	r1, [r2, #0x30]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r2, #0
	bl	StartSpriteAnim
	b	.L887
.L888:
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L887:
	pop	{r0}
	bx	r0
.Lfe110:
	.size	 sub_8106D5C,.Lfe110-sub_8106D5C
	.align	2, 0
	.globl	sub_8106D90
	.type	 sub_8106D90,function
	.thumb_func
sub_8106D90:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L891
	ldrb	r0, [r0]
	bl	GetAnimBattlerSpriteId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L891+0x4
	add	r4, r4, r0
	ldr	r2, .L891+0x8
	add	r0, r4, #0
	bl	PrepareAffineAnimInTaskData
	ldr	r0, .L891+0xc
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L892:
	.align	2, 0
.L891:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	gUnknown_08593B98
	.word	sub_8106DD4
.Lfe111:
	.size	 sub_8106D90,.Lfe111-sub_8106D90
	.align	2, 0
	.type	 sub_8106DD4,function
	.thumb_func
sub_8106DD4:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L895
	add	r0, r0, r1
	bl	RunAffineAnimFromTaskData
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L894	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L894:
	pop	{r4}
	pop	{r0}
	bx	r0
.L896:
	.align	2, 0
.L895:
	.word	gTasks
.Lfe112:
	.size	 sub_8106DD4,.Lfe112-sub_8106DD4
	.align	2, 0
	.globl	sub_8106E00
	.type	 sub_8106E00,function
	.thumb_func
sub_8106E00:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	ldr	r0, .L904
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L898	@cond_branch
	ldr	r0, .L904+0x4
	b	.L903
.L905:
	.align	2, 0
.L904:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L898:
	ldr	r0, .L906
.L903:
	ldrb	r6, [r0]
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L900	@cond_branch
	ldr	r1, .L906+0x4
	mov	r2, #0x2
	ldrsh	r0, [r1, r2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
.L900:
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r7, .L906+0x4
	lsr	r0, r0, #0x18
	ldrh	r3, [r7, #0x2]
	add	r0, r0, r3
	mov	r4, #0x0
	strh	r0, [r5, #0x20]
	add	r0, r6, #0
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r7, #0x4]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	strh	r4, [r5, #0x2e]
	ldrh	r1, [r5, #0x20]
	lsl	r1, r1, #0x3
	strh	r1, [r5, #0x30]
	lsl	r0, r0, #0x3
	strh	r0, [r5, #0x32]
	mov	r2, #0x2
	ldrsh	r0, [r7, r2]
	lsl	r0, r0, #0x3
	cmp	r0, #0
	bge	.L901	@cond_branch
	add	r0, r0, #0x7
.L901:
	asr	r0, r0, #0x3
	strh	r0, [r5, #0x34]
	mov	r3, #0x4
	ldrsh	r0, [r7, r3]
	lsl	r0, r0, #0x3
	cmp	r0, #0
	bge	.L902	@cond_branch
	add	r0, r0, #0x7
.L902:
	asr	r0, r0, #0x3
	strh	r0, [r5, #0x36]
	ldrh	r2, [r5, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	mov	r3, #0x6
	ldrsh	r0, [r7, r3]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	ldr	r3, .L906+0x8
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r0, .L906+0xc
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5, #0x4]
	ldr	r0, .L906+0x10
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L907:
	.align	2, 0
.L906:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	0x3ff
	.word	-0x400
	.word	sub_8106EC8
.Lfe113:
	.size	 sub_8106E00,.Lfe113-sub_8106E00
	.align	2, 0
	.type	 sub_8106EC8,function
	.thumb_func
sub_8106EC8:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x34]
	ldrh	r1, [r2, #0x30]
	add	r0, r0, r1
	strh	r0, [r2, #0x30]
	ldrh	r1, [r2, #0x36]
	ldrh	r3, [r2, #0x32]
	add	r1, r1, r3
	strh	r1, [r2, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	strh	r0, [r2, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x13
	strh	r1, [r2, #0x22]
	ldrh	r0, [r2, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	ble	.L909	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L909:
	pop	{r0}
	bx	r0
.Lfe114:
	.size	 sub_8106EC8,.Lfe114-sub_8106EC8
	.align	2, 0
	.globl	sub_8106F00
	.type	 sub_8106F00,function
	.thumb_func
sub_8106F00:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L911	@cond_branch
	ldr	r0, .L914
	ldrh	r1, [r0]
	mov	r0, #0x78
	sub	r0, r0, r1
	strh	r0, [r4, #0x30]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L911:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	bne	.L912	@cond_branch
	ldrb	r0, [r4, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	mov	r1, #0x0
	bl	SetGreyscaleOrOriginalPalette
.L912:
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	add	r0, r0, #0x50
	cmp	r1, r0
	bne	.L913	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L913:
	pop	{r4}
	pop	{r0}
	bx	r0
.L915:
	.align	2, 0
.L914:
	.word	gBattleAnimArgs
.Lfe115:
	.size	 sub_8106F00,.Lfe115-sub_8106F00
	.align	2, 0
	.globl	sub_8106F60
	.type	 sub_8106F60,function
	.thumb_func
sub_8106F60:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L917	@cond_branch
	mov	r5, #0x78
	strh	r5, [r6, #0x20]
	ldr	r4, .L919
	mov	r2, #0x0
	ldrsh	r0, [r4, r2]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	sub	r0, r0, #0xf
	strh	r0, [r6, #0x22]
	ldrb	r1, [r4, #0x2]
	add	r0, r6, #0
	bl	StartSpriteAnim
	strh	r5, [r6, #0x38]
	ldrh	r0, [r4, #0x4]
	strh	r0, [r6, #0x34]
.L917:
	ldrh	r0, [r6, #0x2e]
	add	r0, r0, #0x1
	mov	r5, #0x0
	strh	r0, [r6, #0x2e]
	mov	r1, #0x2e
	ldrsh	r0, [r6, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r6, #0x30]
	mov	r2, #0x2e
	ldrsh	r0, [r6, r2]
	lsl	r4, r0, #0x1
	add	r4, r4, r0
	ldrh	r0, [r6, #0x34]
	add	r4, r4, r0
	mov	r2, #0xff
	ldrh	r0, [r6, #0x3a]
	add	r0, r0, #0xa
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r6, #0x3a]
	and	r4, r4, r2
	add	r0, r4, #0
	mov	r1, #0x64
	bl	Cos
	strh	r0, [r6, #0x24]
	add	r0, r4, #0
	mov	r1, #0xa
	bl	Sin
	add	r4, r0, #0
	mov	r1, #0x3a
	ldrsh	r0, [r6, r1]
	mov	r1, #0x4
	bl	Cos
	ldrh	r2, [r6, #0x30]
	add	r4, r4, r2
	add	r0, r0, r4
	strh	r0, [r6, #0x26]
	mov	r0, #0x2e
	ldrsh	r1, [r6, r0]
	mov	r2, #0x38
	ldrsh	r0, [r6, r2]
	cmp	r1, r0
	ble	.L918	@cond_branch
	ldr	r0, .L919+0x4
	str	r0, [r6, #0x1c]
	strh	r5, [r6, #0x2e]
	add	r0, r6, #0
	bl	SetSpritePrimaryCoordsFromSecondaryCoords
	mov	r0, #0x5
	strh	r0, [r6, #0x32]
	strh	r5, [r6, #0x36]
	strh	r5, [r6, #0x34]
	add	r0, r6, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
.L918:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L920:
	.align	2, 0
.L919:
	.word	gBattleAnimArgs
	.word	sub_8107018
.Lfe116:
	.size	 sub_8106F60,.Lfe116-sub_8106F60
	.align	2, 0
	.type	 sub_8107018,function
	.thumb_func
sub_8107018:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	ble	.L922	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x2e]
	ldr	r0, .L923
	str	r0, [r1, #0x1c]
.L922:
	pop	{r0}
	bx	r0
.L924:
	.align	2, 0
.L923:
	.word	sub_810703C
.Lfe117:
	.size	 sub_8107018,.Lfe117-sub_8107018
	.align	2, 0
	.type	 sub_810703C,function
	.thumb_func
sub_810703C:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x32]
	ldrh	r2, [r4, #0x34]
	add	r0, r1, r2
	strh	r0, [r4, #0x34]
	strh	r0, [r4, #0x26]
	add	r1, r1, #0x1
	strh	r1, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x30
	ble	.L926	@cond_branch
	lsl	r0, r1, #0x10
	cmp	r0, #0
	ble	.L926	@cond_branch
	ldrh	r0, [r4, #0x36]
	sub	r1, r0, #0x5
	strh	r1, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x36]
.L926:
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x3
	ble	.L927	@cond_branch
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	lsr	r0, r1, #0x1f
	add	r0, r1, r0
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x1
	sub	r1, r1, r0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L927:
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	bne	.L928	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L928:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe118:
	.size	 sub_810703C,.Lfe118-sub_810703C
	.align	2, 0
	.globl	sub_81070AC
	.type	 sub_81070AC,function
	.thumb_func
sub_81070AC:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L932
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L930	@cond_branch
	ldr	r4, .L932+0x4
	ldrb	r1, [r4]
	mov	r0, #0x2
	eor	r0, r0, r1
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L930	@cond_branch
	ldrb	r0, [r4]
	add	r2, r5, #0
	add	r2, r2, #0x20
	add	r3, r5, #0
	add	r3, r3, #0x22
	mov	r1, #0x0
	bl	SetAverageBattlerPositions
	ldrh	r0, [r5, #0x22]
	add	r0, r0, #0x28
	strh	r0, [r5, #0x22]
	add	r0, r5, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	b	.L931
.L933:
	.align	2, 0
.L932:
	.word	gBattleTypeFlags
	.word	gBattleAnimAttacker
.L930:
	ldr	r4, .L934
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x28
	strh	r0, [r5, #0x22]
.L931:
	mov	r0, #0xd
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r5, #0x20]
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x22]
	sub	r0, r0, #0x48
	strh	r0, [r5, #0x36]
	ldr	r0, .L934+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L934+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L935:
	.align	2, 0
.L934:
	.word	gBattleAnimAttacker
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe119:
	.size	 sub_81070AC,.Lfe119-sub_81070AC
	.align	2, 0
	.globl	AnimTask_IsFuryCutterHitRight
	.type	 AnimTask_IsFuryCutterHitRight,function
	.thumb_func
AnimTask_IsFuryCutterHitRight:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L937
	ldr	r1, .L937+0x4
	ldr	r1, [r1]
	ldrb	r2, [r1, #0x10]
	mov	r1, #0x1
	and	r1, r1, r2
	strh	r1, [r3, #0xe]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L938:
	.align	2, 0
.L937:
	.word	gBattleAnimArgs
	.word	gAnimDisableStructPtr
.Lfe120:
	.size	 AnimTask_IsFuryCutterHitRight,.Lfe120-AnimTask_IsFuryCutterHitRight
	.align	2, 0
	.globl	AnimTask_GetFuryCutterHitCount
	.type	 AnimTask_GetFuryCutterHitCount,function
	.thumb_func
AnimTask_GetFuryCutterHitCount:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L940
	ldr	r1, .L940+0x4
	ldr	r1, [r1]
	ldrb	r1, [r1, #0x10]
	strh	r1, [r2, #0xe]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L941:
	.align	2, 0
.L940:
	.word	gBattleAnimArgs
	.word	gAnimDisableStructPtr
.Lfe121:
	.size	 AnimTask_GetFuryCutterHitCount,.Lfe121-AnimTask_GetFuryCutterHitCount
.text
	.align	2, 0

