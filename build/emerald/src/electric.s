@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gUnknown_085956A4
	.section .rodata
	.align	2, 0
	.type	 gUnknown_085956A4,object
gUnknown_085956A4:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0x20
	.byte	0x8
	.space	1
	.short	0x30
	.byte	0x5
	.space	1
	.short	0x40
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085956A4,24
	.globl	gUnknown_085956BC
	.align	2, 0
	.type	 gUnknown_085956BC,object
gUnknown_085956BC:
	.word	gUnknown_085956A4
	.size	 gUnknown_085956BC,4
	.globl	gUnknown_085956C0
	.align	2, 0
	.type	 gUnknown_085956C0,object
	.size	 gUnknown_085956C0,24
gUnknown_085956C0:
	.short	0x2735
	.short	0x2735
	.word	gUnknown_08524914
	.word	gUnknown_085956BC
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810A1A8
	.globl	gUnknown_085956D8
	.align	2, 0
	.type	 gUnknown_085956D8,object
gUnknown_085956D8:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x14
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xf0
	.byte	0x3c
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_085956D8,32
	.globl	gUnknown_085956F8
	.align	2, 0
	.type	 gUnknown_085956F8,object
gUnknown_085956F8:
	.word	gUnknown_085956D8
	.size	 gUnknown_085956F8,4
	.globl	gUnknown_085956FC
	.align	2, 0
	.type	 gUnknown_085956FC,object
	.size	 gUnknown_085956FC,24
gUnknown_085956FC:
	.short	0x279f
	.short	0x279f
	.word	gUnknown_08524974
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_085956F8
	.word	sub_810A214
	.globl	gUnknown_08595714
	.align	2, 0
	.type	 gUnknown_08595714,object
gUnknown_08595714:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0x20
	.byte	0x5
	.space	1
	.short	0x30
	.byte	0x5
	.space	1
	.short	0x40
	.byte	0x5
	.space	1
	.short	0x50
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_08595714,28
	.globl	gUnknown_08595730
	.align	2, 0
	.type	 gUnknown_08595730,object
gUnknown_08595730:
	.word	gUnknown_08595714
	.size	 gUnknown_08595730,4
	.globl	gUnknown_08595734
	.align	2, 0
	.type	 gUnknown_08595734,object
	.size	 gUnknown_08595734,24
gUnknown_08595734:
	.short	0x275f
	.short	0x275f
	.word	gUnknown_08524914
	.word	gUnknown_08595730
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810A274
	.globl	gBattleAnimSpriteTemplate_859574C
	.align	2, 0
	.type	 gBattleAnimSpriteTemplate_859574C,object
	.size	 gBattleAnimSpriteTemplate_859574C,24
gBattleAnimSpriteTemplate_859574C:
	.short	0x271b
	.short	0x271b
	.word	gUnknown_0852496C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810A308
	.globl	gUnknown_08595764
	.align	2, 0
	.type	 gUnknown_08595764,object
	.size	 gUnknown_08595764,24
gUnknown_08595764:
	.short	0x27bb
	.short	0x27bb
	.word	gUnknown_0852490C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	TranslateAnimSpriteToTargetMonLocation
	.globl	gUnknown_0859577C
	.align	2, 0
	.type	 gUnknown_0859577C,object
gUnknown_0859577C:
	.short	0x0
	.short	0x0
	.byte	0x14
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gUnknown_0859577C,16
	.globl	gUnknown_0859578C
	.align	2, 0
	.type	 gUnknown_0859578C,object
gUnknown_0859578C:
	.word	gUnknown_0859577C
	.size	 gUnknown_0859578C,4
	.globl	gUnknown_08595790
	.align	2, 0
	.type	 gUnknown_08595790,object
	.size	 gUnknown_08595790,24
gUnknown_08595790:
	.short	0x271b
	.short	0x271b
	.word	gUnknown_0852496C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_0859578C
	.word	sub_810A46C
	.globl	gUnknown_085957A8
	.align	2, 0
	.type	 gUnknown_085957A8,object
gUnknown_085957A8:
	.short	0x0
	.byte	0x6
	.space	1
	.short	0x10
	.byte	0x6
	.space	1
	.short	0x20
	.byte	0x6
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gUnknown_085957A8,16
	.globl	gUnknown_085957B8
	.align	2, 0
	.type	 gUnknown_085957B8,object
gUnknown_085957B8:
	.word	gUnknown_085957A8
	.size	 gUnknown_085957B8,4
	.globl	gUnknown_085957BC
	.align	2, 0
	.type	 gUnknown_085957BC,object
gUnknown_085957BC:
	.short	0xe8
	.short	0xe8
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0xa
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0xa
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gUnknown_085957BC,32
	.globl	gUnknown_085957DC
	.align	2, 0
	.type	 gUnknown_085957DC,object
gUnknown_085957DC:
	.word	gUnknown_085957BC
	.size	 gUnknown_085957DC,4
	.globl	gBattleAnimSpriteTemplate_85957E0
	.align	2, 0
	.type	 gBattleAnimSpriteTemplate_85957E0,object
	.size	 gBattleAnimSpriteTemplate_85957E0,24
gBattleAnimSpriteTemplate_85957E0:
	.short	0x282a
	.short	0x282a
	.word	gUnknown_08524974
	.word	gUnknown_085957B8
	.word	0x0
	.word	gUnknown_085957DC
	.word	sub_810A5BC
	.globl	gBattleAnimSpriteTemplate_85957F8
	.align	2, 0
	.type	 gBattleAnimSpriteTemplate_85957F8,object
	.size	 gBattleAnimSpriteTemplate_85957F8,24
gBattleAnimSpriteTemplate_85957F8:
	.short	0x271b
	.short	0x271b
	.word	gUnknown_0852496C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_0859578C
	.word	sub_810A628
	.globl	gElectricitySpriteTemplate
	.align	2, 0
	.type	 gElectricitySpriteTemplate,object
	.size	 gElectricitySpriteTemplate,24
gElectricitySpriteTemplate:
	.short	0x271b
	.short	0x271b
	.word	gUnknown_0852490C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810A75C
	.globl	gUnknown_08595828
	.align	2, 0
	.type	 gUnknown_08595828,object
	.size	 gUnknown_08595828,24
gUnknown_08595828:
	.short	0x2711
	.short	0x2711
	.word	gUnknown_08524904
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810A9DC
	.globl	gUnknown_08595840
	.align	2, 0
	.type	 gUnknown_08595840,object
	.size	 gUnknown_08595840,24
gUnknown_08595840:
	.short	0x27bd
	.short	0x27bd
	.word	gUnknown_08524934
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810AA2C
	.globl	gUnknown_08595858
	.type	 gUnknown_08595858,object
gUnknown_08595858:
	.byte	0x3a
	.byte	-0x3c
	.byte	-0x38
	.byte	-0x24
	.byte	0x8
	.byte	-0x38
	.byte	-0x10
	.byte	0x38
	.byte	0x3a
	.byte	-0xa
	.byte	-0x3a
	.byte	0xa
	.byte	0x30
	.byte	-0x12
	.byte	-0x8
	.byte	0x38
	.byte	0x10
	.byte	-0x38
	.byte	-0x3a
	.byte	-0x2a
	.byte	0x3a
	.byte	0x1e
	.byte	-0x30
	.byte	0x28
	.byte	0xc
	.byte	-0x30
	.byte	0x30
	.byte	-0xc
	.byte	-0x38
	.byte	0x12
	.byte	0x30
	.byte	0x30
	.size	 gUnknown_08595858,32
	.globl	gUnknown_08595878
	.align	2, 0
	.type	 gUnknown_08595878,object
gUnknown_08595878:
	.short	0x3
	.byte	0x1
	.space	1
	.short	0x2
	.byte	0x1
	.space	1
	.short	0x1
	.byte	0x1
	.space	1
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08595878,20
	.globl	gUnknown_0859588C
	.align	2, 0
	.type	 gUnknown_0859588C,object
gUnknown_0859588C:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x1
	.byte	0x5
	.space	1
	.short	0x2
	.byte	0x5
	.space	1
	.short	0x3
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0859588C,20
	.globl	gUnknown_085958A0
	.align	2, 0
	.type	 gUnknown_085958A0,object
gUnknown_085958A0:
	.word	gUnknown_08595878
	.word	gUnknown_0859588C
	.size	 gUnknown_085958A0,8
	.globl	gUnknown_085958A8
	.align	2, 0
	.type	 gUnknown_085958A8,object
	.size	 gUnknown_085958A8,24
gUnknown_085958A8:
	.short	0x27e3
	.short	0x27e3
	.word	gUnknown_08524904
	.word	gUnknown_085958A0
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.globl	gUnknown_085958C0
	.align	2, 0
	.type	 gUnknown_085958C0,object
gUnknown_085958C0:
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x4
	.short	0x4
	.byte	0x0
	.byte	0x3c
	.space	2
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7ffd
	.short	0x0
	.space	4
	.short	-0x4
	.short	-0x4
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x4
	.short	0x4
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x7ffd
	.short	0xa
	.space	4
	.short	0x7fff
	.space	6
	.size	 gUnknown_085958C0,64
	.globl	gUnknown_08595900
	.align	2, 0
	.type	 gUnknown_08595900,object
gUnknown_08595900:
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0x1e
	.space	2
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x4
	.short	-0x4
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x4
	.short	0x4
	.byte	0x0
	.byte	0x5
	.space	2
	.short	0x7ffe
	.short	0x3
	.space	4
	.size	 gUnknown_08595900,48
	.globl	gUnknown_08595930
	.align	2, 0
	.type	 gUnknown_08595930,object
gUnknown_08595930:
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x0
	.byte	0x1e
	.space	2
	.short	-0x8
	.short	-0x8
	.byte	0x0
	.byte	0x1e
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_08595930,32
	.globl	gUnknown_08595950
	.align	2, 0
	.type	 gUnknown_08595950,object
gUnknown_08595950:
	.word	gUnknown_085958C0
	.word	gUnknown_08595900
	.word	gUnknown_08595930
	.size	 gUnknown_08595950,12
	.globl	gUnknown_0859595C
	.align	2, 0
	.type	 gUnknown_0859595C,object
	.size	 gUnknown_0859595C,24
gUnknown_0859595C:
	.short	0x27e4
	.short	0x27e4
	.word	gUnknown_08524A9C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08595950
	.word	sub_810ACD8
	.globl	gUnknown_08595974
	.align	2, 0
	.type	 gUnknown_08595974,object
gUnknown_08595974:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x10
	.byte	0x3
	.space	1
	.short	0x20
	.byte	0x3
	.space	1
	.short	0x30
	.byte	0x3
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08595974,20
	.globl	gUnknown_08595988
	.align	2, 0
	.type	 gUnknown_08595988,object
gUnknown_08595988:
	.word	gUnknown_08595974
	.size	 gUnknown_08595988,4
	.globl	gUnknown_0859598C
	.align	2, 0
	.type	 gUnknown_0859598C,object
	.size	 gUnknown_0859598C,24
gUnknown_0859598C:
	.short	0x27e5
	.short	0x27e5
	.word	gUnknown_08524914
	.word	gUnknown_08595988
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810AD30
	.globl	gUnknown_085959A4
	.align	2, 0
	.type	 gUnknown_085959A4,object
	.size	 gUnknown_085959A4,24
gUnknown_085959A4:
	.short	0x27e4
	.short	0x27e4
	.word	gUnknown_08524A9C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08595950
	.word	sub_810AD98
	.globl	gUnknown_085959BC
	.align	2, 0
	.type	 gUnknown_085959BC,object
gUnknown_085959BC:
	.short	0x0
	.byte	0x3
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085959BC,8
	.globl	gUnknown_085959C4
	.align	2, 0
	.type	 gUnknown_085959C4,object
gUnknown_085959C4:
	.short	0x2
	.byte	0x3
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085959C4,8
	.globl	gUnknown_085959CC
	.align	2, 0
	.type	 gUnknown_085959CC,object
gUnknown_085959CC:
	.short	0x4
	.byte	0x3
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085959CC,8
	.globl	gUnknown_085959D4
	.align	2, 0
	.type	 gUnknown_085959D4,object
gUnknown_085959D4:
	.short	0x6
	.byte	0x3
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085959D4,8
	.globl	gUnknown_085959DC
	.align	2, 0
	.type	 gUnknown_085959DC,object
gUnknown_085959DC:
	.word	gUnknown_085959BC
	.word	gUnknown_085959C4
	.word	gUnknown_085959CC
	.word	gUnknown_085959D4
	.size	 gUnknown_085959DC,16
	.globl	gUnknown_085959EC
	.align	2, 0
	.type	 gUnknown_085959EC,object
gUnknown_085959EC:
	.short	0x100
	.short	0x100
	.byte	0x40
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_085959EC,16
	.globl	gUnknown_085959FC
	.align	2, 0
	.type	 gUnknown_085959FC,object
gUnknown_085959FC:
	.word	gUnknown_085959EC
	.size	 gUnknown_085959FC,4
	.globl	gUnknown_08595A00
	.align	2, 0
	.type	 gUnknown_08595A00,object
	.size	 gUnknown_08595A00,24
gUnknown_08595A00:
	.short	0x2711
	.short	0x2711
	.word	gUnknown_08524A04
	.word	gUnknown_085959DC
	.word	0x0
	.word	gUnknown_085959FC
	.word	sub_810B1F0
	.globl	gUnknown_08595A18
	.align	2, 0
	.type	 gUnknown_08595A18,object
	.size	 gUnknown_08595A18,24
gUnknown_08595A18:
	.short	0x27e4
	.short	0x27e4
	.word	gUnknown_08524A9C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08595950
	.word	sub_810B23C
	.globl	gUnknown_08595A30
	.align	2, 0
	.type	 gUnknown_08595A30,object
	.size	 gUnknown_08595A30,24
gUnknown_08595A30:
	.short	0x2711
	.short	0x2711
	.word	gUnknown_08524904
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810B51C
.text
	.align	2, 0
	.type	 sub_810A1A8,function
	.thumb_func
sub_810A1A8:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L5
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3	@cond_branch
	ldr	r0, .L5+0x4
	ldrh	r1, [r4, #0x20]
	ldrh	r2, [r0]
	sub	r1, r1, r2
	strh	r1, [r4, #0x20]
	b	.L4
.L6:
	.align	2, 0
.L5:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L3:
	ldr	r1, .L7
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	add	r0, r1, #0
.L4:
	ldrh	r0, [r0, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldr	r0, .L7+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L8:
	.align	2, 0
.L7:
	.word	gBattleAnimArgs
	.word	sub_810A1F8
.Lfe1:
	.size	 sub_810A1A8,.Lfe1-sub_810A1A8
	.align	2, 0
	.type	 sub_810A1F8,function
	.thumb_func
sub_810A1F8:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L10	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L10:
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 sub_810A1F8,.Lfe2-sub_810A1F8
	.align	2, 0
	.type	 sub_810A214,function
	.thumb_func
sub_810A214:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L14
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L12	@cond_branch
	ldr	r0, .L14+0x4
	ldrh	r1, [r4, #0x20]
	ldrh	r0, [r0]
	sub	r1, r1, r0
	strh	r1, [r4, #0x20]
	b	.L13
.L15:
	.align	2, 0
.L14:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L12:
	ldr	r0, .L16
	ldrh	r0, [r0]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
.L13:
	ldr	r0, .L16+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L17:
	.align	2, 0
.L16:
	.word	gBattleAnimArgs
	.word	sub_810A258
.Lfe3:
	.size	 sub_810A214,.Lfe3-sub_810A214
	.align	2, 0
	.type	 sub_810A258,function
	.thumb_func
sub_810A258:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L19	@cond_branch
	add	r0, r2, #0
	bl	DestroySpriteAndMatrix
.L19:
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 sub_810A258,.Lfe4-sub_810A258
	.align	2, 0
	.type	 sub_810A274,function
	.thumb_func
sub_810A274:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L23
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r0, .L23+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L21	@cond_branch
	ldr	r2, .L23+0x8
	ldrh	r0, [r5, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrh	r0, [r5, #0x22]
	ldrh	r1, [r2, #0x2]
	sub	r0, r0, r1
	strh	r0, [r5, #0x22]
	b	.L22
.L24:
	.align	2, 0
.L23:
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L21:
	ldr	r0, .L25
	ldrh	r1, [r0]
	ldrh	r2, [r5, #0x20]
	add	r1, r1, r2
	strh	r1, [r5, #0x20]
	ldrh	r1, [r0, #0x2]
	ldrh	r2, [r5, #0x22]
	add	r1, r1, r2
	strh	r1, [r5, #0x22]
	add	r2, r0, #0
.L22:
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r2, #0x4]
	strh	r0, [r5, #0x30]
	ldrh	r0, [r2, #0x6]
	strh	r0, [r5, #0x32]
	ldrh	r0, [r2, #0x8]
	strh	r0, [r5, #0x34]
	ldr	r1, .L25+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L25+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L26:
	.align	2, 0
.L25:
	.word	gBattleAnimArgs
	.word	DestroySpriteAndMatrix
	.word	TranslateSpriteInCircleOverDuration
.Lfe5:
	.size	 sub_810A274,.Lfe5-sub_810A274
	.align	2, 0
	.type	 sub_810A308,function
	.thumb_func
sub_810A308:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	ldr	r0, .L45
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x1
	beq	.L36	@cond_branch
	cmp	r0, #0x1
	bgt	.L39	@cond_branch
	cmp	r0, #0
	beq	.L29	@cond_branch
	b	.L36
.L46:
	.align	2, 0
.L45:
	.word	gBattleAnimArgs
.L39:
	cmp	r0, #0x2
	beq	.L32	@cond_branch
	cmp	r0, #0x3
	beq	.L35	@cond_branch
	b	.L36
.L29:
	ldr	r0, .L47
	b	.L43
.L48:
	.align	2, 0
.L47:
	.word	gBattleAnimAttacker
.L32:
	ldr	r4, .L49
	ldrb	r0, [r4]
	mov	r6, #0x2
	eor	r0, r0, r6
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L33	@cond_branch
	ldrb	r4, [r4]
	b	.L28
.L50:
	.align	2, 0
.L49:
	.word	gBattleAnimAttacker
.L33:
	ldrb	r0, [r4]
	add	r4, r6, #0
	eor	r4, r4, r0
	b	.L28
.L35:
	ldr	r0, .L51
	ldrb	r0, [r0]
	mov	r4, #0x2
	eor	r0, r0, r4
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L36	@cond_branch
	ldr	r0, .L51+0x4
	ldrb	r0, [r0]
	eor	r4, r4, r0
	b	.L28
.L52:
	.align	2, 0
.L51:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L36:
	ldr	r0, .L53
.L43:
	ldrb	r4, [r0]
.L28:
	ldr	r0, .L53+0x4
	mov	r2, #0xa
	ldrsh	r0, [r0, r2]
	cmp	r0, #0
	bne	.L40	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	add	r0, r4, #0
	mov	r1, #0x1
	b	.L44
.L54:
	.align	2, 0
.L53:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L40:
	add	r0, r4, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	add	r0, r4, #0
	mov	r1, #0x3
.L44:
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r7, .L55
	ldr	r6, .L55+0x4
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	mov	r2, #0x2
	ldrsh	r0, [r6, r2]
	mul	r0, r0, r1
	asr	r0, r0, #0x8
	strh	r0, [r5, #0x24]
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	add	r0, r0, #0x40
	lsl	r0, r0, #0x1
	add	r0, r0, r7
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	mov	r2, #0x2
	ldrsh	r0, [r6, r2]
	mul	r0, r0, r1
	asr	r0, r0, #0x8
	strh	r0, [r5, #0x26]
	ldrh	r1, [r6, #0xc]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L42	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerSpriteBGPriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r2, [r5, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0x5]
.L42:
	ldrb	r2, [r5, #0x3]
	lsl	r2, r2, #0x1a
	lsr	r2, r2, #0x1b
	mov	r0, #0x4
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	ldr	r3, .L55+0x8
	lsl	r2, r2, #0x3
	add	r2, r2, r3
	add	r1, r1, #0x40
	lsl	r1, r1, #0x1
	add	r1, r1, r7
	ldrh	r1, [r1]
	strh	r1, [r2, #0x6]
	strh	r1, [r2]
	strh	r0, [r2, #0x2]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	neg	r0, r0
	strh	r0, [r2, #0x4]
	ldrh	r0, [r6, #0x6]
	strh	r0, [r5, #0x2e]
	ldr	r0, .L55+0xc
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L56:
	.align	2, 0
.L55:
	.word	gSineTable
	.word	gBattleAnimArgs
	.word	gOamMatrices
	.word	sub_810E2C8
.Lfe6:
	.size	 sub_810A308,.Lfe6-sub_810A308
	.align	2, 0
	.type	 sub_810A46C,function
	.thumb_func
sub_810A46C:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r5, .L58
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldr	r6, .L58+0x4
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x38]
	ldrh	r0, [r5, #0xa]
	strh	r0, [r4, #0x3a]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r4, #0x3c]
	ldrh	r2, [r4, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	mov	r3, #0xc
	ldrsh	r0, [r5, r3]
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldr	r3, .L58+0x8
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r0, .L58+0xc
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	ldr	r1, .L58+0x10
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	0x3ff
	.word	-0x400
	.word	sub_810A4F4
.Lfe7:
	.size	 sub_810A46C,.Lfe7-sub_810A46C
	.align	2, 0
	.type	 sub_810A4F4,function
	.thumb_func
sub_810A4F4:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L61	@cond_branch
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	bl	Sin
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	bl	Cos
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x3a]
	ldrh	r2, [r4, #0x3c]
	add	r0, r0, r2
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x3c]
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	mov	r1, #0x3
	bl	__modsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L63	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	b	.L63
.L61:
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L63:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 sub_810A4F4,.Lfe8-sub_810A4F4
	.align	2, 0
	.type	 sub_810A56C,function
	.thumb_func
sub_810A56C:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x38]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L65	@cond_branch
	mov	r0, #0x3e
	add	r0, r0, r3
	mov	ip, r0
	ldrb	r2, [r0]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldrh	r0, [r3, #0x36]
	strh	r0, [r3, #0x38]
.L65:
	ldrh	r0, [r3, #0x34]
	sub	r1, r0, #0x1
	strh	r1, [r3, #0x34]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L66	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimSprite
.L66:
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 sub_810A56C,.Lfe9-sub_810A56C
	.align	2, 0
	.type	 sub_810A5BC,function
	.thumb_func
sub_810A5BC:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L69	@cond_branch
	ldr	r0, .L70
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L68	@cond_branch
.L69:
	ldr	r1, .L70+0x4
	ldrh	r0, [r1, #0x2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
.L68:
	ldr	r5, .L70
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L70+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	strh	r0, [r6, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x4]
	add	r0, r0, r1
	strh	r0, [r6, #0x22]
	ldrh	r0, [r4]
	strh	r0, [r6, #0x34]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r6, #0x36]
	strh	r0, [r6, #0x38]
	ldr	r0, .L70+0x8
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L71:
	.align	2, 0
.L70:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	sub_810A56C
.Lfe10:
	.size	 sub_810A5BC,.Lfe10-sub_810A5BC
	.align	2, 0
	.type	 sub_810A628,function
	.thumb_func
sub_810A628:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r1, .L78
	ldrh	r0, [r1, #0x6]
	strh	r0, [r5, #0x2e]
	mov	r2, #0xe
	ldrsh	r0, [r1, r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L73	@cond_branch
	ldr	r0, .L78+0x4
	b	.L77
.L79:
	.align	2, 0
.L78:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
.L73:
	ldr	r0, .L80
.L77:
	ldrb	r6, [r0]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L76	@cond_branch
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L75	@cond_branch
.L76:
	ldr	r1, .L80+0x4
	ldrh	r0, [r1]
	neg	r0, r0
	strh	r0, [r1]
.L75:
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L80+0x4
	lsr	r0, r0, #0x18
	ldrh	r3, [r4]
	add	r0, r0, r3
	strh	r0, [r5, #0x20]
	add	r0, r6, #0
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	ldrh	r1, [r4, #0xe]
	ldr	r0, .L80+0x8
	and	r0, r0, r1
	strh	r0, [r5, #0x36]
	ldrh	r0, [r4, #0x4]
	strh	r0, [r5, #0x38]
	ldrh	r0, [r4, #0xa]
	strh	r0, [r5, #0x3a]
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x3c]
	ldrh	r2, [r5, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldr	r3, .L80+0xc
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r0, .L80+0x10
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5, #0x4]
	ldr	r1, .L80+0x14
	str	r1, [r5, #0x1c]
	add	r0, r5, #0
	bl	_call_via_r1
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L81:
	.align	2, 0
.L80:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	0x7fff
	.word	0x3ff
	.word	-0x400
	.word	sub_810A6EC
.Lfe11:
	.size	 sub_810A628,.Lfe11-sub_810A628
	.align	2, 0
	.type	 sub_810A6EC,function
	.thumb_func
sub_810A6EC:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x3a]
	ldrh	r1, [r4, #0x3c]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x3c]
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	__modsi3
	cmp	r0, #0
	bne	.L83	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L83:
	ldrh	r0, [r4, #0x2e]
	sub	r1, r0, #0x1
	strh	r1, [r4, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L84	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L84:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 sub_810A6EC,.Lfe12-sub_810A6EC
	.align	2, 0
	.type	 sub_810A75C,function
	.thumb_func
sub_810A75C:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
	ldrh	r2, [r4, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	ldr	r3, .L90
	mov	r5, #0x6
	ldrsh	r0, [r3, r5]
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldr	r5, .L90+0x4
	add	r0, r5, #0
	and	r1, r1, r0
	ldr	r0, .L90+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	mov	r1, #0x6
	ldrsh	r0, [r3, r1]
	cmp	r0, #0x1
	bne	.L86	@cond_branch
	ldrb	r0, [r4, #0x3]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x10
	b	.L89
.L91:
	.align	2, 0
.L90:
	.word	gBattleAnimArgs
	.word	0x3ff
	.word	-0x400
.L86:
	cmp	r0, #0x2
	bne	.L87	@cond_branch
	ldrb	r0, [r4, #0x3]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x20
.L89:
	orr	r1, r1, r0
	strb	r1, [r4, #0x3]
.L87:
	ldr	r0, .L92
	ldrh	r0, [r0, #0x4]
	strh	r0, [r4, #0x2e]
	ldr	r0, .L92+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L92+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L93:
	.align	2, 0
.L92:
	.word	gBattleAnimArgs
	.word	WaitAnimForDuration
	.word	DestroyAnimSprite
.Lfe13:
	.size	 sub_810A75C,.Lfe13-sub_810A75C
	.align	2, 0
	.globl	sub_810A7DC
	.type	 sub_810A7DC,function
	.thumb_func
sub_810A7DC:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r6, .L95
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	ldr	r1, .L95+0x4
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	lsl	r0, r0, #0x18
	ldr	r5, .L95+0x8
	lsr	r0, r0, #0x18
	ldrh	r1, [r5]
	add	r0, r0, r1
	strh	r0, [r4, #0x8]
	ldrb	r0, [r6]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r5, #0x2]
	add	r0, r0, r1
	strh	r0, [r4, #0xa]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0xc]
	ldr	r0, .L95+0xc
	str	r0, [r4]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L96:
	.align	2, 0
.L95:
	.word	gBattleAnimTarget
	.word	gTasks
	.word	gBattleAnimArgs
	.word	sub_810A834
.Lfe14:
	.size	 sub_810A7DC,.Lfe14-sub_810A7DC
	.align	2, 0
	.type	 sub_810A834,function
	.thumb_func
sub_810A834:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r5, #0x0
	mov	r7, #0x0
	ldr	r1, .L112
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r2, [r0, #0xc]
	str	r2, [sp]
	ldrh	r4, [r0, #0x8]
	ldrh	r6, [r0, #0xa]
	mov	r3, #0xc
	ldrsh	r0, [r0, r3]
	mov	sl, r1
	cmp	r0, #0
	bne	.L98	@cond_branch
	mov	r0, #0x0
	mov	r8, r0
	mov	r2, #0x1
	mov	r1, #0x10
	mov	ip, r1
	b	.L99
.L113:
	.align	2, 0
.L112:
	.word	gTasks
.L98:
	mov	r2, #0x10
	mov	ip, r2
	mov	r3, #0x8
	mov	r8, r3
	mov	r2, #0x4
.L99:
	mov	r0, r9
	lsl	r1, r0, #0x2
	add	r0, r1, r0
	lsl	r0, r0, #0x3
	add	r0, r0, sl
	mov	r3, #0x1c
	ldrsh	r0, [r0, r3]
	mov	sl, r1
	cmp	r0, #0xa
	bhi	.L100	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L114
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L115:
	.align	2, 0
.L114:
	.word	.L107
	.align	2, 0
	.align	2, 0
.L107:
	.word	.L101
	.word	.L100
	.word	.L102
	.word	.L100
	.word	.L103
	.word	.L100
	.word	.L104
	.word	.L100
	.word	.L105
	.word	.L100
	.word	.L106
.L101:
	ldr	r0, .L116
	lsl	r1, r4, #0x10
	asr	r1, r1, #0x10
	lsl	r2, r6, #0x10
	asr	r2, r2, #0x10
	mov	r4, ip
	lsl	r3, r4, #0x10
	b	.L110
.L117:
	.align	2, 0
.L116:
	.word	gUnknown_08595828
.L102:
	mov	r0, ip
	lsl	r3, r0, #0x11
	mov	r1, r8
	add	r0, r1, r2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r0, .L118
	lsl	r1, r4, #0x10
	asr	r1, r1, #0x10
	lsl	r2, r6, #0x10
	asr	r2, r2, #0x10
	b	.L110
.L119:
	.align	2, 0
.L118:
	.word	gUnknown_08595828
.L103:
	mov	r3, ip
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	lsl	r3, r0, #0x1
	add	r3, r3, r0
	lsl	r0, r2, #0x1
	add	r0, r0, r8
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	b	.L111
.L104:
	mov	r0, ip
	lsl	r3, r0, #0x12
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	add	r0, r0, r8
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r0, .L120
	lsl	r1, r4, #0x10
	asr	r1, r1, #0x10
	lsl	r2, r6, #0x10
	asr	r2, r2, #0x10
	b	.L110
.L121:
	.align	2, 0
.L120:
	.word	gUnknown_08595828
.L105:
	mov	r1, ip
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	lsl	r3, r0, #0x2
	add	r3, r3, r0
.L111:
	ldr	r0, .L122
	lsl	r1, r4, #0x10
	asr	r1, r1, #0x10
	lsl	r2, r6, #0x10
	asr	r2, r2, #0x10
	lsl	r3, r3, #0x10
.L110:
	asr	r3, r3, #0x10
	add	r2, r2, r3
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	mov	r3, #0x2
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	b	.L100
.L123:
	.align	2, 0
.L122:
	.word	gUnknown_08595828
.L106:
	mov	r0, r9
	bl	DestroyAnimVisualTask
	b	.L97
.L100:
	cmp	r7, #0
	beq	.L109	@cond_branch
	ldr	r4, .L124
	lsl	r3, r5, #0x4
	add	r3, r3, r5
	lsl	r3, r3, #0x2
	add	r0, r3, r4
	ldrh	r5, [r0, #0x4]
	lsl	r2, r5, #0x16
	lsr	r2, r2, #0x16
	add	r2, r2, r8
	ldr	r6, .L124+0x4
	add	r1, r6, #0
	and	r2, r2, r1
	ldr	r1, .L124+0x8
	and	r1, r1, r5
	orr	r1, r1, r2
	strh	r1, [r0, #0x4]
	mov	r1, sp
	ldrh	r1, [r1]
	strh	r1, [r0, #0x2e]
	add	r4, r4, #0x1c
	add	r3, r3, r4
	ldr	r1, [r3]
	bl	_call_via_r1
.L109:
	ldr	r0, .L124+0xc
	mov	r1, sl
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1c]
.L97:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L125:
	.align	2, 0
.L124:
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	gTasks
.Lfe15:
	.size	 sub_810A834,.Lfe15-sub_810A834
	.align	2, 0
	.type	 sub_810A9DC,function
	.thumb_func
sub_810A9DC:
	push	{lr}
	add	r3, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bne	.L127	@cond_branch
	ldrb	r1, [r3, #0x1]
	mov	r2, #0x3f
	add	r0, r2, #0
	and	r0, r0, r1
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r3, #0x1]
	ldrb	r0, [r3, #0x3]
	and	r2, r2, r0
	strb	r2, [r3, #0x3]
	b	.L128
.L127:
	ldrb	r2, [r3, #0x1]
	mov	r1, #0x3f
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3, #0x1]
	ldrb	r0, [r3, #0x3]
	and	r1, r1, r0
	mov	r0, #0x40
	orr	r1, r1, r0
	strb	r1, [r3, #0x3]
.L128:
	ldrh	r0, [r3, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf
	bne	.L129	@cond_branch
	add	r0, r3, #0
	bl	DestroySprite
.L129:
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 sub_810A9DC,.Lfe16-sub_810A9DC
	.align	2, 0
	.type	 sub_810AA2C,function
	.thumb_func
sub_810AA2C:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldr	r0, .L131
	ldrh	r1, [r0]
	ldrh	r2, [r4, #0x20]
	add	r1, r1, r2
	strh	r1, [r4, #0x20]
	ldrh	r0, [r0, #0x2]
	ldrh	r3, [r4, #0x22]
	add	r0, r0, r3
	strh	r0, [r4, #0x22]
	ldr	r0, .L131+0x4
	add	r1, r1, #0x20
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r7, #0x22
	ldrsh	r2, [r4, r7]
	add	r3, r4, #0
	add	r3, r3, #0x43
	ldrb	r3, [r3]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L131+0x8
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r6, r2, r3
	ldrh	r5, [r6, #0x4]
	lsl	r1, r5, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x8
	ldr	r7, .L131+0xc
	add	r0, r7, #0
	and	r1, r1, r0
	ldr	r0, .L131+0x10
	and	r0, r0, r5
	orr	r0, r0, r1
	strh	r0, [r6, #0x4]
	ldr	r1, .L131+0x14
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	add	r3, r3, #0x1c
	add	r2, r2, r3
	ldr	r0, .L131+0x18
	str	r0, [r2]
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L132:
	.align	2, 0
.L131:
	.word	gBattleAnimArgs
	.word	gUnknown_08595840
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	gAnimVisualTaskCount
	.word	sub_810AAB0
.Lfe17:
	.size	 sub_810AA2C,.Lfe17-sub_810AA2C
	.align	2, 0
	.type	 sub_810AAB0,function
	.thumb_func
sub_810AAB0:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	bne	.L134	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x2e]
	mov	r0, #0x3e
	add	r0, r0, r3
	mov	ip, r0
	ldrb	r2, [r0]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
.L134:
	ldrh	r0, [r3, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x33
	bne	.L135	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimSprite
.L135:
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 sub_810AAB0,.Lfe18-sub_810AAB0
	.align	2, 0
	.globl	sub_810AAFC
	.type	 sub_810AAFC,function
	.thumb_func
sub_810AAFC:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L140
	add	r5, r1, r0
	ldr	r0, .L140+0x4
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L137	@cond_branch
	ldr	r4, .L140+0x8
	b	.L139
.L141:
	.align	2, 0
.L140:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L137:
	ldr	r4, .L142
.L139:
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x24]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x26]
	ldr	r2, .L142+0x4
	ldrh	r0, [r2, #0x2]
	mov	r1, #0x0
	strh	r0, [r5, #0x14]
	strh	r1, [r5, #0x16]
	strh	r1, [r5, #0x18]
	strh	r1, [r5, #0x1a]
	strh	r1, [r5, #0x1c]
	ldrh	r0, [r2, #0x6]
	strh	r0, [r5, #0x1e]
	strh	r1, [r5, #0x20]
	ldrh	r0, [r2, #0x4]
	strh	r0, [r5, #0x22]
	ldr	r0, .L142+0x8
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L143:
	.align	2, 0
.L142:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	sub_810AB78
.Lfe19:
	.size	 sub_810AAFC,.Lfe19-sub_810AAFC
	.align	2, 0
	.type	 sub_810AB78,function
	.thumb_func
sub_810AB78:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r2, r6, #0
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L153
	add	r5, r0, r1
	mov	r1, #0x14
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L145	@cond_branch
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x1
	mov	r7, #0x0
	strh	r0, [r5, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x22
	ldrsh	r1, [r5, r2]
	cmp	r0, r1
	ble	.L151	@cond_branch
	strh	r7, [r5, #0x20]
	ldr	r0, .L153+0x4
	mov	r3, #0x24
	ldrsh	r1, [r5, r3]
	mov	r3, #0x26
	ldrsh	r2, [r5, r3]
	mov	r3, #0x2
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x40
	beq	.L151	@cond_branch
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	ldr	r0, .L153+0x8
	add	r4, r4, r0
	ldr	r1, .L153+0xc
	mov	r2, #0x1a
	ldrsh	r0, [r5, r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r3, #0x0
	ldrsb	r3, [r0, r3]
	ldrh	r0, [r4, #0x20]
	add	r3, r3, r0
	strh	r3, [r4, #0x20]
	mov	r2, #0x1a
	ldrsh	r0, [r5, r2]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x1
	add	r0, r0, r1
	mov	r2, #0x0
	ldrsb	r2, [r0, r2]
	ldrh	r0, [r4, #0x22]
	add	r2, r2, r0
	strh	r2, [r4, #0x22]
	mov	r1, #0x18
	ldrsh	r0, [r5, r1]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	mov	r0, #0x28
	sub	r0, r0, r1
	strh	r0, [r4, #0x2e]
	strh	r3, [r4, #0x30]
	ldrh	r0, [r5, #0x24]
	strh	r0, [r4, #0x32]
	strh	r2, [r4, #0x34]
	ldrh	r0, [r5, #0x26]
	strh	r0, [r4, #0x36]
	strh	r6, [r4, #0x38]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	ldr	r1, .L153+0x10
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L153+0x14
	str	r0, [r4, #0x1c]
	ldrh	r0, [r5, #0x1a]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf
	ble	.L148	@cond_branch
	strh	r7, [r5, #0x1a]
.L148:
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x1e
	ldrsh	r1, [r5, r2]
	cmp	r0, r1
	blt	.L149	@cond_branch
	strh	r7, [r5, #0x1c]
	ldrh	r1, [r5, #0x18]
	mov	r3, #0x18
	ldrsh	r0, [r5, r3]
	cmp	r0, #0x5
	bgt	.L149	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r5, #0x18]
.L149:
	ldrh	r0, [r5, #0x16]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x16]
	ldrh	r0, [r5, #0x14]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x14]
	b	.L151
.L154:
	.align	2, 0
.L153:
	.word	gTasks
	.word	gUnknown_085958A8
	.word	gSprites
	.word	gUnknown_08595858
	.word	sub_810ACC0
	.word	RunStoredCallbackWhenAnimEnds
.L145:
	mov	r1, #0x16
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L151	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L151:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 sub_810AB78,.Lfe20-sub_810AB78
	.align	2, 0
	.type	 sub_810AC8C,function
	.thumb_func
sub_810AC8C:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L156	@cond_branch
	ldr	r2, .L157
	mov	r0, #0x38
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0x16]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x16]
	add	r0, r4, #0
	bl	DestroySprite
.L156:
	pop	{r4}
	pop	{r0}
	bx	r0
.L158:
	.align	2, 0
.L157:
	.word	gTasks
.Lfe21:
	.size	 sub_810AC8C,.Lfe21-sub_810AC8C
	.align	2, 0
	.type	 sub_810ACC0,function
	.thumb_func
sub_810ACC0:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldr	r0, .L160
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L161:
	.align	2, 0
.L160:
	.word	sub_810AC8C
.Lfe22:
	.size	 sub_810ACC0,.Lfe22-sub_810ACC0
	.align	2, 0
	.type	 sub_810ACD8,function
	.thumb_func
sub_810ACD8:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L166
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L163	@cond_branch
	ldr	r4, .L166+0x4
	b	.L165
.L167:
	.align	2, 0
.L166:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L163:
	ldr	r4, .L168
.L165:
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r1, .L168+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L168+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L169:
	.align	2, 0
.L168:
	.word	gBattleAnimTarget
	.word	DestroySpriteAndMatrix
	.word	RunStoredCallbackWhenAffineAnimEnds
.Lfe23:
	.size	 sub_810ACD8,.Lfe23-sub_810ACD8
	.align	2, 0
	.type	 sub_810AD30,function
	.thumb_func
sub_810AD30:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L174
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L171	@cond_branch
	ldr	r4, .L174+0x4
	b	.L173
.L175:
	.align	2, 0
.L174:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L171:
	ldr	r4, .L176
.L173:
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r1, .L176+0x4
	ldrh	r0, [r1, #0x2]
	strh	r0, [r5, #0x24]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r5, #0x26]
	ldr	r1, .L176+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L176+0xc
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L177:
	.align	2, 0
.L176:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	DestroyAnimSprite
	.word	RunStoredCallbackWhenAnimEnds
.Lfe24:
	.size	 sub_810AD30,.Lfe24-sub_810AD30
	.align	2, 0
	.type	 sub_810AD98,function
	.thumb_func
sub_810AD98:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	ldr	r4, .L180
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x3a]
	mov	r0, #0x10
	strh	r0, [r5, #0x3c]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L179	@cond_branch
	mov	r1, #0x3c
	ldrsh	r0, [r5, r1]
	neg	r0, r0
	strh	r0, [r5, #0x3c]
.L179:
	ldr	r0, .L180+0x4
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L181:
	.align	2, 0
.L180:
	.word	gBattleAnimAttacker
	.word	sub_810ADF8
.Lfe25:
	.size	 sub_810AD98,.Lfe25-sub_810AD98
	.align	2, 0
	.type	 sub_810ADF8,function
	.thumb_func
sub_810ADF8:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L184	@cond_branch
	cmp	r0, #0x1
	beq	.L186	@cond_branch
	b	.L183
.L184:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x28
	ble	.L183	@cond_branch
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L183
.L186:
	ldrh	r2, [r4, #0x3c]
	ldrh	r1, [r4, #0x20]
	add	r0, r2, r1
	strh	r0, [r4, #0x20]
	ldr	r3, .L190
	mov	r0, #0x3a
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x24]
	add	r2, r2, r1
	strh	r2, [r0, #0x24]
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x50
	lsl	r0, r0, #0x10
	mov	r1, #0xc8
	lsl	r1, r1, #0x11
	cmp	r0, r1
	bls	.L183	@cond_branch
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
.L183:
	pop	{r4}
	pop	{r0}
	bx	r0
.L191:
	.align	2, 0
.L190:
	.word	gSprites
.Lfe26:
	.size	 sub_810ADF8,.Lfe26-sub_810ADF8
	.align	2, 0
	.globl	sub_810AE5C
	.type	 sub_810AE5C,function
	.thumb_func
sub_810AE5C:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	ldr	r1, .L210
	add	r5, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L197	@cond_branch
	cmp	r0, #0x1
	bgt	.L207	@cond_branch
	cmp	r0, #0
	beq	.L194	@cond_branch
	b	.L193
.L211:
	.align	2, 0
.L210:
	.word	gTasks
.L207:
	cmp	r0, #0x2
	beq	.L201	@cond_branch
	cmp	r0, #0x3
	bne	.LCB2117
	b	.L204	@long jump
.LCB2117:
	b	.L193
.L194:
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r6, #0x0
	strh	r0, [r5, #0x26]
	ldr	r4, .L212
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x24]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L195	@cond_branch
	ldr	r0, .L212+0x4
	strh	r0, [r5, #0x24]
	mov	r0, #0x2
	b	.L208
.L213:
	.align	2, 0
.L212:
	.word	gBattleAnimAttacker
	.word	0xffe0
.L195:
	mov	r0, #0x20
	strh	r0, [r5, #0x24]
	ldr	r0, .L214
.L208:
	strh	r0, [r5, #0x22]
	ldr	r2, .L214+0x4
	mov	r0, #0x26
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r5, #0x24]
	strh	r1, [r0, #0x24]
	b	.L209
.L215:
	.align	2, 0
.L214:
	.word	0xfffe
	.word	gSprites
.L197:
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L193	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0xa]
	ldr	r4, .L216
	mov	r1, #0x26
	ldrsh	r0, [r5, r1]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	add	r2, r2, #0x3e
	ldrb	r3, [r2]
	lsl	r0, r3, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrh	r1, [r5, #0x24]
	mov	r2, #0x24
	ldrsh	r0, [r5, r2]
	cmp	r0, #0
	beq	.L209	@cond_branch
	ldrh	r2, [r5, #0x22]
	add	r2, r1, r2
	strh	r2, [r5, #0x24]
	mov	r0, #0x26
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r2, [r0, #0x24]
	b	.L193
.L217:
	.align	2, 0
.L216:
	.word	gSprites
.L201:
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L193	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0xa]
	ldr	r1, .L218
	mov	r2, #0x26
	ldrsh	r0, [r5, r2]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r1
	add	r2, r2, #0x3e
	ldrb	r3, [r2]
	lsl	r0, r3, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r5, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	bne	.L193	@cond_branch
.L209:
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	b	.L193
.L219:
	.align	2, 0
.L218:
	.word	gSprites
.L204:
	ldr	r2, .L220
	mov	r0, #0x26
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	add	r0, r3, #0
	bl	DestroyAnimVisualTask
.L193:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L221:
	.align	2, 0
.L220:
	.word	gSprites
.Lfe27:
	.size	 sub_810AE5C,.Lfe27-sub_810AE5C
	.align	2, 0
	.globl	sub_810AFCC
	.type	 sub_810AFCC,function
	.thumb_func
sub_810AFCC:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L249
	add	r5, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	bne	.LCB2341
	b	.L238	@long jump
.LCB2341:
	cmp	r0, #0x1
	bgt	.L246	@cond_branch
	cmp	r0, #0
	beq	.L224	@cond_branch
	b	.L223
.L250:
	.align	2, 0
.L249:
	.word	gTasks
.L246:
	cmp	r0, #0x2
	bne	.LCB2356
	b	.L242	@long jump
.LCB2356:
	b	.L223
.L224:
	ldr	r4, .L251
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r2, #0x1
	neg	r2, r2
	add	r1, r2, #0
	cmp	r0, #0
	bne	.L225	@cond_branch
	mov	r1, #0x1
.L225:
	mov	r6, #0x0
	strh	r1, [r5, #0xa]
	ldr	r0, .L251+0x4
	mov	r1, #0x0
	ldrsh	r2, [r0, r1]
	add	r3, r0, #0
	cmp	r2, #0
	beq	.L228	@cond_branch
	cmp	r2, #0x4
	beq	.L229	@cond_branch
	ldrh	r1, [r3]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L231	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r5, #0xe]
	ldr	r0, .L251+0x8
	b	.L248
.L252:
	.align	2, 0
.L251:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	0xfff0
.L228:
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0xe]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x12]
	mov	r2, #0xa
	ldrsh	r0, [r5, r2]
	lsl	r0, r0, #0x7
	add	r0, r0, #0x78
	strh	r0, [r5, #0x10]
	b	.L227
.L229:
	mov	r0, #0xa
	ldrsh	r1, [r5, r0]
	lsl	r1, r1, #0x7
	mov	r0, #0x78
	sub	r0, r0, r1
	strh	r0, [r5, #0xe]
	ldr	r4, .L253
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x12]
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0xa
	ldrsh	r1, [r5, r2]
	lsl	r1, r1, #0x5
	sub	r0, r0, r1
	strh	r0, [r5, #0x10]
	b	.L227
.L254:
	.align	2, 0
.L253:
	.word	gBattleAnimTarget
.L231:
	ldr	r0, .L255
	strh	r0, [r5, #0xe]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
.L248:
	strh	r0, [r5, #0x10]
	mov	r1, #0xa
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	bne	.L233	@cond_branch
	mov	r2, #0x0
	ldrsh	r0, [r3, r2]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x1
	mov	r0, #0x50
	sub	r0, r0, r1
	strh	r0, [r5, #0x12]
	b	.L227
.L256:
	.align	2, 0
.L255:
	.word	0xfff0
.L233:
	mov	r0, #0x0
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r0, #0x28
	strh	r0, [r5, #0x12]
	ldrh	r1, [r5, #0xe]
	ldrh	r0, [r5, #0x10]
	strh	r0, [r5, #0xe]
	strh	r1, [r5, #0x10]
.L227:
	mov	r2, #0xe
	ldrsh	r1, [r5, r2]
	mov	r2, #0x10
	ldrsh	r0, [r5, r2]
	cmp	r1, r0
	bge	.L236	@cond_branch
	mov	r1, #0x0
	mov	r0, #0x1
	strh	r0, [r5, #0xa]
	strh	r1, [r5, #0x14]
	b	.L241
.L236:
	ldr	r0, .L257
	strh	r0, [r5, #0xa]
	mov	r0, #0x3
	strh	r0, [r5, #0x14]
	b	.L241
.L258:
	.align	2, 0
.L257:
	.word	0xffff
.L238:
	ldrh	r0, [r5, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xc]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L223	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0xc]
	add	r0, r5, #0
	add	r1, r4, #0
	bl	sub_810B154
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L241	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	bl	sub_810B154
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L223	@cond_branch
.L241:
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	b	.L223
.L242:
	mov	r1, #0x16
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L223	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L223:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 sub_810AFCC,.Lfe28-sub_810AFCC
	.align	2, 0
	.type	 sub_810B154,function
	.thumb_func
sub_810B154:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	ldr	r0, .L268
	mov	r2, #0xe
	ldrsh	r1, [r4, r2]
	mov	r3, #0x12
	ldrsh	r2, [r4, r3]
	mov	r3, #0x23
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x40
	beq	.L260	@cond_branch
	ldr	r1, .L268+0x4
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strh	r5, [r0, #0x3a]
	mov	r1, #0x7
	strh	r1, [r0, #0x3c]
	ldrh	r0, [r4, #0x16]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x16]
.L260:
	ldrh	r1, [r4, #0xa]
	ldrh	r5, [r4, #0x14]
	add	r0, r1, r5
	strh	r0, [r4, #0x14]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L261	@cond_branch
	mov	r0, #0x3
	strh	r0, [r4, #0x14]
.L261:
	mov	r2, #0x14
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x3
	ble	.L262	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x14]
.L262:
	mov	r3, #0xa
	ldrsh	r0, [r4, r3]
	lsl	r0, r0, #0x4
	ldrh	r5, [r4, #0xe]
	add	r2, r0, r5
	strh	r2, [r4, #0xe]
	lsl	r0, r1, #0x10
	asr	r3, r0, #0x10
	cmp	r3, #0x1
	bne	.L265	@cond_branch
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r5, #0x10
	ldrsh	r1, [r4, r5]
	cmp	r0, r1
	bge	.L264	@cond_branch
.L265:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r3, r0
	bne	.L263	@cond_branch
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x10
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	bgt	.L263	@cond_branch
.L264:
	mov	r0, #0x1
	b	.L267
.L269:
	.align	2, 0
.L268:
	.word	gUnknown_08595A00
	.word	gSprites
.L263:
	mov	r0, #0x0
.L267:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe29:
	.size	 sub_810B154,.Lfe29-sub_810B154
	.align	2, 0
	.type	 sub_810B1F0,function
	.thumb_func
sub_810B1F0:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xc
	ble	.L271	@cond_branch
	ldr	r3, .L272
	mov	r0, #0x3c
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x3a
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
.L271:
	pop	{r4}
	pop	{r0}
	bx	r0
.L273:
	.align	2, 0
.L272:
	.word	gTasks
.Lfe30:
	.size	 sub_810B1F0,.Lfe30-sub_810B1F0
	.align	2, 0
	.type	 sub_810B23C,function
	.thumb_func
sub_810B23C:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L276	@cond_branch
	cmp	r0, #0x1
	beq	.L277	@cond_branch
	b	.L275
.L276:
	ldr	r4, .L281
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	add	r0, r5, #0
	mov	r1, #0x2
	bl	StartSpriteAffineAnim
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	b	.L275
.L282:
	.align	2, 0
.L281:
	.word	gBattleAnimAttacker
.L277:
	add	r0, r5, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L275	@cond_branch
	add	r0, r5, #0
	bl	DestroySpriteAndMatrix
.L275:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 sub_810B23C,.Lfe31-sub_810B23C
	.align	2, 0
	.globl	sub_810B29C
	.type	 sub_810B29C,function
	.thumb_func
sub_810B29C:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L309
	add	r5, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x4
	bls	.LCB2841
	b	.L284	@long jump
.LCB2841:
	lsl	r0, r0, #0x2
	ldr	r1, .L309+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L310:
	.align	2, 0
.L309:
	.word	gTasks
	.word	.L304
	.align	2, 0
	.align	2, 0
.L304:
	.word	.L285
	.word	.L286
	.word	.L292
	.word	.L299
	.word	.L301
.L285:
	ldr	r4, .L311
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x14]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x16]
	mov	r0, #0x4
	strh	r0, [r5, #0x18]
	ldr	r0, .L311+0x4
	ldrb	r0, [r0]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x1c]
	mov	r2, #0x1c
	ldrsh	r0, [r5, r2]
	mov	r2, #0x14
	ldrsh	r1, [r5, r2]
	sub	r0, r0, r1
	mov	r1, #0x5
	bl	__divsi3
	strh	r0, [r5, #0x1a]
	mov	r0, #0x7
	strh	r0, [r5, #0x10]
	ldr	r0, .L311+0x8
	strh	r0, [r5, #0x12]
	mov	r0, #0xc
	strh	r0, [r5, #0x1e]
	sub	r0, r0, #0x4c
	bl	BattleAnimAdjustPanning
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldrh	r0, [r5, #0x20]
	strh	r0, [r5, #0x24]
	mov	r1, #0x22
	ldrsh	r0, [r5, r1]
	mov	r2, #0x20
	ldrsh	r1, [r5, r2]
	sub	r0, r0, r1
	mov	r1, #0x3
	bl	__divsi3
	strh	r0, [r5, #0x26]
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	b	.L306
.L312:
	.align	2, 0
.L311:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	0xffff
.L286:
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L287	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0xa]
	add	r0, r5, #0
	add	r1, r2, #0
	bl	sub_810B430
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L287	@cond_branch
	mov	r1, #0xc
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x5
	bne	.L289	@cond_branch
	mov	r0, #0x3
	b	.L307
.L289:
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
.L307:
	strh	r0, [r5, #0x8]
.L287:
	ldrh	r1, [r5, #0x1e]
	mov	r2, #0x1e
	ldrsh	r0, [r5, r2]
	cmp	r0, #0
	beq	.L284	@cond_branch
	b	.L308
.L292:
	ldrh	r1, [r5, #0x1e]
	mov	r2, #0x1e
	ldrsh	r0, [r5, r2]
	cmp	r0, #0
	beq	.L293	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r5, #0x1e]
.L293:
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	mov	r3, #0x0
	strh	r0, [r5, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L284	@cond_branch
	strh	r3, [r5, #0xa]
	ldrh	r1, [r5, #0xc]
	mov	r2, #0x1
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L295	@cond_branch
	mov	r0, #0x4
	strh	r0, [r5, #0x16]
	mov	r0, #0x44
	strh	r0, [r5, #0x18]
	strh	r3, [r5, #0x10]
	strh	r2, [r5, #0x12]
	b	.L296
.L295:
	mov	r0, #0x44
	strh	r0, [r5, #0x16]
	mov	r0, #0x4
	strh	r0, [r5, #0x18]
	mov	r0, #0x7
	strh	r0, [r5, #0x10]
	ldr	r0, .L313
	strh	r0, [r5, #0x12]
.L296:
	mov	r1, #0x1e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L302	@cond_branch
	mov	r0, #0x4
	b	.L306
.L314:
	.align	2, 0
.L313:
	.word	0xffff
.L299:
	mov	r1, #0xe
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L284	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	b	.L284
.L301:
	ldrh	r1, [r5, #0x1e]
	mov	r2, #0x1e
	ldrsh	r0, [r5, r2]
	cmp	r0, #0
	beq	.L302	@cond_branch
.L308:
	sub	r0, r1, #0x1
	strh	r0, [r5, #0x1e]
	b	.L284
.L302:
	mov	r0, #0x1
.L306:
	strh	r0, [r5, #0x8]
.L284:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 sub_810B29C,.Lfe32-sub_810B29C
	.align	2, 0
	.type	 sub_810B430,function
	.thumb_func
sub_810B430:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	ldr	r0, .L325
	mov	r2, #0x14
	ldrsh	r1, [r4, r2]
	mov	r3, #0x16
	ldrsh	r2, [r4, r3]
	mov	r3, #0x23
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x40
	beq	.L316	@cond_branch
	ldr	r1, .L325+0x4
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	ldrh	r2, [r3, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	ldrh	r6, [r4, #0x10]
	add	r1, r1, r6
	ldr	r6, .L325+0x8
	add	r0, r6, #0
	and	r1, r1, r0
	ldr	r0, .L325+0xc
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3, #0x4]
	ldrh	r0, [r4, #0x12]
	ldrh	r1, [r4, #0x10]
	add	r0, r0, r1
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L317	@cond_branch
	mov	r0, #0x7
	strh	r0, [r4, #0x10]
.L317:
	mov	r2, #0x10
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x7
	ble	.L318	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x10]
.L318:
	strh	r5, [r3, #0x3a]
	mov	r0, #0x3
	strh	r0, [r3, #0x3c]
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
.L316:
	mov	r3, #0x10
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	bne	.L319	@cond_branch
	mov	r5, #0x12
	ldrsh	r0, [r4, r5]
	cmp	r0, #0
	ble	.L319	@cond_branch
	ldrh	r1, [r4, #0x26]
	ldrh	r6, [r4, #0x24]
	add	r1, r1, r6
	strh	r1, [r4, #0x24]
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x76
	bl	PlaySE12WithPanning
.L319:
	mov	r0, #0x12
	ldrsh	r3, [r4, r0]
	ldrh	r2, [r4, #0x16]
	cmp	r3, #0
	bge	.L322	@cond_branch
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r5, #0x18
	ldrsh	r1, [r4, r5]
	cmp	r0, r1
	ble	.L321	@cond_branch
.L322:
	cmp	r3, #0
	ble	.L320	@cond_branch
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r6, #0x18
	ldrsh	r1, [r4, r6]
	cmp	r0, r1
	blt	.L320	@cond_branch
.L321:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	ldrh	r0, [r4, #0x1a]
	ldrh	r1, [r4, #0x14]
	add	r0, r0, r1
	strh	r0, [r4, #0x14]
	mov	r0, #0x1
	b	.L324
.L326:
	.align	2, 0
.L325:
	.word	gUnknown_08595A30
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.L320:
	mov	r3, #0x12
	ldrsh	r0, [r4, r3]
	lsl	r0, r0, #0x3
	add	r0, r2, r0
	strh	r0, [r4, #0x16]
	mov	r0, #0x0
.L324:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe33:
	.size	 sub_810B430,.Lfe33-sub_810B430
	.align	2, 0
	.type	 sub_810B51C,function
	.thumb_func
sub_810B51C:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xc
	ble	.L328	@cond_branch
	ldr	r3, .L329
	mov	r0, #0x3c
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x3a
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	add	r0, r4, #0
	bl	DestroySprite
.L328:
	pop	{r4}
	pop	{r0}
	bx	r0
.L330:
	.align	2, 0
.L329:
	.word	gTasks
.Lfe34:
	.size	 sub_810B51C,.Lfe34-sub_810B51C
	.align	2, 0
	.globl	sub_810B55C
	.type	 sub_810B55C,function
	.thumb_func
sub_810B55C:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L348
	add	r5, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L338	@cond_branch
	cmp	r0, #0x1
	bgt	.L345	@cond_branch
	cmp	r0, #0
	beq	.L333	@cond_branch
	b	.L332
.L349:
	.align	2, 0
.L348:
	.word	gTasks
.L345:
	cmp	r0, #0x2
	beq	.L341	@cond_branch
	b	.L332
.L333:
	ldr	r0, .L350
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x20
	strh	r0, [r5, #0x26]
	strh	r0, [r5, #0x24]
	cmp	r0, #0x10
	ble	.L335	@cond_branch
	add	r2, r0, #0
.L336:
	add	r1, r2, #0
	sub	r1, r1, #0x20
	add	r2, r1, #0
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	bgt	.L336	@cond_branch
	strh	r1, [r5, #0x24]
.L335:
	ldr	r4, .L350
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldrb	r0, [r4]
	bl	GetBattlerSpriteSubpriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x2
	strh	r0, [r5, #0x20]
	b	.L347
.L351:
	.align	2, 0
.L350:
	.word	gBattleAnimTarget
.L338:
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L332	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0xa]
	add	r0, r5, #0
	add	r1, r2, #0
	bl	sub_810B614
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L332	@cond_branch
.L347:
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	b	.L332
.L341:
	mov	r1, #0x1c
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L332	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L332:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 sub_810B55C,.Lfe35-sub_810B55C
	.align	2, 0
	.type	 sub_810B614,function
	.thumb_func
sub_810B614:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	ldr	r0, .L356
	mov	r2, #0x22
	ldrsh	r1, [r4, r2]
	mov	r3, #0x24
	ldrsh	r2, [r4, r3]
	ldrh	r3, [r4, #0x20]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x40
	beq	.L353	@cond_branch
	ldr	r3, .L356+0x4
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r3, #0
	add	r1, r1, #0x1c
	add	r1, r0, r1
	ldr	r2, .L356+0x8
	str	r2, [r1]
	add	r0, r0, r3
	strh	r5, [r0, #0x3a]
	mov	r1, #0xa
	strh	r1, [r0, #0x3c]
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
.L353:
	ldrh	r2, [r4, #0x24]
	mov	r0, #0x24
	ldrsh	r1, [r4, r0]
	mov	r3, #0x26
	ldrsh	r0, [r4, r3]
	cmp	r1, r0
	bge	.L354	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x20
	strh	r0, [r4, #0x24]
	mov	r0, #0x0
	b	.L355
.L357:
	.align	2, 0
.L356:
	.word	gUnknown_085956C0
	.word	gSprites
	.word	sub_810B684
.L354:
	mov	r0, #0x1
.L355:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe36:
	.size	 sub_810B614,.Lfe36-sub_810B614
	.align	2, 0
	.type	 sub_810B684,function
	.thumb_func
sub_810B684:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L359	@cond_branch
	ldr	r3, .L360
	mov	r0, #0x3c
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x3a
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	add	r0, r4, #0
	bl	DestroySprite
.L359:
	pop	{r4}
	pop	{r0}
	bx	r0
.L361:
	.align	2, 0
.L360:
	.word	gTasks
.Lfe37:
	.size	 sub_810B684,.Lfe37-sub_810B684
.text
	.align	2, 0

