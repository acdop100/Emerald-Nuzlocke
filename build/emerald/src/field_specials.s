@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gBikeCyclingChallenge
	.section ewram_data,"aw"
	.type	 gBikeCyclingChallenge,object
	.size	 gBikeCyclingChallenge,1
gBikeCyclingChallenge:
	.byte	0x0
	.globl	gBikeCollisions
	.type	 gBikeCollisions,object
	.size	 gBikeCollisions,1
gBikeCollisions:
	.byte	0x0
	.align	2, 0
	.type	 gBikeCyclingTimer,object
	.size	 gBikeCyclingTimer,4
gBikeCyclingTimer:
	.word	0x0
	.type	 gUnknown_0203AB5C,object
	.size	 gUnknown_0203AB5C,1
gUnknown_0203AB5C:
	.byte	0x0
	.type	 sPetalburgGymSlidingDoorFrameCounter,object
	.size	 sPetalburgGymSlidingDoorFrameCounter,1
sPetalburgGymSlidingDoorFrameCounter:
	.byte	0x0
	.type	 gUnknown_0203AB5E,object
	.size	 gUnknown_0203AB5E,1
gUnknown_0203AB5E:
	.byte	0x0
	.align	1, 0
	.type	 gUnknown_0203AB60,object
	.size	 gUnknown_0203AB60,2
gUnknown_0203AB60:
	.short	0x0
	.align	1, 0
	.type	 gUnknown_0203AB62,object
	.size	 gUnknown_0203AB62,2
gUnknown_0203AB62:
	.short	0x0
	.align	2, 0
	.type	 gUnknown_0203AB64,object
	.size	 gUnknown_0203AB64,4
gUnknown_0203AB64:
	.word	0x0
	.align	1, 0
	.type	 gUnknown_0203AB68,object
	.size	 gUnknown_0203AB68,2
gUnknown_0203AB68:
	.short	0x0
	.align	1, 0
	.type	 gUnknown_0203AB6A,object
	.size	 gUnknown_0203AB6A,2
gUnknown_0203AB6A:
	.short	0x0
	.type	 gUnknown_0203AB6C,object
	.size	 gUnknown_0203AB6C,1
gUnknown_0203AB6C:
	.byte	0x0
	.type	 gUnknown_0203AB6D,object
	.size	 gUnknown_0203AB6D,1
gUnknown_0203AB6D:
	.byte	0x0
	.type	 gUnknown_0203AB6E,object
	.size	 gUnknown_0203AB6E,1
gUnknown_0203AB6E:
	.byte	0x0
	.type	 gUnknown_0203AB6F,object
	.size	 gUnknown_0203AB6F,1
gUnknown_0203AB6F:
	.byte	0x0
	.align	2, 0
	.type	 gUnknown_0203AB70,object
	.size	 gUnknown_0203AB70,4
gUnknown_0203AB70:
	.word	0x0
.text
	.align	2, 0
	.globl	Special_ShowDiploma
	.type	 Special_ShowDiploma,function
	.thumb_func
Special_ShowDiploma:
	push	{lr}
	ldr	r0, .L3
	bl	SetMainCallback2
	bl	ScriptContext2_Enable
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	CB2_ShowDiploma
.Lfe1:
	.size	 Special_ShowDiploma,.Lfe1-Special_ShowDiploma
	.align	2, 0
	.globl	Special_ViewWallClock
	.type	 Special_ViewWallClock,function
	.thumb_func
Special_ViewWallClock:
	push	{lr}
	ldr	r0, .L6
	ldr	r1, .L6+0x4
	str	r1, [r0, #0x8]
	ldr	r0, .L6+0x8
	bl	SetMainCallback2
	bl	ScriptContext2_Enable
	pop	{r0}
	bx	r0
.L7:
	.align	2, 0
.L6:
	.word	gMain
	.word	CB2_ReturnToField
	.word	CB2_ViewWallClock
.Lfe2:
	.size	 Special_ViewWallClock,.Lfe2-Special_ViewWallClock
	.align	2, 0
	.globl	ResetCyclingRoadChallengeData
	.type	 ResetCyclingRoadChallengeData,function
	.thumb_func
ResetCyclingRoadChallengeData:
	ldr	r0, .L9
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L9+0x4
	strb	r1, [r0]
	ldr	r1, .L9+0x8
	mov	r0, #0x0
	str	r0, [r1]
	bx	lr
.L10:
	.align	2, 0
.L9:
	.word	gBikeCyclingChallenge
	.word	gBikeCollisions
	.word	gBikeCyclingTimer
.Lfe3:
	.size	 ResetCyclingRoadChallengeData,.Lfe3-ResetCyclingRoadChallengeData
	.align	2, 0
	.globl	Special_BeginCyclingRoadChallenge
	.type	 Special_BeginCyclingRoadChallenge,function
	.thumb_func
Special_BeginCyclingRoadChallenge:
	ldr	r1, .L12
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L12+0x4
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L12+0x8
	ldr	r0, .L12+0xc
	ldr	r0, [r0, #0x20]
	str	r0, [r1]
	bx	lr
.L13:
	.align	2, 0
.L12:
	.word	gBikeCyclingChallenge
	.word	gBikeCollisions
	.word	gBikeCyclingTimer
	.word	gMain
.Lfe4:
	.size	 Special_BeginCyclingRoadChallenge,.Lfe4-Special_BeginCyclingRoadChallenge
	.align	2, 0
	.globl	GetPlayerAvatarBike
	.type	 GetPlayerAvatarBike,function
	.thumb_func
GetPlayerAvatarBike:
	push	{lr}
	mov	r0, #0x4
	bl	TestPlayerAvatarFlags
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L15	@cond_branch
	mov	r0, #0x1
	b	.L17
.L15:
	mov	r0, #0x2
	bl	TestPlayerAvatarFlags
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L16	@cond_branch
	mov	r0, #0x0
	b	.L17
.L16:
	mov	r0, #0x2
.L17:
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 GetPlayerAvatarBike,.Lfe5-GetPlayerAvatarBike
	.align	2, 0
	.type	 DetermineCyclingRoadResults,function
	.thumb_func
DetermineCyclingRoadResults:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	cmp	r6, #0x63
	bhi	.L19	@cond_branch
	ldr	r4, .L42
	add	r0, r4, #0
	add	r1, r6, #0
	mov	r2, #0x0
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r1, .L42+0x4
	add	r0, r4, #0
	bl	StringAppend
	b	.L20
.L43:
	.align	2, 0
.L42:
	.word	gStringVar1
	.word	gText_SpaceTimes
.L19:
	ldr	r0, .L44
	ldr	r1, .L44+0x4
	bl	StringCopy
.L20:
	ldr	r0, .L44+0x8
	cmp	r7, r0
	bhi	.L21	@cond_branch
	ldr	r4, .L44+0xc
	add	r0, r7, #0
	mov	r1, #0x3c
	bl	__udivsi3
	add	r1, r0, #0
	add	r0, r4, #0
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	mov	r0, #0xad
	strb	r0, [r4, #0x2]
	add	r5, r4, #0x3
	add	r0, r7, #0
	mov	r1, #0x3c
	bl	__umodsi3
	mov	r1, #0x64
	mul	r0, r0, r1
	mov	r1, #0x3c
	bl	__udivsi3
	add	r1, r0, #0
	add	r0, r5, #0
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r1, .L44+0x10
	add	r0, r4, #0
	bl	StringAppend
	b	.L22
.L45:
	.align	2, 0
.L44:
	.word	gStringVar1
	.word	gText_99TimesPlus
	.word	0xe0f
	.word	gStringVar2
	.word	gText_SpaceSeconds
.L21:
	ldr	r0, .L46
	ldr	r1, .L46+0x4
	bl	StringCopy
.L22:
	mov	r4, #0x0
	cmp	r6, #0
	bne	.L23	@cond_branch
	mov	r4, #0x5
	b	.L24
.L47:
	.align	2, 0
.L46:
	.word	gStringVar2
	.word	gText_1MinutePlus
.L23:
	cmp	r6, #0x3
	bhi	.L25	@cond_branch
	mov	r4, #0x4
	b	.L24
.L25:
	cmp	r6, #0x9
	bhi	.L27	@cond_branch
	mov	r4, #0x3
	b	.L24
.L27:
	cmp	r6, #0x13
	bhi	.L29	@cond_branch
	mov	r4, #0x2
	b	.L24
.L29:
	cmp	r6, #0x63
	bhi	.L24	@cond_branch
	mov	r4, #0x1
.L24:
	add	r0, r7, #0
	mov	r1, #0x3c
	bl	__udivsi3
	cmp	r0, #0xa
	bhi	.L32	@cond_branch
	add	r0, r4, #0x5
	b	.L41
.L32:
	cmp	r0, #0xf
	bhi	.L34	@cond_branch
	add	r0, r4, #0x4
	b	.L41
.L34:
	cmp	r0, #0x14
	bhi	.L36	@cond_branch
	add	r0, r4, #0x3
	b	.L41
.L36:
	cmp	r0, #0x28
	bhi	.L38	@cond_branch
	add	r0, r4, #0x2
	b	.L41
.L38:
	cmp	r0, #0x3b
	bhi	.L33	@cond_branch
	add	r0, r4, #0x1
.L41:
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L33:
	ldr	r0, .L48
	strh	r4, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L49:
	.align	2, 0
.L48:
	.word	gSpecialVar_Result
.Lfe6:
	.size	 DetermineCyclingRoadResults,.Lfe6-DetermineCyclingRoadResults
	.align	2, 0
	.globl	FinishCyclingRoadChallenge
	.type	 FinishCyclingRoadChallenge,function
	.thumb_func
FinishCyclingRoadChallenge:
	push	{r4, r5, lr}
	ldr	r0, .L51
	ldr	r1, .L51+0x4
	ldr	r4, [r0, #0x20]
	ldr	r0, [r1]
	sub	r4, r4, r0
	ldr	r5, .L51+0x8
	ldrb	r1, [r5]
	add	r0, r4, #0
	bl	DetermineCyclingRoadResults
	ldrb	r1, [r5]
	add	r0, r4, #0
	bl	RecordCyclingRoadResults
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L52:
	.align	2, 0
.L51:
	.word	gMain
	.word	gBikeCyclingTimer
	.word	gBikeCollisions
.Lfe7:
	.size	 FinishCyclingRoadChallenge,.Lfe7-FinishCyclingRoadChallenge
	.align	2, 0
	.type	 RecordCyclingRoadResults,function
	.thumb_func
RecordCyclingRoadResults:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	ldr	r6, .L56
	add	r0, r6, #0
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldr	r7, .L56+0x4
	add	r0, r7, #0
	bl	VarGet
	lsl	r0, r0, #0x10
	add	r4, r4, r0
	cmp	r4, r5
	bhi	.L55	@cond_branch
	cmp	r4, #0
	bne	.L54	@cond_branch
.L55:
	lsl	r1, r5, #0x10
	lsr	r1, r1, #0x10
	add	r0, r6, #0
	bl	VarSet
	lsr	r1, r5, #0x10
	add	r0, r7, #0
	bl	VarSet
	ldr	r0, .L56+0x8
	mov	r1, r8
	bl	VarSet
.L54:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L57:
	.align	2, 0
.L56:
	.word	0x4028
	.word	0x4029
	.word	0x4027
.Lfe8:
	.size	 RecordCyclingRoadResults,.Lfe8-RecordCyclingRoadResults
	.align	2, 0
	.globl	GetRecordedCyclingRoadResults
	.type	 GetRecordedCyclingRoadResults,function
	.thumb_func
GetRecordedCyclingRoadResults:
	push	{r4, lr}
	ldr	r0, .L61
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldr	r0, .L61+0x4
	bl	VarGet
	lsl	r0, r0, #0x10
	add	r4, r4, r0
	cmp	r4, #0
	beq	.L59	@cond_branch
	ldr	r0, .L61+0x8
	bl	VarGet
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	DetermineCyclingRoadResults
	mov	r0, #0x1
	b	.L60
.L62:
	.align	2, 0
.L61:
	.word	0x4028
	.word	0x4029
	.word	0x4027
.L59:
	mov	r0, #0x0
.L60:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 GetRecordedCyclingRoadResults,.Lfe9-GetRecordedCyclingRoadResults
	.align	2, 0
	.globl	UpdateCyclingRoadState
	.type	 UpdateCyclingRoadState,function
	.thumb_func
UpdateCyclingRoadState:
	push	{r4, lr}
	ldr	r0, .L67
	ldrh	r1, [r0]
	ldr	r0, .L67+0x4
	cmp	r1, r0
	beq	.L63	@cond_branch
	ldr	r4, .L67+0x8
	add	r0, r4, #0
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x2
	beq	.L66	@cond_branch
	add	r0, r4, #0
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x3
	bne	.L63	@cond_branch
.L66:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	VarSet
	mov	r0, #0x0
	bl	Overworld_SetSavedMusic
.L63:
	pop	{r4}
	pop	{r0}
	bx	r0
.L68:
	.align	2, 0
.L67:
	.word	gLastUsedWarp
	.word	0xc1d
	.word	0x40a9
.Lfe10:
	.size	 UpdateCyclingRoadState,.Lfe10-UpdateCyclingRoadState
	.align	2, 0
	.globl	SetSSTidalFlag
	.type	 SetSSTidalFlag,function
	.thumb_func
SetSSTidalFlag:
	push	{lr}
	ldr	r0, .L70
	bl	FlagSet
	ldr	r0, .L70+0x4
	bl	GetVarPointer
	mov	r1, #0x0
	strh	r1, [r0]
	pop	{r0}
	bx	r0
.L71:
	.align	2, 0
.L70:
	.word	0x88d
	.word	0x404a
.Lfe11:
	.size	 SetSSTidalFlag,.Lfe11-SetSSTidalFlag
	.align	2, 0
	.globl	ResetSSTidalFlag
	.type	 ResetSSTidalFlag,function
	.thumb_func
ResetSSTidalFlag:
	push	{lr}
	ldr	r0, .L73
	bl	FlagClear
	pop	{r0}
	bx	r0
.L74:
	.align	2, 0
.L73:
	.word	0x88d
.Lfe12:
	.size	 ResetSSTidalFlag,.Lfe12-ResetSSTidalFlag
	.align	2, 0
	.globl	CountSSTidalStep
	.type	 CountSSTidalStep,function
	.thumb_func
CountSSTidalStep:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L79
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L77	@cond_branch
	ldr	r0, .L79+0x4
	bl	GetVarPointer
	ldrh	r1, [r0]
	add	r1, r4, r1
	strh	r1, [r0]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r1, #0xcc
	bhi	.L76	@cond_branch
.L77:
	mov	r0, #0x0
	b	.L78
.L80:
	.align	2, 0
.L79:
	.word	0x88d
	.word	0x404a
.L76:
	mov	r0, #0x1
.L78:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 CountSSTidalStep,.Lfe13-CountSSTidalStep
	.align	2, 0
	.globl	GetSSTidalLocation
	.type	 GetSSTidalLocation,function
	.thumb_func
GetSSTidalLocation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r8, r0
	add	r5, r1, #0
	add	r6, r2, #0
	add	r7, r3, #0
	ldr	r0, .L106
	bl	GetVarPointer
	add	r4, r0, #0
	ldr	r0, .L106+0x4
	bl	GetVarPointer
	ldrh	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r0, #0x9
	bhi	.L82	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L106+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L107:
	.align	2, 0
.L106:
	.word	0x404a
	.word	0x40b4
	.word	.L101
	.align	2, 0
	.align	2, 0
.L101:
	.word	.L84
	.word	.L91
	.word	.L86
	.word	.L88
	.word	.L88
	.word	.L90
	.word	.L96
	.word	.L84
	.word	.L86
	.word	.L90
.L84:
	mov	r0, #0x1
	b	.L103
.L86:
	mov	r0, #0x4
	b	.L103
.L88:
	mov	r0, #0x2
	b	.L103
.L90:
	mov	r0, #0x3
	b	.L103
.L91:
	ldrh	r0, [r4]
	cmp	r0, #0x3b
	bhi	.L92	@cond_branch
	mov	r0, #0x31
	strb	r0, [r5]
	ldrh	r0, [r4]
	add	r0, r0, #0x13
	b	.L104
.L92:
	cmp	r0, #0x8b
	bhi	.L94	@cond_branch
	mov	r0, #0x30
	strb	r0, [r5]
	ldrh	r0, [r4]
	sub	r0, r0, #0x3c
	b	.L104
.L94:
	mov	r0, #0x2f
	strb	r0, [r5]
	ldrh	r0, [r4]
	sub	r0, r0, #0x8c
	b	.L104
.L96:
	ldrh	r0, [r4]
	cmp	r0, #0x41
	bhi	.L97	@cond_branch
	mov	r0, #0x2f
	strb	r0, [r5]
	ldrh	r1, [r4]
	mov	r0, #0x41
	b	.L105
.L97:
	cmp	r0, #0x91
	bhi	.L99	@cond_branch
	mov	r0, #0x30
	strb	r0, [r5]
	ldrh	r1, [r4]
	mov	r0, #0x91
	b	.L105
.L99:
	mov	r0, #0x31
	strb	r0, [r5]
	ldrh	r1, [r4]
	mov	r0, #0xe0
.L105:
	sub	r0, r0, r1
.L104:
	strh	r0, [r6]
.L82:
	mov	r0, #0x0
	mov	r1, r8
	strb	r0, [r1]
	mov	r0, #0x14
	strh	r0, [r7]
	mov	r0, #0x0
.L103:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 GetSSTidalLocation,.Lfe14-GetSSTidalLocation
	.align	2, 0
	.globl	ShouldDoWallyCall
	.type	 ShouldDoWallyCall,function
	.thumb_func
ShouldDoWallyCall:
	push	{lr}
	mov	r0, #0x88
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L120	@cond_branch
	ldr	r0, .L121
	ldrb	r0, [r0, #0x17]
	cmp	r0, #0x1
	blt	.L120	@cond_branch
	cmp	r0, #0x3
	ble	.L114	@cond_branch
	cmp	r0, #0x6
	bne	.L120	@cond_branch
.L114:
	ldr	r0, .L121+0x4
	bl	GetVarPointer
	ldrh	r1, [r0]
	add	r1, r1, #0x1
	strh	r1, [r0]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r1, #0xf9
	bhi	.L118	@cond_branch
.L120:
	mov	r0, #0x0
	b	.L119
.L122:
	.align	2, 0
.L121:
	.word	gMapHeader
	.word	0x40f2
.L118:
	mov	r0, #0x1
.L119:
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 ShouldDoWallyCall,.Lfe15-ShouldDoWallyCall
	.align	2, 0
	.globl	ShouldDoWinonaCall
	.type	 ShouldDoWinonaCall,function
	.thumb_func
ShouldDoWinonaCall:
	push	{lr}
	mov	r0, #0x8a
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L135	@cond_branch
	ldr	r0, .L136
	ldrb	r0, [r0, #0x17]
	cmp	r0, #0x1
	blt	.L135	@cond_branch
	cmp	r0, #0x3
	ble	.L129	@cond_branch
	cmp	r0, #0x6
	bne	.L135	@cond_branch
.L129:
	ldr	r0, .L136+0x4
	bl	GetVarPointer
	ldrh	r1, [r0]
	add	r1, r1, #0x1
	strh	r1, [r0]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r1, #0x9
	bhi	.L133	@cond_branch
.L135:
	mov	r0, #0x0
	b	.L134
.L137:
	.align	2, 0
.L136:
	.word	gMapHeader
	.word	0x40f3
.L133:
	mov	r0, #0x1
.L134:
	pop	{r1}
	bx	r1
.Lfe16:
	.size	 ShouldDoWinonaCall,.Lfe16-ShouldDoWinonaCall
	.align	2, 0
	.globl	ShouldDoScottCall
	.type	 ShouldDoScottCall,function
	.thumb_func
ShouldDoScottCall:
	push	{lr}
	mov	r0, #0x72
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L150	@cond_branch
	ldr	r0, .L151
	ldrb	r0, [r0, #0x17]
	cmp	r0, #0x1
	blt	.L150	@cond_branch
	cmp	r0, #0x3
	ble	.L144	@cond_branch
	cmp	r0, #0x6
	bne	.L150	@cond_branch
.L144:
	ldr	r0, .L151+0x4
	bl	GetVarPointer
	ldrh	r1, [r0]
	add	r1, r1, #0x1
	strh	r1, [r0]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r1, #0x9
	bhi	.L148	@cond_branch
.L150:
	mov	r0, #0x0
	b	.L149
.L152:
	.align	2, 0
.L151:
	.word	gMapHeader
	.word	0x40f5
.L148:
	mov	r0, #0x1
.L149:
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 ShouldDoScottCall,.Lfe17-ShouldDoScottCall
	.align	2, 0
	.globl	ShouldDoRoxanneCall
	.type	 ShouldDoRoxanneCall,function
	.thumb_func
ShouldDoRoxanneCall:
	push	{lr}
	mov	r0, #0x80
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L165	@cond_branch
	ldr	r0, .L166
	ldrb	r0, [r0, #0x17]
	cmp	r0, #0x1
	blt	.L165	@cond_branch
	cmp	r0, #0x3
	ble	.L159	@cond_branch
	cmp	r0, #0x6
	bne	.L165	@cond_branch
.L159:
	ldr	r0, .L166+0x4
	bl	GetVarPointer
	ldrh	r1, [r0]
	add	r1, r1, #0x1
	strh	r1, [r0]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r1, #0xf9
	bhi	.L163	@cond_branch
.L165:
	mov	r0, #0x0
	b	.L164
.L167:
	.align	2, 0
.L166:
	.word	gMapHeader
	.word	0x40f4
.L163:
	mov	r0, #0x1
.L164:
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 ShouldDoRoxanneCall,.Lfe18-ShouldDoRoxanneCall
	.align	2, 0
	.globl	ShouldDoRivalRayquazaCall
	.type	 ShouldDoRivalRayquazaCall,function
	.thumb_func
ShouldDoRivalRayquazaCall:
	push	{lr}
	mov	r0, #0x75
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L180	@cond_branch
	ldr	r0, .L181
	ldrb	r0, [r0, #0x17]
	cmp	r0, #0x1
	blt	.L180	@cond_branch
	cmp	r0, #0x3
	ble	.L174	@cond_branch
	cmp	r0, #0x6
	bne	.L180	@cond_branch
.L174:
	ldr	r0, .L181+0x4
	bl	GetVarPointer
	ldrh	r1, [r0]
	add	r1, r1, #0x1
	strh	r1, [r0]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r1, #0xf9
	bhi	.L178	@cond_branch
.L180:
	mov	r0, #0x0
	b	.L179
.L182:
	.align	2, 0
.L181:
	.word	gMapHeader
	.word	0x40f6
.L178:
	mov	r0, #0x1
.L179:
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 ShouldDoRivalRayquazaCall,.Lfe19-ShouldDoRivalRayquazaCall
	.align	2, 0
	.globl	GetLinkPartnerNames
	.type	 GetLinkPartnerNames,function
	.thumb_func
GetLinkPartnerNames:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r6, #0x0
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	cmp	r4, r5
	bcs	.L185	@cond_branch
	ldr	r0, .L190
	mov	r8, r0
.L187:
	cmp	r7, r4
	beq	.L186	@cond_branch
	lsl	r0, r6, #0x2
	add	r0, r0, r8
	ldr	r0, [r0]
	lsl	r1, r4, #0x3
	sub	r1, r1, r4
	lsl	r1, r1, #0x2
	ldr	r2, .L190+0x4
	add	r1, r1, r2
	bl	StringCopy
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L186:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r5
	bcc	.L187	@cond_branch
.L185:
	add	r0, r5, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L191:
	.align	2, 0
.L190:
	.word	gTVStringVarPtrs
	.word	gLinkPlayers+0x8
.Lfe20:
	.size	 GetLinkPartnerNames,.Lfe20-GetLinkPartnerNames
	.section .rodata
.LC40:
	.byte	0x7
	.byte	0x9
	.byte	0x8
	.byte	0xa
.LC42:
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	-0x1
	.byte	-0x1
	.byte	0x0
.text
	.align	2, 0
	.globl	SpawnLinkPartnerEventObject
	.type	 SpawnLinkPartnerEventObject,function
	.thumb_func
SpawnLinkPartnerEventObject:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	mov	r7, #0x0
	mov	r0, #0x0
	mov	r9, r0
	mov	r8, r0
	ldr	r1, .L224
	add	r0, sp, #0x8
	mov	r2, #0x4
	bl	memcpy
	add	r4, sp, #0xc
	ldr	r1, .L224+0x4
	add	r0, r4, #0
	mov	r2, #0x8
	bl	memcpy
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	bl	GetPlayerFacingDirection
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	cmp	r0, #0x2
	beq	.L195	@cond_branch
	cmp	r0, #0x2
	bgt	.L200	@cond_branch
	cmp	r0, #0x1
	beq	.L197	@cond_branch
	b	.L193
.L225:
	.align	2, 0
.L224:
	.word	.LC40
	.word	.LC42
.L200:
	cmp	r1, #0x3
	beq	.L194	@cond_branch
	cmp	r1, #0x4
	beq	.L196	@cond_branch
	b	.L193
.L194:
	mov	r7, #0x2
	ldr	r0, .L226
	ldr	r1, [r0]
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	b	.L220
.L227:
	.align	2, 0
.L226:
	.word	gSaveBlock1Ptr
.L195:
	mov	r7, #0x1
	ldr	r0, .L228
	ldr	r0, [r0]
	ldrh	r1, [r0]
	mov	r9, r1
	ldrh	r0, [r0, #0x2]
	sub	r0, r0, #0x1
	b	.L221
.L229:
	.align	2, 0
.L228:
	.word	gSaveBlock1Ptr
.L196:
	ldr	r0, .L230
	ldr	r1, [r0]
	ldrh	r0, [r1]
	add	r0, r0, #0x1
.L220:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	ldrh	r1, [r1, #0x2]
	mov	r8, r1
	b	.L193
.L231:
	.align	2, 0
.L230:
	.word	gSaveBlock1Ptr
.L197:
	mov	r7, #0x3
	ldr	r0, .L232
	ldr	r0, [r0]
	ldrh	r3, [r0]
	mov	r9, r3
	ldrh	r0, [r0, #0x2]
	add	r0, r0, #0x1
.L221:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
.L193:
	mov	r6, #0x0
	b	.L222
.L233:
	.align	2, 0
.L232:
	.word	gSaveBlock1Ptr
.L204:
	cmp	sl, r6
	beq	.L203	@cond_branch
	ldr	r0, .L234
	lsl	r2, r6, #0x3
	sub	r1, r2, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r3, [r1]
	add	r4, r0, #0
	cmp	r3, #0x1
	blt	.L214	@cond_branch
	cmp	r3, #0x2
	ble	.L208	@cond_branch
	cmp	r3, #0x3
	beq	.L211	@cond_branch
	b	.L214
.L235:
	.align	2, 0
.L234:
	.word	gLinkPlayers
.L208:
	ldrb	r0, [r1, #0x13]
	mov	r5, #0xec
	cmp	r0, #0
	bne	.L206	@cond_branch
	mov	r5, #0xeb
	b	.L206
.L211:
	ldrb	r0, [r1, #0x13]
	b	.L223
.L214:
	sub	r0, r2, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x13]
.L223:
	mov	r5, #0x69
	cmp	r0, #0
	bne	.L206	@cond_branch
	mov	r5, #0x64
.L206:
	mov	r0, sp
	add	r0, r0, r7
	add	r0, r0, #0x8
	ldrb	r1, [r0]
	mov	r4, #0xf0
	sub	r4, r4, r6
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r2, r7, #0x1
	mov	r0, sp
	add	r0, r0, r2
	add	r0, r0, #0xc
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	mov	r3, r9
	lsl	r3, r3, #0x10
	asr	r3, r3, #0x10
	mov	ip, r3
	add	r0, r0, ip
	add	r3, r0, #0x7
	lsl	r3, r3, #0x10
	asr	r3, r3, #0x10
	mov	ip, r3
	mov	r0, sp
	add	r0, r0, #0xd
	add	r0, r0, r2
	mov	r2, #0x0
	ldrsb	r2, [r0, r2]
	mov	r3, r8
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r2
	add	r0, r0, #0x7
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	add	r0, r5, #0
	add	r2, r4, #0
	mov	r3, ip
	bl	SpawnSpecialEventObjectParameterized
	add	r0, r5, #0
	add	r1, r4, #0
	add	r2, r6, #0
	bl	LoadLinkPartnerEventObjectSpritePalette
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x4
	bne	.L203	@cond_branch
	mov	r7, #0x0
.L203:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L222:
	ldr	r0, .L236
	ldrh	r0, [r0]
	cmp	r6, r0
	bcc	.L204	@cond_branch
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L237:
	.align	2, 0
.L236:
	.word	gSpecialVar_0x8004
.Lfe21:
	.size	 SpawnLinkPartnerEventObject,.Lfe21-SpawnLinkPartnerEventObject
	.align	2, 0
	.type	 LoadLinkPartnerEventObjectSpritePalette,function
	.thumb_func
LoadLinkPartnerEventObjectSpritePalette:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	lsl	r2, r2, #0x18
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	add	r2, r2, r1
	lsr	r5, r2, #0x18
	lsr	r4, r0, #0x18
	mov	r2, #0xa8
	lsl	r2, r2, #0x15
	add	r0, r0, r2
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L240	@cond_branch
	cmp	r4, #0x64
	beq	.L240	@cond_branch
	cmp	r4, #0x69
	bne	.L239	@cond_branch
.L240:
	ldr	r0, .L251
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x5]
	ldrb	r2, [r0, #0x4]
	add	r0, r3, #0
	bl	GetEventObjectIdByLocalIdAndMap
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x10
	beq	.L239	@cond_branch
	ldr	r1, .L251+0x4
	lsl	r0, r2, #0x3
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x4]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L251+0x8
	add	r1, r1, r0
	lsl	r3, r5, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	cmp	r4, #0x69
	beq	.L246	@cond_branch
	cmp	r4, #0x69
	bgt	.L249	@cond_branch
	cmp	r4, #0x64
	beq	.L245	@cond_branch
	b	.L239
.L252:
	.align	2, 0
.L251:
	.word	gSaveBlock1Ptr
	.word	gEventObjects
	.word	gSprites
.L249:
	cmp	r4, #0xeb
	beq	.L243	@cond_branch
	cmp	r4, #0xec
	beq	.L244	@cond_branch
	b	.L239
.L243:
	ldr	r0, .L253
	b	.L250
.L254:
	.align	2, 0
.L253:
	.word	gEventObjectPalette33
.L244:
	ldr	r0, .L255
	b	.L250
.L256:
	.align	2, 0
.L255:
	.word	gEventObjectPalette34
.L245:
	ldr	r0, .L257
.L250:
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r3, r2
	mov	r2, #0x20
	bl	LoadPalette
	b	.L239
.L258:
	.align	2, 0
.L257:
	.word	gEventObjectPalette8
.L246:
	ldr	r0, .L259
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r3, r2
	mov	r2, #0x20
	bl	LoadPalette
.L239:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L260:
	.align	2, 0
.L259:
	.word	gEventObjectPalette17
.Lfe22:
	.size	 LoadLinkPartnerEventObjectSpritePalette,.Lfe22-LoadLinkPartnerEventObjectSpritePalette
	.section .rodata
	.align	2, 0
	.type	 sMauvilleGymSwitchCoords,object
sMauvilleGymSwitchCoords:
	.byte	0x7
	.byte	0x16
	.space	2
	.byte	0xb
	.byte	0x13
	.space	2
	.byte	0xa
	.byte	0x10
	.space	2
	.byte	0xf
	.byte	0x10
	.space	2
	.size	 sMauvilleGymSwitchCoords,16
.text
	.align	2, 0
	.globl	MauvilleGymSpecial1
	.type	 MauvilleGymSpecial1,function
	.thumb_func
MauvilleGymSpecial1:
	push	{r4, r5, lr}
	mov	r4, #0x0
	ldr	r5, .L269
.L265:
	ldr	r0, .L269+0x4
	ldrh	r0, [r0]
	cmp	r4, r0
	bne	.L266	@cond_branch
	lsl	r1, r4, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1]
	ldrb	r1, [r1, #0x1]
	ldr	r2, .L269+0x8
	bl	MapGridSetMetatileIdAt
	b	.L264
.L270:
	.align	2, 0
.L269:
	.word	sMauvilleGymSwitchCoords
	.word	gSpecialVar_0x8004
	.word	0x206
.L266:
	lsl	r1, r4, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1]
	ldrb	r1, [r1, #0x1]
	ldr	r2, .L271
	bl	MapGridSetMetatileIdAt
.L264:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L265	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L272:
	.align	2, 0
.L271:
	.word	0x205
.Lfe23:
	.size	 MauvilleGymSpecial1,.Lfe23-MauvilleGymSpecial1
	.align	2, 0
	.globl	MauvilleGymSpecial2
	.type	 MauvilleGymSpecial2,function
	.thumb_func
MauvilleGymSpecial2:
	push	{r4, r5, r6, lr}
	mov	r5, #0xc
.L277:
	mov	r4, #0x7
	add	r6, r5, #0x1
.L281:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	MapGridGetMetatileIdAt
	ldr	r1, .L315
	add	r0, r0, r1
	cmp	r0, #0x37
	bls	.LCB1667
	b	.L280	@long jump
.LCB1667:
	lsl	r0, r0, #0x2
	ldr	r1, .L315+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L316:
	.align	2, 0
.L315:
	.word	-0x21a
	.word	.L310
	.align	2, 0
	.align	2, 0
.L310:
	.word	.L304
	.word	.L280
	.word	.L280
	.word	.L280
	.word	.L280
	.word	.L280
	.word	.L283
	.word	.L284
	.word	.L291
	.word	.L292
	.word	.L280
	.word	.L280
	.word	.L280
	.word	.L280
	.word	.L285
	.word	.L286
	.word	.L293
	.word	.L294
	.word	.L280
	.word	.L280
	.word	.L280
	.word	.L280
	.word	.L287
	.word	.L288
	.word	.L295
	.word	.L296
	.word	.L280
	.word	.L280
	.word	.L280
	.word	.L280
	.word	.L289
	.word	.L290
	.word	.L297
	.word	.L298
	.word	.L280
	.word	.L280
	.word	.L280
	.word	.L280
	.word	.L299
	.word	.L301
	.word	.L303
	.word	.L307
	.word	.L280
	.word	.L280
	.word	.L280
	.word	.L280
	.word	.L300
	.word	.L302
	.word	.L280
	.word	.L280
	.word	.L280
	.word	.L280
	.word	.L280
	.word	.L280
	.word	.L309
	.word	.L308
.L283:
	mov	r2, #0x8c
	lsl	r2, r2, #0x2
	b	.L314
.L284:
	ldr	r2, .L317
	b	.L314
.L318:
	.align	2, 0
.L317:
	.word	0x231
.L285:
	mov	r2, #0x8e
	lsl	r2, r2, #0x2
	b	.L314
.L286:
	ldr	r2, .L319
	b	.L314
.L320:
	.align	2, 0
.L319:
	.word	0x239
.L287:
	mov	r2, #0x88
	lsl	r2, r2, #0x2
	b	.L314
.L288:
	ldr	r2, .L321
	b	.L314
.L322:
	.align	2, 0
.L321:
	.word	0x221
.L289:
	ldr	r2, .L323
	b	.L314
.L324:
	.align	2, 0
.L323:
	.word	0xe28
.L290:
	ldr	r2, .L325
	b	.L314
.L326:
	.align	2, 0
.L325:
	.word	0xe29
.L291:
	ldr	r2, .L327
	b	.L314
.L328:
	.align	2, 0
.L327:
	.word	0x232
.L292:
	ldr	r2, .L329
	b	.L314
.L330:
	.align	2, 0
.L329:
	.word	0x233
.L293:
	ldr	r2, .L331
	b	.L314
.L332:
	.align	2, 0
.L331:
	.word	0x23a
.L294:
	ldr	r2, .L333
	b	.L314
.L334:
	.align	2, 0
.L333:
	.word	0x23b
.L295:
	ldr	r2, .L335
	b	.L314
.L336:
	.align	2, 0
.L335:
	.word	0x222
.L296:
	ldr	r2, .L337
	b	.L314
.L338:
	.align	2, 0
.L337:
	.word	0x223
.L297:
	ldr	r2, .L339
	b	.L314
.L340:
	.align	2, 0
.L339:
	.word	0xe2a
.L298:
	ldr	r2, .L341
	b	.L314
.L342:
	.align	2, 0
.L341:
	.word	0xe2b
.L299:
	ldr	r2, .L343
	b	.L314
.L344:
	.align	2, 0
.L343:
	.word	0xe42
.L300:
	ldr	r2, .L345
	b	.L314
.L346:
	.align	2, 0
.L345:
	.word	0x21a
.L301:
	ldr	r2, .L347
	b	.L314
.L348:
	.align	2, 0
.L347:
	.word	0xe43
.L302:
	ldr	r2, .L349
	b	.L314
.L350:
	.align	2, 0
.L349:
	.word	0x21a
.L303:
	mov	r2, #0xe4
	lsl	r2, r2, #0x4
	b	.L314
.L304:
	sub	r1, r5, #0x1
	add	r0, r4, #0
	bl	MapGridGetMetatileIdAt
	mov	r1, #0x90
	lsl	r1, r1, #0x2
	cmp	r0, r1
	bne	.L305	@cond_branch
	ldr	r2, .L351
	b	.L314
.L352:
	.align	2, 0
.L351:
	.word	0xe48
.L305:
	ldr	r2, .L353
	b	.L314
.L354:
	.align	2, 0
.L353:
	.word	0xe49
.L307:
	ldr	r2, .L355
	b	.L314
.L356:
	.align	2, 0
.L355:
	.word	0xe41
.L308:
	mov	r2, #0xe5
	lsl	r2, r2, #0x4
.L314:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	MapGridSetMetatileIdAt
	b	.L280
.L309:
	ldr	r2, .L357
	add	r0, r4, #0
	add	r1, r5, #0
	bl	MapGridSetMetatileIdAt
.L280:
	add	r4, r4, #0x1
	cmp	r4, #0xf
	bgt	.LCB1963
	b	.L281	@long jump
.LCB1963:
	add	r5, r6, #0
	cmp	r5, #0x17
	bgt	.LCB1969
	b	.L277	@long jump
.LCB1969:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L358:
	.align	2, 0
.L357:
	.word	0x251
.Lfe24:
	.size	 MauvilleGymSpecial2,.Lfe24-MauvilleGymSpecial2
	.align	2, 0
	.globl	MauvilleGymSpecial3
	.type	 MauvilleGymSpecial3,function
	.thumb_func
MauvilleGymSpecial3:
	push	{r4, r5, r6, lr}
	ldr	r4, .L392
	mov	r5, #0x3
.L363:
	ldrb	r0, [r4]
	ldrb	r1, [r4, #0x1]
	ldr	r2, .L392+0x4
	bl	MapGridSetMetatileIdAt
	add	r4, r4, #0x4
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L363	@cond_branch
	mov	r5, #0xc
.L368:
	mov	r4, #0x7
	add	r6, r5, #0x1
.L372:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	MapGridGetMetatileIdAt
	ldr	r1, .L392+0x8
	add	r0, r0, r1
	cmp	r0, #0x30
	bls	.LCB2029
	b	.L371	@long jump
.LCB2029:
	lsl	r0, r0, #0x2
	ldr	r1, .L392+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L393:
	.align	2, 0
.L392:
	.word	sMauvilleGymSwitchCoords
	.word	0x206
	.word	-0x220
	.word	.L387
	.align	2, 0
	.align	2, 0
.L387:
	.word	.L374
	.word	.L375
	.word	.L378
	.word	.L379
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L376
	.word	.L377
	.word	.L380
	.word	.L381
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L382
	.word	.L383
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L385
	.word	.L385
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L371
	.word	.L386
.L374:
	mov	r2, #0x8c
	lsl	r2, r2, #0x2
	b	.L391
.L375:
	ldr	r2, .L394
	b	.L391
.L395:
	.align	2, 0
.L394:
	.word	0x231
.L376:
	mov	r2, #0x8e
	lsl	r2, r2, #0x2
	b	.L391
.L377:
	ldr	r2, .L396
	b	.L391
.L397:
	.align	2, 0
.L396:
	.word	0x239
.L378:
	ldr	r2, .L398
	b	.L391
.L399:
	.align	2, 0
.L398:
	.word	0x232
.L379:
	ldr	r2, .L400
	b	.L391
.L401:
	.align	2, 0
.L400:
	.word	0x233
.L380:
	ldr	r2, .L402
	b	.L391
.L403:
	.align	2, 0
.L402:
	.word	0x23a
.L381:
	ldr	r2, .L404
	b	.L391
.L405:
	.align	2, 0
.L404:
	.word	0x23b
.L382:
	ldr	r2, .L406
	b	.L391
.L407:
	.align	2, 0
.L406:
	.word	0xe42
.L383:
	ldr	r2, .L408
	b	.L391
.L409:
	.align	2, 0
.L408:
	.word	0xe43
.L385:
	ldr	r2, .L410
.L391:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	MapGridSetMetatileIdAt
	b	.L371
.L411:
	.align	2, 0
.L410:
	.word	0x21a
.L386:
	ldr	r2, .L412
	add	r0, r4, #0
	add	r1, r5, #0
	bl	MapGridSetMetatileIdAt
.L371:
	add	r4, r4, #0x1
	cmp	r4, #0xf
	bgt	.LCB2177
	b	.L372	@long jump
.LCB2177:
	add	r5, r6, #0
	cmp	r5, #0x17
	bgt	.LCB2183
	b	.L368	@long jump
.LCB2183:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L413:
	.align	2, 0
.L412:
	.word	0x251
.Lfe25:
	.size	 MauvilleGymSpecial3,.Lfe25-MauvilleGymSpecial3
	.section .rodata
	.type	 gUnknown_085B2B78,object
gUnknown_085B2B78:
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.size	 gUnknown_085B2B78,5
	.align	1, 0
	.type	 sPetalburgGymSlidingDoorMetatiles,object
sPetalburgGymSlidingDoorMetatiles:
	.short	0x218
	.short	0x219
	.short	0x21a
	.short	0x21b
	.short	0x21c
	.size	 sPetalburgGymSlidingDoorMetatiles,10
.text
	.align	2, 0
	.globl	PetalburgGymSpecial1
	.type	 PetalburgGymSpecial1,function
	.thumb_func
PetalburgGymSpecial1:
	push	{lr}
	ldr	r0, .L415
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L415+0x4
	strb	r1, [r0]
	mov	r0, #0x2c
	bl	PlaySE
	ldr	r0, .L415+0x8
	mov	r1, #0x8
	bl	CreateTask
	pop	{r0}
	bx	r0
.L416:
	.align	2, 0
.L415:
	.word	gUnknown_0203AB5C
	.word	sPetalburgGymSlidingDoorFrameCounter
	.word	Task_PetalburgGym
.Lfe26:
	.size	 PetalburgGymSpecial1,.Lfe26-PetalburgGymSpecial1
	.align	2, 0
	.type	 Task_PetalburgGym,function
	.thumb_func
Task_PetalburgGym:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L421
	ldr	r5, .L421+0x4
	ldrb	r1, [r5]
	add	r0, r1, r0
	ldr	r4, .L421+0x8
	ldrb	r2, [r4]
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.L418	@cond_branch
	ldr	r0, .L421+0xc
	ldrb	r0, [r0]
	ldr	r2, .L421+0x10
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r1, [r1]
	bl	PetalburgGymFunc
	mov	r0, #0x0
	strb	r0, [r4]
	ldrb	r0, [r5]
	add	r0, r0, #0x1
	strb	r0, [r5]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x5
	bne	.L420	@cond_branch
	add	r0, r6, #0
	bl	DestroyTask
	bl	EnableBothScriptContexts
	b	.L420
.L422:
	.align	2, 0
.L421:
	.word	gUnknown_085B2B78
	.word	sPetalburgGymSlidingDoorFrameCounter
	.word	gUnknown_0203AB5C
	.word	gSpecialVar_0x8004
	.word	sPetalburgGymSlidingDoorMetatiles
.L418:
	add	r0, r2, #0x1
	strb	r0, [r4]
.L420:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 Task_PetalburgGym,.Lfe27-Task_PetalburgGym
	.align	2, 0
	.type	 PetalburgGymFunc,function
	.thumb_func
PetalburgGymFunc:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r2, r1, #0x10
	mov	r7, #0x0
	sub	r0, r0, #0x1
	cmp	r0, #0x7
	bhi	.L424	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L442
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L443:
	.align	2, 0
.L442:
	.word	.L433
	.align	2, 0
	.align	2, 0
.L433:
	.word	.L425
	.word	.L426
	.word	.L427
	.word	.L428
	.word	.L429
	.word	.L430
	.word	.L431
	.word	.L432
.L425:
	mov	r7, #0x2
	mov	r1, sp
	mov	r0, #0x1
	strh	r0, [r1]
	mov	r0, #0x7
	strh	r0, [r1, #0x2]
	add	r1, sp, #0x8
	mov	r0, #0x68
	b	.L440
.L426:
	mov	r7, #0x2
	mov	r1, sp
	mov	r0, #0x1
	strh	r0, [r1]
	mov	r0, #0x7
	strh	r0, [r1, #0x2]
	add	r1, sp, #0x8
	mov	r0, #0x4e
	b	.L440
.L427:
	mov	r7, #0x2
	mov	r1, sp
	mov	r0, #0x1
	strh	r0, [r1]
	mov	r0, #0x7
	strh	r0, [r1, #0x2]
	add	r1, sp, #0x8
	mov	r0, #0x5b
	b	.L440
.L428:
	mov	r7, #0x1
	mov	r1, sp
	mov	r0, #0x7
	strh	r0, [r1]
	add	r1, sp, #0x8
	mov	r0, #0x27
	b	.L441
.L429:
	mov	r7, #0x2
	mov	r1, sp
	mov	r0, #0x1
	strh	r0, [r1]
	mov	r0, #0x7
	strh	r0, [r1, #0x2]
	add	r1, sp, #0x8
	mov	r0, #0x34
.L440:
	strh	r0, [r1]
	strh	r0, [r1, #0x2]
	b	.L424
.L430:
	mov	r7, #0x1
	mov	r0, sp
	strh	r7, [r0]
	add	r1, sp, #0x8
	mov	r0, #0x41
	b	.L441
.L431:
	mov	r7, #0x1
	mov	r1, sp
	mov	r0, #0x7
	strh	r0, [r1]
	add	r1, sp, #0x8
	mov	r0, #0xd
	b	.L441
.L432:
	mov	r7, #0x1
	mov	r0, sp
	strh	r7, [r0]
	add	r1, sp, #0x8
	mov	r0, #0x1a
.L441:
	strh	r0, [r1]
.L424:
	mov	r6, #0x0
	cmp	r6, r7
	bcs	.L436	@cond_branch
	mov	r1, #0xc0
	lsl	r1, r1, #0x4
	add	r0, r1, #0
	add	r1, r2, #0
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	mov	r9, r1
	add	r1, r2, #0
	add	r1, r1, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	mov	r8, r1
.L438:
	lsl	r1, r6, #0x1
	mov	r3, sp
	add	r5, r3, r1
	ldrh	r0, [r5]
	add	r0, r0, #0x7
	add	r4, sp, #0x8
	add	r4, r4, r1
	ldrh	r1, [r4]
	add	r1, r1, #0x7
	mov	r3, r9
	lsr	r2, r3, #0x10
	bl	MapGridSetMetatileIdAt
	ldrh	r0, [r5]
	add	r0, r0, #0x7
	ldrh	r1, [r4]
	add	r1, r1, #0x8
	mov	r3, r8
	lsr	r2, r3, #0x10
	bl	MapGridSetMetatileIdAt
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, r7
	bcc	.L438	@cond_branch
.L436:
	bl	DrawWholeMapView
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 PetalburgGymFunc,.Lfe28-PetalburgGymFunc
	.align	2, 0
	.globl	PetalburgGymSpecial2
	.type	 PetalburgGymSpecial2,function
	.thumb_func
PetalburgGymSpecial2:
	push	{lr}
	ldr	r0, .L445
	ldrb	r0, [r0]
	ldr	r1, .L445+0x4
	ldrh	r1, [r1, #0x8]
	bl	PetalburgGymFunc
	pop	{r0}
	bx	r0
.L446:
	.align	2, 0
.L445:
	.word	gSpecialVar_0x8004
	.word	sPetalburgGymSlidingDoorMetatiles
.Lfe29:
	.size	 PetalburgGymSpecial2,.Lfe29-PetalburgGymSpecial2
	.align	2, 0
	.globl	ShowFieldMessageStringVar4
	.type	 ShowFieldMessageStringVar4,function
	.thumb_func
ShowFieldMessageStringVar4:
	push	{lr}
	ldr	r0, .L448
	bl	ShowFieldMessage
	pop	{r0}
	bx	r0
.L449:
	.align	2, 0
.L448:
	.word	gStringVar4
.Lfe30:
	.size	 ShowFieldMessageStringVar4,.Lfe30-ShowFieldMessageStringVar4
	.align	2, 0
	.globl	StorePlayerCoordsInVars
	.type	 StorePlayerCoordsInVars,function
	.thumb_func
StorePlayerCoordsInVars:
	ldr	r1, .L451
	ldr	r0, .L451+0x4
	ldr	r2, [r0]
	ldrh	r0, [r2]
	strh	r0, [r1]
	ldr	r1, .L451+0x8
	ldrh	r0, [r2, #0x2]
	strh	r0, [r1]
	bx	lr
.L452:
	.align	2, 0
.L451:
	.word	gSpecialVar_0x8004
	.word	gSaveBlock1Ptr
	.word	gSpecialVar_0x8005
.Lfe31:
	.size	 StorePlayerCoordsInVars,.Lfe31-StorePlayerCoordsInVars
	.align	2, 0
	.globl	GetPlayerTrainerIdOnesDigit
	.type	 GetPlayerTrainerIdOnesDigit,function
	.thumb_func
GetPlayerTrainerIdOnesDigit:
	push	{lr}
	ldr	r0, .L454
	ldr	r0, [r0]
	ldrb	r1, [r0, #0xb]
	lsl	r1, r1, #0x8
	ldrb	r0, [r0, #0xa]
	orr	r0, r0, r1
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L455:
	.align	2, 0
.L454:
	.word	gSaveBlock2Ptr
.Lfe32:
	.size	 GetPlayerTrainerIdOnesDigit,.Lfe32-GetPlayerTrainerIdOnesDigit
	.align	2, 0
	.globl	GetPlayerBigGuyGirlString
	.type	 GetPlayerBigGuyGirlString,function
	.thumb_func
GetPlayerBigGuyGirlString:
	push	{lr}
	ldr	r0, .L459
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	bne	.L457	@cond_branch
	ldr	r0, .L459+0x4
	ldr	r1, .L459+0x8
	bl	StringCopy
	b	.L458
.L460:
	.align	2, 0
.L459:
	.word	gSaveBlock2Ptr
	.word	gStringVar1
	.word	gText_BigGuy
.L457:
	ldr	r0, .L461
	ldr	r1, .L461+0x4
	bl	StringCopy
.L458:
	pop	{r0}
	bx	r0
.L462:
	.align	2, 0
.L461:
	.word	gStringVar1
	.word	gText_BigGirl
.Lfe33:
	.size	 GetPlayerBigGuyGirlString,.Lfe33-GetPlayerBigGuyGirlString
	.align	2, 0
	.globl	GetRivalSonDaughterString
	.type	 GetRivalSonDaughterString,function
	.thumb_func
GetRivalSonDaughterString:
	push	{lr}
	ldr	r0, .L466
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	bne	.L464	@cond_branch
	ldr	r0, .L466+0x4
	ldr	r1, .L466+0x8
	bl	StringCopy
	b	.L465
.L467:
	.align	2, 0
.L466:
	.word	gSaveBlock2Ptr
	.word	gStringVar1
	.word	gText_Daughter
.L464:
	ldr	r0, .L468
	ldr	r1, .L468+0x4
	bl	StringCopy
.L465:
	pop	{r0}
	bx	r0
.L469:
	.align	2, 0
.L468:
	.word	gStringVar1
	.word	gText_Son
.Lfe34:
	.size	 GetRivalSonDaughterString,.Lfe34-GetRivalSonDaughterString
	.align	2, 0
	.globl	GetBattleOutcome
	.type	 GetBattleOutcome,function
	.thumb_func
GetBattleOutcome:
	ldr	r0, .L471
	ldrb	r0, [r0]
	bx	lr
.L472:
	.align	2, 0
.L471:
	.word	gBattleOutcome
.Lfe35:
	.size	 GetBattleOutcome,.Lfe35-GetBattleOutcome
	.align	2, 0
	.globl	CableCarWarp
	.type	 CableCarWarp,function
	.thumb_func
CableCarWarp:
	push	{lr}
	add	sp, sp, #-0x4
	ldr	r0, .L476
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L474	@cond_branch
	mov	r2, #0x1
	neg	r2, r2
	mov	r0, #0x4
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x0
	mov	r3, #0x6
	bl	SetWarpDestination
	b	.L475
.L477:
	.align	2, 0
.L476:
	.word	gSpecialVar_0x8004
.L474:
	mov	r2, #0x1
	neg	r2, r2
	mov	r0, #0x4
	str	r0, [sp]
	mov	r0, #0x13
	mov	r1, #0x1
	mov	r3, #0x6
	bl	SetWarpDestination
.L475:
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 CableCarWarp,.Lfe36-CableCarWarp
	.align	2, 0
	.globl	SetFlagInVar
	.type	 SetFlagInVar,function
	.thumb_func
SetFlagInVar:
	push	{lr}
	ldr	r0, .L479
	ldrh	r0, [r0]
	bl	FlagSet
	pop	{r0}
	bx	r0
.L480:
	.align	2, 0
.L479:
	.word	gSpecialVar_0x8004
.Lfe37:
	.size	 SetFlagInVar,.Lfe37-SetFlagInVar
	.align	2, 0
	.globl	GetWeekCount
	.type	 GetWeekCount,function
	.thumb_func
GetWeekCount:
	push	{lr}
	ldr	r0, .L483
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r1, #0x7
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L483+0x4
	cmp	r0, r1
	bls	.L482	@cond_branch
	add	r0, r1, #0
.L482:
	pop	{r1}
	bx	r1
.L484:
	.align	2, 0
.L483:
	.word	gLocalTime
	.word	0x270f
.Lfe38:
	.size	 GetWeekCount,.Lfe38-GetWeekCount
	.align	2, 0
	.globl	GetLeadMonFriendshipScore
	.type	 GetLeadMonFriendshipScore,function
	.thumb_func
GetLeadMonFriendshipScore:
	push	{r4, lr}
	bl	GetLeadMonIndex
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x64
	mul	r1, r1, r0
	ldr	r0, .L493
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	cmp	r0, #0xff
	bne	.L486	@cond_branch
	mov	r0, #0x6
	b	.L492
.L494:
	.align	2, 0
.L493:
	.word	gPlayerParty
.L486:
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	cmp	r0, #0xc7
	bls	.L487	@cond_branch
	mov	r0, #0x5
	b	.L492
.L487:
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	cmp	r0, #0x95
	bls	.L488	@cond_branch
	mov	r0, #0x4
	b	.L492
.L488:
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	cmp	r0, #0x63
	bls	.L489	@cond_branch
	mov	r0, #0x3
	b	.L492
.L489:
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	cmp	r0, #0x31
	bls	.L490	@cond_branch
	mov	r0, #0x2
	b	.L492
.L490:
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	cmp	r0, #0
	bne	.L491	@cond_branch
	mov	r0, #0x0
	b	.L492
.L491:
	mov	r0, #0x1
.L492:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe39:
	.size	 GetLeadMonFriendshipScore,.Lfe39-GetLeadMonFriendshipScore
	.align	2, 0
	.type	 CB2_FieldShowRegionMap,function
	.thumb_func
CB2_FieldShowRegionMap:
	push	{lr}
	ldr	r0, .L496
	bl	FieldInitRegionMap
	pop	{r0}
	bx	r0
.L497:
	.align	2, 0
.L496:
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.Lfe40:
	.size	 CB2_FieldShowRegionMap,.Lfe40-CB2_FieldShowRegionMap
	.align	2, 0
	.globl	FieldShowRegionMap
	.type	 FieldShowRegionMap,function
	.thumb_func
FieldShowRegionMap:
	push	{lr}
	ldr	r0, .L499
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L500:
	.align	2, 0
.L499:
	.word	CB2_FieldShowRegionMap
.Lfe41:
	.size	 FieldShowRegionMap,.Lfe41-FieldShowRegionMap
	.align	2, 0
	.globl	DoPCTurnOnEffect
	.type	 DoPCTurnOnEffect,function
	.thumb_func
DoPCTurnOnEffect:
	push	{r4, lr}
	ldr	r4, .L503
	add	r0, r4, #0
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L502	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x8
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L503+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	strh	r2, [r1, #0x8]
	strh	r0, [r1, #0xa]
	strh	r2, [r1, #0xc]
	strh	r2, [r1, #0xe]
	strh	r2, [r1, #0x10]
.L502:
	pop	{r4}
	pop	{r0}
	bx	r0
.L504:
	.align	2, 0
.L503:
	.word	Task_PCTurnOnEffect
	.word	gTasks
.Lfe42:
	.size	 DoPCTurnOnEffect,.Lfe42-DoPCTurnOnEffect
	.align	2, 0
	.type	 Task_PCTurnOnEffect,function
	.thumb_func
Task_PCTurnOnEffect:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L507
	add	r1, r1, r0
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L506	@cond_branch
	add	r0, r1, #0
	bl	PCTurnOnEffect_0
.L506:
	pop	{r0}
	bx	r0
.L508:
	.align	2, 0
.L507:
	.word	gTasks
.Lfe43:
	.size	 Task_PCTurnOnEffect,.Lfe43-Task_PCTurnOnEffect
	.align	2, 0
	.type	 PCTurnOnEffect_0,function
	.thumb_func
PCTurnOnEffect_0:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	mov	r6, #0x0
	mov	r5, #0x0
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x6
	bne	.L510	@cond_branch
	strh	r5, [r4, #0xe]
	bl	GetPlayerFacingDirection
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	cmp	r0, #0x3
	beq	.L513	@cond_branch
	cmp	r0, #0x3
	bgt	.L517	@cond_branch
	cmp	r0, #0x2
	beq	.L512	@cond_branch
	b	.L511
.L517:
	cmp	r1, #0x4
	beq	.L514	@cond_branch
	b	.L511
.L512:
	mov	r6, #0x0
	b	.L519
.L513:
	mov	r6, #0xff
	b	.L519
.L514:
	mov	r6, #0x1
.L519:
	mov	r5, #0xff
.L511:
	mov	r1, #0x10
	ldrsh	r0, [r4, r1]
	lsl	r1, r6, #0x18
	asr	r1, r1, #0x18
	lsl	r2, r5, #0x18
	asr	r2, r2, #0x18
	bl	PCTurnOnEffect_1
	bl	DrawWholeMapView
	ldrh	r0, [r4, #0x10]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r4, #0x10]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L510	@cond_branch
	ldrb	r0, [r4, #0xa]
	bl	DestroyTask
.L510:
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 PCTurnOnEffect_0,.Lfe44-PCTurnOnEffect_0
	.align	2, 0
	.type	 PCTurnOnEffect_1,function
	.thumb_func
PCTurnOnEffect_1:
	push	{r4, r5, lr}
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	mov	r3, #0x0
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L521	@cond_branch
	ldr	r0, .L533
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L522	@cond_branch
	mov	r3, #0x4
	b	.L527
.L534:
	.align	2, 0
.L533:
	.word	gSpecialVar_0x8004
.L522:
	cmp	r0, #0x1
	bne	.L524	@cond_branch
	ldr	r3, .L535
	b	.L527
.L536:
	.align	2, 0
.L535:
	.word	0x25a
.L524:
	cmp	r0, #0x2
	bne	.L527	@cond_branch
	ldr	r3, .L537
	b	.L527
.L538:
	.align	2, 0
.L537:
	.word	0x259
.L521:
	ldr	r0, .L539
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L528	@cond_branch
	mov	r3, #0x5
	b	.L527
.L540:
	.align	2, 0
.L539:
	.word	gSpecialVar_0x8004
.L528:
	cmp	r0, #0x1
	bne	.L530	@cond_branch
	ldr	r3, .L541
	b	.L527
.L542:
	.align	2, 0
.L541:
	.word	0x27f
.L530:
	cmp	r0, #0x2
	bne	.L527	@cond_branch
	ldr	r3, .L543
.L527:
	ldr	r0, .L543+0x4
	ldr	r2, [r0]
	mov	r5, #0x0
	ldrsh	r0, [r2, r5]
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	add	r0, r0, r1
	add	r0, r0, #0x7
	mov	r5, #0x2
	ldrsh	r1, [r2, r5]
	lsl	r2, r4, #0x18
	asr	r2, r2, #0x18
	add	r1, r1, r2
	add	r1, r1, #0x7
	mov	r4, #0xc0
	lsl	r4, r4, #0x4
	add	r2, r4, #0
	orr	r3, r3, r2
	add	r2, r3, #0
	bl	MapGridSetMetatileIdAt
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L544:
	.align	2, 0
.L543:
	.word	0x27e
	.word	gSaveBlock1Ptr
.Lfe45:
	.size	 PCTurnOnEffect_1,.Lfe45-PCTurnOnEffect_1
	.align	2, 0
	.globl	DoPCTurnOffEffect
	.type	 DoPCTurnOffEffect,function
	.thumb_func
DoPCTurnOffEffect:
	push	{lr}
	bl	PCTurnOffEffect
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 DoPCTurnOffEffect,.Lfe46-DoPCTurnOffEffect
	.align	2, 0
	.type	 PCTurnOffEffect,function
	.thumb_func
PCTurnOffEffect:
	push	{r4, r5, r6, lr}
	mov	r6, #0x0
	mov	r5, #0x0
	mov	r4, #0x0
	bl	GetPlayerFacingDirection
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	cmp	r0, #0x3
	beq	.L549	@cond_branch
	cmp	r0, #0x3
	bgt	.L553	@cond_branch
	cmp	r0, #0x2
	beq	.L548	@cond_branch
	b	.L547
.L553:
	cmp	r1, #0x4
	beq	.L550	@cond_branch
	b	.L547
.L548:
	mov	r6, #0x0
	b	.L559
.L549:
	mov	r6, #0xff
	b	.L559
.L550:
	mov	r6, #0x1
.L559:
	mov	r5, #0xff
.L547:
	ldr	r0, .L560
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L554	@cond_branch
	mov	r4, #0x4
	b	.L555
.L561:
	.align	2, 0
.L560:
	.word	gSpecialVar_0x8004
.L554:
	cmp	r0, #0x1
	bne	.L556	@cond_branch
	ldr	r4, .L562
	b	.L555
.L563:
	.align	2, 0
.L562:
	.word	0x25a
.L556:
	cmp	r0, #0x2
	bne	.L555	@cond_branch
	ldr	r4, .L564
.L555:
	ldr	r0, .L564+0x4
	ldr	r2, [r0]
	mov	r1, #0x0
	ldrsh	r0, [r2, r1]
	lsl	r1, r6, #0x18
	asr	r1, r1, #0x18
	add	r0, r0, r1
	add	r0, r0, #0x7
	mov	r3, #0x2
	ldrsh	r1, [r2, r3]
	lsl	r2, r5, #0x18
	asr	r2, r2, #0x18
	add	r1, r1, r2
	add	r1, r1, #0x7
	mov	r3, #0xc0
	lsl	r3, r3, #0x4
	add	r2, r3, #0
	orr	r4, r4, r2
	add	r2, r4, #0
	bl	MapGridSetMetatileIdAt
	bl	DrawWholeMapView
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L565:
	.align	2, 0
.L564:
	.word	0x259
	.word	gSaveBlock1Ptr
.Lfe47:
	.size	 PCTurnOffEffect,.Lfe47-PCTurnOffEffect
	.align	2, 0
	.globl	DoLotteryCornerComputerEffect
	.type	 DoLotteryCornerComputerEffect,function
	.thumb_func
DoLotteryCornerComputerEffect:
	push	{r4, lr}
	ldr	r4, .L568
	add	r0, r4, #0
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L567	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x8
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L568+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	strh	r2, [r1, #0x8]
	strh	r0, [r1, #0xa]
	strh	r2, [r1, #0xc]
	strh	r2, [r1, #0xe]
	strh	r2, [r1, #0x10]
.L567:
	pop	{r4}
	pop	{r0}
	bx	r0
.L569:
	.align	2, 0
.L568:
	.word	Task_LotteryCornerComputerEffect
	.word	gTasks
.Lfe48:
	.size	 DoLotteryCornerComputerEffect,.Lfe48-DoLotteryCornerComputerEffect
	.align	2, 0
	.type	 Task_LotteryCornerComputerEffect,function
	.thumb_func
Task_LotteryCornerComputerEffect:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L572
	add	r1, r1, r0
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L571	@cond_branch
	add	r0, r1, #0
	bl	LotteryCornerComputerEffect
.L571:
	pop	{r0}
	bx	r0
.L573:
	.align	2, 0
.L572:
	.word	gTasks
.Lfe49:
	.size	 Task_LotteryCornerComputerEffect,.Lfe49-Task_LotteryCornerComputerEffect
	.align	2, 0
	.type	 LotteryCornerComputerEffect,function
	.thumb_func
LotteryCornerComputerEffect:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x6
	bne	.L575	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xe]
	mov	r1, #0x10
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L576	@cond_branch
	ldr	r2, .L579
	mov	r0, #0x12
	mov	r1, #0x8
	bl	MapGridSetMetatileIdAt
	ldr	r2, .L579+0x4
	mov	r0, #0x12
	mov	r1, #0x9
	bl	MapGridSetMetatileIdAt
	b	.L577
.L580:
	.align	2, 0
.L579:
	.word	0xe9d
	.word	0xea5
.L576:
	ldr	r2, .L581
	mov	r0, #0x12
	mov	r1, #0x8
	bl	MapGridSetMetatileIdAt
	mov	r2, #0xe6
	lsl	r2, r2, #0x4
	mov	r0, #0x12
	mov	r1, #0x9
	bl	MapGridSetMetatileIdAt
.L577:
	bl	DrawWholeMapView
	ldrh	r0, [r4, #0x10]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r4, #0x10]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L575	@cond_branch
	ldrb	r0, [r4, #0xa]
	bl	DestroyTask
.L575:
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	pop	{r4}
	pop	{r0}
	bx	r0
.L582:
	.align	2, 0
.L581:
	.word	0xe58
.Lfe50:
	.size	 LotteryCornerComputerEffect,.Lfe50-LotteryCornerComputerEffect
	.align	2, 0
	.globl	EndLotteryCornerComputerEffect
	.type	 EndLotteryCornerComputerEffect,function
	.thumb_func
EndLotteryCornerComputerEffect:
	push	{lr}
	ldr	r2, .L584
	mov	r0, #0x12
	mov	r1, #0x8
	bl	MapGridSetMetatileIdAt
	ldr	r2, .L584+0x4
	mov	r0, #0x12
	mov	r1, #0x9
	bl	MapGridSetMetatileIdAt
	bl	DrawWholeMapView
	pop	{r0}
	bx	r0
.L585:
	.align	2, 0
.L584:
	.word	0xe9d
	.word	0xea5
.Lfe51:
	.size	 EndLotteryCornerComputerEffect,.Lfe51-EndLotteryCornerComputerEffect
	.align	2, 0
	.globl	SetTrickHouseEndRoomFlag
	.type	 SetTrickHouseEndRoomFlag,function
	.thumb_func
SetTrickHouseEndRoomFlag:
	push	{lr}
	ldr	r1, .L587
	ldr	r0, .L587+0x4
	strh	r0, [r1]
	bl	FlagSet
	pop	{r0}
	bx	r0
.L588:
	.align	2, 0
.L587:
	.word	gSpecialVar_0x8004
	.word	0x1f5
.Lfe52:
	.size	 SetTrickHouseEndRoomFlag,.Lfe52-SetTrickHouseEndRoomFlag
	.align	2, 0
	.globl	ResetTrickHouseEndRoomFlag
	.type	 ResetTrickHouseEndRoomFlag,function
	.thumb_func
ResetTrickHouseEndRoomFlag:
	push	{lr}
	ldr	r1, .L590
	ldr	r0, .L590+0x4
	strh	r0, [r1]
	bl	FlagClear
	pop	{r0}
	bx	r0
.L591:
	.align	2, 0
.L590:
	.word	gSpecialVar_0x8004
	.word	0x1f5
.Lfe53:
	.size	 ResetTrickHouseEndRoomFlag,.Lfe53-ResetTrickHouseEndRoomFlag
	.align	2, 0
	.globl	CheckLeadMonCool
	.type	 CheckLeadMonCool,function
	.thumb_func
CheckLeadMonCool:
	push	{lr}
	bl	GetLeadMonIndex
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L595
	add	r0, r0, r1
	mov	r1, #0x16
	bl	GetMonData
	cmp	r0, #0xc7
	bls	.L593	@cond_branch
	mov	r0, #0x1
	b	.L594
.L596:
	.align	2, 0
.L595:
	.word	gPlayerParty
.L593:
	mov	r0, #0x0
.L594:
	pop	{r1}
	bx	r1
.Lfe54:
	.size	 CheckLeadMonCool,.Lfe54-CheckLeadMonCool
	.align	2, 0
	.globl	CheckLeadMonBeauty
	.type	 CheckLeadMonBeauty,function
	.thumb_func
CheckLeadMonBeauty:
	push	{lr}
	bl	GetLeadMonIndex
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L600
	add	r0, r0, r1
	mov	r1, #0x17
	bl	GetMonData
	cmp	r0, #0xc7
	bls	.L598	@cond_branch
	mov	r0, #0x1
	b	.L599
.L601:
	.align	2, 0
.L600:
	.word	gPlayerParty
.L598:
	mov	r0, #0x0
.L599:
	pop	{r1}
	bx	r1
.Lfe55:
	.size	 CheckLeadMonBeauty,.Lfe55-CheckLeadMonBeauty
	.align	2, 0
	.globl	CheckLeadMonCute
	.type	 CheckLeadMonCute,function
	.thumb_func
CheckLeadMonCute:
	push	{lr}
	bl	GetLeadMonIndex
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L605
	add	r0, r0, r1
	mov	r1, #0x18
	bl	GetMonData
	cmp	r0, #0xc7
	bls	.L603	@cond_branch
	mov	r0, #0x1
	b	.L604
.L606:
	.align	2, 0
.L605:
	.word	gPlayerParty
.L603:
	mov	r0, #0x0
.L604:
	pop	{r1}
	bx	r1
.Lfe56:
	.size	 CheckLeadMonCute,.Lfe56-CheckLeadMonCute
	.align	2, 0
	.globl	CheckLeadMonSmart
	.type	 CheckLeadMonSmart,function
	.thumb_func
CheckLeadMonSmart:
	push	{lr}
	bl	GetLeadMonIndex
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L610
	add	r0, r0, r1
	mov	r1, #0x21
	bl	GetMonData
	cmp	r0, #0xc7
	bls	.L608	@cond_branch
	mov	r0, #0x1
	b	.L609
.L611:
	.align	2, 0
.L610:
	.word	gPlayerParty
.L608:
	mov	r0, #0x0
.L609:
	pop	{r1}
	bx	r1
.Lfe57:
	.size	 CheckLeadMonSmart,.Lfe57-CheckLeadMonSmart
	.align	2, 0
	.globl	CheckLeadMonTough
	.type	 CheckLeadMonTough,function
	.thumb_func
CheckLeadMonTough:
	push	{lr}
	bl	GetLeadMonIndex
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L615
	add	r0, r0, r1
	mov	r1, #0x2f
	bl	GetMonData
	cmp	r0, #0xc7
	bls	.L613	@cond_branch
	mov	r0, #0x1
	b	.L614
.L616:
	.align	2, 0
.L615:
	.word	gPlayerParty
.L613:
	mov	r0, #0x0
.L614:
	pop	{r1}
	bx	r1
.Lfe58:
	.size	 CheckLeadMonTough,.Lfe58-CheckLeadMonTough
	.align	2, 0
	.globl	IsGrassTypeInParty
	.type	 IsGrassTypeInParty,function
	.thumb_func
IsGrassTypeInParty:
	push	{r4, r5, r6, lr}
	mov	r5, #0x0
	ldr	r6, .L627
.L621:
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L627+0x4
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x5
	bl	GetMonData
	cmp	r0, #0
	beq	.L620	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L620	@cond_branch
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0xc
	beq	.L624	@cond_branch
	ldrb	r0, [r1, #0x7]
	cmp	r0, #0xc
	bne	.L620	@cond_branch
.L624:
	ldr	r1, .L627+0x8
	mov	r0, #0x1
	b	.L626
.L628:
	.align	2, 0
.L627:
	.word	gBaseStats
	.word	gPlayerParty
	.word	gSpecialVar_Result
.L620:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L621	@cond_branch
	ldr	r1, .L629
	mov	r0, #0x0
.L626:
	strh	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L630:
	.align	2, 0
.L629:
	.word	gSpecialVar_Result
.Lfe59:
	.size	 IsGrassTypeInParty,.Lfe59-IsGrassTypeInParty
	.align	2, 0
	.globl	SpawnCameraObject
	.type	 SpawnCameraObject,function
	.thumb_func
SpawnCameraObject:
	push	{lr}
	add	sp, sp, #-0x8
	ldr	r0, .L632
	ldr	r0, [r0]
	ldrh	r3, [r0]
	add	r3, r3, #0x7
	lsl	r3, r3, #0x10
	asr	r3, r3, #0x10
	ldrh	r0, [r0, #0x2]
	add	r0, r0, #0x7
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	str	r0, [sp]
	mov	r0, #0x3
	str	r0, [sp, #0x4]
	mov	r0, #0x7
	mov	r1, #0x8
	mov	r2, #0x7f
	bl	SpawnSpecialEventObjectParameterized
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L632+0x4
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x1]
	mov	r2, #0x20
	orr	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldrb	r0, [r1, #0x4]
	bl	CameraObjectSetFollowedObjectId
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.L633:
	.align	2, 0
.L632:
	.word	gSaveBlock1Ptr
	.word	gEventObjects
.Lfe60:
	.size	 SpawnCameraObject,.Lfe60-SpawnCameraObject
	.align	2, 0
	.globl	RemoveCameraObject
	.type	 RemoveCameraObject,function
	.thumb_func
RemoveCameraObject:
	push	{lr}
	bl	GetPlayerAvatarObjectId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	CameraObjectSetFollowedObjectId
	ldr	r0, .L635
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x5]
	ldrb	r2, [r0, #0x4]
	mov	r0, #0x7f
	bl	RemoveEventObjectByLocalIdAndMap
	pop	{r0}
	bx	r0
.L636:
	.align	2, 0
.L635:
	.word	gSaveBlock1Ptr
.Lfe61:
	.size	 RemoveCameraObject,.Lfe61-RemoveCameraObject
	.align	2, 0
	.globl	GetPokeblockNameByMonNature
	.type	 GetPokeblockNameByMonNature,function
	.thumb_func
GetPokeblockNameByMonNature:
	push	{lr}
	bl	GetLeadMonIndex
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L638
	add	r0, r0, r1
	bl	GetNature
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L638+0x4
	bl	CopyMonFavoritePokeblockName
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L639:
	.align	2, 0
.L638:
	.word	gPlayerParty
	.word	gStringVar1
.Lfe62:
	.size	 GetPokeblockNameByMonNature,.Lfe62-GetPokeblockNameByMonNature
	.align	2, 0
	.globl	GetSecretBaseNearbyMapName
	.type	 GetSecretBaseNearbyMapName,function
	.thumb_func
GetSecretBaseNearbyMapName:
	push	{r4, lr}
	ldr	r4, .L641
	ldr	r0, .L641+0x4
	bl	VarGet
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x0
	bl	GetMapName
	pop	{r4}
	pop	{r0}
	bx	r0
.L642:
	.align	2, 0
.L641:
	.word	gStringVar1
	.word	0x4026
.Lfe63:
	.size	 GetSecretBaseNearbyMapName,.Lfe63-GetSecretBaseNearbyMapName
	.align	2, 0
	.globl	GetBestBattleTowerStreak
	.type	 GetBestBattleTowerStreak,function
	.thumb_func
GetBestBattleTowerStreak:
	push	{lr}
	mov	r0, #0x20
	bl	GetGameStat
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe64:
	.size	 GetBestBattleTowerStreak,.Lfe64-GetBestBattleTowerStreak
	.align	2, 0
	.globl	BufferEReaderTrainerName
	.type	 BufferEReaderTrainerName,function
	.thumb_func
BufferEReaderTrainerName:
	push	{lr}
	ldr	r0, .L645
	bl	GetEreaderTrainerName
	pop	{r0}
	bx	r0
.L646:
	.align	2, 0
.L645:
	.word	gStringVar1
.Lfe65:
	.size	 BufferEReaderTrainerName,.Lfe65-BufferEReaderTrainerName
	.section .rodata
	.type	 gUnknown_085B2B88.198,object
gUnknown_085B2B88.198:
	.byte	0xc
	.byte	0x2
	.byte	0x4
	.byte	0x5
	.byte	0x1
	.byte	0x8
	.byte	0x7
	.byte	0xb
	.byte	0x3
	.byte	0xa
	.byte	0x9
	.byte	0x6
	.type	 gUnknown_085B2B94.199,object
gUnknown_085B2B94.199:
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x4
	.byte	0x4
	.byte	0x5
	.type	 gUnknown_085B2BA0.200,object
gUnknown_085B2BA0.200:
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x3
	.byte	0x4
	.byte	0x4
	.byte	0x4
	.byte	0x4
	.byte	0x5
	.byte	0x5
.text
	.align	2, 0
	.globl	GetSlotMachineId
	.type	 GetSlotMachineId,function
	.thumb_func
GetSlotMachineId:
	push	{r4, r5, lr}
	ldr	r0, .L652
	ldr	r2, [r0]
	ldr	r1, .L652+0x4
	add	r0, r2, r1
	ldrb	r1, [r0]
	lsl	r1, r1, #0x19
	ldr	r0, .L652+0x8
	add	r2, r2, r0
	lsr	r1, r1, #0x19
	ldrh	r2, [r2]
	add	r1, r1, r2
	ldr	r2, .L652+0xc
	ldr	r0, .L652+0x10
	ldrh	r0, [r0]
	add	r0, r0, r2
	ldrb	r0, [r0]
	add	r5, r1, r0
	mov	r0, #0x2
	bl	GetPriceReduction
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L648	@cond_branch
	ldr	r4, .L652+0x14
	b	.L651
.L653:
	.align	2, 0
.L652:
	.word	gSaveBlock1Ptr
	.word	0x2e68
	.word	0x2e6a
	.word	gUnknown_085B2B88.198
	.word	gSpecialVar_0x8004
	.word	gUnknown_085B2B94.199
.L648:
	ldr	r4, .L654
.L651:
	add	r0, r5, #0
	mov	r1, #0xc
	bl	__umodsi3
	add	r0, r0, r4
	ldrb	r0, [r0]
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L655:
	.align	2, 0
.L654:
	.word	gUnknown_085B2BA0.200
.Lfe66:
	.size	 GetSlotMachineId,.Lfe66-GetSlotMachineId
	.align	2, 0
	.globl	FoundAbandonedShipRoom1Key
	.type	 FoundAbandonedShipRoom1Key,function
	.thumb_func
FoundAbandonedShipRoom1Key:
	push	{lr}
	ldr	r1, .L659
	ldr	r0, .L659+0x4
	strh	r0, [r1]
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L657	@cond_branch
	mov	r0, #0x1
	b	.L658
.L660:
	.align	2, 0
.L659:
	.word	gSpecialVar_0x8004
	.word	0x213
.L657:
	mov	r0, #0x0
.L658:
	pop	{r1}
	bx	r1
.Lfe67:
	.size	 FoundAbandonedShipRoom1Key,.Lfe67-FoundAbandonedShipRoom1Key
	.align	2, 0
	.globl	FoundAbandonedShipRoom2Key
	.type	 FoundAbandonedShipRoom2Key,function
	.thumb_func
FoundAbandonedShipRoom2Key:
	push	{lr}
	ldr	r1, .L664
	mov	r0, #0x85
	lsl	r0, r0, #0x2
	strh	r0, [r1]
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L662	@cond_branch
	mov	r0, #0x1
	b	.L663
.L665:
	.align	2, 0
.L664:
	.word	gSpecialVar_0x8004
.L662:
	mov	r0, #0x0
.L663:
	pop	{r1}
	bx	r1
.Lfe68:
	.size	 FoundAbandonedShipRoom2Key,.Lfe68-FoundAbandonedShipRoom2Key
	.align	2, 0
	.globl	FoundAbandonedShipRoom4Key
	.type	 FoundAbandonedShipRoom4Key,function
	.thumb_func
FoundAbandonedShipRoom4Key:
	push	{lr}
	ldr	r1, .L669
	ldr	r0, .L669+0x4
	strh	r0, [r1]
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L667	@cond_branch
	mov	r0, #0x1
	b	.L668
.L670:
	.align	2, 0
.L669:
	.word	gSpecialVar_0x8004
	.word	0x215
.L667:
	mov	r0, #0x0
.L668:
	pop	{r1}
	bx	r1
.Lfe69:
	.size	 FoundAbandonedShipRoom4Key,.Lfe69-FoundAbandonedShipRoom4Key
	.align	2, 0
	.globl	FoundAbandonedShipRoom6Key
	.type	 FoundAbandonedShipRoom6Key,function
	.thumb_func
FoundAbandonedShipRoom6Key:
	push	{lr}
	ldr	r1, .L674
	ldr	r0, .L674+0x4
	strh	r0, [r1]
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L672	@cond_branch
	mov	r0, #0x1
	b	.L673
.L675:
	.align	2, 0
.L674:
	.word	gSpecialVar_0x8004
	.word	0x216
.L672:
	mov	r0, #0x0
.L673:
	pop	{r1}
	bx	r1
.Lfe70:
	.size	 FoundAbandonedShipRoom6Key,.Lfe70-FoundAbandonedShipRoom6Key
	.align	2, 0
	.globl	LeadMonHasEffortRibbon
	.type	 LeadMonHasEffortRibbon,function
	.thumb_func
LeadMonHasEffortRibbon:
	push	{lr}
	bl	GetLeadMonIndex
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L677
	add	r0, r0, r1
	mov	r1, #0x47
	mov	r2, #0x0
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L678:
	.align	2, 0
.L677:
	.word	gPlayerParty
.Lfe71:
	.size	 LeadMonHasEffortRibbon,.Lfe71-LeadMonHasEffortRibbon
	.align	2, 0
	.globl	GiveLeadMonEffortRibbon
	.type	 GiveLeadMonEffortRibbon,function
	.thumb_func
GiveLeadMonEffortRibbon:
	push	{r4, lr}
	add	sp, sp, #-0x4
	mov	r0, #0x2a
	bl	IncrementGameStat
	ldr	r0, .L681
	bl	FlagSet
	mov	r1, #0x1
	mov	r0, sp
	strb	r1, [r0]
	bl	GetLeadMonIndex
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x64
	mul	r1, r1, r0
	ldr	r0, .L681+0x4
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x47
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	bl	GetRibbonCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L680	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x47
	bl	sub_80EE4DC
.L680:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L682:
	.align	2, 0
.L681:
	.word	0x89b
	.word	gPlayerParty
.Lfe72:
	.size	 GiveLeadMonEffortRibbon,.Lfe72-GiveLeadMonEffortRibbon
	.align	2, 0
	.globl	Special_AreLeadMonEVsMaxedOut
	.type	 Special_AreLeadMonEVsMaxedOut,function
	.thumb_func
Special_AreLeadMonEVsMaxedOut:
	push	{lr}
	bl	GetLeadMonIndex
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r1, .L686
	add	r0, r0, r1
	bl	GetMonEVCount
	lsl	r0, r0, #0x10
	ldr	r1, .L686+0x4
	cmp	r0, r1
	bhi	.L684	@cond_branch
	mov	r0, #0x0
	b	.L685
.L687:
	.align	2, 0
.L686:
	.word	gPlayerParty
	.word	0x1fd0000
.L684:
	mov	r0, #0x1
.L685:
	pop	{r1}
	bx	r1
.Lfe73:
	.size	 Special_AreLeadMonEVsMaxedOut,.Lfe73-Special_AreLeadMonEVsMaxedOut
	.align	2, 0
	.globl	TryUpdateRusturfTunnelState
	.type	 TryUpdateRusturfTunnelState,function
	.thumb_func
TryUpdateRusturfTunnelState:
	push	{lr}
	mov	r0, #0xc7
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L689	@cond_branch
	ldr	r0, .L695
	ldr	r0, [r0]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0x83
	lsl	r0, r0, #0x3
	cmp	r1, r0
	bne	.L689	@cond_branch
	sub	r0, r0, #0x75
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L690	@cond_branch
	ldr	r0, .L695+0x4
	mov	r1, #0x4
	b	.L694
.L696:
	.align	2, 0
.L695:
	.word	gSaveBlock1Ptr
	.word	0x409a
.L690:
	mov	r0, #0xe9
	lsl	r0, r0, #0x2
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L689	@cond_branch
	ldr	r0, .L697
	mov	r1, #0x5
.L694:
	bl	VarSet
	mov	r0, #0x1
	b	.L693
.L698:
	.align	2, 0
.L697:
	.word	0x409a
.L689:
	mov	r0, #0x0
.L693:
	pop	{r1}
	bx	r1
.Lfe74:
	.size	 TryUpdateRusturfTunnelState,.Lfe74-TryUpdateRusturfTunnelState
	.align	2, 0
	.globl	SetShoalItemFlag
	.type	 SetShoalItemFlag,function
	.thumb_func
SetShoalItemFlag:
	push	{lr}
	ldr	r0, .L700
	bl	FlagSet
	pop	{r0}
	bx	r0
.L701:
	.align	2, 0
.L700:
	.word	0x8bf
.Lfe75:
	.size	 SetShoalItemFlag,.Lfe75-SetShoalItemFlag
	.align	2, 0
	.globl	PutZigzagoonInPlayerParty
	.type	 PutZigzagoonInPlayerParty,function
	.thumb_func
PutZigzagoonInPlayerParty:
	push	{r4, r5, lr}
	add	sp, sp, #-0x14
	ldr	r5, .L703
	mov	r1, #0x90
	lsl	r1, r1, #0x1
	mov	r4, #0x0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	str	r4, [sp, #0xc]
	add	r0, r5, #0
	mov	r2, #0x7
	mov	r3, #0x20
	bl	CreateMon
	mov	r1, #0x1
	add	r0, sp, #0x10
	strh	r1, [r0]
	add	r0, r5, #0
	mov	r1, #0x2e
	add	r2, sp, #0x10
	bl	SetMonData
	add	r1, sp, #0x10
	mov	r0, #0x21
	strh	r0, [r1]
	add	r0, r5, #0
	mov	r1, #0xd
	add	r2, sp, #0x10
	bl	SetMonData
	add	r0, sp, #0x10
	strh	r4, [r0]
	add	r0, r5, #0
	mov	r1, #0xe
	add	r2, sp, #0x10
	bl	SetMonData
	add	r0, r5, #0
	mov	r1, #0xf
	add	r2, sp, #0x10
	bl	SetMonData
	add	r0, r5, #0
	mov	r1, #0x10
	add	r2, sp, #0x10
	bl	SetMonData
	add	sp, sp, #0x14
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L704:
	.align	2, 0
.L703:
	.word	gPlayerParty
.Lfe76:
	.size	 PutZigzagoonInPlayerParty,.Lfe76-PutZigzagoonInPlayerParty
	.align	2, 0
	.globl	IsStarterInParty
	.type	 IsStarterInParty,function
	.thumb_func
IsStarterInParty:
	push	{r4, r5, r6, lr}
	ldr	r0, .L713
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	GetStarterPokemon
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	cmp	r4, r5
	bcs	.L707	@cond_branch
.L709:
	mov	r0, #0x64
	mul	r0, r0, r4
	ldr	r1, .L713+0x4
	add	r0, r0, r1
	mov	r1, #0x41
	mov	r2, #0x0
	bl	GetMonData
	cmp	r0, r6
	bne	.L708	@cond_branch
	mov	r0, #0x1
	b	.L712
.L714:
	.align	2, 0
.L713:
	.word	0x4023
	.word	gPlayerParty
.L708:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r5
	bcc	.L709	@cond_branch
.L707:
	mov	r0, #0x0
.L712:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe77:
	.size	 IsStarterInParty,.Lfe77-IsStarterInParty
	.align	2, 0
	.globl	ScriptCheckFreePokemonStorageSpace
	.type	 ScriptCheckFreePokemonStorageSpace,function
	.thumb_func
ScriptCheckFreePokemonStorageSpace:
	push	{lr}
	bl	CheckFreePokemonStorageSpace
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe78:
	.size	 ScriptCheckFreePokemonStorageSpace,.Lfe78-ScriptCheckFreePokemonStorageSpace
	.align	2, 0
	.globl	IsPokerusInParty
	.type	 IsPokerusInParty,function
	.thumb_func
IsPokerusInParty:
	push	{lr}
	ldr	r0, .L719
	mov	r1, #0x3f
	bl	CheckPartyPokerus
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L717	@cond_branch
	mov	r0, #0x1
	b	.L718
.L720:
	.align	2, 0
.L719:
	.word	gPlayerParty
.L717:
	mov	r0, #0x0
.L718:
	pop	{r1}
	bx	r1
.Lfe79:
	.size	 IsPokerusInParty,.Lfe79-IsPokerusInParty
	.align	2, 0
	.globl	sub_8139560
	.type	 sub_8139560,function
	.thumb_func
sub_8139560:
	push	{lr}
	ldr	r0, .L722
	mov	r1, #0x9
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L722+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r0, .L722+0x8
	ldrh	r0, [r0]
	mov	r2, #0x0
	strh	r0, [r1, #0x8]
	strh	r2, [r1, #0xa]
	ldr	r0, .L722+0xc
	ldrh	r0, [r0]
	strh	r0, [r1, #0xc]
	ldr	r0, .L722+0x10
	ldrh	r0, [r0]
	strh	r0, [r1, #0xe]
	ldr	r0, .L722+0x14
	ldrh	r0, [r0]
	strh	r0, [r1, #0x10]
	mov	r0, #0x0
	bl	SetCameraPanningCallback
	mov	r0, #0xd6
	bl	PlaySE
	pop	{r0}
	bx	r0
.L723:
	.align	2, 0
.L722:
	.word	sub_81395BC
	.word	gTasks
	.word	gSpecialVar_0x8005
	.word	gSpecialVar_0x8006
	.word	gSpecialVar_0x8007
	.word	gSpecialVar_0x8004
.Lfe80:
	.size	 sub_8139560,.Lfe80-sub_8139560
	.align	2, 0
	.type	 sub_81395BC,function
	.thumb_func
sub_81395BC:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L727
	add	r4, r0, r1
	ldrh	r0, [r4, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2]
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	mov	r2, #0x6
	ldrsh	r1, [r4, r2]
	bl	__modsi3
	cmp	r0, #0
	bne	.L725	@cond_branch
	strh	r0, [r4, #0x2]
	ldrh	r0, [r4, #0x4]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x4]
	ldrh	r0, [r4]
	neg	r0, r0
	strh	r0, [r4]
	ldrh	r0, [r4, #0x8]
	neg	r0, r0
	strh	r0, [r4, #0x8]
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	mov	r2, #0x8
	ldrsh	r1, [r4, r2]
	bl	SetCameraPanning
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L725	@cond_branch
	add	r0, r5, #0
	bl	sub_8139620
	bl	InstallCameraPanAheadCallback
.L725:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L728:
	.align	2, 0
.L727:
	.word	gTasks+0x8
.Lfe81:
	.size	 sub_81395BC,.Lfe81-sub_81395BC
	.align	2, 0
	.type	 sub_8139620,function
	.thumb_func
sub_8139620:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	bl	EnableBothScriptContexts
	pop	{r0}
	bx	r0
.Lfe82:
	.size	 sub_8139620,.Lfe82-sub_8139620
	.align	2, 0
	.globl	FoundBlackGlasses
	.type	 FoundBlackGlasses,function
	.thumb_func
FoundBlackGlasses:
	push	{lr}
	mov	r0, #0x95
	lsl	r0, r0, #0x2
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe83:
	.size	 FoundBlackGlasses,.Lfe83-FoundBlackGlasses
	.align	2, 0
	.globl	SetRoute119Weather
	.type	 SetRoute119Weather,function
	.thumb_func
SetRoute119Weather:
	push	{lr}
	bl	GetLastUsedWarpMapType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsMapTypeOutdoors
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L732	@cond_branch
	mov	r0, #0x14
	bl	SetSav1Weather
.L732:
	pop	{r0}
	bx	r0
.Lfe84:
	.size	 SetRoute119Weather,.Lfe84-SetRoute119Weather
	.align	2, 0
	.globl	SetRoute123Weather
	.type	 SetRoute123Weather,function
	.thumb_func
SetRoute123Weather:
	push	{lr}
	bl	GetLastUsedWarpMapType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsMapTypeOutdoors
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L734	@cond_branch
	mov	r0, #0x15
	bl	SetSav1Weather
.L734:
	pop	{r0}
	bx	r0
.Lfe85:
	.size	 SetRoute123Weather,.Lfe85-SetRoute123Weather
	.align	2, 0
	.globl	GetLeadMonIndex
	.type	 GetLeadMonIndex,function
	.thumb_func
GetLeadMonIndex:
	push	{r4, r5, r6, lr}
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r5, #0x0
	cmp	r5, r6
	bcs	.L737	@cond_branch
.L739:
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L743
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x41
	mov	r2, #0x0
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	beq	.L738	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	mov	r2, #0x0
	bl	GetMonData
	cmp	r0, #0
	beq	.L738	@cond_branch
	add	r0, r5, #0
	b	.L742
.L744:
	.align	2, 0
.L743:
	.word	gPlayerParty
.L738:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, r6
	bcc	.L739	@cond_branch
.L737:
	mov	r0, #0x0
.L742:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe86:
	.size	 GetLeadMonIndex,.Lfe86-GetLeadMonIndex
	.align	2, 0
	.globl	ScriptGetPartyMonSpecies
	.type	 ScriptGetPartyMonSpecies,function
	.thumb_func
ScriptGetPartyMonSpecies:
	push	{lr}
	ldr	r0, .L746
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L746+0x4
	add	r0, r0, r1
	mov	r1, #0x41
	mov	r2, #0x0
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.L747:
	.align	2, 0
.L746:
	.word	gSpecialVar_0x8004
	.word	gPlayerParty
.Lfe87:
	.size	 ScriptGetPartyMonSpecies,.Lfe87-ScriptGetPartyMonSpecies
	.align	2, 0
	.globl	nullsub_54
	.type	 nullsub_54,function
	.thumb_func
nullsub_54:
	bx	lr
.Lfe88:
	.size	 nullsub_54,.Lfe88-nullsub_54
	.align	2, 0
	.globl	GetDaysUntilPacifidlogTMAvailable
	.type	 GetDaysUntilPacifidlogTMAvailable,function
	.thumb_func
GetDaysUntilPacifidlogTMAvailable:
	push	{r4, lr}
	ldr	r0, .L754
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r3, r0, #0
	ldr	r2, .L754+0x4
	mov	r1, #0x0
	ldrsh	r0, [r2, r1]
	sub	r0, r0, r3
	cmp	r0, #0x6
	ble	.L750	@cond_branch
	mov	r0, #0x0
	b	.L753
.L755:
	.align	2, 0
.L754:
	.word	0x40c2
	.word	gLocalTime
.L750:
	ldrh	r1, [r2]
	mov	r4, #0x0
	ldrsh	r0, [r2, r4]
	cmp	r0, #0
	blt	.L751	@cond_branch
	sub	r1, r1, r3
	mov	r0, #0x7
	sub	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	b	.L753
.L751:
	mov	r0, #0x8
.L753:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe89:
	.size	 GetDaysUntilPacifidlogTMAvailable,.Lfe89-GetDaysUntilPacifidlogTMAvailable
	.align	2, 0
	.globl	SetPacifidlogTMReceivedDay
	.type	 SetPacifidlogTMReceivedDay,function
	.thumb_func
SetPacifidlogTMReceivedDay:
	push	{r4, lr}
	ldr	r0, .L757
	ldr	r4, .L757+0x4
	ldrh	r1, [r4]
	bl	VarSet
	ldrh	r0, [r4]
	pop	{r4}
	pop	{r1}
	bx	r1
.L758:
	.align	2, 0
.L757:
	.word	0x40c2
	.word	gLocalTime
.Lfe90:
	.size	 SetPacifidlogTMReceivedDay,.Lfe90-SetPacifidlogTMReceivedDay
	.align	2, 0
	.globl	MonOTNameMatchesPlayer
	.type	 MonOTNameMatchesPlayer,function
	.thumb_func
MonOTNameMatchesPlayer:
	push	{r4, r5, r6, lr}
	ldr	r6, .L764
	ldrh	r0, [r6]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L764+0x4
	add	r0, r0, r4
	mov	r1, #0x3
	bl	GetMonData
	cmp	r0, #0x2
	bne	.L763	@cond_branch
	ldrh	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r4
	ldr	r4, .L764+0x8
	mov	r1, #0x7
	add	r2, r4, #0
	bl	GetMonData
	ldr	r0, .L764+0xc
	ldr	r0, [r0]
	add	r1, r4, #0
	bl	StringCompare
	cmp	r0, #0
	beq	.L761	@cond_branch
.L763:
	mov	r0, #0x1
	b	.L762
.L765:
	.align	2, 0
.L764:
	.word	gSpecialVar_0x8004
	.word	gPlayerParty
	.word	gStringVar1
	.word	gSaveBlock2Ptr
.L761:
	mov	r0, #0x0
.L762:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe91:
	.size	 MonOTNameMatchesPlayer,.Lfe91-MonOTNameMatchesPlayer
	.align	2, 0
	.globl	BufferLottoTicketNumber
	.type	 BufferLottoTicketNumber,function
	.thumb_func
BufferLottoTicketNumber:
	push	{r4, r5, lr}
	ldr	r2, .L776
	ldrh	r1, [r2]
	ldr	r0, .L776+0x4
	cmp	r1, r0
	bls	.L767	@cond_branch
	mov	r0, #0x0
	bl	TV_PrintIntToStringVar
	b	.L768
.L777:
	.align	2, 0
.L776:
	.word	gSpecialVar_Result
	.word	0x270f
.L767:
	ldr	r0, .L778
	cmp	r1, r0
	bls	.L769	@cond_branch
	ldr	r4, .L778+0x4
	mov	r0, #0xa1
	strb	r0, [r4]
	add	r4, r4, #0x1
	b	.L775
.L779:
	.align	2, 0
.L778:
	.word	0x3e7
	.word	gStringVar1
.L769:
	cmp	r1, #0x63
	bls	.L771	@cond_branch
	ldr	r4, .L780
	mov	r0, #0xa1
	strb	r0, [r4]
	strb	r0, [r4, #0x1]
	add	r4, r4, #0x2
	b	.L775
.L781:
	.align	2, 0
.L780:
	.word	gStringVar1
.L771:
	cmp	r1, #0x9
	bls	.L773	@cond_branch
	ldr	r4, .L782
	mov	r0, #0xa1
	strb	r0, [r4]
	strb	r0, [r4, #0x1]
	strb	r0, [r4, #0x2]
	add	r4, r4, #0x3
.L775:
	ldrh	r5, [r2]
	add	r0, r5, #0
	bl	CountDigits
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x0
	bl	ConvertIntToDecimalStringN
	b	.L768
.L783:
	.align	2, 0
.L782:
	.word	gStringVar1
.L773:
	ldr	r4, .L784
	mov	r0, #0xa1
	strb	r0, [r4]
	strb	r0, [r4, #0x1]
	strb	r0, [r4, #0x2]
	strb	r0, [r4, #0x3]
	add	r4, r4, #0x4
	ldrh	r5, [r2]
	add	r0, r5, #0
	bl	CountDigits
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x0
	bl	ConvertIntToDecimalStringN
.L768:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L785:
	.align	2, 0
.L784:
	.word	gStringVar1
.Lfe92:
	.size	 BufferLottoTicketNumber,.Lfe92-BufferLottoTicketNumber
	.align	2, 0
	.globl	sub_813986C
	.type	 sub_813986C,function
	.thumb_func
sub_813986C:
	push	{lr}
	ldr	r0, .L797
	ldrh	r0, [r0]
	cmp	r0, #0x4
	bhi	.L793	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L797+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L798:
	.align	2, 0
.L797:
	.word	gSpecialVar_Result
	.word	.L794
	.align	2, 0
	.align	2, 0
.L794:
	.word	.L788
	.word	.L789
	.word	.L790
	.word	.L791
	.word	.L792
.L788:
	mov	r0, #0x3
	b	.L796
.L789:
	mov	r0, #0x4
	b	.L796
.L790:
	mov	r0, #0x0
	b	.L796
.L791:
	mov	r0, #0x1
	b	.L796
.L792:
	mov	r0, #0x2
.L796:
	bl	mevent_081445C0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	b	.L795
.L793:
	mov	r0, #0x0
.L795:
	pop	{r1}
	bx	r1
.Lfe93:
	.size	 sub_813986C,.Lfe93-sub_813986C
	.align	2, 0
	.globl	sub_81398C0
	.type	 sub_81398C0,function
	.thumb_func
sub_81398C0:
	push	{r4, lr}
	ldr	r1, .L802
	ldr	r2, .L802+0x4
	add	r0, r2, #0
	ldrh	r2, [r1]
	add	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x39
	bls	.L800	@cond_branch
	mov	r0, #0x0
	b	.L801
.L803:
	.align	2, 0
.L802:
	.word	gSpecialVar_0x8004
	.word	-0x121
.L800:
	ldr	r4, .L804
	ldrh	r0, [r1]
	bl	ItemIdToBattleMoveId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xd
	mul	r1, r1, r0
	ldr	r0, .L804+0x4
	add	r1, r1, r0
	add	r0, r4, #0
	bl	StringCopy
	mov	r0, #0x1
.L801:
	pop	{r4}
	pop	{r1}
	bx	r1
.L805:
	.align	2, 0
.L804:
	.word	gStringVar2
	.word	gMoveNames
.Lfe94:
	.size	 sub_81398C0,.Lfe94-sub_81398C0
	.align	2, 0
	.globl	sub_813990C
	.type	 sub_813990C,function
	.thumb_func
sub_813990C:
	push	{r4, r5, lr}
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	cmp	r4, r5
	bcs	.L808	@cond_branch
.L810:
	mov	r0, #0x64
	mul	r0, r0, r4
	ldr	r1, .L814
	add	r0, r0, r1
	mov	r1, #0x4
	bl	GetMonData
	cmp	r0, #0x1
	bne	.L809	@cond_branch
	mov	r0, #0x1
	b	.L813
.L815:
	.align	2, 0
.L814:
	.word	gPlayerParty
.L809:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r5
	bcc	.L810	@cond_branch
.L808:
	mov	r0, #0x0
.L813:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe95:
	.size	 sub_813990C,.Lfe95-sub_813990C
	.align	2, 0
	.globl	InMultiBattleRoom
	.type	 InMultiBattleRoom,function
	.thumb_func
InMultiBattleRoom:
	push	{lr}
	ldr	r0, .L819
	ldr	r0, [r0]
	ldrh	r1, [r0, #0x4]
	ldr	r0, .L819+0x4
	cmp	r1, r0
	bne	.L817	@cond_branch
	ldr	r0, .L819+0x8
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L817	@cond_branch
	mov	r0, #0x1
	b	.L818
.L820:
	.align	2, 0
.L819:
	.word	gSaveBlock1Ptr
	.word	0xf1a
	.word	0x40ce
.L817:
	mov	r0, #0x0
.L818:
	pop	{r1}
	bx	r1
.Lfe96:
	.size	 InMultiBattleRoom,.Lfe96-InMultiBattleRoom
	.align	2, 0
	.globl	sub_8139980
	.type	 sub_8139980,function
	.thumb_func
sub_8139980:
	push	{lr}
	mov	r0, #0x0
	bl	SetCameraPanningCallback
	mov	r0, #0x8
	mov	r1, #0x0
	bl	SetCameraPanning
	pop	{r0}
	bx	r0
.Lfe97:
	.size	 sub_8139980,.Lfe97-sub_8139980
	.globl	gUnknown_085B2BAC
	.section .rodata
	.align	2, 0
	.type	 gUnknown_085B2BAC,object
	.size	 gUnknown_085B2BAC,8
gUnknown_085B2BAC:
	.byte	0x0
	.byte	0x15
	.byte	0x1
	.byte	0x8
	.byte	0x4
	.byte	0xf
	.short	0x8
	.globl	gElevatorFloorsTable
	.align	2, 0
	.type	 gElevatorFloorsTable,object
gElevatorFloorsTable:
	.word	gText_B4F
	.word	gText_B3F
	.word	gText_B2F
	.word	gText_B1F
	.word	gText_1F
	.word	gText_2F
	.word	gText_3F
	.word	gText_4F
	.word	gText_5F
	.word	gText_6F
	.word	gText_7F
	.word	gText_8F
	.word	gText_9F
	.word	gText_10F
	.word	gText_11F
	.word	gText_Rooftop
	.size	 gElevatorFloorsTable,64
	.align	1, 0
	.type	 sElevatorWindowTiles_Ascending,object
sElevatorWindowTiles_Ascending:
	.short	0x329
	.short	0x32a
	.short	0x32b
	.short	0x331
	.short	0x332
	.short	0x333
	.short	0x339
	.short	0x33a
	.short	0x33b
	.size	 sElevatorWindowTiles_Ascending,18
	.align	1, 0
	.type	 sElevatorWindowTiles_Descending,object
sElevatorWindowTiles_Descending:
	.short	0x329
	.short	0x32b
	.short	0x32a
	.short	0x331
	.short	0x333
	.short	0x332
	.short	0x339
	.short	0x33b
	.short	0x33a
	.size	 sElevatorWindowTiles_Descending,18
.text
	.align	2, 0
	.globl	SetDepartmentStoreFloorVar
	.type	 SetDepartmentStoreFloorVar,function
	.thumb_func
SetDepartmentStoreFloorVar:
	push	{lr}
	ldr	r0, .L832
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x15]
	sub	r0, r0, #0x10
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x5
	bhi	.L830	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L832+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L833:
	.align	2, 0
.L832:
	.word	gSaveBlock1Ptr
	.word	.L831
	.align	2, 0
	.align	2, 0
.L831:
	.word	.L830
	.word	.L825
	.word	.L826
	.word	.L827
	.word	.L828
	.word	.L829
.L825:
	mov	r1, #0x5
	b	.L823
.L826:
	mov	r1, #0x6
	b	.L823
.L827:
	mov	r1, #0x7
	b	.L823
.L828:
	mov	r1, #0x8
	b	.L823
.L829:
	mov	r1, #0xf
	b	.L823
.L830:
	mov	r1, #0x4
.L823:
	ldr	r0, .L834
	bl	VarSet
	pop	{r0}
	bx	r0
.L835:
	.align	2, 0
.L834:
	.word	0x4043
.Lfe98:
	.size	 SetDepartmentStoreFloorVar,.Lfe98-SetDepartmentStoreFloorVar
	.align	2, 0
	.globl	sub_81399F4
	.type	 sub_81399F4,function
	.thumb_func
sub_81399F4:
	push	{r4, lr}
	ldr	r2, .L847
	mov	r0, #0x0
	strh	r0, [r2]
	ldr	r1, .L847+0x4
	strh	r0, [r1]
	ldr	r0, .L847+0x8
	ldr	r3, [r0]
	mov	r0, #0x14
	ldrsb	r0, [r3, r0]
	add	r4, r1, #0
	cmp	r0, #0xd
	bne	.L837	@cond_branch
	ldrb	r0, [r3, #0x15]
	sub	r0, r0, #0x10
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L837	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L847+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L848:
	.align	2, 0
.L847:
	.word	gUnknown_0203AB60
	.word	gUnknown_0203AB62
	.word	gSaveBlock1Ptr
	.word	.L844
	.align	2, 0
	.align	2, 0
.L844:
	.word	.L843
	.word	.L842
	.word	.L841
	.word	.L840
	.word	.L839
.L839:
	mov	r0, #0x0
	strh	r0, [r2]
	b	.L846
.L840:
	mov	r0, #0x0
	strh	r0, [r2]
	mov	r0, #0x1
	b	.L846
.L841:
	mov	r0, #0x0
	strh	r0, [r2]
	mov	r0, #0x2
	b	.L846
.L842:
	mov	r0, #0x0
	strh	r0, [r2]
	mov	r0, #0x3
	b	.L846
.L843:
	mov	r0, #0x0
	strh	r0, [r2]
	mov	r0, #0x4
.L846:
	strh	r0, [r4]
.L837:
	ldrh	r0, [r4]
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe99:
	.size	 sub_81399F4,.Lfe99-sub_81399F4
	.section .rodata
	.type	 gUnknown_085B2C18.303,object
gUnknown_085B2C18.303:
	.byte	0x8
	.byte	0x10
	.byte	0x18
	.byte	0x20
	.byte	0x26
	.byte	0x2e
	.byte	0x34
	.byte	0x38
	.byte	0x39
.text
	.align	2, 0
	.globl	ShakeScreenInElevator
	.type	 ShakeScreenInElevator,function
	.thumb_func
ShakeScreenInElevator:
	push	{r4, r5, r6, lr}
	ldr	r0, .L853
	mov	r1, #0x9
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L853+0x4
	add	r4, r1, r0
	mov	r3, #0x0
	strh	r3, [r4, #0x2]
	strh	r3, [r4, #0x4]
	mov	r6, #0x1
	strh	r6, [r4, #0x8]
	ldr	r0, .L853+0x8
	ldr	r1, .L853+0xc
	ldrh	r2, [r0]
	ldrh	r0, [r1]
	cmp	r2, r0
	bls	.L850	@cond_branch
	sub	r0, r2, r0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	strh	r6, [r4, #0xc]
	b	.L851
.L854:
	.align	2, 0
.L853:
	.word	sub_8139AF4
	.word	gTasks+0x8
	.word	gSpecialVar_0x8005
	.word	gSpecialVar_0x8006
.L850:
	sub	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	strh	r3, [r4, #0xc]
.L851:
	cmp	r5, #0x8
	bls	.L852	@cond_branch
	mov	r5, #0x8
.L852:
	ldr	r0, .L855
	add	r0, r5, r0
	ldrb	r0, [r0]
	strh	r0, [r4, #0xa]
	mov	r0, #0x0
	bl	SetCameraPanningCallback
	ldrb	r1, [r4, #0xc]
	add	r0, r5, #0
	bl	sub_8139C2C
	mov	r0, #0x59
	bl	PlaySE
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L856:
	.align	2, 0
.L855:
	.word	gUnknown_085B2C18.303
.Lfe100:
	.size	 ShakeScreenInElevator,.Lfe100-ShakeScreenInElevator
	.align	2, 0
	.type	 sub_8139AF4,function
	.thumb_func
sub_8139AF4:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L860
	add	r4, r0, r1
	ldrh	r0, [r4, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2]
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	mov	r1, #0x3
	bl	__modsi3
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L858	@cond_branch
	strh	r0, [r4, #0x2]
	ldrh	r0, [r4, #0x4]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x4]
	ldrh	r0, [r4, #0x8]
	neg	r0, r0
	strh	r0, [r4, #0x8]
	mov	r2, #0x8
	ldrsh	r1, [r4, r2]
	mov	r0, #0x0
	bl	SetCameraPanning
	mov	r0, #0x4
	ldrsh	r1, [r4, r0]
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L858	@cond_branch
	mov	r0, #0x49
	bl	PlaySE
	add	r0, r5, #0
	bl	DestroyTask
	bl	EnableBothScriptContexts
	bl	InstallCameraPanAheadCallback
.L858:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L861:
	.align	2, 0
.L860:
	.word	gTasks+0x8
.Lfe101:
	.size	 sub_8139AF4,.Lfe101-sub_8139AF4
	.align	2, 0
	.globl	sub_8139B60
	.type	 sub_8139B60,function
	.thumb_func
sub_8139B60:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0xc
	ldr	r5, .L863
	ldr	r0, .L863+0x4
	bl	AddWindow
	strb	r0, [r5]
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	SetStandardWindowBorderStyle
	ldr	r4, .L863+0x8
	mov	r0, #0x1
	add	r1, r4, #0
	mov	r2, #0x40
	bl	GetStringCenterAlignXOffset
	add	r3, r0, #0
	ldrb	r0, [r5]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r1, #0x1
	str	r1, [sp]
	mov	r1, #0xff
	mov	r9, r1
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	mov	r8, r1
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, r4, #0
	bl	AddTextPrinterParameterized
	ldr	r6, .L863+0xc
	ldr	r4, .L863+0x10
	ldrh	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r0]
	mov	r0, #0x1
	mov	r2, #0x40
	bl	GetStringCenterAlignXOffset
	add	r3, r0, #0
	ldrb	r0, [r5]
	ldrh	r1, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldr	r2, [r1]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r1, #0x11
	str	r1, [sp]
	mov	r1, r9
	str	r1, [sp, #0x4]
	mov	r1, r8
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	bl	AddTextPrinterParameterized
	ldrb	r0, [r5]
	bl	PutWindowTilemap
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L864:
	.align	2, 0
.L863:
	.word	gUnknown_0203AB5E
	.word	gUnknown_085B2BAC
	.word	gText_ElevatorNowOn
	.word	gElevatorFloorsTable
	.word	gSpecialVar_0x8005
.Lfe102:
	.size	 sub_8139B60,.Lfe102-sub_8139B60
	.align	2, 0
	.globl	sub_8139C10
	.type	 sub_8139C10,function
	.thumb_func
sub_8139C10:
	push	{r4, lr}
	ldr	r4, .L866
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	ClearStdWindowAndFrameToTransparent
	ldrb	r0, [r4]
	bl	RemoveWindow
	pop	{r4}
	pop	{r0}
	bx	r0
.L867:
	.align	2, 0
.L866:
	.word	gUnknown_0203AB5E
.Lfe103:
	.size	 sub_8139C10,.Lfe103-sub_8139C10
	.section .rodata
	.type	 gUnknown_085B2C21.316,object
gUnknown_085B2C21.316:
	.byte	0x3
	.byte	0x6
	.byte	0x9
	.byte	0xc
	.byte	0xf
	.byte	0x12
	.byte	0x15
	.byte	0x18
	.byte	0x1b
.text
	.align	2, 0
	.type	 sub_8139C2C,function
	.thumb_func
sub_8139C2C:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	ldr	r4, .L870
	add	r0, r4, #0
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L869	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x8
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L870+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r0, #0x0
	strh	r0, [r1, #0x8]
	strh	r0, [r1, #0xa]
	strh	r5, [r1, #0xc]
	ldr	r0, .L870+0x8
	add	r0, r6, r0
	ldrb	r0, [r0]
	strh	r0, [r1, #0xe]
.L869:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L871:
	.align	2, 0
.L870:
	.word	MoveElevatorWindowLights
	.word	gTasks
	.word	gUnknown_085B2C21.316
.Lfe104:
	.size	 sub_8139C2C,.Lfe104-sub_8139C2C
	.align	2, 0
	.type	 MoveElevatorWindowLights,function
	.thumb_func
MoveElevatorWindowLights:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	lsl	r0, r0, #0x2
	ldr	r1, [sp]
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L897
	add	r6, r0, r1
	mov	r2, #0x2
	ldrsh	r0, [r6, r2]
	cmp	r0, #0x6
	bne	.L873	@cond_branch
	ldrh	r0, [r6]
	add	r0, r0, #0x1
	strh	r0, [r6]
	mov	r1, #0x4
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L874	@cond_branch
	mov	r1, #0x0
	ldr	r2, .L897+0x4
	mov	sl, r2
.L878:
	mov	r5, #0x0
	add	r7, r1, #0x7
	lsl	r0, r1, #0x1
	add	r2, r1, #0x1
	mov	r8, r2
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r9, r0
.L882:
	add	r4, r5, #0
	add	r4, r4, #0x8
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	mov	r1, #0x3
	bl	__modsi3
	lsl	r0, r0, #0x10
	asr	r0, r0, #0xf
	add	r0, r0, r9
	add	r0, r0, sl
	ldrh	r0, [r0]
	mov	r1, #0xc0
	lsl	r1, r1, #0x4
	add	r2, r1, #0
	orr	r2, r2, r0
	add	r0, r4, #0
	add	r1, r7, #0
	bl	MapGridSetMetatileIdAt
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x2
	bls	.L882	@cond_branch
	mov	r2, r8
	lsl	r0, r2, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x2
	bls	.L878	@cond_branch
	b	.L885
.L898:
	.align	2, 0
.L897:
	.word	gTasks+0x8
	.word	sElevatorWindowTiles_Ascending
.L874:
	mov	r1, #0x0
	ldr	r0, .L899
	mov	sl, r0
.L889:
	mov	r5, #0x0
	add	r7, r1, #0x7
	lsl	r0, r1, #0x1
	add	r2, r1, #0x1
	mov	r8, r2
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r9, r0
.L893:
	add	r4, r5, #0
	add	r4, r4, #0x8
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	mov	r1, #0x3
	bl	__modsi3
	lsl	r0, r0, #0x10
	asr	r0, r0, #0xf
	add	r0, r0, r9
	add	r0, r0, sl
	ldrh	r0, [r0]
	mov	r1, #0xc0
	lsl	r1, r1, #0x4
	add	r2, r1, #0
	orr	r2, r2, r0
	add	r0, r4, #0
	add	r1, r7, #0
	bl	MapGridSetMetatileIdAt
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x2
	bls	.L893	@cond_branch
	mov	r2, r8
	lsl	r0, r2, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x2
	bls	.L889	@cond_branch
.L885:
	bl	DrawWholeMapView
	mov	r0, #0x0
	strh	r0, [r6, #0x2]
	mov	r0, #0x0
	ldrsh	r1, [r6, r0]
	mov	r2, #0x6
	ldrsh	r0, [r6, r2]
	cmp	r1, r0
	bne	.L873	@cond_branch
	ldr	r0, [sp]
	bl	DestroyTask
.L873:
	ldrh	r0, [r6, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x2]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L900:
	.align	2, 0
.L899:
	.word	sElevatorWindowTiles_Descending
.Lfe105:
	.size	 MoveElevatorWindowLights,.Lfe105-MoveElevatorWindowLights
	.align	2, 0
	.globl	sub_8139D98
	.type	 sub_8139D98,function
	.thumb_func
sub_8139D98:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x18
	ldr	r6, .L917
	ldrh	r0, [r6]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L917+0x4
	add	r0, r0, r4
	mov	r1, #0x27
	bl	GetMonData
	str	r0, [sp]
	ldrh	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x28
	bl	GetMonData
	str	r0, [sp, #0x4]
	ldrh	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x29
	bl	GetMonData
	str	r0, [sp, #0x8]
	ldrh	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x2a
	bl	GetMonData
	str	r0, [sp, #0xc]
	ldrh	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x2b
	bl	GetMonData
	str	r0, [sp, #0x10]
	ldrh	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x2c
	bl	GetMonData
	str	r0, [sp, #0x14]
	ldr	r1, .L917+0x8
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r4, #0x0
	add	r2, r1, #0
.L905:
	lsl	r0, r4, #0x2
	add	r0, r0, sp
	ldr	r1, [r0]
	ldrh	r0, [r2]
	add	r0, r0, r1
	strh	r0, [r2]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x5
	bls	.L905	@cond_branch
	ldr	r2, .L917+0xc
	mov	r0, #0x0
	strh	r0, [r2]
	ldr	r1, .L917+0x10
	ldr	r0, [sp]
	strh	r0, [r1]
	mov	r4, #0x1
	add	r6, r2, #0
	add	r7, r1, #0
.L910:
	ldrh	r0, [r6]
	lsl	r0, r0, #0x2
	mov	r2, sp
	add	r1, r2, r0
	lsl	r0, r4, #0x2
	add	r5, r2, r0
	ldr	r1, [r1]
	ldr	r0, [r5]
	cmp	r1, r0
	bcs	.L911	@cond_branch
	strh	r4, [r6]
	b	.L916
.L918:
	.align	2, 0
.L917:
	.word	gSpecialVar_0x8004
	.word	gPlayerParty
	.word	gSpecialVar_0x8005
	.word	gSpecialVar_0x8006
	.word	gSpecialVar_0x8007
.L911:
	cmp	r1, r0
	bne	.L909	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L909	@cond_branch
	strh	r4, [r6]
	ldr	r0, [r5]
.L916:
	strh	r0, [r7]
.L909:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x5
	bls	.L910	@cond_branch
	add	sp, sp, #0x18
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe106:
	.size	 sub_8139D98,.Lfe106-sub_8139D98
	.section .rodata
	.align	1, 0
	.type	 gUnknown_085B2C2A.326,object
gUnknown_085B2C2A.326:
	.short	0x202
	.short	0x301
	.short	0x405
	.short	0x504
	.short	0x604
	.short	0x700
	.short	0x804
	.short	0x90b
	.short	0xa05
	.short	0xb05
	.short	0xc02
	.short	0xd06
	.short	0xe03
	.short	0xf02
	.short	0x100c
	.short	0x100a
	.short	0x1a35
	.short	0x193c
	.short	0xffff
.text
	.align	2, 0
	.globl	warp0_in_pokecenter
	.type	 warp0_in_pokecenter,function
	.thumb_func
warp0_in_pokecenter:
	push	{r4, lr}
	ldr	r0, .L927
	mov	r1, #0x0
	ldrsb	r1, [r0, r1]
	lsl	r1, r1, #0x8
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	ldr	r2, .L927+0x4
	ldrh	r0, [r2]
	ldr	r1, .L927+0x8
	cmp	r0, r1
	beq	.L921	@cond_branch
	add	r4, r1, #0
	add	r1, r2, #0
.L923:
	ldrh	r0, [r2]
	cmp	r0, r3
	bne	.L922	@cond_branch
	mov	r0, #0x1
	b	.L926
.L928:
	.align	2, 0
.L927:
	.word	gLastUsedWarp
	.word	gUnknown_085B2C2A.326
	.word	0xffff
.L922:
	add	r1, r1, #0x2
	add	r2, r2, #0x2
	ldrh	r0, [r1]
	cmp	r0, r4
	bne	.L923	@cond_branch
.L921:
	mov	r0, #0x0
.L926:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe107:
	.size	 warp0_in_pokecenter,.Lfe107-warp0_in_pokecenter
	.align	2, 0
	.globl	sub_8139ED0
	.type	 sub_8139ED0,function
	.thumb_func
sub_8139ED0:
	push	{lr}
	ldr	r0, .L932
	ldr	r0, [r0]
	ldrh	r1, [r0, #0x4]
	ldr	r0, .L932+0x4
	cmp	r1, r0
	beq	.L930	@cond_branch
	mov	r0, #0x1
	b	.L931
.L933:
	.align	2, 0
.L932:
	.word	gSaveBlock1Ptr
	.word	0x3c1a
.L930:
	mov	r0, #0x0
.L931:
	pop	{r1}
	bx	r1
.Lfe108:
	.size	 sub_8139ED0,.Lfe108-sub_8139ED0
	.align	2, 0
	.globl	UpdateFrontierManiac
	.type	 UpdateFrontierManiac,function
	.thumb_func
UpdateFrontierManiac:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldr	r0, .L935
	bl	GetVarPointer
	add	r5, r0, #0
	ldrh	r0, [r5]
	add	r4, r4, r0
	strh	r4, [r5]
	ldrh	r0, [r5]
	mov	r1, #0xa
	bl	__umodsi3
	strh	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L936:
	.align	2, 0
.L935:
	.word	0x402f
.Lfe109:
	.size	 UpdateFrontierManiac,.Lfe109-UpdateFrontierManiac
	.section .rodata
	.align	2, 0
	.type	 gUnknown_085B2C50.336,object
gUnknown_085B2C50.336:
	.word	BattleFrontier_Lounge2_Text_260971
	.word	BattleFrontier_Lounge2_Text_260A1E
	.word	BattleFrontier_Lounge2_Text_260AE7
	.word	BattleFrontier_Lounge2_Text_2619AC
	.word	BattleFrontier_Lounge2_Text_261A91
	.word	BattleFrontier_Lounge2_Text_261B0C
	.word	BattleFrontier_Lounge2_Text_261B95
	.word	BattleFrontier_Lounge2_Text_261B95
	.word	BattleFrontier_Lounge2_Text_261B95
	.word	BattleFrontier_Lounge2_Text_261C1A
	.word	BattleFrontier_Lounge2_Text_261C1A
	.word	BattleFrontier_Lounge2_Text_261C1A
	.word	BattleFrontier_Lounge2_Text_260BC4
	.word	BattleFrontier_Lounge2_Text_260C6D
	.word	BattleFrontier_Lounge2_Text_260D3A
	.word	BattleFrontier_Lounge2_Text_260E1E
	.word	BattleFrontier_Lounge2_Text_260EC7
	.word	BattleFrontier_Lounge2_Text_260F74
	.word	BattleFrontier_Lounge2_Text_2614E6
	.word	BattleFrontier_Lounge2_Text_261591
	.word	BattleFrontier_Lounge2_Text_26166F
	.word	BattleFrontier_Lounge2_Text_261282
	.word	BattleFrontier_Lounge2_Text_261329
	.word	BattleFrontier_Lounge2_Text_261403
	.word	BattleFrontier_Lounge2_Text_261026
	.word	BattleFrontier_Lounge2_Text_2610CC
	.word	BattleFrontier_Lounge2_Text_261194
	.word	BattleFrontier_Lounge2_Text_26174D
	.word	BattleFrontier_Lounge2_Text_2617F9
	.word	BattleFrontier_Lounge2_Text_2618C4
	.type	 gUnknown_085B2CC8.337,object
gUnknown_085B2CC8.337:
	.byte	0x15
	.byte	0x38
	.byte	0x15
	.byte	0x23
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x2
	.byte	0x4
	.byte	0x7
	.byte	0x15
	.byte	0x7
	.byte	0x15
	.byte	0xe
	.byte	0x1c
	.byte	0xd
	.byte	0x70
	.byte	0x7
	.byte	0x38
.text
	.align	2, 0
	.globl	sub_8139F20
	.type	 sub_8139F20,function
	.thumb_func
sub_8139F20:
	push	{r4, r5, r6, r7, lr}
	mov	r4, #0x0
	ldr	r0, .L973
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x9
	bls	.LCB6455
	b	.L938	@long jump
.LCB6455:
	lsl	r0, r6, #0x2
	ldr	r1, .L973+0x4
	add	r1, r0, r1
	ldr	r1, [r1]
	add	r2, r0, #0
	mov	pc, r1
.L974:
	.align	2, 0
.L973:
	.word	0x402f
	.word	.L963
	.align	2, 0
	.align	2, 0
.L963:
	.word	.L942
	.word	.L942
	.word	.L942
	.word	.L942
	.word	.L945
	.word	.L948
	.word	.L951
	.word	.L954
	.word	.L957
	.word	.L960
.L942:
	ldr	r0, .L975
	ldr	r0, [r0]
	mov	r3, #0xce
	lsl	r3, r3, #0x4
	add	r1, r0, r3
	add	r3, r1, r2
	ldr	r1, .L975+0x4
	add	r0, r0, r1
	add	r1, r0, r2
	ldrh	r0, [r3]
	ldrh	r2, [r1]
	cmp	r0, r2
	bcs	.L971	@cond_branch
	b	.L961
.L976:
	.align	2, 0
.L975:
	.word	gSaveBlock2Ptr
	.word	0xce2
.L945:
	ldr	r0, .L977
	ldr	r0, [r0]
	ldr	r3, .L977+0x4
	add	r2, r0, r3
	add	r3, r3, #0x2
.L972:
	add	r1, r0, r3
	ldrh	r0, [r2]
	ldrh	r3, [r1]
	cmp	r0, r3
	bcs	.L971	@cond_branch
	b	.L961
.L978:
	.align	2, 0
.L977:
	.word	gSaveBlock2Ptr
	.word	0xd0c
.L948:
	ldr	r0, .L979
	ldr	r0, [r0]
	ldr	r1, .L979+0x4
	add	r2, r0, r1
	ldr	r3, .L979+0x8
	b	.L972
.L980:
	.align	2, 0
.L979:
	.word	gSaveBlock2Ptr
	.word	0xde2
	.word	0xde4
.L951:
	ldr	r0, .L981
	ldr	r0, [r0]
	ldr	r1, .L981+0x4
	add	r2, r0, r1
	ldr	r3, .L981+0x8
	b	.L972
.L982:
	.align	2, 0
.L981:
	.word	gSaveBlock2Ptr
	.word	0xdc8
	.word	0xdca
.L954:
	ldr	r0, .L983
	ldr	r0, [r0]
	ldr	r1, .L983+0x4
	add	r2, r0, r1
	ldr	r3, .L983+0x8
	b	.L972
.L984:
	.align	2, 0
.L983:
	.word	gSaveBlock2Ptr
	.word	0xdda
	.word	0xddc
.L957:
	ldr	r0, .L985
	ldr	r0, [r0]
	ldr	r1, .L985+0x4
	add	r2, r0, r1
	ldr	r3, .L985+0x8
	b	.L972
.L986:
	.align	2, 0
.L985:
	.word	gSaveBlock2Ptr
	.word	0xe04
	.word	0xe06
.L960:
	ldr	r0, .L987
	ldr	r0, [r0]
	ldr	r1, .L987+0x4
	add	r2, r0, r1
	ldr	r3, .L987+0x8
	add	r1, r0, r3
	ldrh	r0, [r2]
	ldrh	r3, [r1]
	cmp	r0, r3
	bcc	.L961	@cond_branch
.L971:
	add	r4, r0, #0
	b	.L938
.L988:
	.align	2, 0
.L987:
	.word	gSaveBlock2Ptr
	.word	0xe1a
	.word	0xe1c
.L961:
	ldrh	r4, [r1]
.L938:
	mov	r2, #0x0
	ldr	r5, .L989
	lsl	r0, r6, #0x1
	add	r1, r0, r5
	ldrb	r1, [r1]
	add	r3, r0, #0
	ldr	r7, .L989+0x4
	cmp	r1, r4
	bcs	.L966	@cond_branch
	add	r1, r3, #0
.L967:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x1
	bhi	.L966	@cond_branch
	add	r0, r2, r1
	add	r0, r0, r5
	ldrb	r0, [r0]
	cmp	r0, r4
	bcc	.L967	@cond_branch
.L966:
	add	r0, r3, r6
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r0, [r0]
	bl	ShowFieldMessage
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L990:
	.align	2, 0
.L989:
	.word	gUnknown_085B2CC8.337
	.word	gUnknown_085B2C50.336
.Lfe110:
	.size	 sub_8139F20,.Lfe110-sub_8139F20
	.section .rodata
	.align	1, 0
	.type	 gUnknown_085B2CDC.341,object
gUnknown_085B2CDC.341:
	.short	0x7
	.short	0xe
	.short	0x15
	.short	0x1c
	.short	0x23
	.short	0x31
	.short	0x3f
	.short	0x4d
	.short	0x5b
	.short	0x0
.text
	.align	2, 0
	.globl	sub_813A080
	.type	 sub_813A080,function
	.thumb_func
sub_813A080:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L1001
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, .L1001+0x4
	ldr	r0, [r0]
	ldr	r1, .L1001+0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r4, r0, #0x1e
	cmp	r5, #0x2
	bne	.L992	@cond_branch
	mov	r0, #0xa9
	lsl	r0, r0, #0x1
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L992	@cond_branch
	ldr	r1, .L1001+0xc
	mov	r0, #0x5
	strh	r0, [r1]
	ldr	r1, .L1001+0x10
	mov	r0, #0x4
	strh	r0, [r1]
	b	.L991
.L1002:
	.align	2, 0
.L1001:
	.word	0x40ce
	.word	gSaveBlock2Ptr
	.word	0xca9
	.word	gSpecialVar_0x8005
	.word	gSpecialVar_0x8006
.L999:
	mov	r0, #0x4
	strh	r0, [r6]
	add	r0, r3, #0x5
	b	.L1000
.L992:
	mov	r3, #0x0
	ldr	r6, .L1003
	ldr	r7, .L1003+0x4
	lsl	r1, r4, #0x1
	lsl	r2, r5, #0x2
	ldr	r4, .L1003+0x8
	ldr	r0, .L1003+0xc
	ldr	r0, [r0]
	add	r1, r1, r2
	mov	r2, #0xce
	lsl	r2, r2, #0x4
	add	r0, r0, r2
	add	r0, r0, r1
	ldrh	r1, [r0]
.L996:
	lsl	r0, r3, #0x1
	add	r0, r0, r4
	ldrh	r0, [r0]
	cmp	r0, r1
	bhi	.L999	@cond_branch
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x8
	bls	.L996	@cond_branch
	mov	r0, #0x4
	strh	r0, [r6]
	mov	r0, #0xc
.L1000:
	strh	r0, [r7]
.L991:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1004:
	.align	2, 0
.L1003:
	.word	gSpecialVar_0x8005
	.word	gSpecialVar_0x8006
	.word	gUnknown_085B2CDC.341
	.word	gSaveBlock2Ptr
.Lfe111:
	.size	 sub_813A080,.Lfe111-sub_813A080
	.align	2, 0
	.globl	sub_813A128
	.type	 sub_813A128,function
	.thumb_func
sub_813A128:
	push	{r4, lr}
	ldr	r0, .L1025
	mov	r1, #0x8
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L1025+0x4
	add	r3, r0, r1
	ldr	r1, .L1025+0x8
	ldrh	r0, [r1]
	strh	r0, [r3, #0x1e]
	ldrh	r0, [r1]
	cmp	r0, #0xc
	bls	.LCB6875
	b	.L1020	@long jump
.LCB6875:
	lsl	r0, r0, #0x2
	ldr	r1, .L1025+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1026:
	.align	2, 0
.L1025:
	.word	sub_813A2DC
	.word	gTasks
	.word	gSpecialVar_0x8004
	.word	.L1021
	.align	2, 0
	.align	2, 0
.L1021:
	.word	.L1007
	.word	.L1008
	.word	.L1009
	.word	.L1010
	.word	.L1011
	.word	.L1012
	.word	.L1013
	.word	.L1014
	.word	.L1015
	.word	.L1017
	.word	.L1017
	.word	.L1018
	.word	.L1019
.L1007:
	mov	r1, #0x0
	mov	r0, #0x1
	strh	r0, [r3, #0x8]
	strh	r0, [r3, #0xa]
	strh	r0, [r3, #0xc]
	strh	r0, [r3, #0xe]
	b	.L1022
.L1008:
	mov	r1, #0x0
	mov	r0, #0x5
	strh	r0, [r3, #0x8]
	mov	r0, #0x8
	strh	r0, [r3, #0xa]
	mov	r0, #0x1
	strh	r0, [r3, #0xc]
	strh	r0, [r3, #0xe]
	mov	r0, #0x9
	strh	r0, [r3, #0x10]
	mov	r0, #0xa
	b	.L1023
.L1009:
	mov	r2, #0x0
	mov	r0, #0x6
	strh	r0, [r3, #0x8]
	mov	r1, #0xc
	strh	r1, [r3, #0xa]
	mov	r0, #0x1
	strh	r0, [r3, #0xc]
	strh	r0, [r3, #0xe]
	mov	r0, #0x7
	b	.L1024
.L1010:
	mov	r1, #0x0
	mov	r0, #0x6
	strh	r0, [r3, #0x8]
	mov	r0, #0xb
	strh	r0, [r3, #0xa]
	mov	r0, #0xe
	strh	r0, [r3, #0xc]
	mov	r0, #0x1
	strh	r0, [r3, #0xe]
	mov	r0, #0xf
	strh	r0, [r3, #0x10]
	mov	r0, #0xc
	b	.L1023
.L1011:
	mov	r1, #0x0
	mov	r0, #0x6
	strh	r0, [r3, #0x8]
	strh	r0, [r3, #0xa]
	mov	r0, #0xe
	strh	r0, [r3, #0xc]
	mov	r0, #0x1
	strh	r0, [r3, #0xe]
	mov	r0, #0xf
	strh	r0, [r3, #0x10]
	mov	r0, #0xc
	b	.L1023
.L1012:
	mov	r1, #0x0
	mov	r0, #0x6
	strh	r0, [r3, #0x8]
	mov	r0, #0x7
	strh	r0, [r3, #0xa]
	mov	r0, #0xe
	strh	r0, [r3, #0xc]
	mov	r0, #0x1
	strh	r0, [r3, #0xe]
	mov	r0, #0xf
	strh	r0, [r3, #0x10]
	mov	r0, #0xc
	b	.L1023
.L1013:
	mov	r1, #0x0
	mov	r0, #0x6
	strh	r0, [r3, #0x8]
	mov	r0, #0xa
	strh	r0, [r3, #0xa]
	mov	r0, #0xe
	strh	r0, [r3, #0xc]
	mov	r0, #0x1
	strh	r0, [r3, #0xe]
	mov	r0, #0xf
	strh	r0, [r3, #0x10]
	mov	r0, #0xc
	b	.L1023
.L1014:
	mov	r2, #0x0
	mov	r0, #0x6
	strh	r0, [r3, #0x8]
	mov	r1, #0xc
	strh	r1, [r3, #0xa]
	mov	r0, #0xf
	strh	r0, [r3, #0xc]
	mov	r0, #0x1
	strh	r0, [r3, #0xe]
	mov	r0, #0xe
.L1024:
	strh	r0, [r3, #0x10]
	strh	r1, [r3, #0x12]
	strh	r2, [r3, #0x14]
	strh	r4, [r3, #0x26]
	b	.L1006
.L1015:
	mov	r1, #0x0
	mov	r0, #0x6
	strh	r0, [r3, #0x8]
	mov	r0, #0xa
	strh	r0, [r3, #0xa]
	mov	r0, #0x11
	strh	r0, [r3, #0xc]
	mov	r0, #0x1
	strh	r0, [r3, #0xe]
	mov	r0, #0xb
	strh	r0, [r3, #0x10]
	mov	r0, #0xc
	b	.L1023
.L1017:
	mov	r1, #0x0
	mov	r0, #0x6
	strh	r0, [r3, #0x8]
	mov	r0, #0xb
	strh	r0, [r3, #0xa]
	mov	r0, #0xf
	strh	r0, [r3, #0xc]
	mov	r0, #0x1
	strh	r0, [r3, #0xe]
	mov	r0, #0xe
	strh	r0, [r3, #0x10]
	mov	r0, #0xc
	b	.L1023
.L1018:
	mov	r1, #0x0
	mov	r0, #0x6
	strh	r0, [r3, #0x8]
	mov	r0, #0x7
	strh	r0, [r3, #0xa]
	mov	r0, #0x13
	strh	r0, [r3, #0xc]
	mov	r0, #0x1
	strh	r0, [r3, #0xe]
	mov	r0, #0xa
	strh	r0, [r3, #0x10]
	mov	r0, #0xc
	b	.L1023
.L1019:
	mov	r1, #0x0
	mov	r0, #0x6
	strh	r0, [r3, #0x8]
	mov	r0, #0x7
	strh	r0, [r3, #0xa]
	mov	r0, #0x11
	strh	r0, [r3, #0xc]
	mov	r0, #0x1
	strh	r0, [r3, #0xe]
	mov	r0, #0xc
.L1022:
	strh	r0, [r3, #0x10]
.L1023:
	strh	r0, [r3, #0x12]
	strh	r1, [r3, #0x14]
	strh	r4, [r3, #0x26]
	b	.L1006
.L1020:
	ldr	r1, .L1027
	mov	r0, #0x7f
	strh	r0, [r1]
	add	r0, r4, #0
	bl	DestroyTask
.L1006:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1028:
	.align	2, 0
.L1027:
	.word	gSpecialVar_Result
.Lfe112:
	.size	 sub_813A128,.Lfe112-sub_813A128
	.section .rodata
	.align	2, 0
	.type	 gUnknown_085B2CF0,object
gUnknown_085B2CF0:
	.word	gText_Exit
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	gText_BlueFlute
	.word	gText_YellowFlute
	.word	gText_RedFlute
	.word	gText_WhiteFlute
	.word	gText_BlackFlute
	.word	gText_PrettyChair
	.word	gText_PrettyDesk
	.word	gText_Exit
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	gText_0Pts
	.word	gText_10Pts
	.word	gText_20Pts
	.word	gText_30Pts
	.word	gText_40Pts
	.word	gText_50Pts
	.word	gText_60Pts
	.word	gText_70Pts
	.word	gText_80Pts
	.word	gText_90Pts
	.word	gText_100Pts
	.word	gText_QuestionMark
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	gText_KissPoster16BP
	.word	gText_KissCushion32BP
	.word	gText_SmoochumDoll32BP
	.word	gText_TogepiDoll48BP
	.word	gText_MeowthDoll48BP
	.word	gText_ClefairyDoll48BP
	.word	gText_DittoDoll48BP
	.word	gText_CyndaquilDoll80BP
	.word	gText_ChikoritaDoll80BP
	.word	gText_TotodileDoll80BP
	.word	gText_Exit
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	gText_LaprasDoll128BP
	.word	gText_SnorlaxDoll128BP
	.word	gText_VenusaurDoll256BP
	.word	gText_CharizardDoll256BP
	.word	gText_BlastoiseDoll256BP
	.word	gText_Exit
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	gText_Protein1BP
	.word	gText_Calcium1BP
	.word	gText_Iron1BP
	.word	gText_Zinc1BP
	.word	gText_Carbos1BP
	.word	gText_HpUp1BP
	.word	gText_Exit
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	gText_Leftovers48BP
	.word	gText_WhiteHerb48BP
	.word	gText_QuickClaw48BP
	.word	gText_MentalHerb48BP
	.word	gText_BrightPowder64BP
	.word	gText_ChoiceBand64BP
	.word	gText_KingsRock64BP
	.word	gText_FocusBand64BP
	.word	gText_ScopeLens64BP
	.word	gText_Exit
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	gText_EnergyPowder50
	.word	gText_EnergyRoot80
	.word	gText_HealPowder50
	.word	gText_RevivalHerb300
	.word	gText_Protein1000
	.word	gText_Iron1000
	.word	gText_Carbos1000
	.word	gText_Calcium1000
	.word	gText_Zinc1000
	.word	gText_HPUp1000
	.word	gText_PPUp3000
	.word	gText_Exit
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	gText_BattleTower2
	.word	gText_BattleDome
	.word	gText_BattlePalace
	.word	gText_BattleArena
	.word	gText_BattleFactory
	.word	gText_BattlePike
	.word	gText_BattlePyramid
	.word	gText_RankingHall
	.word	gText_ExchangeService
	.word	gText_Exit
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	gText_Softboiled16BP
	.word	gText_SeismicToss24BP
	.word	gText_DreamEater24BP
	.word	gText_MegaPunch24BP
	.word	gText_MegaKick48BP
	.word	gText_BodySlam48BP
	.word	gText_RockSlide48BP
	.word	gText_Counter48BP
	.word	gText_ThunderWave48BP
	.word	gText_SwordsDance48BP
	.word	gText_Exit
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	gText_DefenseCurl16BP
	.word	gText_Snore24BP
	.word	gText_MudSlap24BP
	.word	gText_Swift24BP
	.word	gText_IcyWind24BP
	.word	gText_Endure48BP
	.word	gText_PsychUp48BP
	.word	gText_IcePunch48BP
	.word	gText_ThunderPunch48BP
	.word	gText_FirePunch48BP
	.word	gText_Exit
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	gText_SlateportCity
	.word	gText_BattleFrontier
	.word	gText_SouthernIsland
	.word	gText_NavelRock
	.word	gText_BirthIsland
	.word	gText_FarawayIsland
	.word	gText_Exit
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	gText_BattleTrainers
	.word	gText_BattleBasics
	.word	gText_PokemonNature
	.word	gText_PokemonMoves
	.word	gText_Underpowered
	.word	gText_WhenInDanger
	.word	gText_Exit
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x0
	.size	 gUnknown_085B2CF0,832
.text
	.align	2, 0
	.type	 sub_813A2DC,function
	.thumb_func
sub_813A2DC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x20
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	ldr	r1, .L1038
	add	r6, r0, r1
	bl	ScriptContext2_Enable
	ldr	r0, .L1038+0x4
	mov	r5, #0x0
	strh	r5, [r0]
	ldr	r1, .L1038+0x8
	mov	r0, #0x40
	strb	r0, [r1]
	ldrh	r0, [r6, #0x1e]
	mov	r1, #0x0
	bl	sub_813AA60
	ldrb	r0, [r6, #0x1e]
	mov	r1, #0x0
	bl	sub_813ACE8
	ldr	r4, .L1038+0xc
	mov	r1, #0xa
	ldrsh	r0, [r6, r1]
	lsl	r0, r0, #0x3
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r0, .L1038+0x10
	strh	r5, [r0]
	bl	sub_813A42C
	mov	r3, #0x0
	mov	r4, #0x0
	mov	r2, #0xa
	ldrsh	r0, [r6, r2]
	add	r1, sp, #0x18
	mov	r8, r1
	cmp	r3, r0
	bge	.L1031	@cond_branch
	ldr	r5, .L1038+0x14
.L1033:
	lsl	r1, r4, #0x2
	ldr	r0, .L1038+0x18
	ldrh	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r1, r1, r5
	ldr	r0, [r1]
	ldr	r1, .L1038+0xc
	ldr	r2, [r1]
	lsl	r1, r4, #0x3
	add	r1, r1, r2
	str	r0, [r1]
	str	r4, [r1, #0x4]
	add	r1, r3, #0
	bl	display_text_and_get_width
	add	r3, r0, #0
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r2, #0xa
	ldrsh	r0, [r6, r2]
	cmp	r4, r0
	blt	.L1033	@cond_branch
.L1031:
	add	r0, r3, #0
	bl	convert_pixel_width_to_tile_width
	strh	r0, [r6, #0x10]
	mov	r1, #0xc
	ldrsh	r0, [r6, r1]
	mov	r2, #0x10
	ldrsh	r1, [r6, r2]
	add	r0, r0, r1
	cmp	r0, #0x1d
	ble	.L1035	@cond_branch
	mov	r0, #0x1d
	sub	r0, r0, r1
	cmp	r0, #0
	bge	.L1036	@cond_branch
	mov	r0, #0x0
.L1036:
	strh	r0, [r6, #0xc]
.L1035:
	ldrb	r2, [r6, #0xc]
	ldrb	r3, [r6, #0xe]
	ldrb	r0, [r6, #0x10]
	str	r0, [sp]
	ldrb	r0, [r6, #0x12]
	str	r0, [sp, #0x4]
	mov	r0, #0xf
	str	r0, [sp, #0x8]
	mov	r0, #0x64
	str	r0, [sp, #0xc]
	add	r0, sp, #0x10
	mov	r1, #0x0
	bl	CreateWindowTemplate
	ldr	r0, [sp, #0x10]		@ created by thumb_load_double_from_address
	ldr	r1, [sp, #0x14]		@ created by thumb_load_double_from_address
	str	r0, [sp, #0x18]
	str	r1, [sp, #0x1c]
	mov	r0, r8
	bl	AddWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x22]
	mov	r1, #0x0
	bl	SetStandardWindowBorderStyle
	ldr	r4, .L1038+0x1c
	ldrh	r0, [r6, #0xa]
	strh	r0, [r4, #0xc]
	ldrh	r0, [r6, #0x8]
	strh	r0, [r4, #0xe]
	ldrh	r0, [r6, #0x22]
	strb	r0, [r4, #0x10]
	add	r0, r7, #0
	bl	sub_813A694
	ldrh	r1, [r6, #0x16]
	ldrh	r2, [r6, #0x18]
	add	r0, r4, #0
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x24]
	mov	r0, #0x0
	bl	schedule_bg_copy_tilemap_to_vram
	ldr	r1, .L1038
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1038+0x20
	str	r1, [r0]
	add	sp, sp, #0x20
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1039:
	.align	2, 0
.L1038:
	.word	gTasks
	.word	gUnknown_0203AB68
	.word	gUnknown_0203AB6C
	.word	gUnknown_0203AB64
	.word	gUnknown_0203AB6A
	.word	gUnknown_085B2CF0
	.word	gSpecialVar_0x8004
	.word	gUnknown_030061D0
	.word	sub_813A4EC
.Lfe113:
	.size	 sub_813A2DC,.Lfe113-sub_813A2DC
	.align	2, 0
	.type	 sub_813A42C,function
	.thumb_func
sub_813A42C:
	ldr	r1, .L1041
	ldr	r0, .L1041+0x4
	ldr	r0, [r0]
	str	r0, [r1]
	ldr	r0, .L1041+0x8
	str	r0, [r1, #0x4]
	mov	r0, #0x0
	str	r0, [r1, #0x8]
	mov	r2, #0x0
	mov	r0, #0x1
	strh	r0, [r1, #0xc]
	strh	r0, [r1, #0xe]
	strb	r2, [r1, #0x10]
	strb	r2, [r1, #0x11]
	mov	r0, #0x8
	strb	r0, [r1, #0x12]
	strb	r2, [r1, #0x13]
	mov	r0, #0x21
	strb	r0, [r1, #0x14]
	mov	r0, #0x31
	strb	r0, [r1, #0x15]
	mov	r0, #0x0
	strb	r0, [r1, #0x16]
	mov	r0, #0x1
	strb	r0, [r1, #0x17]
	bx	lr
.L1042:
	.align	2, 0
.L1041:
	.word	gUnknown_030061D0
	.word	gUnknown_0203AB64
	.word	sub_813A46C
.Lfe114:
	.size	 sub_813A42C,.Lfe114-sub_813A42C
	.align	2, 0
	.type	 sub_813A46C,function
	.thumb_func
sub_813A46C:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L1045
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L1044	@cond_branch
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L1045+0x4
	add	r4, r4, r0
	ldrh	r0, [r4, #0x24]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, sp
	mov	r2, #0x0
	bl	ListMenuGetScrollAndRow
	ldr	r1, .L1045+0x8
	mov	r0, sp
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldrh	r0, [r4, #0x24]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, sp
	bl	ListMenuGetCurrentItemArrayId
	ldrh	r0, [r4, #0x1e]
	ldr	r5, .L1045+0xc
	ldrh	r1, [r5]
	bl	sub_813AC44
	ldrh	r0, [r4, #0x1e]
	mov	r1, sp
	ldrh	r1, [r1]
	bl	sub_813AA60
	ldrb	r0, [r4, #0x1e]
	mov	r1, sp
	ldrh	r1, [r1]
	bl	sub_813AD34
	mov	r0, sp
	ldrh	r0, [r0]
	strh	r0, [r5]
.L1044:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1046:
	.align	2, 0
.L1045:
	.word	sub_813A4EC
	.word	gTasks
	.word	gUnknown_0203AB68
	.word	gUnknown_0203AB6A
.Lfe115:
	.size	 sub_813A46C,.Lfe115-sub_813A46C
	.align	2, 0
	.type	 sub_813A4EC,function
	.thumb_func
sub_813A4EC:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L1058
	add	r6, r0, r1
	ldrh	r0, [r6, #0x24]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ListMenu_ProcessInput
	add	r4, r0, #0
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	beq	.L1050	@cond_branch
	add	r0, r0, #0x1
	cmp	r4, r0
	bne	.L1051	@cond_branch
	b	.L1048
.L1059:
	.align	2, 0
.L1058:
	.word	gTasks
.L1050:
	ldr	r1, .L1060
	mov	r0, #0x7f
	strh	r0, [r1]
	mov	r0, #0x5
	bl	PlaySE
	b	.L1057
.L1061:
	.align	2, 0
.L1060:
	.word	gSpecialVar_Result
.L1051:
	ldr	r0, .L1062
	strh	r4, [r0]
	mov	r0, #0x5
	bl	PlaySE
	mov	r1, #0x14
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	beq	.L1057	@cond_branch
	mov	r1, #0xa
	ldrsh	r0, [r6, r1]
	sub	r0, r0, #0x1
	cmp	r4, r0
	bne	.L1054	@cond_branch
.L1057:
	add	r0, r5, #0
	bl	sub_813A570
	b	.L1048
.L1063:
	.align	2, 0
.L1062:
	.word	gSpecialVar_Result
.L1054:
	add	r0, r5, #0
	bl	sub_813A738
	ldr	r0, .L1064
	str	r0, [r6]
	bl	EnableBothScriptContexts
.L1048:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1065:
	.align	2, 0
.L1064:
	.word	sub_813A600
.Lfe116:
	.size	 sub_813A4EC,.Lfe116-sub_813A4EC
	.align	2, 0
	.type	 sub_813A570,function
	.thumb_func
sub_813A570:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L1067
	add	r4, r4, r0
	ldrh	r0, [r4, #0x24]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, sp
	bl	ListMenuGetCurrentItemArrayId
	ldrh	r0, [r4, #0x1e]
	mov	r1, sp
	ldrh	r1, [r1]
	bl	sub_813AC44
	add	r0, r5, #0
	bl	sub_813A738
	ldrh	r0, [r4, #0x24]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	mov	r2, #0x0
	bl	DestroyListMenuTask
	ldr	r0, .L1067+0x4
	ldr	r0, [r0]
	bl	Free
	ldrh	r0, [r4, #0x22]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	bl	ClearStdWindowAndFrameToTransparent
	ldrh	r0, [r4, #0x22]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	ldrh	r0, [r4, #0x22]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
	bl	CopyWindowToVram
	ldrh	r0, [r4, #0x22]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	RemoveWindow
	add	r0, r5, #0
	bl	DestroyTask
	bl	EnableBothScriptContexts
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1068:
	.align	2, 0
.L1067:
	.word	gTasks
	.word	gUnknown_0203AB64
.Lfe117:
	.size	 sub_813A570,.Lfe117-sub_813A570
	.align	2, 0
	.type	 sub_813A600,function
	.thumb_func
sub_813A600:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1075
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x14
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x1
	beq	.L1070	@cond_branch
	cmp	r0, #0x2
	bne	.L1070	@cond_branch
	mov	r0, #0x1
	strh	r0, [r1, #0x14]
	ldr	r0, .L1075+0x4
	str	r0, [r1]
.L1070:
	pop	{r0}
	bx	r0
.L1076:
	.align	2, 0
.L1075:
	.word	gTasks
	.word	sub_813A664
.Lfe118:
	.size	 sub_813A600,.Lfe118-sub_813A600
	.align	2, 0
	.globl	sub_813A630
	.type	 sub_813A630,function
	.thumb_func
sub_813A630:
	push	{lr}
	ldr	r0, .L1080
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	bne	.L1078	@cond_branch
	bl	EnableBothScriptContexts
	b	.L1079
.L1081:
	.align	2, 0
.L1080:
	.word	sub_813A600
.L1078:
	ldr	r0, .L1082
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x14]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x14]
.L1079:
	pop	{r0}
	bx	r0
.L1083:
	.align	2, 0
.L1082:
	.word	gTasks
.Lfe119:
	.size	 sub_813A630,.Lfe119-sub_813A630
	.align	2, 0
	.type	 sub_813A664,function
	.thumb_func
sub_813A664:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	ScriptContext2_Enable
	add	r0, r4, #0
	bl	sub_813A694
	ldr	r1, .L1085
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1085+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1086:
	.align	2, 0
.L1085:
	.word	gTasks
	.word	sub_813A4EC
.Lfe120:
	.size	 sub_813A664,.Lfe120-sub_813A664
	.section .rodata
	.align	2, 0
	.type	 gUnknown_085B3030.372,object
	.size	 gUnknown_085B3030.372,16
gUnknown_085B3030.372:
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.short	0x0
	.short	0x0
	.short	0x7d0
	.short	0x64
	.byte	0x0
	.space	1
.text
	.align	2, 0
	.type	 sub_813A694,function
	.thumb_func
sub_813A694:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L1089
	add	r4, r1, r0
	mov	r1, sp
	ldr	r0, .L1089+0x4
	ldmia	r0!, {r2, r3, r5}
	stmia	r1!, {r2, r3, r5}
	ldr	r0, [r0]
	str	r0, [r1]
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	beq	.L1088	@cond_branch
	mov	r2, sp
	mov	r3, #0x10
	ldrsh	r1, [r4, r3]
	lsr	r0, r1, #0x1f
	add	r1, r1, r0
	asr	r1, r1, #0x1
	lsl	r1, r1, #0x3
	add	r1, r1, #0xc
	mov	r5, #0xc
	ldrsh	r0, [r4, r5]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	mov	r3, #0x0
	strb	r1, [r2, #0x1]
	mov	r1, sp
	mov	r0, #0x8
	strb	r0, [r1, #0x2]
	mov	r0, #0x10
	ldrsh	r1, [r4, r0]
	lsr	r0, r1, #0x1f
	add	r1, r1, r0
	asr	r1, r1, #0x1
	lsl	r1, r1, #0x3
	add	r1, r1, #0xc
	mov	r5, #0xc
	ldrsh	r0, [r4, r5]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	strb	r1, [r2, #0x4]
	mov	r1, sp
	mov	r2, #0x12
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x3
	add	r0, r0, #0xa
	strb	r0, [r1, #0x5]
	mov	r0, sp
	strh	r3, [r0, #0x6]
	mov	r2, sp
	ldrh	r0, [r4, #0xa]
	ldrh	r1, [r4, #0x8]
	sub	r0, r0, r1
	strh	r0, [r2, #0x8]
	ldr	r1, .L1089+0x8
	mov	r0, sp
	bl	AddScrollIndicatorArrowPair
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x20]
.L1088:
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1090:
	.align	2, 0
.L1089:
	.word	gTasks
	.word	gUnknown_085B3030.372
	.word	gUnknown_0203AB68
.Lfe121:
	.size	 sub_813A694,.Lfe121-sub_813A694
	.align	2, 0
	.type	 sub_813A738,function
	.thumb_func
sub_813A738:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L1093
	add	r2, r1, r0
	mov	r0, #0x8
	ldrsh	r1, [r2, r0]
	mov	r3, #0xa
	ldrsh	r0, [r2, r3]
	cmp	r1, r0
	beq	.L1092	@cond_branch
	ldrh	r0, [r2, #0x20]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	RemoveScrollIndicatorArrowPair
.L1092:
	pop	{r0}
	bx	r0
.L1094:
	.align	2, 0
.L1093:
	.word	gTasks
.Lfe122:
	.size	 sub_813A738,.Lfe122-sub_813A738
	.align	2, 0
	.globl	nullsub_55
	.type	 nullsub_55,function
	.thumb_func
nullsub_55:
	bx	lr
.Lfe123:
	.size	 nullsub_55,.Lfe123-nullsub_55
	.align	2, 0
	.globl	sub_813A76C
	.type	 sub_813A76C,function
	.thumb_func
sub_813A76C:
	push	{r4, r5, r6, lr}
	mov	r4, #0x0
	ldr	r6, .L1104
	ldr	r0, .L1104+0x4
	add	r5, r0, #0
.L1100:
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0
	bne	.L1101	@cond_branch
	sub	r0, r5, r4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x0
	bl	VarSet
	b	.L1099
.L1105:
	.align	2, 0
.L1104:
	.word	gLinkPlayers
	.word	0x401f
.L1101:
	sub	r0, r5, r4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x69
	bl	VarSet
.L1099:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x1
	bls	.L1100	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe124:
	.size	 sub_813A76C,.Lfe124-sub_813A76C
	.section .rodata
	.align	2, 0
	.type	 gUnknown_085B3040.385,object
gUnknown_085B3040.385:
	.word	BattleFrontier_Lounge5_Text_26468D
	.word	BattleFrontier_Lounge5_Text_2646E5
	.word	BattleFrontier_Lounge5_Text_264741
	.word	BattleFrontier_Lounge5_Text_2647A4
	.word	BattleFrontier_Lounge5_Text_2647FC
	.word	BattleFrontier_Lounge5_Text_264858
	.word	BattleFrontier_Lounge5_Text_2648BE
	.word	BattleFrontier_Lounge5_Text_264916
	.word	BattleFrontier_Lounge5_Text_264972
	.word	BattleFrontier_Lounge5_Text_2649D5
	.word	BattleFrontier_Lounge5_Text_264A3F
	.word	BattleFrontier_Lounge5_Text_264A9B
	.word	BattleFrontier_Lounge5_Text_264AF3
	.word	BattleFrontier_Lounge5_Text_264B5D
	.word	BattleFrontier_Lounge5_Text_2648BE
	.word	BattleFrontier_Lounge5_Text_264BC3
	.word	BattleFrontier_Lounge5_Text_264C36
	.word	BattleFrontier_Lounge5_Text_2648BE
	.word	BattleFrontier_Lounge5_Text_264C95
	.word	BattleFrontier_Lounge5_Text_264D01
	.word	BattleFrontier_Lounge5_Text_264D6B
	.word	BattleFrontier_Lounge5_Text_264DD7
	.word	BattleFrontier_Lounge5_Text_264E33
	.word	BattleFrontier_Lounge5_Text_264E8F
	.word	BattleFrontier_Lounge5_Text_2648BE
.text
	.align	2, 0
	.globl	sub_813A7B8
	.type	 sub_813A7B8,function
	.thumb_func
sub_813A7B8:
	push	{lr}
	ldr	r1, .L1108
	ldrh	r0, [r1]
	cmp	r0, #0x5
	bls	.L1107	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1]
.L1107:
	ldrh	r1, [r1]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1108+0x4
	add	r0, r0, r1
	bl	GetNature
	lsl	r0, r0, #0x18
	ldr	r1, .L1108+0x8
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	ShowFieldMessage
	pop	{r0}
	bx	r0
.L1109:
	.align	2, 0
.L1108:
	.word	gSpecialVar_0x8004
	.word	gPlayerParty
	.word	gUnknown_085B3040.385
.Lfe125:
	.size	 sub_813A7B8,.Lfe125-sub_813A7B8
	.align	2, 0
	.globl	UpdateFrontierGambler
	.type	 UpdateFrontierGambler,function
	.thumb_func
UpdateFrontierGambler:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldr	r0, .L1111
	bl	GetVarPointer
	add	r5, r0, #0
	ldrh	r0, [r5]
	add	r4, r4, r0
	strh	r4, [r5]
	ldrh	r0, [r5]
	mov	r1, #0xc
	bl	__umodsi3
	strh	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1112:
	.align	2, 0
.L1111:
	.word	0x4030
.Lfe126:
	.size	 UpdateFrontierGambler,.Lfe126-UpdateFrontierGambler
	.section .rodata
	.align	2, 0
	.type	 gUnknown_085B30A4.392,object
gUnknown_085B30A4.392:
	.word	BattleFrontier_Lounge3_Text_262261
	.word	BattleFrontier_Lounge3_Text_26230D
	.word	BattleFrontier_Lounge3_Text_2623B9
	.word	BattleFrontier_Lounge3_Text_262464
	.word	BattleFrontier_Lounge3_Text_26250E
	.word	BattleFrontier_Lounge3_Text_2625B8
	.word	BattleFrontier_Lounge3_Text_26266A
	.word	BattleFrontier_Lounge3_Text_26271C
	.word	BattleFrontier_Lounge3_Text_2627C9
	.word	BattleFrontier_Lounge3_Text_262876
	.word	BattleFrontier_Lounge3_Text_26291A
	.word	BattleFrontier_Lounge3_Text_2629BC
.text
	.align	2, 0
	.globl	sub_813A820
	.type	 sub_813A820,function
	.thumb_func
sub_813A820:
	push	{r4, lr}
	ldr	r0, .L1114
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldr	r1, .L1114+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	ShowFieldMessage
	ldr	r0, .L1114+0x8
	add	r1, r4, #0
	bl	VarSet
	pop	{r4}
	pop	{r0}
	bx	r0
.L1115:
	.align	2, 0
.L1114:
	.word	0x4030
	.word	gUnknown_085B30A4.392
	.word	0x4031
.Lfe127:
	.size	 sub_813A820,.Lfe127-sub_813A820
	.section .rodata
	.align	2, 0
	.type	 gUnknown_085B30D4.396,object
gUnknown_085B30D4.396:
	.word	BattleFrontier_Lounge3_Text_262C04
	.word	BattleFrontier_Lounge3_Text_262C90
	.word	BattleFrontier_Lounge3_Text_262D1C
	.word	BattleFrontier_Lounge3_Text_262DA7
	.word	BattleFrontier_Lounge3_Text_262E34
	.word	BattleFrontier_Lounge3_Text_262EC1
	.word	BattleFrontier_Lounge3_Text_262F56
	.word	BattleFrontier_Lounge3_Text_262FEB
	.word	BattleFrontier_Lounge3_Text_263078
	.word	BattleFrontier_Lounge3_Text_263105
	.word	BattleFrontier_Lounge3_Text_26318C
	.word	BattleFrontier_Lounge3_Text_263211
.text
	.align	2, 0
	.globl	sub_813A854
	.type	 sub_813A854,function
	.thumb_func
sub_813A854:
	push	{r4, lr}
	ldr	r4, .L1117
	ldr	r0, .L1117+0x4
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xe
	add	r0, r0, r4
	ldr	r0, [r0]
	bl	ShowFieldMessage
	pop	{r4}
	pop	{r0}
	bx	r0
.L1118:
	.align	2, 0
.L1117:
	.word	gUnknown_085B30D4.396
	.word	0x4031
.Lfe128:
	.size	 sub_813A854,.Lfe128-sub_813A854
	.section .rodata
	.align	1, 0
	.type	 gUnknown_085B3104.400,object
gUnknown_085B3104.400:
	.short	0x0
	.short	0x1
	.short	0x2
	.short	0x100
	.short	0x101
	.short	0x400
	.short	0x401
	.short	0x200
	.short	0x201
	.short	0x300
	.short	0x500
	.short	0x600
.text
	.align	2, 0
	.globl	sub_813A878
	.type	 sub_813A878,function
	.thumb_func
sub_813A878:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, .L1124
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldr	r0, .L1124+0x4
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, .L1124+0x8
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r4, .L1124+0xc
	add	r0, r4, #0
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L1120	@cond_branch
	ldr	r1, .L1124+0x10
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r0, r5, #0x8
	add	r0, r0, r7
	cmp	r1, r0
	bne	.L1120	@cond_branch
	mov	r0, r8
	cmp	r0, #0
	beq	.L1122	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	bl	VarSet
	b	.L1120
.L1125:
	.align	2, 0
.L1124:
	.word	0x40ce
	.word	0x4031
	.word	0x40cf
	.word	0x4033
	.word	gUnknown_085B3104.400
.L1122:
	add	r0, r4, #0
	mov	r1, #0x3
	bl	VarSet
.L1120:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe129:
	.size	 sub_813A878,.Lfe129-sub_813A878
	.align	2, 0
	.globl	sub_813A8FC
	.type	 sub_813A8FC,function
	.thumb_func
sub_813A8FC:
	push	{lr}
	add	sp, sp, #-0x2c
	ldr	r0, .L1127
	ldr	r0, [r0]
	ldr	r1, .L1127+0x4
	add	r0, r0, r1
	ldrh	r1, [r0]
	add	r0, sp, #0xc
	mov	r2, #0x1
	mov	r3, #0x4
	bl	ConvertIntToDecimalStringN
	ldr	r1, .L1127+0x8
	bl	StringCopy
	mov	r0, #0x1
	add	r1, sp, #0xc
	mov	r2, #0x30
	bl	GetStringRightAlignXOffset
	add	r3, r0, #0
	ldr	r0, .L1127+0xc
	ldrb	r0, [r0]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r1, #0x1
	str	r1, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	add	r2, sp, #0xc
	bl	AddTextPrinterParameterized
	add	sp, sp, #0x2c
	pop	{r0}
	bx	r0
.L1128:
	.align	2, 0
.L1127:
	.word	gSaveBlock2Ptr
	.word	0xeb8
	.word	gText_BP
	.word	gUnknown_0203AB6D
.Lfe130:
	.size	 sub_813A8FC,.Lfe130-sub_813A8FC
	.section .rodata
	.align	2, 0
	.type	 gUnknown_085B311C.407,object
	.size	 gUnknown_085B311C.407,8
gUnknown_085B311C.407:
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x6
	.byte	0x2
	.byte	0xf
	.short	0x8
.text
	.align	2, 0
	.globl	sub_813A958
	.type	 sub_813A958,function
	.thumb_func
sub_813A958:
	push	{r4, lr}
	ldr	r4, .L1130
	ldr	r0, .L1130+0x4
	bl	AddWindow
	strb	r0, [r4]
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	SetStandardWindowBorderStyle
	bl	sub_813A8FC
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	CopyWindowToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.L1131:
	.align	2, 0
.L1130:
	.word	gUnknown_0203AB6D
	.word	gUnknown_085B311C.407
.Lfe131:
	.size	 sub_813A958,.Lfe131-sub_813A958
	.align	2, 0
	.globl	sub_813A988
	.type	 sub_813A988,function
	.thumb_func
sub_813A988:
	push	{r4, lr}
	ldr	r4, .L1133
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	ClearStdWindowAndFrameToTransparent
	ldrb	r0, [r4]
	bl	RemoveWindow
	pop	{r4}
	pop	{r0}
	bx	r0
.L1134:
	.align	2, 0
.L1133:
	.word	gUnknown_0203AB6D
.Lfe132:
	.size	 sub_813A988,.Lfe132-sub_813A988
	.align	2, 0
	.globl	sub_813A9A4
	.type	 sub_813A9A4,function
	.thumb_func
sub_813A9A4:
	push	{lr}
	ldr	r0, .L1139
	ldr	r0, [r0]
	ldr	r2, .L1139+0x4
	add	r1, r0, r2
	ldr	r0, .L1139+0x8
	ldrh	r2, [r1]
	ldrh	r0, [r0]
	cmp	r2, r0
	bcs	.L1136	@cond_branch
	mov	r0, #0x0
	b	.L1138
.L1140:
	.align	2, 0
.L1139:
	.word	gSaveBlock2Ptr
	.word	0xeb8
	.word	gSpecialVar_0x8004
.L1136:
	sub	r0, r2, r0
.L1138:
	strh	r0, [r1]
	pop	{r0}
	bx	r0
.Lfe133:
	.size	 sub_813A9A4,.Lfe133-sub_813A9A4
	.align	2, 0
	.globl	sub_813A9D0
	.type	 sub_813A9D0,function
	.thumb_func
sub_813A9D0:
	push	{lr}
	ldr	r0, .L1144
	ldr	r0, [r0]
	ldr	r1, .L1144+0x4
	add	r2, r0, r1
	ldrh	r1, [r2]
	ldr	r0, .L1144+0x8
	ldrh	r0, [r0]
	add	r1, r1, r0
	ldr	r0, .L1144+0xc
	cmp	r1, r0
	ble	.L1142	@cond_branch
	strh	r0, [r2]
	b	.L1143
.L1145:
	.align	2, 0
.L1144:
	.word	gSaveBlock2Ptr
	.word	0xeb8
	.word	gSpecialVar_0x8004
	.word	0x270f
.L1142:
	strh	r1, [r2]
.L1143:
	pop	{r0}
	bx	r0
.Lfe134:
	.size	 sub_813A9D0,.Lfe134-sub_813A9D0
	.align	2, 0
	.globl	sub_813AA04
	.type	 sub_813AA04,function
	.thumb_func
sub_813AA04:
	ldr	r0, .L1147
	ldr	r0, [r0]
	ldr	r1, .L1147+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	bx	lr
.L1148:
	.align	2, 0
.L1147:
	.word	gSaveBlock2Ptr
	.word	0xeb8
.Lfe135:
	.size	 sub_813AA04,.Lfe135-sub_813AA04
	.section .rodata
	.align	2, 0
	.type	 gUnknown_085B3124.423,object
	.size	 gUnknown_085B3124.423,8
gUnknown_085B3124.423:
	.byte	0x0
	.byte	0x2
	.byte	0x9
	.byte	0x4
	.byte	0x4
	.byte	0xf
	.short	0x14
.text
	.align	2, 0
	.globl	sub_813AA18
	.type	 sub_813AA18,function
	.thumb_func
sub_813AA18:
	push	{r4, lr}
	ldr	r4, .L1150
	ldr	r0, .L1150+0x4
	bl	AddWindow
	strb	r0, [r4]
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	SetStandardWindowBorderStyle
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	CopyWindowToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.L1151:
	.align	2, 0
.L1150:
	.word	gUnknown_0203AB6E
	.word	gUnknown_085B3124.423
.Lfe136:
	.size	 sub_813AA18,.Lfe136-sub_813AA18
	.align	2, 0
	.globl	sub_813AA44
	.type	 sub_813AA44,function
	.thumb_func
sub_813AA44:
	push	{r4, lr}
	ldr	r4, .L1153
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	ClearStdWindowAndFrameToTransparent
	ldrb	r0, [r4]
	bl	RemoveWindow
	pop	{r4}
	pop	{r0}
	bx	r0
.L1154:
	.align	2, 0
.L1153:
	.word	gUnknown_0203AB6E
.Lfe137:
	.size	 sub_813AA44,.Lfe137-sub_813AA44
	.section .rodata
	.align	1, 0
	.type	 gUnknown_085B312C.430,object
gUnknown_085B312C.430:
	.short	0x4b
	.short	0x67
	.short	0x57
	.short	0x4f
	.short	0x54
	.short	0x55
	.short	0x56
	.short	0x50
	.short	0x51
	.short	0x52
	.short	0xffff
	.align	1, 0
	.type	 gUnknown_085B3142.431,object
gUnknown_085B3142.431:
	.short	0x71
	.short	0x6f
	.short	0x72
	.short	0x73
	.short	0x74
	.short	0xffff
	.align	1, 0
	.type	 gUnknown_085B314E.432,object
gUnknown_085B314E.432:
	.short	0x40
	.short	0x43
	.short	0x41
	.short	0x46
	.short	0x42
	.short	0x3f
	.short	0xffff
	.align	1, 0
	.type	 gUnknown_085B315C.433,object
gUnknown_085B315C.433:
	.short	0xc8
	.short	0xb4
	.short	0xb7
	.short	0xb9
	.short	0xb3
	.short	0xba
	.short	0xbb
	.short	0xc4
	.short	0xc6
	.short	0xffff
	.align	2, 0
	.type	 gUnknown_085B3170.434,object
gUnknown_085B3170.434:
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_2601AA
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_2601D0
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_260201
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_26022F
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_26025B
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_260287
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_2602B5
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_2602E0
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_26030F
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_26033E
	.word	gText_Exit
	.align	2, 0
	.type	 gUnknown_085B319C.435,object
gUnknown_085B319C.435:
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_26036C
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_26036C
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_26036C
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_26036C
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_26036C
	.word	gText_Exit
	.align	2, 0
	.type	 gUnknown_085B31B4.436,object
gUnknown_085B31B4.436:
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_260397
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_2603BE
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_2603E6
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_26040E
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_260436
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_26045C
	.word	gText_Exit
	.align	2, 0
	.type	 gUnknown_085B31D0.437,object
gUnknown_085B31D0.437:
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_26047A
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_2604AC
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_2604D8
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_26050F
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_260542
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_260575
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_2605A8
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_2605E2
	.word	BattleFrontier_BattlePointExchangeServiceCorner_Text_260613
	.word	gText_Exit
.text
	.align	2, 0
	.type	 sub_813AA60,function
	.thumb_func
sub_813AA60:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	lsr	r4, r0, #0x10
	ldr	r1, .L1170
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	cmp	r0, #0x3
	bls	.LCB8447
	b	.L1156	@long jump
.LCB8447:
	mov	r0, #0xd8
	str	r0, [sp]
	mov	r0, #0x20
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x11
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillWindowPixelRect
	cmp	r4, #0x4
	beq	.L1161	@cond_branch
	cmp	r4, #0x4
	bgt	.L1168	@cond_branch
	cmp	r4, #0x3
	beq	.L1158	@cond_branch
	b	.L1156
.L1171:
	.align	2, 0
.L1170:
	.word	-0x30000
.L1168:
	cmp	r4, #0x5
	beq	.L1164	@cond_branch
	cmp	r4, #0x6
	beq	.L1165	@cond_branch
	b	.L1156
.L1158:
	ldr	r1, .L1172
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	str	r4, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r3, #0x0
	bl	AddTextPrinterParameterized2
	ldr	r1, .L1172+0x4
	lsl	r0, r5, #0x1
	add	r1, r0, r1
	ldrh	r5, [r1]
	ldr	r0, .L1172+0x8
	cmp	r5, r0
	beq	.L1169	@cond_branch
	b	.L1162
.L1173:
	.align	2, 0
.L1172:
	.word	gUnknown_085B3170.434
	.word	gUnknown_085B312C.430
	.word	0xffff
.L1161:
	ldr	r1, .L1174
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r3, #0x0
	bl	AddTextPrinterParameterized2
	ldr	r1, .L1174+0x4
	lsl	r0, r5, #0x1
	add	r1, r0, r1
	ldrh	r5, [r1]
	ldr	r0, .L1174+0x8
	cmp	r5, r0
	bne	.L1162	@cond_branch
.L1169:
	ldrh	r0, [r1]
	bl	sub_813ABD4
	b	.L1156
.L1175:
	.align	2, 0
.L1174:
	.word	gUnknown_085B319C.435
	.word	gUnknown_085B3142.431
	.word	0xffff
.L1162:
	ldr	r4, .L1176
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r1, #0x21
	mov	r2, #0x58
	mov	r3, #0x0
	bl	AddDecorationIconObject
	ldr	r1, .L1176+0x4
	strb	r0, [r1]
	b	.L1156
.L1177:
	.align	2, 0
.L1176:
	.word	0x157c
	.word	gUnknown_0203AB6C
.L1164:
	ldr	r1, .L1178
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r3, #0x0
	bl	AddTextPrinterParameterized2
	ldr	r1, .L1178+0x4
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	bl	sub_813ABD4
	b	.L1156
.L1179:
	.align	2, 0
.L1178:
	.word	gUnknown_085B31B4.436
	.word	gUnknown_085B314E.432
.L1165:
	ldr	r1, .L1180
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r3, #0x0
	bl	AddTextPrinterParameterized2
	ldr	r1, .L1180+0x4
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	bl	sub_813ABD4
.L1156:
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1181:
	.align	2, 0
.L1180:
	.word	gUnknown_085B31D0.437
	.word	gUnknown_085B315C.433
.Lfe138:
	.size	 sub_813AA60,.Lfe138-sub_813AA60
	.align	2, 0
	.type	 sub_813ABD4,function
	.thumb_func
sub_813ABD4:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	ldr	r4, .L1184
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	add	r0, r4, #0
	add	r1, r4, #0
	add	r2, r5, #0
	bl	AddItemIconSprite
	ldr	r4, .L1184+0x4
	strb	r0, [r4]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x40
	beq	.L1183	@cond_branch
	ldr	r3, .L1184+0x8
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x5]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x24
	strh	r1, [r0, #0x20]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x5c
	strh	r1, [r0, #0x22]
.L1183:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1185:
	.align	2, 0
.L1184:
	.word	0x157c
	.word	gUnknown_0203AB6C
	.word	gSprites
.Lfe139:
	.size	 sub_813ABD4,.Lfe139-sub_813ABD4
	.align	2, 0
	.type	 sub_813AC44,function
	.thumb_func
sub_813AC44:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	ldr	r2, .L1192
	ldrb	r0, [r2]
	cmp	r0, #0x40
	beq	.L1187	@cond_branch
	cmp	r1, #0x6
	bgt	.L1188	@cond_branch
	cmp	r1, #0x3
	blt	.L1188	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1192+0x4
	add	r0, r0, r1
	bl	DestroySpriteAndFreeResources
.L1188:
	ldr	r1, .L1192
	mov	r0, #0x40
	strb	r0, [r1]
.L1187:
	pop	{r0}
	bx	r0
.L1193:
	.align	2, 0
.L1192:
	.word	gUnknown_0203AB6C
	.word	gSprites
.Lfe140:
	.size	 sub_813AC44,.Lfe140-sub_813AC44
	.section .rodata
	.align	1, 0
	.type	 gUnknown_085B31F8,object
gUnknown_085B31F8:
	.short	0x87
	.short	0x45
	.short	0x8a
	.short	0x5
	.short	0x19
	.short	0x22
	.short	0x9d
	.short	0x44
	.short	0x56
	.short	0xe
	.size	 gUnknown_085B31F8,20
	.align	1, 0
	.type	 gUnknown_085B320C,object
gUnknown_085B320C:
	.short	0x6f
	.short	0xad
	.short	0xbd
	.short	0x81
	.short	0xc4
	.short	0xcb
	.short	0xf4
	.short	0x8
	.short	0x9
	.short	0x7
	.size	 gUnknown_085B320C,20
.text
	.align	2, 0
	.globl	sub_813AC7C
	.type	 sub_813AC7C,function
	.thumb_func
sub_813AC7C:
	push	{lr}
	ldr	r0, .L1197
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L1195	@cond_branch
	ldr	r0, .L1197+0x4
	ldr	r2, .L1197+0x8
	ldr	r1, .L1197+0xc
	ldrh	r1, [r1]
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0xd
	mul	r1, r1, r2
	ldr	r2, .L1197+0x10
	add	r1, r1, r2
	bl	StringCopy
	b	.L1196
.L1198:
	.align	2, 0
.L1197:
	.word	gSpecialVar_0x8005
	.word	gStringVar1
	.word	gUnknown_085B320C
	.word	gSpecialVar_0x8004
	.word	gMoveNames
.L1195:
	ldr	r0, .L1199
	ldr	r2, .L1199+0x4
	ldr	r1, .L1199+0x8
	ldrh	r1, [r1]
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0xd
	mul	r1, r1, r2
	ldr	r2, .L1199+0xc
	add	r1, r1, r2
	bl	StringCopy
.L1196:
	pop	{r0}
	bx	r0
.L1200:
	.align	2, 0
.L1199:
	.word	gStringVar1
	.word	gUnknown_085B31F8
	.word	gSpecialVar_0x8004
	.word	gMoveNames
.Lfe141:
	.size	 sub_813AC7C,.Lfe141-sub_813AC7C
	.section .rodata
	.align	2, 0
	.type	 gUnknown_085B3220.450,object
	.size	 gUnknown_085B3220.450,8
gUnknown_085B3220.450:
	.byte	0x0
	.byte	0x1
	.byte	0x7
	.byte	0xc
	.byte	0x6
	.byte	0xf
	.short	0x1c
.text
	.align	2, 0
	.type	 sub_813ACE8,function
	.thumb_func
sub_813ACE8:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	sub	r0, r0, #0x9
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L1202	@cond_branch
	ldr	r0, .L1204
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L1203	@cond_branch
	ldr	r4, .L1204+0x4
	ldr	r0, .L1204+0x8
	bl	AddWindow
	strb	r0, [r4]
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	SetStandardWindowBorderStyle
.L1203:
	add	r0, r5, #0
	add	r1, r6, #0
	bl	sub_813AD34
.L1202:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1205:
	.align	2, 0
.L1204:
	.word	gSpecialVar_0x8006
	.word	gUnknown_0203AB5E
	.word	gUnknown_085B3220.450
.Lfe142:
	.size	 sub_813ACE8,.Lfe142-sub_813ACE8
	.section .rodata
	.align	2, 0
	.type	 gUnknown_085B3228.454,object
gUnknown_085B3228.454:
	.word	BattleFrontier_Lounge7_Text_265E30
	.word	BattleFrontier_Lounge7_Text_265E5B
	.word	BattleFrontier_Lounge7_Text_265E8A
	.word	BattleFrontier_Lounge7_Text_265EC0
	.word	BattleFrontier_Lounge7_Text_265EED
	.word	BattleFrontier_Lounge7_Text_265F1C
	.word	BattleFrontier_Lounge7_Text_265F47
	.word	BattleFrontier_Lounge7_Text_265F77
	.word	BattleFrontier_Lounge7_Text_265FAA
	.word	BattleFrontier_Lounge7_Text_265FDD
	.word	gText_Exit
	.align	2, 0
	.type	 gUnknown_085B3254.455,object
gUnknown_085B3254.455:
	.word	BattleFrontier_Lounge7_Text_26600A
	.word	BattleFrontier_Lounge7_Text_26603E
	.word	BattleFrontier_Lounge7_Text_266070
	.word	BattleFrontier_Lounge7_Text_2660A6
	.word	BattleFrontier_Lounge7_Text_2660D0
	.word	BattleFrontier_Lounge7_Text_2660FF
	.word	BattleFrontier_Lounge7_Text_26612D
	.word	BattleFrontier_Lounge7_Text_26615F
	.word	BattleFrontier_Lounge7_Text_266185
	.word	BattleFrontier_Lounge7_Text_2661B5
	.word	gText_Exit
.text
	.align	2, 0
	.type	 sub_813AD34,function
	.thumb_func
sub_813AD34:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	add	r7, r5, #0
	lsr	r6, r0, #0x18
	mov	r1, #0xf7
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L1207	@cond_branch
	ldr	r4, .L1210
	ldrb	r0, [r4]
	mov	r1, #0x60
	str	r1, [sp]
	mov	r1, #0x30
	str	r1, [sp, #0x4]
	mov	r1, #0x11
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillWindowPixelRect
	cmp	r6, #0xa
	bne	.L1208	@cond_branch
	ldrb	r0, [r4]
	ldr	r2, .L1210+0x4
	lsl	r1, r5, #0x2
	add	r1, r1, r2
	ldr	r2, [r1]
	mov	r1, #0x1
	str	r1, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
	b	.L1207
.L1211:
	.align	2, 0
.L1210:
	.word	gUnknown_0203AB5E
	.word	gUnknown_085B3254.455
.L1208:
	ldrb	r0, [r4]
	ldr	r2, .L1212
	lsl	r1, r7, #0x2
	add	r1, r1, r2
	ldr	r2, [r1]
	mov	r1, #0x1
	str	r1, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
.L1207:
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1213:
	.align	2, 0
.L1212:
	.word	gUnknown_085B3228.454
.Lfe143:
	.size	 sub_813AD34,.Lfe143-sub_813AD34
	.align	2, 0
	.globl	sub_813ADB8
	.type	 sub_813ADB8,function
	.thumb_func
sub_813ADB8:
	push	{r4, lr}
	ldr	r4, .L1215
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	ClearStdWindowAndFrameToTransparent
	ldrb	r0, [r4]
	bl	RemoveWindow
	pop	{r4}
	pop	{r0}
	bx	r0
.L1216:
	.align	2, 0
.L1215:
	.word	gUnknown_0203AB5E
.Lfe144:
	.size	 sub_813ADB8,.Lfe144-sub_813ADB8
	.align	2, 0
	.globl	sub_813ADD4
	.type	 sub_813ADD4,function
	.thumb_func
sub_813ADD4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x18
	ldr	r0, .L1224
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0xff
	beq	.L1218	@cond_branch
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L1224+0x4
	add	r6, r0, r1
	ldrh	r0, [r6, #0x24]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r4, sp
	add	r4, r4, #0x16
	add	r1, sp, #0x14
	add	r2, r4, #0
	bl	ListMenuGetScrollAndRow
	ldrh	r0, [r6, #0x22]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	SetStandardWindowBorderStyle
	mov	r5, #0x0
	mov	r9, r4
	ldr	r0, .L1224+0x8
	mov	r8, r0
	mov	r4, #0x0
.L1222:
	ldrh	r0, [r6, #0x22]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, sp, #0x14
	ldrh	r2, [r1]
	add	r2, r2, r5
	lsl	r2, r2, #0x2
	ldr	r1, .L1224+0xc
	ldrh	r1, [r1]
	lsl	r1, r1, #0x6
	add	r2, r2, r1
	add	r2, r2, r8
	ldr	r2, [r2]
	lsl	r1, r5, #0x1c
	lsr	r1, r1, #0x18
	str	r1, [sp]
	mov	r7, #0xff
	str	r7, [sp, #0x4]
	str	r4, [sp, #0x8]
	str	r4, [sp, #0xc]
	str	r4, [sp, #0x10]
	mov	r1, #0x1
	mov	r3, #0xa
	bl	AddTextPrinterParameterized5
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L1222	@cond_branch
	ldrh	r0, [r6, #0x22]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1224+0x10
	mov	r3, r9
	ldrh	r1, [r3]
	lsl	r1, r1, #0x1c
	lsr	r1, r1, #0x18
	str	r1, [sp]
	str	r7, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
	ldrh	r0, [r6, #0x22]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	PutWindowTilemap
	ldrh	r0, [r6, #0x22]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x3
	bl	CopyWindowToVram
.L1218:
	add	sp, sp, #0x18
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1225:
	.align	2, 0
.L1224:
	.word	sub_813A600
	.word	gTasks
	.word	gUnknown_085B2CF0
	.word	gSpecialVar_0x8004
	.word	gText_SelectorArrow
.Lfe145:
	.size	 sub_813ADD4,.Lfe145-sub_813ADD4
	.align	2, 0
	.globl	sub_813AEB4
	.type	 sub_813AEB4,function
	.thumb_func
sub_813AEB4:
	push	{r4, lr}
	mov	r1, #0x0
	ldr	r0, .L1243
	strh	r1, [r0]
	ldr	r0, .L1243+0x4
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldr	r0, .L1243+0x8
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r4, #0
	beq	.L1227	@cond_branch
	mov	r2, #0x0
	lsl	r1, r1, #0x1
	ldr	r3, .L1243+0xc
	ldr	r0, .L1243+0x10
	add	r0, r1, r0
	ldrh	r1, [r0]
.L1228:
	lsl	r0, r2, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	cmp	r0, r1
	beq	.L1241	@cond_branch
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x1d
	bls	.L1228	@cond_branch
	b	.L1234
.L1244:
	.align	2, 0
.L1243:
	.word	gSpecialVar_0x8005
	.word	0x400e
	.word	0x400d
	.word	gTutorMoves
	.word	gUnknown_085B320C
.L1241:
.L1242:
	ldr	r0, .L1245
	strh	r2, [r0]
	b	.L1234
.L1246:
	.align	2, 0
.L1245:
	.word	gSpecialVar_0x8005
.L1227:
	mov	r2, #0x0
	lsl	r1, r1, #0x1
	ldr	r3, .L1247
	ldr	r0, .L1247+0x4
	add	r0, r1, r0
	ldrh	r1, [r0]
.L1235:
	lsl	r0, r2, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	cmp	r0, r1
	beq	.L1242	@cond_branch
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x1d
	bls	.L1235	@cond_branch
.L1234:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1248:
	.align	2, 0
.L1247:
	.word	gTutorMoves
	.word	gUnknown_085B31F8
.Lfe146:
	.size	 sub_813AEB4,.Lfe146-sub_813AEB4
	.align	2, 0
	.globl	sub_813AF48
	.type	 sub_813AF48,function
	.thumb_func
sub_813AF48:
	push	{r4, r5, lr}
	ldr	r0, .L1251
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0xff
	beq	.L1250	@cond_branch
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L1251+0x4
	add	r4, r4, r0
	ldrh	r0, [r4, #0x24]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	mov	r2, #0x0
	bl	DestroyListMenuTask
	ldr	r0, .L1251+0x8
	ldr	r0, [r0]
	bl	Free
	ldrh	r0, [r4, #0x22]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	bl	ClearStdWindowAndFrameToTransparent
	ldrh	r0, [r4, #0x22]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	ldrh	r0, [r4, #0x22]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ClearWindowTilemap
	ldrh	r0, [r4, #0x22]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
	bl	CopyWindowToVram
	ldrh	r0, [r4, #0x22]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	RemoveWindow
	add	r0, r5, #0
	bl	DestroyTask
.L1250:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1252:
	.align	2, 0
.L1251:
	.word	sub_813A600
	.word	gTasks
	.word	gUnknown_0203AB64
.Lfe147:
	.size	 sub_813AF48,.Lfe147-sub_813AF48
	.align	2, 0
	.globl	DoDeoxysRockInteraction
	.type	 DoDeoxysRockInteraction,function
	.thumb_func
DoDeoxysRockInteraction:
	push	{lr}
	ldr	r0, .L1254
	mov	r1, #0x8
	bl	CreateTask
	pop	{r0}
	bx	r0
.L1255:
	.align	2, 0
.L1254:
	.word	Task_DeoxysRockInteraction
.Lfe148:
	.size	 DoDeoxysRockInteraction,.Lfe148-DoDeoxysRockInteraction
	.section .rodata
	.align	1, 0
	.type	 sDeoxysRockPalettes,object
sDeoxysRockPalettes:
	.short	0x530e
	.short	0x5ad6
	.short	0x4a52
	.short	0x316b
	.short	0x24e7
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x7c1f
	.short	0x6f7b
	.short	0x0
	.short	0x530e
	.short	0x56d6
	.short	0x4633
	.short	0x2d4c
	.short	0x20c7
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x530e
	.short	0x56d7
	.short	0x4214
	.short	0x292d
	.short	0x1ca8
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x530e
	.short	0x56d8
	.short	0x3df5
	.short	0x250f
	.short	0x18a9
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x530e
	.short	0x52f9
	.short	0x39d7
	.short	0x2110
	.short	0x148a
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x530e
	.short	0x52fa
	.short	0x39d8
	.short	0x20f2
	.short	0x148b
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x530e
	.short	0x52fb
	.short	0x35b9
	.short	0x1cd3
	.short	0x106c
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x530e
	.short	0x4f1c
	.short	0x319b
	.short	0x18d4
	.short	0xc4d
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x530e
	.short	0x4f1d
	.short	0x2d7c
	.short	0x14b6
	.short	0x84e
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x530e
	.short	0x4f1e
	.short	0x295d
	.short	0x1097
	.short	0x42f
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x530e
	.short	0x4f3f
	.short	0x295f
	.short	0x1099
	.short	0x430
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 sDeoxysRockPalettes,352
	.type	 sDeoxysRockCoords,object
sDeoxysRockCoords:
	.byte	0xf
	.byte	0xc
	.byte	0xb
	.byte	0xe
	.byte	0xf
	.byte	0x8
	.byte	0x13
	.byte	0xe
	.byte	0xc
	.byte	0xb
	.byte	0x12
	.byte	0xb
	.byte	0xf
	.byte	0xe
	.byte	0xb
	.byte	0xe
	.byte	0x13
	.byte	0xe
	.byte	0xf
	.byte	0xf
	.byte	0xf
	.byte	0xa
	.size	 sDeoxysRockCoords,22
	.type	 sStoneMaxStepCounts.474,object
sStoneMaxStepCounts.474:
	.byte	0x4
	.byte	0x8
	.byte	0x8
	.byte	0x8
	.byte	0x4
	.byte	0x4
	.byte	0x4
	.byte	0x6
	.byte	0x3
	.byte	0x3
.text
	.align	2, 0
	.type	 Task_DeoxysRockInteraction,function
	.thumb_func
Task_DeoxysRockInteraction:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L1265
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1257	@cond_branch
	ldr	r1, .L1265+0x4
	mov	r0, #0x3
	b	.L1263
.L1266:
	.align	2, 0
.L1265:
	.word	0x8d4
	.word	gSpecialVar_Result
.L1257:
	ldr	r0, .L1267
	mov	r8, r0
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r4, .L1267+0x4
	add	r0, r4, #0
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x0
	bl	VarSet
	cmp	r5, #0
	beq	.L1259	@cond_branch
	ldr	r0, .L1267+0x8
	sub	r1, r5, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, r6
	bcs	.L1259	@cond_branch
	mov	r0, #0x0
	bl	ChangeDeoxysRockLevel
	mov	r0, r8
	mov	r1, #0x0
	bl	VarSet
	ldr	r1, .L1267+0xc
	mov	r0, #0x0
	strh	r0, [r1]
	b	.L1264
.L1268:
	.align	2, 0
.L1267:
	.word	0x4035
	.word	0x4034
	.word	sStoneMaxStepCounts.474
	.word	gSpecialVar_Result
.L1259:
	cmp	r5, #0xa
	bne	.L1261	@cond_branch
	ldr	r0, .L1269
	bl	FlagSet
	ldr	r1, .L1269+0x4
	mov	r0, #0x2
.L1263:
	strh	r0, [r1]
	bl	EnableBothScriptContexts
.L1264:
	add	r0, r7, #0
	bl	DestroyTask
	b	.L1258
.L1270:
	.align	2, 0
.L1269:
	.word	0x8d4
	.word	gSpecialVar_Result
.L1261:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	ChangeDeoxysRockLevel
	ldr	r0, .L1271
	add	r1, r5, #0
	bl	VarSet
	ldr	r1, .L1271+0x4
	mov	r0, #0x1
	strh	r0, [r1]
	add	r0, r7, #0
	bl	DestroyTask
.L1258:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1272:
	.align	2, 0
.L1271:
	.word	0x4035
	.word	gSpecialVar_Result
.Lfe149:
	.size	 Task_DeoxysRockInteraction,.Lfe149-Task_DeoxysRockInteraction
	.align	2, 0
	.type	 ChangeDeoxysRockLevel,function
	.thumb_func
ChangeDeoxysRockLevel:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x5
	ldr	r1, .L1279
	add	r0, r0, r1
	mov	r1, #0xd0
	lsl	r1, r1, #0x1
	mov	r2, #0x8
	bl	LoadPalette
	ldr	r0, .L1279+0x4
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x5]
	ldrb	r2, [r0, #0x4]
	mov	r0, #0x1
	mov	r3, sp
	bl	TryGetEventObjectIdByLocalIdAndMap
	cmp	r4, #0
	bne	.L1274	@cond_branch
	mov	r0, #0xc4
	bl	PlaySE
	b	.L1275
.L1280:
	.align	2, 0
.L1279:
	.word	sDeoxysRockPalettes
	.word	gSaveBlock1Ptr
.L1274:
	mov	r0, #0x82
	lsl	r0, r0, #0x1
	bl	PlaySE
.L1275:
	ldr	r0, .L1281
	mov	r1, #0x8
	bl	CreateTask
	ldr	r3, .L1281+0x4
	mov	r0, #0x1
	str	r0, [r3]
	mov	r0, #0x3a
	str	r0, [r3, #0x4]
	mov	r0, #0x1a
	str	r0, [r3, #0x8]
	ldr	r0, .L1281+0x8
	lsl	r2, r4, #0x1
	add	r1, r2, r0
	ldrb	r1, [r1]
	str	r1, [r3, #0xc]
	add	r0, r0, #0x1
	add	r0, r2, r0
	ldrb	r0, [r0]
	str	r0, [r3, #0x10]
	add	r5, r2, #0
	cmp	r4, #0
	bne	.L1276	@cond_branch
	mov	r0, #0x3c
	b	.L1278
.L1282:
	.align	2, 0
.L1281:
	.word	WaitForDeoxysRockMovement
	.word	gFieldEffectArguments
	.word	sDeoxysRockCoords
.L1276:
	mov	r0, #0x5
.L1278:
	str	r0, [r3, #0x14]
	mov	r0, #0x42
	bl	FieldEffectStart
	ldr	r0, .L1283
	add	r1, r5, r0
	ldrb	r1, [r1]
	add	r0, r0, #0x1
	add	r0, r5, r0
	ldrb	r2, [r0]
	mov	r0, #0x1
	bl	Overworld_SetEventObjTemplateCoords
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1284:
	.align	2, 0
.L1283:
	.word	sDeoxysRockCoords
.Lfe150:
	.size	 ChangeDeoxysRockLevel,.Lfe150-ChangeDeoxysRockLevel
	.align	2, 0
	.type	 WaitForDeoxysRockMovement,function
	.thumb_func
WaitForDeoxysRockMovement:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x42
	bl	FieldEffectActiveListContains
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1286	@cond_branch
	bl	EnableBothScriptContexts
	add	r0, r4, #0
	bl	DestroyTask
.L1286:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe151:
	.size	 WaitForDeoxysRockMovement,.Lfe151-WaitForDeoxysRockMovement
	.align	2, 0
	.globl	IncrementBirthIslandRockStepCount
	.type	 IncrementBirthIslandRockStepCount,function
	.thumb_func
IncrementBirthIslandRockStepCount:
	push	{r4, lr}
	ldr	r4, .L1291
	add	r0, r4, #0
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r0, .L1291+0x4
	ldr	r0, [r0]
	ldrh	r1, [r0, #0x4]
	ldr	r0, .L1291+0x8
	cmp	r1, r0
	bne	.L1288	@cond_branch
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x63
	bls	.L1289	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	VarSet
	b	.L1288
.L1292:
	.align	2, 0
.L1291:
	.word	0x4034
	.word	gSaveBlock1Ptr
	.word	0x3a1a
.L1289:
	add	r0, r4, #0
	add	r1, r2, #0
	bl	VarSet
.L1288:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe152:
	.size	 IncrementBirthIslandRockStepCount,.Lfe152-IncrementBirthIslandRockStepCount
	.align	2, 0
	.globl	sub_813B1D0
	.type	 sub_813B1D0,function
	.thumb_func
sub_813B1D0:
	push	{lr}
	ldr	r0, .L1294
	bl	VarGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x13
	ldr	r1, .L1294+0x4
	add	r0, r0, r1
	mov	r1, #0xd0
	lsl	r1, r1, #0x1
	mov	r2, #0x8
	bl	LoadPalette
	mov	r0, #0x80
	lsl	r0, r0, #0x13
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	pop	{r0}
	bx	r0
.L1295:
	.align	2, 0
.L1294:
	.word	0x4035
	.word	sDeoxysRockPalettes
.Lfe153:
	.size	 sub_813B1D0,.Lfe153-sub_813B1D0
	.align	2, 0
	.globl	set_unknown_box_id
	.type	 set_unknown_box_id,function
	.thumb_func
set_unknown_box_id:
	ldr	r1, .L1297
	strb	r0, [r1]
	bx	lr
.L1298:
	.align	2, 0
.L1297:
	.word	gUnknown_0203AB6F
.Lfe154:
	.size	 set_unknown_box_id,.Lfe154-set_unknown_box_id
	.align	2, 0
	.globl	get_unknown_box_id
	.type	 get_unknown_box_id,function
	.thumb_func
get_unknown_box_id:
	ldr	r0, .L1300
	ldrb	r0, [r0]
	bx	lr
.L1301:
	.align	2, 0
.L1300:
	.word	gUnknown_0203AB6F
.Lfe155:
	.size	 get_unknown_box_id,.Lfe155-get_unknown_box_id
	.align	2, 0
	.globl	sub_813B21C
	.type	 sub_813B21C,function
	.thumb_func
sub_813B21C:
	push	{r4, r5, lr}
	ldr	r5, .L1306
	add	r0, r5, #0
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1303	@cond_branch
	bl	StorageGetCurrentBox
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L1306+0x4
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r4, r0
	beq	.L1303	@cond_branch
	add	r0, r5, #0
	bl	FlagSet
	mov	r0, #0x1
	b	.L1305
.L1307:
	.align	2, 0
.L1306:
	.word	0x8d7
	.word	0x4036
.L1303:
	mov	r0, #0x0
.L1305:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe156:
	.size	 sub_813B21C,.Lfe156-sub_813B21C
	.align	2, 0
	.globl	sub_813B260
	.type	 sub_813B260,function
	.thumb_func
sub_813B260:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L1323
	bl	VarGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	set_unknown_box_id
	bl	StorageGetCurrentBox
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L1309:
	mov	r5, #0x0
	lsl	r6, r4, #0x18
	lsl	r7, r4, #0x10
.L1315:
	lsl	r1, r5, #0x18
	lsr	r1, r1, #0x18
	lsr	r0, r6, #0x18
	bl	GetBoxedMonPtr
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetBoxMonData
	cmp	r0, #0
	bne	.L1314	@cond_branch
	bl	get_unknown_box_id
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r4
	beq	.L1317	@cond_branch
	ldr	r0, .L1323+0x4
	bl	FlagClear
.L1317:
	ldr	r0, .L1323
	lsr	r1, r7, #0x10
	bl	VarSet
	bl	sub_813B21C
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L1322
.L1324:
	.align	2, 0
.L1323:
	.word	0x4036
	.word	0x8d7
.L1314:
	add	r5, r5, #0x1
	cmp	r5, #0x1d
	ble	.L1315	@cond_branch
	add	r4, r4, #0x1
	cmp	r4, #0xe
	bne	.L1311	@cond_branch
	mov	r4, #0x0
.L1311:
	bl	StorageGetCurrentBox
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	bne	.L1309	@cond_branch
	mov	r0, #0x0
.L1322:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe157:
	.size	 sub_813B260,.Lfe157-sub_813B260
	.align	2, 0
	.globl	CreateUnusualWeatherEvent
	.type	 CreateUnusualWeatherEvent,function
	.thumb_func
CreateUnusualWeatherEvent:
	push	{r4, lr}
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L1333
	mov	r1, #0x0
	bl	VarSet
	mov	r0, #0xdf
	lsl	r0, r0, #0x1
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L1332	@cond_branch
	ldr	r0, .L1333+0x4
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1328	@cond_branch
	ldr	r0, .L1333+0x8
	mov	r1, #0x7
	and	r4, r4, r1
	add	r1, r4, #0
	add	r1, r1, #0x9
	bl	VarSet
	b	.L1327
.L1334:
	.align	2, 0
.L1333:
	.word	0x4038
	.word	0x1bf
	.word	0x4037
.L1328:
	mov	r0, #0x1
	and	r4, r4, r0
	cmp	r4, #0
	bne	.L1330	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L1332:
	ldr	r0, .L1335
	mov	r1, #0x7
	and	r4, r4, r1
	add	r1, r4, #0x1
	bl	VarSet
	b	.L1327
.L1336:
	.align	2, 0
.L1335:
	.word	0x4037
.L1330:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L1337
	mov	r1, #0x7
	and	r4, r4, r1
	add	r1, r4, #0
	add	r1, r1, #0x9
	bl	VarSet
.L1327:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1338:
	.align	2, 0
.L1337:
	.word	0x4037
.Lfe158:
	.size	 CreateUnusualWeatherEvent,.Lfe158-CreateUnusualWeatherEvent
	.section .rodata
	.type	 sUnusualWeatherMapNumbers.505,object
sUnusualWeatherMapNumbers.505:
	.byte	0x1d
	.byte	0x1d
	.byte	0x1e
	.byte	0x1e
	.byte	0x1f
	.byte	0x1f
	.byte	0x21
	.byte	0x21
	.byte	0x14
	.byte	0x14
	.byte	0x28
	.byte	0x28
	.byte	0x2a
	.byte	0x2a
	.byte	0x2c
	.byte	0x2c
.text
	.align	2, 0
	.globl	GetUnusualWeatherMapNameAndType
	.type	 GetUnusualWeatherMapNameAndType,function
	.thumb_func
GetUnusualWeatherMapNameAndType:
	push	{r4, lr}
	ldr	r0, .L1343
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldr	r0, .L1343+0x4
	ldr	r2, .L1343+0x8
	sub	r1, r4, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	mov	r2, #0x0
	bl	GetMapName
	cmp	r4, #0x8
	bls	.L1340	@cond_branch
	mov	r0, #0x1
	b	.L1342
.L1344:
	.align	2, 0
.L1343:
	.word	0x4037
	.word	gStringVar1
	.word	sUnusualWeatherMapNumbers.505
.L1340:
	mov	r0, #0x0
.L1342:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe159:
	.size	 GetUnusualWeatherMapNameAndType,.Lfe159-GetUnusualWeatherMapNameAndType
	.section .rodata
	.type	 sUnusualWeatherMapNumbers_2.509,object
sUnusualWeatherMapNumbers_2.509:
	.byte	0x1d
	.byte	0x1d
	.byte	0x1e
	.byte	0x1e
	.byte	0x1f
	.byte	0x1f
	.byte	0x21
	.byte	0x21
	.byte	0x14
	.byte	0x14
	.byte	0x28
	.byte	0x28
	.byte	0x2a
	.byte	0x2a
	.byte	0x2c
	.byte	0x2c
.text
	.align	2, 0
	.globl	UnusualWeatherHasExpired
	.type	 UnusualWeatherHasExpired,function
	.thumb_func
UnusualWeatherHasExpired:
	push	{r4, r5, r6, lr}
	ldr	r5, .L1371
	add	r0, r5, #0
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L1371+0x4
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0
	beq	.L1369	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L1371+0x8
	cmp	r4, r0
	bls	.L1347	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x0
	bl	VarSet
	ldr	r0, .L1371+0xc
	ldr	r1, [r0]
	mov	r0, #0x4
	ldrsb	r0, [r1, r0]
	cmp	r0, #0x18
	bne	.L1348	@cond_branch
	mov	r0, #0x5
	ldrsb	r0, [r1, r0]
	cmp	r0, #0x69
	bgt	.L1348	@cond_branch
	cmp	r0, #0x65
	blt	.L1348	@cond_branch
	ldr	r0, .L1371+0x10
	mov	r1, #0x1
	b	.L1370
.L1372:
	.align	2, 0
.L1371:
	.word	0x4038
	.word	0x4037
	.word	0x3e7
	.word	gSaveBlock1Ptr
	.word	0x4039
.L1348:
	ldr	r0, .L1373
	ldr	r2, [r0]
	mov	r1, #0x4
	ldrsb	r1, [r2, r1]
	add	r3, r0, #0
	cmp	r1, #0
	bne	.L1357	@cond_branch
	mov	r0, #0x5
	ldrsb	r0, [r2, r0]
	cmp	r0, #0x34
	beq	.L1362	@cond_branch
	cmp	r0, #0x34
	blt	.L1357	@cond_branch
	cmp	r0, #0x38
	bgt	.L1357	@cond_branch
	cmp	r0, #0x36
	blt	.L1357	@cond_branch
.L1362:
	ldr	r0, .L1373+0x4
	mov	r1, #0x1
	b	.L1370
.L1374:
	.align	2, 0
.L1373:
	.word	gSaveBlock1Ptr
	.word	0x4039
.L1357:
	ldr	r3, [r3]
	mov	r2, #0x5
	ldrsb	r2, [r3, r2]
	ldr	r1, .L1375
	sub	r0, r6, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r2, r0
	bne	.L1365	@cond_branch
	mov	r0, #0x4
	ldrsb	r0, [r3, r0]
	cmp	r0, #0
	bne	.L1365	@cond_branch
	mov	r0, #0x1
	b	.L1368
.L1376:
	.align	2, 0
.L1375:
	.word	sUnusualWeatherMapNumbers_2.509
.L1365:
	ldr	r0, .L1377
	mov	r1, #0x0
	b	.L1370
.L1378:
	.align	2, 0
.L1377:
	.word	0x4037
.L1347:
	add	r0, r5, #0
	add	r1, r4, #0
.L1370:
	bl	VarSet
.L1369:
	mov	r0, #0x0
.L1368:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe160:
	.size	 UnusualWeatherHasExpired,.Lfe160-UnusualWeatherHasExpired
	.align	2, 0
	.globl	Unused_SetWeatherSunny
	.type	 Unused_SetWeatherSunny,function
	.thumb_func
Unused_SetWeatherSunny:
	push	{lr}
	mov	r0, #0x2
	bl	SetCurrentAndNextWeather
	pop	{r0}
	bx	r0
.Lfe161:
	.size	 Unused_SetWeatherSunny,.Lfe161-Unused_SetWeatherSunny
	.section .rodata
	.type	 gUnknown_085B3420.516,object
gUnknown_085B3420.516:
	.byte	0x2
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0x4
	.byte	0x1
	.byte	0x5
	.byte	0x0
	.byte	0x1
	.byte	0x6
	.byte	0x3
	.byte	0x1
	.byte	0x8
	.byte	0x6
	.byte	0x1
	.byte	0x9
	.byte	0xd
	.byte	0x1
	.byte	0xa
	.byte	0x7
	.byte	0x1
	.byte	0xb
	.byte	0x7
	.byte	0x1
	.byte	0xc
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x5
	.byte	0x1
	.byte	0xf
	.byte	0x4
	.byte	0x1
	.byte	0x1a
	.byte	0x37
	.byte	0x1
.text
	.align	2, 0
	.globl	sub_813B490
	.type	 sub_813B490,function
	.thumb_func
sub_813B490:
	push	{r4, r5, r6, r7, lr}
	mov	r3, #0x0
	ldr	r0, .L1389
	ldr	r4, [r0]
	mov	r6, #0x4
	ldrsb	r6, [r4, r6]
	ldr	r5, .L1389+0x4
	add	r0, r5, #0x2
	mov	ip, r0
	add	r7, r5, #0x1
.L1384:
	lsl	r0, r3, #0x1
	add	r2, r0, r3
	add	r0, r2, r5
	ldrb	r0, [r0]
	cmp	r6, r0
	bne	.L1383	@cond_branch
	mov	r1, #0x5
	ldrsb	r1, [r4, r1]
	add	r0, r2, r7
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L1383	@cond_branch
	mov	r1, ip
	add	r0, r2, r1
	ldrb	r0, [r0]
	b	.L1388
.L1390:
	.align	2, 0
.L1389:
	.word	gSaveBlock1Ptr
	.word	gUnknown_085B3420.516
.L1383:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0xb
	bls	.L1384	@cond_branch
	mov	r0, #0x1
.L1388:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe162:
	.size	 sub_813B490,.Lfe162-sub_813B490
	.align	2, 0
	.globl	sub_813B4E0
	.type	 sub_813B4E0,function
	.thumb_func
sub_813B4E0:
	push	{lr}
	ldr	r0, .L1395
	ldrh	r0, [r0]
	bl	GetRematchIdxByTrainerIdx
	cmp	r0, #0
	blt	.L1392	@cond_branch
	mov	r1, #0xae
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1392	@cond_branch
	mov	r0, #0x1
	b	.L1394
.L1396:
	.align	2, 0
.L1395:
	.word	gSpecialVar_0x8004
.L1392:
	mov	r0, #0x0
.L1394:
	pop	{r1}
	bx	r1
.Lfe163:
	.size	 sub_813B4E0,.Lfe163-sub_813B4E0
	.align	2, 0
	.globl	sub_813B514
	.type	 sub_813B514,function
	.thumb_func
sub_813B514:
	push	{lr}
	ldr	r0, .L1400
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L1398	@cond_branch
	mov	r0, #0x1
	b	.L1399
.L1401:
	.align	2, 0
.L1400:
	.word	0x403f
.L1398:
	mov	r0, #0x0
.L1399:
	pop	{r1}
	bx	r1
.Lfe164:
	.size	 sub_813B514,.Lfe164-sub_813B514
	.align	2, 0
	.globl	sub_813B534
	.type	 sub_813B534,function
	.thumb_func
sub_813B534:
	push	{lr}
	ldr	r2, .L1404
	ldr	r1, .L1404+0x4
	ldr	r0, [r1]
	str	r0, [r2]
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r0, .L1404+0x8
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1403	@cond_branch
	ldr	r0, .L1404+0xc
	mov	r1, #0x5
	bl	CreateTask
.L1403:
	pop	{r0}
	bx	r0
.L1405:
	.align	2, 0
.L1404:
	.word	gUnknown_0203AB70
	.word	gBattleTypeFlags
	.word	gReceivedRemoteLinkPlayers
	.word	sub_80B3AF8
.Lfe165:
	.size	 sub_813B534,.Lfe165-sub_813B534
	.align	2, 0
	.globl	sub_813B568
	.type	 sub_813B568,function
	.thumb_func
sub_813B568:
	push	{lr}
	ldr	r0, .L1407
	mov	r1, #0x5
	bl	CreateTask
	pop	{r0}
	bx	r0
.L1408:
	.align	2, 0
.L1407:
	.word	sub_813B57C
.Lfe166:
	.size	 sub_813B568,.Lfe166-sub_813B568
	.align	2, 0
	.type	 sub_813B57C,function
	.thumb_func
sub_813B57C:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L1452
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x9
	bls	.LCB10469
	b	.L1410	@long jump
.LCB10469:
	lsl	r0, r0, #0x2
	ldr	r1, .L1452+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1453:
	.align	2, 0
.L1452:
	.word	gTasks
	.word	.L1447
	.align	2, 0
	.align	2, 0
.L1447:
	.word	.L1411
	.word	.L1413
	.word	.L1417
	.word	.L1426
	.word	.L1430
	.word	.L1434
	.word	.L1439
	.word	.L1441
	.word	.L1443
	.word	.L1445
.L1411:
	ldr	r0, .L1454
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB10496
	b	.L1410	@long jump
.LCB10496:
	b	.L1449
.L1455:
	.align	2, 0
.L1454:
	.word	sub_80B3AF8
.L1413:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.LCB10512
	b	.L1410	@long jump
.LCB10512:
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB10519
	b	.L1449	@long jump
.LCB10519:
	bl	bitmask_all_link_players_but_self
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1456
	mov	r2, #0x2
	bl	SendBlock
	b	.L1450
.L1457:
	.align	2, 0
.L1456:
	.word	gSpecialVar_0x8004
.L1417:
	bl	GetBlockReceivedStatus
	mov	r1, #0x2
	and	r1, r1, r0
	cmp	r1, #0
	bne	.LCB10547
	b	.L1410	@long jump
.LCB10547:
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB10554
	b	.L1449	@long jump
.LCB10554:
	ldr	r5, .L1458
	ldr	r0, .L1458+0x4
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r5]
	mov	r0, #0x1
	bl	ResetBlockReceivedFlag
	ldr	r0, .L1458+0x8
	ldrh	r0, [r0]
	cmp	r0, #0x1
	bne	.L1420	@cond_branch
	ldrh	r1, [r5]
	cmp	r1, #0x1
	bne	.L1420	@cond_branch
	ldr	r0, .L1458+0xc
	strh	r1, [r0]
	b	.L1449
.L1459:
	.align	2, 0
.L1458:
	.word	gSpecialVar_0x8005
	.word	gBlockRecvBuffer
	.word	gSpecialVar_0x8004
	.word	gSpecialVar_Result
.L1420:
	ldr	r0, .L1460
	ldrh	r1, [r0]
	add	r2, r0, #0
	cmp	r1, #0
	bne	.L1422	@cond_branch
	ldr	r0, .L1460+0x4
	ldrh	r0, [r0]
	cmp	r0, #0x1
	bne	.L1422	@cond_branch
	ldr	r1, .L1460+0x8
	mov	r0, #0x2
	b	.L1451
.L1461:
	.align	2, 0
.L1460:
	.word	gSpecialVar_0x8004
	.word	gSpecialVar_0x8005
	.word	gSpecialVar_Result
.L1422:
	ldrh	r0, [r2]
	cmp	r0, #0x1
	bne	.L1424	@cond_branch
	ldr	r0, .L1462
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L1424	@cond_branch
	ldr	r1, .L1462+0x4
	mov	r0, #0x3
	b	.L1451
.L1463:
	.align	2, 0
.L1462:
	.word	gSpecialVar_0x8005
	.word	gSpecialVar_Result
.L1424:
	ldr	r1, .L1464
	mov	r0, #0x0
.L1451:
	strh	r0, [r1]
	b	.L1449
.L1465:
	.align	2, 0
.L1464:
	.word	gSpecialVar_Result
.L1426:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.LCB10663
	b	.L1410	@long jump
.LCB10663:
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1449	@cond_branch
	bl	bitmask_all_link_players_but_self
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1466
	mov	r2, #0x2
	bl	SendBlock
	b	.L1450
.L1467:
	.align	2, 0
.L1466:
	.word	gSpecialVar_Result
.L1430:
	bl	GetBlockReceivedStatus
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1410	@cond_branch
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1449	@cond_branch
	ldr	r1, .L1468
	ldr	r0, .L1468+0x4
	ldrh	r0, [r0]
	strh	r0, [r1]
	mov	r0, #0x0
	bl	ResetBlockReceivedFlag
.L1450:
	ldr	r1, .L1468+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	b	.L1410
.L1469:
	.align	2, 0
.L1468:
	.word	gSpecialVar_Result
	.word	gBlockRecvBuffer
	.word	gTasks
.L1434:
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1435	@cond_branch
	ldr	r0, .L1470
	ldrh	r0, [r0]
	cmp	r0, #0x2
	bne	.L1449	@cond_branch
	ldr	r0, .L1470+0x4
	bl	ShowFieldAutoScrollMessage
	b	.L1449
.L1471:
	.align	2, 0
.L1470:
	.word	gSpecialVar_Result
	.word	gText_YourPartnerHasRetired
.L1435:
	ldr	r0, .L1472
	ldrh	r0, [r0]
	cmp	r0, #0x3
	bne	.L1449	@cond_branch
	ldr	r0, .L1472+0x4
	bl	ShowFieldAutoScrollMessage
	b	.L1449
.L1473:
	.align	2, 0
.L1472:
	.word	gSpecialVar_Result
	.word	gText_YourPartnerHasRetired
.L1439:
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1410	@cond_branch
	b	.L1449
.L1441:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1410	@cond_branch
	bl	sub_800ADF8
	b	.L1449
.L1443:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1410	@cond_branch
.L1449:
	ldr	r0, .L1474
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L1410
.L1475:
	.align	2, 0
.L1474:
	.word	gTasks
.L1445:
	ldr	r0, .L1476
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1446	@cond_branch
	bl	sub_800AC34
.L1446:
	ldr	r0, .L1476+0x4
	ldr	r1, .L1476+0x8
	ldr	r1, [r1]
	str	r1, [r0]
	bl	EnableBothScriptContexts
	add	r0, r4, #0
	bl	DestroyTask
.L1410:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1477:
	.align	2, 0
.L1476:
	.word	gWirelessCommType
	.word	gBattleTypeFlags
	.word	gUnknown_0203AB70
.Lfe167:
	.size	 sub_813B57C,.Lfe167-sub_813B57C
	.align	2, 0
	.globl	sub_813B7D8
	.type	 sub_813B7D8,function
	.thumb_func
sub_813B7D8:
	push	{lr}
	ldr	r0, .L1481
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L1479	@cond_branch
	ldr	r2, .L1481+0x4
	mov	r0, #0x0
	mov	r1, #0x1
	bl	DoRayquazaScene
	b	.L1480
.L1482:
	.align	2, 0
.L1481:
	.word	gSpecialVar_0x8004
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.L1479:
	ldr	r2, .L1483
	mov	r0, #0x1
	mov	r1, #0x0
	bl	DoRayquazaScene
.L1480:
	pop	{r0}
	bx	r0
.L1484:
	.align	2, 0
.L1483:
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.Lfe168:
	.size	 sub_813B7D8,.Lfe168-sub_813B7D8
	.align	2, 0
	.globl	sub_813B80C
	.type	 sub_813B80C,function
	.thumb_func
sub_813B80C:
	push	{lr}
	ldr	r0, .L1486
	mov	r1, #0x8
	bl	CreateTask
	mov	r0, #0x9d
	bl	PlaySE
	pop	{r0}
	bx	r0
.L1487:
	.align	2, 0
.L1486:
	.word	sub_813B824
.Lfe169:
	.size	 sub_813B80C,.Lfe169-sub_813B80C
	.align	2, 0
	.type	 sub_813B824,function
	.thumb_func
sub_813B824:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L1491
	add	r4, r0, r1
	ldrh	r0, [r4, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2]
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	ldr	r0, .L1491+0x4
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L1489	@cond_branch
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	mov	r0, #0x0
	strh	r0, [r4, #0x2]
	mov	r0, #0x9d
	bl	PlaySE
.L1489:
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	ldr	r0, .L1491+0x8
	ldrh	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bne	.L1490	@cond_branch
	add	r0, r5, #0
	bl	DestroyTask
.L1490:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1492:
	.align	2, 0
.L1491:
	.word	gTasks+0x8
	.word	gSpecialVar_0x8005
	.word	gSpecialVar_0x8004
.Lfe170:
	.size	 sub_813B824,.Lfe170-sub_813B824
	.align	2, 0
	.globl	sub_813B880
	.type	 sub_813B880,function
	.thumb_func
sub_813B880:
	push	{lr}
	ldr	r0, .L1494
	mov	r1, #0x8
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1494+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	mov	r0, #0x4
	strh	r0, [r1, #0x8]
	strh	r0, [r1, #0xa]
	strh	r0, [r1, #0xc]
	strh	r2, [r1, #0xe]
	pop	{r0}
	bx	r0
.L1495:
	.align	2, 0
.L1494:
	.word	_fwalk
	.word	gTasks
.Lfe171:
	.size	 sub_813B880,.Lfe171-sub_813B880
	.align	2, 0
	.type	 _fwalk,function
	.thumb_func
_fwalk:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	ldr	r1, .L1509
	add	r5, r0, r1
	mov	r0, #0x6
	ldrsh	r1, [r5, r0]
	lsl	r1, r1, #0x1
	add	r1, r1, r5
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	mov	r1, #0x6
	ldrsh	r0, [r5, r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	cmp	r0, #0
	bne	.L1497	@cond_branch
	mov	r6, #0x0
.L1501:
	mov	r4, #0x0
	lsl	r3, r6, #0x3
	mov	sl, r3
	add	r7, r6, #0x1
	mov	r8, r7
.L1505:
	ldr	r0, .L1509+0x4
	ldr	r1, [r0]
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	add	r0, r0, r4
	add	r0, r0, #0x6
	mov	r3, #0x2
	ldrsh	r1, [r1, r3]
	add	r1, r1, r6
	add	r1, r1, #0x4
	ldr	r7, .L1509+0x8
	add	r2, r4, r7
	add	r2, r2, sl
	mov	r7, #0x6
	ldrsh	r3, [r5, r7]
	lsl	r3, r3, #0x5
	add	r2, r2, r3
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	bl	MapGridSetMetatileIdAt
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bls	.L1505	@cond_branch
	mov	r1, r8
	lsl	r0, r1, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3
	bls	.L1501	@cond_branch
	bl	DrawWholeMapView
	ldrh	r0, [r5, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x6]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	bne	.L1497	@cond_branch
	mov	r0, r9
	bl	DestroyTask
	bl	EnableBothScriptContexts
.L1497:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1510:
	.align	2, 0
.L1509:
	.word	gTasks+0x8
	.word	gSaveBlock1Ptr
	.word	0x201
.Lfe172:
	.size	 _fwalk,.Lfe172-_fwalk
	.align	2, 0
	.globl	sub_813B968
	.type	 sub_813B968,function
	.thumb_func
sub_813B968:
	push	{r4, r5, lr}
	ldr	r5, .L1512
	ldr	r0, .L1512+0x4
	ldrh	r0, [r0]
	mov	r1, #0x7
	bl	__udivsi3
	strh	r0, [r5]
	ldrh	r4, [r5]
	add	r0, r4, #0
	mov	r1, #0x14
	bl	__udivsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	sub	r4, r4, r1
	strh	r4, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1513:
	.align	2, 0
.L1512:
	.word	gSpecialVar_Result
	.word	gSpecialVar_0x8004
.Lfe173:
	.size	 sub_813B968,.Lfe173-sub_813B968
	.align	2, 0
	.globl	sub_813B9A0
	.type	 sub_813B9A0,function
	.thumb_func
sub_813B9A0:
	push	{lr}
	ldr	r0, .L1516
	ldr	r0, [r0]
	ldrh	r1, [r0, #0x1c]
	mov	r0, #0xb0
	lsl	r0, r0, #0x4
	cmp	r1, r0
	bne	.L1515	@cond_branch
	mov	r0, #0x3
	bl	SetLastHealLocationWarp
.L1515:
	pop	{r0}
	bx	r0
.L1517:
	.align	2, 0
.L1516:
	.word	gSaveBlock1Ptr
.Lfe174:
	.size	 sub_813B9A0,.Lfe174-sub_813B9A0
	.section .rodata
	.align	1, 0
	.type	 gUnknown_085B3444.556,object
gUnknown_085B3444.556:
	.short	0x202
	.short	0x301
	.short	0x405
	.short	0x504
	.short	0x604
	.short	0x700
	.short	0x804
	.short	0x90b
	.short	0xa05
	.short	0xb05
	.short	0xc02
	.short	0xd06
	.short	0xe03
	.short	0xf02
	.short	0x100c
	.short	0x100a
	.short	0x1a35
	.short	0x1918
	.short	0x1919
	.short	0x191a
	.short	0x191b
	.short	0xffff
.text
	.align	2, 0
	.globl	sub_813B9C0
	.type	 sub_813B9C0,function
	.thumb_func
sub_813B9C0:
	push	{r4, lr}
	ldr	r0, .L1526
	ldr	r0, [r0]
	mov	r1, #0x4
	ldrsb	r1, [r0, r1]
	lsl	r1, r1, #0x8
	ldrb	r0, [r0, #0x5]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	ldr	r2, .L1526+0x4
	ldrh	r0, [r2]
	ldr	r1, .L1526+0x8
	cmp	r0, r1
	beq	.L1520	@cond_branch
	add	r4, r1, #0
	add	r1, r2, #0
.L1522:
	ldrh	r0, [r2]
	cmp	r0, r3
	bne	.L1521	@cond_branch
	mov	r0, #0x1
	b	.L1525
.L1527:
	.align	2, 0
.L1526:
	.word	gSaveBlock1Ptr
	.word	gUnknown_085B3444.556
	.word	0xffff
.L1521:
	add	r1, r1, #0x2
	add	r2, r2, #0x2
	ldrh	r0, [r1]
	cmp	r0, r4
	bne	.L1522	@cond_branch
.L1520:
	mov	r0, #0x0
.L1525:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe175:
	.size	 sub_813B9C0,.Lfe175-sub_813B9C0
	.align	2, 0
	.globl	ResetFanClub
	.type	 ResetFanClub,function
	.thumb_func
ResetFanClub:
	ldr	r0, .L1529
	ldr	r0, [r0]
	ldr	r2, .L1529+0x4
	add	r1, r0, r2
	mov	r2, #0x0
	strh	r2, [r1]
	mov	r1, #0xa1
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	strh	r2, [r0]
	bx	lr
.L1530:
	.align	2, 0
.L1529:
	.word	gSaveBlock1Ptr
	.word	0x141e
.Lfe176:
	.size	 ResetFanClub,.Lfe176-ResetFanClub
	.align	2, 0
	.globl	sub_813BA30
	.type	 sub_813BA30,function
	.thumb_func
sub_813BA30:
	push	{lr}
	bl	sub_813BF44
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1532	@cond_branch
	bl	UpdateMovedLilycoveFanClubMembers
	ldr	r0, .L1533
	ldr	r1, [r0]
	ldr	r0, .L1533+0x4
	ldr	r0, [r0]
	ldrh	r0, [r0, #0xe]
	mov	r2, #0xa1
	lsl	r2, r2, #0x5
	add	r1, r1, r2
	strh	r0, [r1]
.L1532:
	pop	{r0}
	bx	r0
.L1534:
	.align	2, 0
.L1533:
	.word	gSaveBlock1Ptr
	.word	gSaveBlock2Ptr
.Lfe177:
	.size	 sub_813BA30,.Lfe177-sub_813BA30
	.align	2, 0
	.globl	sub_813BA60
	.type	 sub_813BA60,function
	.thumb_func
sub_813BA60:
	push	{r4, lr}
	ldr	r4, .L1537
	ldr	r0, [r4]
	ldr	r1, .L1537+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsr	r0, r0, #0x7
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1536	@cond_branch
	bl	sub_813BF60
	bl	sub_813BD84
	ldr	r1, [r4]
	ldr	r0, .L1537+0x8
	ldr	r0, [r0]
	ldrh	r0, [r0, #0xe]
	mov	r2, #0xa1
	lsl	r2, r2, #0x5
	add	r1, r1, r2
	strh	r0, [r1]
	ldr	r0, .L1537+0xc
	bl	FlagClear
	ldr	r0, .L1537+0x10
	bl	FlagClear
	ldr	r0, .L1537+0x14
	bl	FlagClear
	mov	r0, #0xc6
	lsl	r0, r0, #0x2
	bl	FlagClear
	ldr	r0, .L1537+0x18
	bl	FlagClear
	ldr	r0, .L1537+0x1c
	mov	r1, #0x1
	bl	VarSet
.L1536:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1538:
	.align	2, 0
.L1537:
	.word	gSaveBlock1Ptr
	.word	0x141e
	.word	gSaveBlock2Ptr
	.word	0x315
	.word	0x316
	.word	0x317
	.word	0x2da
	.word	0x4095
.Lfe178:
	.size	 sub_813BA60,.Lfe178-sub_813BA60
	.section .rodata
	.type	 gUnknown_085B3470.569,object
gUnknown_085B3470.569:
	.byte	0x2
	.byte	0x1
	.byte	0x2
	.byte	0x1
.text
	.align	2, 0
	.globl	sub_813BADC
	.type	 sub_813BADC,function
	.thumb_func
sub_813BADC:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L1545
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L1540	@cond_branch
	ldr	r4, .L1545+0x4
	ldr	r0, [r4]
	ldr	r5, .L1545+0x8
	add	r3, r0, r5
	ldrh	r2, [r3]
	mov	r1, #0x7f
	and	r1, r1, r2
	ldr	r0, .L1545+0xc
	add	r0, r6, r0
	ldrb	r0, [r0]
	add	r1, r1, r0
	cmp	r1, #0x13
	ble	.L1541	@cond_branch
	bl	GetNumMovedLilycoveFanClubMembers
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x2
	bhi	.L1542	@cond_branch
	bl	sub_813BB74
	ldr	r0, [r4]
	add	r0, r0, r5
	ldrh	r2, [r0]
	ldr	r1, .L1545+0x10
	and	r1, r1, r2
	strh	r1, [r0]
	b	.L1540
.L1546:
	.align	2, 0
.L1545:
	.word	0x4095
	.word	gSaveBlock1Ptr
	.word	0x141e
	.word	gUnknown_085B3470.569
	.word	0xff80
.L1542:
	ldr	r2, [r4]
	add	r2, r2, r5
	ldrh	r1, [r2]
	ldr	r0, .L1547
	and	r0, r0, r1
	mov	r1, #0x14
	orr	r0, r0, r1
	strh	r0, [r2]
	b	.L1540
.L1548:
	.align	2, 0
.L1547:
	.word	0xff80
.L1541:
	add	r0, r2, r0
	strh	r0, [r3]
.L1540:
	ldr	r0, .L1549
	ldr	r0, [r0]
	ldr	r1, .L1549+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x7f
	and	r0, r0, r1
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L1550:
	.align	2, 0
.L1549:
	.word	gSaveBlock1Ptr
	.word	0x141e
.Lfe179:
	.size	 sub_813BADC,.Lfe179-sub_813BADC
	.section .rodata
	.type	 gUnknown_085B3474.573,object
gUnknown_085B3474.573:
	.byte	0x8
	.byte	0x9
	.byte	0xa
	.byte	0xb
	.byte	0xc
	.byte	0xd
	.byte	0xe
	.byte	0xf
.text
	.align	2, 0
	.type	 sub_813BB74,function
	.thumb_func
sub_813BB74:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	mov	r3, #0x0
	mov	r5, #0x0
	ldr	r7, .L1561
	ldr	r2, .L1561+0x4
	mov	r6, #0x1
.L1555:
	ldr	r0, [r7]
	add	r0, r0, r2
	ldrh	r1, [r0]
	ldr	r0, .L1561+0x8
	add	r0, r5, r0
	ldrb	r4, [r0]
	asr	r1, r1, r4
	and	r1, r1, r6
	cmp	r1, #0
	bne	.L1554	@cond_branch
	add	r3, r5, #0
	str	r2, [sp]
	str	r3, [sp, #0x4]
	bl	Random
	add	r1, r6, #0
	and	r1, r1, r0
	ldr	r2, [sp]
	ldr	r3, [sp, #0x4]
	cmp	r1, #0
	beq	.L1554	@cond_branch
	ldr	r0, [r7]
	add	r0, r0, r2
	add	r1, r6, #0
	lsl	r1, r1, r4
	ldrh	r2, [r0]
	orr	r1, r1, r2
	strh	r1, [r0]
	b	.L1560
.L1562:
	.align	2, 0
.L1561:
	.word	gSaveBlock1Ptr
	.word	0x141e
	.word	gUnknown_085B3474.573
.L1554:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x7
	bls	.L1555	@cond_branch
	ldr	r0, .L1563
	ldr	r2, [r0]
	ldr	r0, .L1563+0x4
	add	r2, r2, r0
	ldr	r1, .L1563+0x8
	add	r1, r3, r1
	mov	r0, #0x1
	ldrb	r1, [r1]
	lsl	r0, r0, r1
	ldrh	r1, [r2]
	orr	r0, r0, r1
	strh	r0, [r2]
.L1560:
	add	r0, r3, #0
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1564:
	.align	2, 0
.L1563:
	.word	gSaveBlock1Ptr
	.word	0x141e
	.word	gUnknown_085B3474.573
.Lfe180:
	.size	 sub_813BB74,.Lfe180-sub_813BB74
	.section .rodata
	.type	 gUnknown_085B347C.577,object
gUnknown_085B347C.577:
	.byte	0x8
	.byte	0xd
	.byte	0xe
	.byte	0xb
	.byte	0xa
	.byte	0xc
	.byte	0xf
	.byte	0x9
.text
	.align	2, 0
	.type	 sub_813BC00,function
	.thumb_func
sub_813BC00:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r0, #0x0
	mov	sl, r0
	bl	GetNumMovedLilycoveFanClubMembers
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L1566	@cond_branch
	mov	r0, #0x0
	b	.L1575
.L1576:
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r9
	lsl	r4, r4, r6
	ldrh	r1, [r0]
	eor	r4, r4, r1
	strh	r4, [r0]
	b	.L1574
.L1566:
	mov	r5, #0x0
	ldr	r2, .L1577
	mov	r8, r2
	ldr	r0, .L1577+0x4
	mov	r9, r0
	mov	r4, #0x1
.L1570:
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r9
	ldrh	r1, [r0]
	ldr	r7, .L1577+0x8
	add	r0, r5, r7
	ldrb	r6, [r0]
	asr	r1, r1, r6
	and	r1, r1, r4
	cmp	r1, #0
	beq	.L1569	@cond_branch
	mov	sl, r5
	bl	Random
	add	r1, r4, #0
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L1576	@cond_branch
.L1569:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x7
	bls	.L1570	@cond_branch
	ldr	r0, .L1577
	ldr	r0, [r0]
	ldr	r2, .L1577+0x4
	add	r4, r0, r2
	ldrh	r1, [r4]
	mov	r2, sl
	add	r0, r2, r7
	ldrb	r2, [r0]
	add	r0, r1, #0
	asr	r0, r0, r2
	mov	r3, #0x1
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1574	@cond_branch
	add	r0, r3, #0
	lsl	r0, r0, r2
	eor	r1, r1, r0
	strh	r1, [r4]
.L1574:
	mov	r0, sl
.L1575:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1578:
	.align	2, 0
.L1577:
	.word	gSaveBlock1Ptr
	.word	0x141e
	.word	gUnknown_085B347C.577
.Lfe181:
	.size	 sub_813BC00,.Lfe181-sub_813BC00
	.align	2, 0
	.globl	GetNumMovedLilycoveFanClubMembers
	.type	 GetNumMovedLilycoveFanClubMembers,function
	.thumb_func
GetNumMovedLilycoveFanClubMembers:
	push	{r4, r5, lr}
	mov	r3, #0x0
	mov	r2, #0x0
	ldr	r0, .L1586
	ldr	r0, [r0]
	ldr	r1, .L1586+0x4
	add	r0, r0, r1
	ldrh	r4, [r0]
	mov	r5, #0x1
.L1583:
	add	r1, r2, #0
	add	r1, r1, #0x8
	add	r0, r4, #0
	asr	r0, r0, r1
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1582	@cond_branch
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L1582:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x7
	bls	.L1583	@cond_branch
	add	r0, r3, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L1587:
	.align	2, 0
.L1586:
	.word	gSaveBlock1Ptr
	.word	0x141e
.Lfe182:
	.size	 GetNumMovedLilycoveFanClubMembers,.Lfe182-GetNumMovedLilycoveFanClubMembers
	.align	2, 0
	.globl	UpdateMovedLilycoveFanClubMembers
	.type	 UpdateMovedLilycoveFanClubMembers,function
	.thumb_func
UpdateMovedLilycoveFanClubMembers:
	push	{r4, r5, r6, lr}
	mov	r5, #0x0
	ldr	r2, .L1599
	ldr	r0, [r2]
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L1599+0x4
	cmp	r1, r0
	bhi	.L1588	@cond_branch
	add	r6, r2, #0
	b	.L1592
.L1600:
	.align	2, 0
.L1599:
	.word	gSaveBlock2Ptr
	.word	0x3e6
.L1595:
	ldr	r0, [r6]
	ldrh	r1, [r0, #0xe]
	ldr	r4, .L1601
	ldr	r0, [r4]
	mov	r2, #0xa1
	lsl	r2, r2, #0x5
	add	r0, r0, r2
	ldrh	r0, [r0]
	sub	r1, r1, r0
	cmp	r1, #0xb
	ble	.L1588	@cond_branch
	bl	sub_813BC00
	ldr	r0, [r4]
	mov	r1, #0xa1
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	ldrh	r1, [r0]
	add	r1, r1, #0xc
	strh	r1, [r0]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L1592:
	bl	GetNumMovedLilycoveFanClubMembers
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x4
	bhi	.L1593	@cond_branch
	ldr	r0, .L1601
	ldr	r1, [r0]
	ldr	r0, [r6]
	ldrh	r0, [r0, #0xe]
	mov	r2, #0xa1
	lsl	r2, r2, #0x5
	add	r1, r1, r2
	strh	r0, [r1]
	b	.L1588
.L1602:
	.align	2, 0
.L1601:
	.word	gSaveBlock1Ptr
.L1593:
	cmp	r5, #0x8
	bne	.L1595	@cond_branch
.L1588:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe183:
	.size	 UpdateMovedLilycoveFanClubMembers,.Lfe183-UpdateMovedLilycoveFanClubMembers
	.align	2, 0
	.globl	ShouldMoveLilycoveFanClubMember
	.type	 ShouldMoveLilycoveFanClubMember,function
	.thumb_func
ShouldMoveLilycoveFanClubMember:
	ldr	r0, .L1604
	ldr	r0, [r0]
	ldr	r1, .L1604+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	ldr	r1, .L1604+0x8
	ldrh	r1, [r1]
	asr	r0, r0, r1
	mov	r1, #0x1
	and	r0, r0, r1
	bx	lr
.L1605:
	.align	2, 0
.L1604:
	.word	gSaveBlock1Ptr
	.word	0x141e
	.word	gSpecialVar_0x8004
.Lfe184:
	.size	 ShouldMoveLilycoveFanClubMember,.Lfe184-ShouldMoveLilycoveFanClubMember
	.align	2, 0
	.type	 sub_813BD84,function
	.thumb_func
sub_813BD84:
	ldr	r0, .L1607
	ldr	r2, [r0]
	ldr	r0, .L1607+0x4
	add	r2, r2, r0
	ldrh	r1, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0x6
	add	r0, r3, #0
	orr	r0, r0, r1
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r1, r3, #0
	orr	r0, r0, r1
	mov	r3, #0x80
	lsl	r3, r3, #0x3
	add	r1, r3, #0
	orr	r0, r0, r1
	strh	r0, [r2]
	bx	lr
.L1608:
	.align	2, 0
.L1607:
	.word	gSaveBlock1Ptr
	.word	0x141e
.Lfe185:
	.size	 sub_813BD84,.Lfe185-sub_813BD84
	.align	2, 0
	.globl	BufferStreakTrainerText
	.type	 BufferStreakTrainerText,function
	.thumb_func
BufferStreakTrainerText:
	push	{lr}
	mov	r3, #0x0
	mov	r2, #0x0
	ldr	r0, .L1621
	ldrh	r0, [r0]
	sub	r0, r0, #0x8
	cmp	r0, #0x7
	bhi	.L1610	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L1621+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1622:
	.align	2, 0
.L1621:
	.word	gSpecialVar_0x8004
	.word	.L1619
	.align	2, 0
	.align	2, 0
.L1619:
	.word	.L1610
	.word	.L1610
	.word	.L1613
	.word	.L1614
	.word	.L1615
	.word	.L1616
	.word	.L1617
	.word	.L1610
.L1613:
	mov	r3, #0x0
	mov	r2, #0x3
	b	.L1610
.L1614:
	mov	r3, #0x0
	mov	r2, #0x1
	b	.L1610
.L1615:
	mov	r3, #0x1
	mov	r2, #0x0
	b	.L1610
.L1616:
	mov	r3, #0x0
	mov	r2, #0x4
	b	.L1610
.L1617:
	mov	r3, #0x1
	mov	r2, #0x5
.L1610:
	ldr	r0, .L1623
	ldr	r0, [r0]
	ldr	r1, .L1623+0x4
	add	r0, r0, r1
	add	r1, r3, #0
	bl	sub_813BE30
	pop	{r0}
	bx	r0
.L1624:
	.align	2, 0
.L1623:
	.word	gSaveBlock1Ptr
	.word	0x3150
.Lfe186:
	.size	 BufferStreakTrainerText,.Lfe186-BufferStreakTrainerText
	.align	2, 0
	.type	 sub_813BE30,function
	.thumb_func
sub_813BE30:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r0, r5, #0x4
	add	r1, r6, r0
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L1626	@cond_branch
	cmp	r2, #0x5
	bhi	.L1634	@cond_branch
	lsl	r0, r2, #0x2
	ldr	r1, .L1637
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1638:
	.align	2, 0
.L1637:
	.word	.L1635
	.align	2, 0
	.align	2, 0
.L1635:
	.word	.L1634
	.word	.L1629
	.word	.L1630
	.word	.L1631
	.word	.L1632
	.word	.L1633
.L1629:
	ldr	r0, .L1639
	ldr	r1, .L1639+0x4
	bl	StringCopy
	b	.L1636
.L1640:
	.align	2, 0
.L1639:
	.word	gStringVar1
	.word	gText_Steven
.L1630:
	ldr	r0, .L1641
	ldr	r1, .L1641+0x4
	bl	StringCopy
	b	.L1636
.L1642:
	.align	2, 0
.L1641:
	.word	gStringVar1
	.word	gText_Brawly
.L1631:
	ldr	r0, .L1643
	ldr	r1, .L1643+0x4
	bl	StringCopy
	b	.L1636
.L1644:
	.align	2, 0
.L1643:
	.word	gStringVar1
	.word	gText_Winona
.L1632:
	ldr	r0, .L1645
	ldr	r1, .L1645+0x4
	bl	StringCopy
	b	.L1636
.L1646:
	.align	2, 0
.L1645:
	.word	gStringVar1
	.word	gText_Phoebe
.L1633:
	ldr	r0, .L1647
	ldr	r1, .L1647+0x4
	bl	StringCopy
	b	.L1636
.L1648:
	.align	2, 0
.L1647:
	.word	gStringVar1
	.word	gText_Glacia
.L1634:
	ldr	r0, .L1649
	ldr	r1, .L1649+0x4
	bl	StringCopy
	b	.L1636
.L1650:
	.align	2, 0
.L1649:
	.word	gStringVar1
	.word	gText_Wallace
.L1626:
	ldr	r4, .L1651
	add	r0, r4, #0
	mov	r2, #0x7
	bl	StringCopyN
	mov	r0, #0xff
	strb	r0, [r4, #0x7]
	add	r0, r6, #0
	add	r0, r0, #0x50
	add	r0, r0, r5
	ldrb	r1, [r0]
	add	r0, r4, #0
	bl	ConvertInternationalString
.L1636:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1652:
	.align	2, 0
.L1651:
	.word	gStringVar1
.Lfe187:
	.size	 sub_813BE30,.Lfe187-sub_813BE30
	.align	2, 0
	.globl	sub_813BF10
	.type	 sub_813BF10,function
	.thumb_func
sub_813BF10:
	push	{lr}
	ldr	r0, .L1657
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L1654	@cond_branch
	bl	sub_813BA30
	ldr	r0, .L1657+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L1655	@cond_branch
	bl	sub_813BB74
	b	.L1654
.L1658:
	.align	2, 0
.L1657:
	.word	0x4095
	.word	gBattleOutcome
.L1655:
	bl	sub_813BC00
.L1654:
	pop	{r0}
	bx	r0
.Lfe188:
	.size	 sub_813BF10,.Lfe188-sub_813BF10
	.align	2, 0
	.type	 sub_813BF44,function
	.thumb_func
sub_813BF44:
	ldr	r0, .L1660
	ldr	r0, [r0]
	ldr	r1, .L1660+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsr	r0, r0, #0x7
	mov	r1, #0x1
	and	r0, r0, r1
	bx	lr
.L1661:
	.align	2, 0
.L1660:
	.word	gSaveBlock1Ptr
	.word	0x141e
.Lfe189:
	.size	 sub_813BF44,.Lfe189-sub_813BF44
	.align	2, 0
	.globl	sub_813BF60
	.type	 sub_813BF60,function
	.thumb_func
sub_813BF60:
	ldr	r0, .L1663
	ldr	r1, [r0]
	ldr	r0, .L1663+0x4
	add	r1, r1, r0
	ldrh	r2, [r1]
	mov	r0, #0x80
	orr	r0, r0, r2
	strh	r0, [r1]
	bx	lr
.L1664:
	.align	2, 0
.L1663:
	.word	gSaveBlock1Ptr
	.word	0x141e
.Lfe190:
	.size	 sub_813BF60,.Lfe190-sub_813BF60
	.align	2, 0
	.globl	sub_813BF7C
	.type	 sub_813BF7C,function
	.thumb_func
sub_813BF7C:
	push	{lr}
	ldr	r0, .L1666
	ldrb	r0, [r0]
	bl	sub_813BADC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L1667:
	.align	2, 0
.L1666:
	.word	gSpecialVar_0x8004
.Lfe191:
	.size	 sub_813BF7C,.Lfe191-sub_813BF7C
	.comm	gUnknown_030061D0, 24	@ 24
.text
	.align	2, 0

