@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gUnknown_08622510
	.section .rodata
	.align	1, 0
	.type	 gUnknown_08622510,object
gUnknown_08622510:
	.short	0x300
	.short	0x3f1e
	.short	0x7fff
	.short	0x3dcd
	.short	0x0
	.short	0x39b7
	.short	0x2506
	.short	0x53bf
	.short	0x3eb8
	.short	0x4ed7
	.short	0x6318
	.short	0x7fff
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 gUnknown_08622510,32
	.globl	gUnknown_08622530
	.align	2, 0
	.type	 gUnknown_08622530,object
gUnknown_08622530:
	.word	0x1a010
	.word	-0x77777800
	.word	-0x66666678
	.word	0x38880099
	.word	0x69996666
	.word	-0x77ff8889
	.word	0x63777768
	.word	0xc777766
	.word	0x11117776
	.word	0x1f500310
	.word	0x66676666
	.word	0x1701500
	.word	0x1301111
	.word	0x7f03f60
	.word	-0x67f8af41
	.word	0x1500710
	.word	0x3f504750
	.word	0x1f201b90
	.word	0x57030083
	.word	0x51999996
	.word	-0x78affcc0
	.word	0x3003f0cf
	.word	-0xffffffd
	.word	0x50019001
	.word	-0xffe0f99
	.word	0x67500130
	.word	0x7fb003f0
	.word	0x55556666
	.word	0x55633300
	.word	0x55688855
	.word	0x69990055
	.word	0x38886666
	.word	0x10cc3333
	.word	0x554750af
	.word	0x10017055
	.word	-0x13cccc1d
	.word	0x13d01f70
	.word	0x550190
	.word	0x66031063
	.word	-0x6666cf6d
	.word	0x1001ce0
	.size	 gUnknown_08622530,164
	.globl	gUnknown_086225D4
	.align	2, 0
	.type	 gUnknown_086225D4,object
gUnknown_086225D4:
	.word	0x50010
	.word	-0xfdf7dcf
	.word	-0x7ffeefff
	.word	0x1f08120
	.word	-0x7ffe3f7a
	.word	-0xfff8000
	.word	-0x7afecfc7
	.word	-0xf79dfc1
	.word	-0xffe3fff
	.word	-0xfc00fc1
	.word	-0xdc00fff
	.word	0x3ff001f0
	.word	0x3f3001f0
	.word	0x1f02083
	.word	-0x7bdfc67d
	.word	0x1f03ff0
	.word	0x20873f20
	.word	-0x78e0fe10
	.word	0x3ff08820
	.word	0x3ff001f0
	.word	0x1f03ff0
	.word	-0x74c03f6f
	.word	-0x74fe0fe0
	.word	0x3ff08c20
	.word	-0xffe0f01
	.word	-0xf000f01
	.word	-0xf400fff
	.word	-0xf400fff
	.word	0x3ff0ff01
	.word	0x1f03ff0
	.word	0x3df03ff0
	.word	0x1f03ff0
	.word	-0xf00c010
	.word	-0xffe0fc1
	.word	-0xfc00fc1
	.word	-0xffe0fc1
	.word	-0xc00fc1
	.word	0x3ff02ff0
	.word	0x3ff03ff0
	.word	0x3ff001f0
	.word	0x3ff03ff0
	.word	-0xdfe0f1d
	.word	-0x76807d81
	.word	0x1f08a20
	.word	-0xc00fe40
	.word	-0xffe0f41
	.word	-0xf5c7bff
	.word	-0xffe0fc1
	.word	0x3fa001
	.size	 gUnknown_086225D4,196
	.globl	gUnknown_08622698
	.align	1, 0
	.type	 gUnknown_08622698,object
gUnknown_08622698:
	.short	0x0
	.short	0x5312
	.short	0x2506
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 gUnknown_08622698,32
	.globl	gUnknown_086226B8
	.align	2, 0
	.type	 gUnknown_086226B8,object
gUnknown_086226B8:
	.word	0x4010
	.word	0x7000002e
	.word	0x3501101
	.word	0x3300400
	.word	0x3108411
	.word	0x22111102
	.word	0x20300
	.word	0x600a6
	.word	0x20000600
	.word	0x1500300
	.size	 gUnknown_086226B8,40
	.globl	gUnknown_086226E0
	.align	1, 0
	.type	 gUnknown_086226E0,object
gUnknown_086226E0:
	.short	0x0
	.short	0x7ffe
	.short	0x442
	.short	0x737b
	.short	0x1f
	.short	0x1c
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 gUnknown_086226E0,32
	.globl	gUnknown_08622700
	.align	1, 0
	.type	 gUnknown_08622700,object
gUnknown_08622700:
	.short	0x300
	.short	0x3f1e
	.short	0x7fff
	.short	0x3dcd
	.short	0x93f
	.short	0x428
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 gUnknown_08622700,32
	.globl	gUnknown_08622720
	.align	1, 0
	.type	 gUnknown_08622720,object
gUnknown_08622720:
	.short	0x300
	.short	0x3f1e
	.short	0x7fff
	.short	0x3dcd
	.short	0x0
	.short	0x21b7
	.short	0x2506
	.short	0x4f7f
	.short	0x2a16
	.short	0x3637
	.short	0x6318
	.short	0x7fff
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x93f
	.short	0x300
	.short	0x3f1e
	.short	0x7fff
	.short	0x3dcd
	.short	0x0
	.short	0x21b7
	.short	0x2506
	.short	0x4f7f
	.short	0x2a16
	.short	0x3637
	.short	0x6318
	.short	0x6318
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x21b7
	.size	 gUnknown_08622720,64
	.globl	gUnknown_08622760
	.align	2, 0
	.type	 gUnknown_08622760,object
gUnknown_08622760:
	.word	0x4010
	.word	-0x4feeeee0
	.word	0x66666601
	.word	-0xef099a
	.word	0x3206fff
	.word	0x366ff33f
	.word	0x63333300
	.word	0x6bb33bb6
	.word	-0x4444c74a
	.word	0x1f100320
	.word	0x2f90
	.size	 gUnknown_08622760,44
	.globl	gUnknown_0862278C
	.align	2, 0
	.type	 gUnknown_0862278C,object
	.size	 gUnknown_0862278C,12
gUnknown_0862278C:
	.byte	0xfd
	.byte	0x11
	.byte	0x0
	.space	1
	.byte	0x6a
	.byte	0x20
	.byte	0x20
	.space	1
	.byte	0x77
	.byte	0x30
	.byte	0x0
	.space	1
	.globl	gUnknown_08622798
	.align	2, 0
	.type	 gUnknown_08622798,object
gUnknown_08622798:
	.word	0x0
	.word	sub_81CB510
	.word	sub_81CB588
	.word	sub_81CB600
	.word	sub_81CB678
	.word	sub_81CB6F0
	.word	sub_81CB734
	.word	sub_81CB75C
	.word	sub_81CB7A0
	.word	sub_81CB824
	.word	sub_81CB888
	.word	sub_81CB93C
	.word	sub_81CBAD4
	.word	sub_81CB9C8
	.word	sub_81CBA68
	.word	sub_81CBB74
	.size	 gUnknown_08622798,64
	.globl	gUnknown_086227D8
	.align	2, 0
	.type	 gUnknown_086227D8,object
	.size	 gUnknown_086227D8,8
gUnknown_086227D8:
	.byte	0x2
	.byte	0x0
	.byte	0x5
	.byte	0xb
	.byte	0x2
	.byte	0x2
	.short	0x10
	.globl	gUnknown_086227E0
	.align	2, 0
	.type	 gUnknown_086227E0,object
	.size	 gUnknown_086227E0,8
gUnknown_086227E0:
	.byte	0x2
	.byte	0x0
	.byte	0x9
	.byte	0xb
	.byte	0x8
	.byte	0x2
	.short	0x26
	.globl	gUnknown_086227E8
	.align	2, 0
	.type	 gUnknown_086227E8,object
gUnknown_086227E8:
	.word	gUnknown_085EC017
	.word	gUnknown_085EC01C
	.word	gUnknown_085EC022
	.size	 gUnknown_086227E8,12
	.globl	gUnknown_086227F4
	.type	 gUnknown_086227F4,object
gUnknown_086227F4:
	.byte	0xaf
	.byte	0xfc
	.byte	0x8
	.byte	0x4
	.byte	0xaf
	.byte	0xfc
	.byte	0x8
	.byte	0x4
	.byte	0xaf
	.byte	0xfc
	.byte	0x8
	.byte	0x4
	.byte	0xaf
	.byte	0xfc
	.byte	0x8
	.byte	0x4
	.byte	0xaf
	.byte	0xfb
	.byte	0xff
	.size	 gUnknown_086227F4,19
	.globl	gUnknown_08622808
	.align	2, 0
	.type	 gUnknown_08622808,object
	.size	 gUnknown_08622808,8
gUnknown_08622808:
	.byte	0x1
	.byte	0x1
	.byte	0xc
	.byte	0x1c
	.byte	0x4
	.byte	0x1
	.short	0xa
	.globl	gUnknown_08622810
	.align	2, 0
	.type	 gUnknown_08622810,object
	.size	 gUnknown_08622810,8
gUnknown_08622810:
	.word	gUnknown_086226B8
	.short	0x40
	.short	0x7
	.globl	gUnknown_08622818
	.align	2, 0
	.type	 gUnknown_08622818,object
gUnknown_08622818:
	.word	gUnknown_08622698
	.short	0xc
	.space	2
	.space	8
	.size	 gUnknown_08622818,16
	.globl	gUnknown_08622828
	.align	2, 0
	.type	 gUnknown_08622828,object
	.size	 gUnknown_08622828,8
gUnknown_08622828:
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.space	2
	.globl	gUnknown_08622830
	.align	2, 0
	.type	 gUnknown_08622830,object
	.size	 gUnknown_08622830,24
gUnknown_08622830:
	.short	0x7
	.short	0xc
	.word	gUnknown_08622828
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_81CC34C
	.globl	gUnknown_08622848
	.align	2, 0
	.type	 gUnknown_08622848,object
	.size	 gUnknown_08622848,8
gUnknown_08622848:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x4
	.space	2
	.globl	gUnknown_08622850
	.align	2, 0
	.type	 gUnknown_08622850,object
	.size	 gUnknown_08622850,24
gUnknown_08622850:
	.short	0x8
	.short	0xd
	.word	gUnknown_08622848
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
.text
	.align	2, 0
	.globl	sub_81CB260
	.type	 sub_81CB260,function
	.thumb_func
sub_81CB260:
	push	{r4, lr}
	ldr	r1, .L5
	mov	r0, #0x6
	bl	AllocSubstruct
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L3	@cond_branch
	mov	r0, #0x0
	strb	r0, [r4, #0x19]
	ldr	r0, .L5+0x4
	mov	r1, #0x1
	bl	CreateLoopedTask
	str	r0, [r4, #0x4]
	ldr	r0, .L5+0x8
	str	r0, [r4]
	mov	r0, #0x1
	b	.L4
.L6:
	.align	2, 0
.L5:
	.word	0x2048
	.word	sub_81CB324
	.word	sub_81CB310
.L3:
	mov	r0, #0x0
.L4:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 sub_81CB260,.Lfe1-sub_81CB260
	.align	2, 0
	.globl	sub_81CB29C
	.type	 sub_81CB29C,function
	.thumb_func
sub_81CB29C:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r5, r0, #0
	ldr	r0, .L8
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	ldr	r0, [r4]
	mov	r1, #0x1
	bl	CreateLoopedTask
	str	r0, [r5, #0x4]
	ldr	r0, .L8+0x4
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	gUnknown_08622798
	.word	sub_81CB310
.Lfe2:
	.size	 sub_81CB29C,.Lfe2-sub_81CB29C
	.align	2, 0
	.globl	sub_81CB2CC
	.type	 sub_81CB2CC,function
	.thumb_func
sub_81CB2CC:
	push	{lr}
	mov	r0, #0x6
	bl	GetSubstructPtr
	ldr	r0, [r0]
	bl	_call_via_r0
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 sub_81CB2CC,.Lfe3-sub_81CB2CC
	.align	2, 0
	.globl	sub_81CB2E0
	.type	 sub_81CB2E0,function
	.thumb_func
sub_81CB2E0:
	push	{r4, lr}
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r4, r0, #0
	bl	sub_81CC2B4
	bl	sub_81CBC1C
	ldrb	r0, [r4, #0x12]
	bl	RemoveWindow
	ldrb	r0, [r4, #0x10]
	bl	RemoveWindow
	ldrb	r0, [r4, #0x14]
	bl	RemoveWindow
	mov	r0, #0x6
	bl	FreePokenavSubstruct
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 sub_81CB2E0,.Lfe4-sub_81CB2E0
	.align	2, 0
	.type	 sub_81CB310,function
	.thumb_func
sub_81CB310:
	push	{lr}
	mov	r0, #0x6
	bl	GetSubstructPtr
	ldr	r0, [r0, #0x4]
	bl	IsLoopedTaskActive
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 sub_81CB310,.Lfe5-sub_81CB310
	.align	2, 0
	.type	 sub_81CB324,function
	.thumb_func
sub_81CB324:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0x7
	bls	.LCB162
	b	.L30	@long jump
.LCB162:
	lsl	r0, r4, #0x2
	ldr	r1, .L34
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L35:
	.align	2, 0
.L34:
	.word	.L31
	.align	2, 0
	.align	2, 0
.L31:
	.word	.L15
	.word	.L16
	.word	.L18
	.word	.L20
	.word	.L23
	.word	.L25
	.word	.L26
	.word	.L27
.L15:
	ldr	r0, .L36
	mov	r1, #0x3
	bl	InitBgTemplates
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	ldr	r1, .L36+0x4
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	decompress_and_copy_tile_data_to_vram
	ldr	r0, .L36+0x8
	add	r1, r5, r0
	mov	r0, #0x2
	bl	SetBgTilemapBuffer
	ldr	r1, .L36+0xc
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	mov	r0, #0x2
	bl	CopyBgTilemapBufferToVram
	ldr	r0, .L36+0x10
	mov	r1, #0x20
	mov	r2, #0x20
	bl	CopyPaletteIntoBufferUnfaded
	mov	r0, #0x2
	b	.L33
.L37:
	.align	2, 0
.L36:
	.word	gUnknown_0862278C
	.word	gUnknown_08622530
	.word	0x1024
	.word	gUnknown_086225D4
	.word	gUnknown_08622510
.L16:
	bl	free_temp_tile_data_buffers_if_possible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB239
	b	.L29	@long jump
.LCB239:
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	sub_8199DF0
	add	r1, r5, #0
	add	r1, r1, #0x24
	mov	r0, #0x1
	bl	SetBgTilemapBuffer
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x20
	str	r0, [sp]
	mov	r0, #0x14
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	ldr	r0, .L38
	mov	r1, #0x10
	mov	r2, #0x20
	bl	CopyPaletteIntoBufferUnfaded
	mov	r0, #0x1
.L33:
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x0
	b	.L32
.L39:
	.align	2, 0
.L38:
	.word	gUnknown_086226E0
.L18:
	bl	free_temp_tile_data_buffers_if_possible
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L29	@cond_branch
	add	r0, r5, #0
	bl	sub_81CC034
	ldr	r1, .L40
	str	r4, [sp]
	mov	r0, #0x3
	mov	r2, #0x0
	mov	r3, #0x0
	bl	decompress_and_copy_tile_data_to_vram
	ldr	r0, .L40+0x4
	mov	r1, #0x30
	mov	r2, #0x20
	bl	CopyPaletteIntoBufferUnfaded
	ldr	r0, .L40+0x8
	mov	r1, #0x50
	mov	r2, #0x20
	bl	CopyPaletteIntoBufferUnfaded
	mov	r0, #0x0
	b	.L32
.L41:
	.align	2, 0
.L40:
	.word	gUnknown_08622760
	.word	gUnknown_08622700
	.word	gUnknown_08622720
.L20:
	bl	free_temp_tile_data_buffers_if_possible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L29	@cond_branch
	bl	sub_81CAE28
	cmp	r0, #0
	beq	.L29	@cond_branch
	bl	sub_81CBBB8
	mov	r0, #0x0
	b	.L32
.L23:
	bl	sub_81C8224
	cmp	r0, #0
	bne	.L29	@cond_branch
	add	r0, r5, #0
	bl	sub_81CBD78
	mov	r0, #0x0
	b	.L32
.L25:
	add	r0, r5, #0
	bl	sub_81CBDC0
	add	r0, r5, #0
	mov	r1, #0x0
	bl	sub_81CBEF8
	mov	r0, #0x0
	b	.L32
.L26:
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	bl	sub_81CC214
	mov	r0, #0x3
	bl	LoadLeftHeaderGfxForIndex
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_81C7FA0
	mov	r0, #0x1
	bl	sub_81C7AC0
	mov	r0, #0x0
	b	.L32
.L27:
	bl	IsPaletteFadeActive
	cmp	r0, #0
	bne	.L29	@cond_branch
	bl	sub_81C8010
	cmp	r0, #0
	beq	.L28	@cond_branch
.L29:
	mov	r0, #0x2
	b	.L32
.L28:
	mov	r0, #0x1
	bl	sub_81CBC38
.L30:
	mov	r0, #0x4
.L32:
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 sub_81CB324,.Lfe6-sub_81CB324
	.align	2, 0
	.globl	sub_81CB510
	.type	 sub_81CB510,function
	.thumb_func
sub_81CB510:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0x1
	beq	.L52	@cond_branch
	cmp	r4, #0x1
	bgt	.L59	@cond_branch
	cmp	r4, #0
	beq	.L44	@cond_branch
	b	.L43
.L59:
	cmp	r4, #0x2
	beq	.L54	@cond_branch
	cmp	r4, #0x3
	beq	.L55	@cond_branch
	b	.L43
.L44:
	bl	MatchCall_MoveCursorDown
	cmp	r0, #0x1
	beq	.L47	@cond_branch
	cmp	r0, #0x1
	bgt	.L51	@cond_branch
	cmp	r0, #0
	beq	.L43	@cond_branch
	b	.L61
.L51:
	cmp	r0, #0x2
	beq	.L48	@cond_branch
	b	.L61
.L47:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x7
	b	.L60
.L48:
	mov	r0, #0x5
	bl	PlaySE
	b	.L61
.L52:
	bl	sub_81C8630
	cmp	r0, #0
	bne	.L62	@cond_branch
.L54:
	add	r0, r5, #0
	mov	r1, #0x0
	bl	sub_81CBEF8
.L61:
	mov	r0, #0x0
	b	.L60
.L55:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L43	@cond_branch
.L62:
	mov	r0, #0x2
	b	.L60
.L43:
	mov	r0, #0x4
.L60:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 sub_81CB510,.Lfe7-sub_81CB510
	.align	2, 0
	.globl	sub_81CB588
	.type	 sub_81CB588,function
	.thumb_func
sub_81CB588:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0x1
	beq	.L73	@cond_branch
	cmp	r4, #0x1
	bgt	.L80	@cond_branch
	cmp	r4, #0
	beq	.L65	@cond_branch
	b	.L64
.L80:
	cmp	r4, #0x2
	beq	.L75	@cond_branch
	cmp	r4, #0x3
	beq	.L76	@cond_branch
	b	.L64
.L65:
	bl	MatchCall_MoveCursorUp
	cmp	r0, #0x1
	beq	.L68	@cond_branch
	cmp	r0, #0x1
	bgt	.L72	@cond_branch
	cmp	r0, #0
	beq	.L64	@cond_branch
	b	.L82
.L72:
	cmp	r0, #0x2
	beq	.L69	@cond_branch
	b	.L82
.L68:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x7
	b	.L81
.L69:
	mov	r0, #0x5
	bl	PlaySE
	b	.L82
.L73:
	bl	sub_81C8630
	cmp	r0, #0
	bne	.L83	@cond_branch
.L75:
	add	r0, r5, #0
	mov	r1, #0x0
	bl	sub_81CBEF8
.L82:
	mov	r0, #0x0
	b	.L81
.L76:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L64	@cond_branch
.L83:
	mov	r0, #0x2
	b	.L81
.L64:
	mov	r0, #0x4
.L81:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 sub_81CB588,.Lfe8-sub_81CB588
	.align	2, 0
	.globl	sub_81CB600
	.type	 sub_81CB600,function
	.thumb_func
sub_81CB600:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0x1
	beq	.L94	@cond_branch
	cmp	r4, #0x1
	bgt	.L101	@cond_branch
	cmp	r4, #0
	beq	.L86	@cond_branch
	b	.L85
.L101:
	cmp	r4, #0x2
	beq	.L96	@cond_branch
	cmp	r4, #0x3
	beq	.L97	@cond_branch
	b	.L85
.L86:
	bl	MatchCall_PageDown
	cmp	r0, #0x1
	beq	.L89	@cond_branch
	cmp	r0, #0x1
	bgt	.L93	@cond_branch
	cmp	r0, #0
	beq	.L85	@cond_branch
	b	.L103
.L93:
	cmp	r0, #0x2
	beq	.L90	@cond_branch
	b	.L103
.L89:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x7
	b	.L102
.L90:
	mov	r0, #0x5
	bl	PlaySE
	b	.L103
.L94:
	bl	sub_81C8630
	cmp	r0, #0
	bne	.L104	@cond_branch
.L96:
	add	r0, r5, #0
	mov	r1, #0x0
	bl	sub_81CBEF8
.L103:
	mov	r0, #0x0
	b	.L102
.L97:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L85	@cond_branch
.L104:
	mov	r0, #0x2
	b	.L102
.L85:
	mov	r0, #0x4
.L102:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 sub_81CB600,.Lfe9-sub_81CB600
	.align	2, 0
	.globl	sub_81CB678
	.type	 sub_81CB678,function
	.thumb_func
sub_81CB678:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0x1
	beq	.L115	@cond_branch
	cmp	r4, #0x1
	bgt	.L122	@cond_branch
	cmp	r4, #0
	beq	.L107	@cond_branch
	b	.L106
.L122:
	cmp	r4, #0x2
	beq	.L117	@cond_branch
	cmp	r4, #0x3
	beq	.L118	@cond_branch
	b	.L106
.L107:
	bl	MatchCall_PageUp
	cmp	r0, #0x1
	beq	.L110	@cond_branch
	cmp	r0, #0x1
	bgt	.L114	@cond_branch
	cmp	r0, #0
	beq	.L106	@cond_branch
	b	.L124
.L114:
	cmp	r0, #0x2
	beq	.L111	@cond_branch
	b	.L124
.L110:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x7
	b	.L123
.L111:
	mov	r0, #0x5
	bl	PlaySE
	b	.L124
.L115:
	bl	sub_81C8630
	cmp	r0, #0
	bne	.L125	@cond_branch
.L117:
	add	r0, r5, #0
	mov	r1, #0x0
	bl	sub_81CBEF8
.L124:
	mov	r0, #0x0
	b	.L123
.L118:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L106	@cond_branch
.L125:
	mov	r0, #0x2
	b	.L123
.L106:
	mov	r0, #0x4
.L123:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 sub_81CB678,.Lfe10-sub_81CB678
	.align	2, 0
	.globl	sub_81CB6F0
	.type	 sub_81CB6F0,function
	.thumb_func
sub_81CB6F0:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0
	beq	.L128	@cond_branch
	cmp	r4, #0x1
	beq	.L129	@cond_branch
	b	.L127
.L128:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r5, #0
	bl	sub_81CBF60
	mov	r0, #0x7
	bl	sub_81C7BA4
	mov	r0, #0x0
	b	.L133
.L129:
	add	r0, r5, #0
	bl	sub_81CBFC4
	cmp	r0, #0
	beq	.L127	@cond_branch
	mov	r0, #0x2
	b	.L133
.L127:
	mov	r0, #0x4
.L133:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 sub_81CB6F0,.Lfe11-sub_81CB6F0
	.align	2, 0
	.globl	sub_81CB734
	.type	 sub_81CB734,function
	.thumb_func
sub_81CB734:
	push	{r4, lr}
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r4, r0, #0
	bl	sub_81CB01C
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	sub_81CC344
	mov	r0, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 sub_81CB734,.Lfe12-sub_81CB734
	.align	2, 0
	.globl	sub_81CB75C
	.type	 sub_81CB75C,function
	.thumb_func
sub_81CB75C:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0
	beq	.L137	@cond_branch
	cmp	r4, #0x1
	beq	.L138	@cond_branch
	b	.L136
.L137:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r5, #0
	bl	sub_81CBFF0
	mov	r0, #0x6
	bl	sub_81C7BA4
	mov	r0, #0x0
	b	.L142
.L138:
	add	r0, r5, #0
	bl	sub_81CC004
	cmp	r0, #0
	beq	.L136	@cond_branch
	mov	r0, #0x2
	b	.L142
.L136:
	mov	r0, #0x4
.L142:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 sub_81CB75C,.Lfe13-sub_81CB75C
	.align	2, 0
	.globl	sub_81CB7A0
	.type	 sub_81CB7A0,function
	.thumb_func
sub_81CB7A0:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0x1
	beq	.L146	@cond_branch
	cmp	r4, #0x1
	bgt	.L154	@cond_branch
	cmp	r4, #0
	beq	.L145	@cond_branch
	b	.L144
.L154:
	cmp	r4, #0x2
	beq	.L148	@cond_branch
	cmp	r4, #0x3
	beq	.L150	@cond_branch
	b	.L144
.L145:
	mov	r0, #0x1
	bl	ToggleMatchCallVerticalArrows
	add	r0, r5, #0
	bl	sub_81CC058
	mov	r0, #0x0
	b	.L155
.L146:
	add	r0, r5, #0
	bl	sub_81CC0D0
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L156	@cond_branch
	add	r0, r5, #0
	bl	sub_81CC0E0
	ldr	r0, .L157
	bl	PlaySE
	strb	r4, [r5, #0xe]
	mov	r0, #0x0
	b	.L155
.L158:
	.align	2, 0
.L157:
	.word	0x107
.L148:
	add	r0, r5, #0
	bl	sub_81CC104
	cmp	r0, #0
	bne	.L156	@cond_branch
	add	r0, r5, #0
	bl	sub_81CC158
	mov	r0, #0x0
	b	.L155
.L150:
	add	r0, r5, #0
	bl	sub_81CC194
	cmp	r0, #0
	beq	.L144	@cond_branch
.L156:
	mov	r0, #0x2
	b	.L155
.L144:
	mov	r0, #0x4
.L155:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 sub_81CB7A0,.Lfe14-sub_81CB7A0
	.align	2, 0
	.globl	sub_81CB824
	.type	 sub_81CB824,function
	.thumb_func
sub_81CB824:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0x1
	beq	.L162	@cond_branch
	cmp	r4, #0x1
	bgt	.L168	@cond_branch
	cmp	r4, #0
	beq	.L161	@cond_branch
	b	.L160
.L168:
	cmp	r4, #0x2
	beq	.L164	@cond_branch
	b	.L160
.L161:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r5, #0
	bl	sub_81CC09C
	mov	r0, #0x1
	bl	ToggleMatchCallVerticalArrows
	mov	r0, #0x1
	strb	r0, [r5, #0xe]
	mov	r0, #0x0
	b	.L169
.L162:
	add	r0, r5, #0
	bl	sub_81CC0D0
	cmp	r0, #0
	bne	.L170	@cond_branch
	add	r0, r5, #0
	bl	sub_81CC11C
	mov	r0, #0x0
	b	.L169
.L164:
	add	r0, r5, #0
	bl	sub_81CC140
	cmp	r0, #0
	beq	.L160	@cond_branch
.L170:
	mov	r0, #0x2
	b	.L169
.L160:
	mov	r0, #0x4
.L169:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 sub_81CB824,.Lfe15-sub_81CB824
	.align	2, 0
	.globl	sub_81CB888
	.type	 sub_81CB888,function
	.thumb_func
sub_81CB888:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r4, r0, #0
	mov	r6, #0x0
	cmp	r5, #0x6
	bhi	.L172	@cond_branch
	lsl	r0, r5, #0x2
	ldr	r1, .L193
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L194:
	.align	2, 0
.L193:
	.word	.L189
	.align	2, 0
	.align	2, 0
.L189:
	.word	.L173
	.word	.L175
	.word	.L176
	.word	.L178
	.word	.L179
	.word	.L181
	.word	.L186
.L173:
	ldrb	r0, [r4, #0xe]
	cmp	r0, #0
	bne	.L174	@cond_branch
	mov	r0, #0x84
	lsl	r0, r0, #0x1
	bl	PlaySE
.L174:
	mov	r0, #0x5
	bl	PlaySE
	b	.L172
.L175:
	add	r0, r4, #0
	bl	sub_81CC1DC
	b	.L172
.L176:
	add	r0, r4, #0
	bl	sub_81CC204
	cmp	r0, #0
	beq	.L172	@cond_branch
.L192:
	mov	r6, #0x2
	b	.L172
.L178:
	add	r0, r4, #0
	bl	sub_81CBFF0
	b	.L172
.L179:
	add	r0, r4, #0
	bl	sub_81CC004
	cmp	r0, #0
	beq	.L180	@cond_branch
	mov	r6, #0x2
.L180:
	mov	r0, #0x6
	bl	sub_81C7BA4
	b	.L172
.L181:
	bl	IsDma3ManagerBusyWithBgCopy_
	cmp	r0, #0
	bne	.L192	@cond_branch
	ldrb	r0, [r4, #0xf]
	cmp	r0, #0
	beq	.L187	@cond_branch
	bl	sub_81C8838
	mov	r6, #0x1
	b	.L172
.L186:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L192	@cond_branch
.L187:
	mov	r0, #0x0
	bl	ToggleMatchCallVerticalArrows
	mov	r6, #0x4
.L172:
	add	r0, r6, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe16:
	.size	 sub_81CB888,.Lfe16-sub_81CB888
	.align	2, 0
	.globl	sub_81CB93C
	.type	 sub_81CB93C,function
	.thumb_func
sub_81CB93C:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0x1
	beq	.L198	@cond_branch
	cmp	r4, #0x1
	bgt	.L207	@cond_branch
	cmp	r4, #0
	beq	.L197	@cond_branch
	b	.L196
.L207:
	cmp	r4, #0x2
	beq	.L201	@cond_branch
	cmp	r4, #0x3
	beq	.L202	@cond_branch
	b	.L196
.L197:
	mov	r0, #0x5
	bl	PlaySE
	bl	sub_81C877C
	add	r0, r5, #0
	bl	sub_81CC014
	mov	r0, #0x0
	b	.L208
.L198:
	bl	sub_81C8820
	cmp	r0, #0
	bne	.L204	@cond_branch
	add	r0, r5, #0
	bl	sub_81CC004
	cmp	r0, #0
	bne	.L204	@cond_branch
	mov	r0, #0x8
	bl	sub_81C7BA4
	mov	r0, #0x0
	b	.L208
.L201:
	mov	r0, #0x0
	bl	sub_81C87AC
	add	r0, r5, #0
	bl	sub_81CC39C
	mov	r0, #0x0
	b	.L208
.L202:
	bl	sub_81C8820
	cmp	r0, #0
	bne	.L204	@cond_branch
	add	r0, r5, #0
	bl	sub_81CC42C
	cmp	r0, #0
	bne	.L204	@cond_branch
	bl	IsDma3ManagerBusyWithBgCopy_
	cmp	r0, #0
	beq	.L196	@cond_branch
.L204:
	mov	r0, #0x2
	b	.L208
.L196:
	mov	r0, #0x4
.L208:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 sub_81CB93C,.Lfe17-sub_81CB93C
	.align	2, 0
	.globl	sub_81CB9C8
	.type	 sub_81CB9C8,function
	.thumb_func
sub_81CB9C8:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r4, r0, #0
	cmp	r5, #0x4
	bhi	.L210	@cond_branch
	lsl	r0, r5, #0x2
	ldr	r1, .L223
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L224:
	.align	2, 0
.L223:
	.word	.L220
	.align	2, 0
	.align	2, 0
.L220:
	.word	.L211
	.word	.L213
	.word	.L215
	.word	.L216
	.word	.L217
.L211:
	bl	GetMatchCallListTopIndex
	bl	sub_81CB0E4
	add	r5, r0, #0
	cmp	r5, #0
	beq	.L210	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	strh	r5, [r4, #0x16]
	add	r0, r4, #0
	bl	sub_81CC420
	mov	r0, #0x0
	b	.L222
.L213:
	add	r0, r4, #0
	bl	sub_81CC42C
	cmp	r0, #0
	bne	.L219	@cond_branch
	mov	r0, #0x16
	ldrsh	r1, [r4, r0]
	add	r0, r4, #0
	bl	sub_81CBEF8
	mov	r0, #0x0
	b	.L222
.L215:
	mov	r1, #0x16
	ldrsh	r0, [r4, r1]
	bl	sub_81C87AC
	mov	r0, #0x0
	b	.L222
.L216:
	add	r0, r4, #0
	bl	sub_81CC39C
	mov	r0, #0x0
	b	.L222
.L217:
	bl	sub_81C8820
	cmp	r0, #0
	bne	.L219	@cond_branch
	add	r0, r4, #0
	bl	sub_81CC42C
	cmp	r0, #0
	beq	.L210	@cond_branch
.L219:
	mov	r0, #0x2
	b	.L222
.L210:
	mov	r0, #0x4
.L222:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 sub_81CB9C8,.Lfe18-sub_81CB9C8
	.align	2, 0
	.globl	sub_81CBA68
	.type	 sub_81CBA68,function
	.thumb_func
sub_81CBA68:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0x1
	beq	.L228	@cond_branch
	cmp	r4, #0x1
	bgt	.L235	@cond_branch
	cmp	r4, #0
	beq	.L227	@cond_branch
	b	.L226
.L235:
	cmp	r4, #0x2
	beq	.L231	@cond_branch
	b	.L226
.L227:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r5, #0
	bl	sub_81CC420
	bl	sub_81C87F0
	mov	r0, #0x0
	b	.L236
.L228:
	bl	sub_81C8820
	cmp	r0, #0
	bne	.L237	@cond_branch
	add	r0, r5, #0
	bl	sub_81CC42C
	cmp	r0, #0
	bne	.L237	@cond_branch
	mov	r0, #0x6
	bl	sub_81C7BA4
	add	r0, r5, #0
	bl	sub_81CBDC0
	mov	r0, #0x0
	b	.L236
.L231:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L226	@cond_branch
.L237:
	mov	r0, #0x2
	b	.L236
.L226:
	mov	r0, #0x4
.L236:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 sub_81CBA68,.Lfe19-sub_81CBA68
	.align	2, 0
	.globl	sub_81CBAD4
	.type	 sub_81CBAD4,function
	.thumb_func
sub_81CBAD4:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r4, r0, #0
	cmp	r5, #0x4
	bhi	.L239	@cond_branch
	lsl	r0, r5, #0x2
	ldr	r1, .L252
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L253:
	.align	2, 0
.L252:
	.word	.L249
	.align	2, 0
	.align	2, 0
.L249:
	.word	.L240
	.word	.L242
	.word	.L244
	.word	.L245
	.word	.L246
.L240:
	bl	GetMatchCallListTopIndex
	bl	sub_81CB128
	add	r5, r0, #0
	cmp	r5, #0
	beq	.L239	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	strh	r5, [r4, #0x16]
	add	r0, r4, #0
	bl	sub_81CC420
	mov	r0, #0x0
	b	.L251
.L242:
	add	r0, r4, #0
	bl	sub_81CC42C
	cmp	r0, #0
	bne	.L248	@cond_branch
	mov	r0, #0x16
	ldrsh	r1, [r4, r0]
	add	r0, r4, #0
	bl	sub_81CBEF8
	mov	r0, #0x0
	b	.L251
.L244:
	mov	r1, #0x16
	ldrsh	r0, [r4, r1]
	bl	sub_81C87AC
	mov	r0, #0x0
	b	.L251
.L245:
	add	r0, r4, #0
	bl	sub_81CC39C
	mov	r0, #0x0
	b	.L251
.L246:
	bl	sub_81C8820
	cmp	r0, #0
	bne	.L248	@cond_branch
	add	r0, r4, #0
	bl	sub_81CC42C
	cmp	r0, #0
	beq	.L239	@cond_branch
.L248:
	mov	r0, #0x2
	b	.L251
.L239:
	mov	r0, #0x4
.L251:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 sub_81CBAD4,.Lfe20-sub_81CBAD4
	.align	2, 0
	.globl	sub_81CBB74
	.type	 sub_81CBB74,function
	.thumb_func
sub_81CBB74:
	push	{lr}
	cmp	r0, #0
	beq	.L256	@cond_branch
	cmp	r0, #0x1
	beq	.L257	@cond_branch
	b	.L255
.L256:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x0
	bl	sub_81CBC38
	mov	r0, #0x0
	bl	sub_81C7AC0
	bl	sub_81C78A0
	mov	r0, #0x0
	b	.L262
.L257:
	bl	IsPaletteFadeActive
	cmp	r0, #0
	bne	.L259	@cond_branch
	bl	MainMenuLoopedTaskIsBusy
	cmp	r0, #0
	beq	.L258	@cond_branch
.L259:
	mov	r0, #0x2
	b	.L262
.L258:
	bl	sub_81C7FDC
.L255:
	mov	r0, #0x4
.L262:
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 sub_81CBB74,.Lfe21-sub_81CBB74
	.align	2, 0
	.type	 sub_81CBBB8,function
	.thumb_func
sub_81CBBB8:
	push	{lr}
	add	sp, sp, #-0x18
	bl	sub_81CAE94
	str	r0, [sp]
	bl	sub_81CAE38
	mov	r1, sp
	mov	r2, #0x0
	strh	r0, [r1, #0x4]
	mov	r0, #0x4
	strb	r0, [r1, #0x8]
	mov	r0, sp
	strh	r2, [r0, #0x6]
	mov	r0, #0xd
	strb	r0, [r1, #0x9]
	mov	r0, #0x10
	strb	r0, [r1, #0xa]
	mov	r0, #0x1
	strb	r0, [r1, #0xb]
	mov	r0, #0x8
	strb	r0, [r1, #0xc]
	mov	r0, #0x3
	strb	r0, [r1, #0xd]
	mov	r0, #0x7
	strb	r0, [r1, #0xe]
	ldr	r0, .L264
	str	r0, [sp, #0x10]
	ldr	r0, .L264+0x4
	str	r0, [sp, #0x14]
	ldr	r0, .L264+0x8
	mov	r2, #0x2
	bl	sub_81C81D4
	ldr	r0, .L264+0xc
	mov	r1, #0x7
	bl	CreateTask
	add	sp, sp, #0x18
	pop	{r0}
	bx	r0
.L265:
	.align	2, 0
.L264:
	.word	sub_81CB050
	.word	sub_81CBCEC
	.word	gUnknown_0862278C+0x8
	.word	sub_81CBC64
.Lfe22:
	.size	 sub_81CBBB8,.Lfe22-sub_81CBBB8
	.align	2, 0
	.type	 sub_81CBC1C,function
	.thumb_func
sub_81CBC1C:
	push	{lr}
	bl	sub_81C8234
	ldr	r0, .L267
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	pop	{r0}
	bx	r0
.L268:
	.align	2, 0
.L267:
	.word	sub_81CBC64
.Lfe23:
	.size	 sub_81CBC1C,.Lfe23-sub_81CBC1C
	.align	2, 0
	.type	 sub_81CBC38,function
	.thumb_func
sub_81CBC38:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L271
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	beq	.L270	@cond_branch
	ldr	r1, .L271+0x4
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r4, [r0, #0x26]
.L270:
	pop	{r4}
	pop	{r0}
	bx	r0
.L272:
	.align	2, 0
.L271:
	.word	sub_81CBC64
	.word	gTasks
.Lfe24:
	.size	 sub_81CBC38,.Lfe24-sub_81CBC38
	.align	2, 0
	.type	 sub_81CBC64,function
	.thumb_func
sub_81CBC64:
	push	{r4, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L276
	add	r2, r1, r0
	mov	r1, #0x1e
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	beq	.L274	@cond_branch
	ldrh	r0, [r2]
	add	r0, r0, #0x4
	mov	r1, #0x7f
	and	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L276+0x4
	mov	r3, #0x0
	ldrsh	r0, [r2, r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r2, #0x2]
	ldr	r0, .L276+0x8
	add	r1, r0, #0
	add	r1, r1, #0x20
	mov	r3, #0x2
	ldrsh	r2, [r2, r3]
	str	r2, [sp]
	ldr	r4, .L276+0xc
	str	r4, [sp, #0x4]
	mov	r2, #0x10
	mov	r3, #0x10
	bl	sub_81C79BC
	ldr	r0, .L276+0x10
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L274	@cond_branch
	ldr	r1, .L276+0x14
	ldr	r2, .L276+0x18
	add	r0, r4, #0
	bl	CpuSet
.L274:
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r0}
	bx	r0
.L277:
	.align	2, 0
.L276:
	.word	gTasks+0x8
	.word	gSineTable
	.word	gUnknown_08622720
	.word	gPlttBufferUnfaded+0xa0
	.word	gPaletteFade
	.word	gPlttBufferFaded+0xa0
	.word	0x4000008
.Lfe25:
	.size	 sub_81CBC64,.Lfe25-sub_81CBC64
	.align	2, 0
	.type	 sub_81CBCEC,function
	.thumb_func
sub_81CBCEC:
	push	{r4, r5, r6, lr}
	add	r5, r1, #0
	add	r4, r2, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	GetWindowAttribute
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBgTilemapBuffer
	add	r6, r0, #0
	lsl	r4, r4, #0x7
	add	r4, r4, #0x3a
	add	r6, r6, r4
	add	r0, r5, #0
	bl	sub_81CAEBC
	cmp	r0, #0
	beq	.L279	@cond_branch
	mov	r1, #0xa0
	lsl	r1, r1, #0x7
	add	r0, r1, #0
	strh	r0, [r6]
	add	r1, r6, #0
	add	r1, r1, #0x40
	ldr	r2, .L281
	add	r0, r2, #0
	strh	r0, [r1]
	b	.L280
.L282:
	.align	2, 0
.L281:
	.word	0x5001
.L279:
	ldr	r0, .L283
	add	r1, r0, #0
	strh	r1, [r6]
	add	r0, r6, #0
	add	r0, r0, #0x40
	strh	r1, [r0]
.L280:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L284:
	.align	2, 0
.L283:
	.word	0x5002
.Lfe26:
	.size	 sub_81CBCEC,.Lfe26-sub_81CBCEC
	.align	2, 0
	.globl	sub_81CBD48
	.type	 sub_81CBD48,function
	.thumb_func
sub_81CBD48:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	GetWindowAttribute
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBgTilemapBuffer
	lsl	r4, r4, #0x7
	add	r4, r4, #0x3a
	add	r0, r0, r4
	ldr	r2, .L286
	add	r1, r2, #0
	strh	r1, [r0]
	add	r0, r0, #0x40
	strh	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L287:
	.align	2, 0
.L286:
	.word	0x5002
.Lfe27:
	.size	 sub_81CBD48,.Lfe27-sub_81CBD48
	.align	2, 0
	.type	 sub_81CBD78,function
	.thumb_func
sub_81CBD78:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L289
	bl	AddWindow
	strh	r0, [r4, #0x10]
	ldr	r0, .L289+0x4
	bl	AddWindow
	strh	r0, [r4, #0x12]
	ldrb	r0, [r4, #0x10]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldrb	r0, [r4, #0x10]
	bl	PutWindowTilemap
	ldrb	r0, [r4, #0x12]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldrb	r0, [r4, #0x12]
	bl	PutWindowTilemap
	ldrb	r0, [r4, #0x10]
	mov	r1, #0x1
	bl	CopyWindowToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.L290:
	.align	2, 0
.L289:
	.word	gUnknown_086227D8
	.word	gUnknown_086227E0
.Lfe28:
	.size	 sub_81CBD78,.Lfe28-sub_81CBD78
	.align	2, 0
	.type	 sub_81CBDC0,function
	.thumb_func
sub_81CBDC0:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4, #0x12]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldrh	r0, [r4, #0x12]
	bl	sub_81CBDF4
	ldrh	r0, [r4, #0x12]
	bl	sub_81CBE0C
	ldrh	r0, [r4, #0x12]
	bl	sub_81CBE38
	ldrh	r0, [r4, #0x12]
	bl	sub_81CBE50
	ldrb	r0, [r4, #0x12]
	mov	r1, #0x2
	bl	CopyWindowToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 sub_81CBDC0,.Lfe29-sub_81CBDC0
	.align	2, 0
	.type	 sub_81CBDF4,function
	.thumb_func
sub_81CBDF4:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L293
	mov	r2, #0x0
	bl	sub_81CBE88
	pop	{r0}
	bx	r0
.L294:
	.align	2, 0
.L293:
	.word	gText_NumberRegistered
.Lfe30:
	.size	 sub_81CBDF4,.Lfe30-sub_81CBDF4
	.align	2, 0
	.type	 sub_81CBE0C,function
	.thumb_func
sub_81CBE0C:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	bl	sub_81CAE38
	add	r1, r0, #0
	mov	r0, sp
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r0, r4, #0
	mov	r1, sp
	mov	r2, #0x1
	bl	sub_81CBEB4
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 sub_81CBE0C,.Lfe31-sub_81CBE0C
	.align	2, 0
	.type	 sub_81CBE38,function
	.thumb_func
sub_81CBE38:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L297
	mov	r2, #0x2
	bl	sub_81CBE88
	pop	{r0}
	bx	r0
.L298:
	.align	2, 0
.L297:
	.word	gText_NumberOfBattles
.Lfe32:
	.size	 sub_81CBE38,.Lfe32-sub_81CBE38
	.align	2, 0
	.type	 sub_81CBE50,function
	.thumb_func
sub_81CBE50:
	push	{r4, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x9
	bl	GetGameStat
	add	r1, r0, #0
	ldr	r0, .L301
	cmp	r1, r0
	ble	.L300	@cond_branch
	add	r1, r0, #0
.L300:
	mov	r0, sp
	mov	r2, #0x0
	mov	r3, #0x5
	bl	ConvertIntToDecimalStringN
	add	r0, r4, #0
	mov	r1, sp
	mov	r2, #0x3
	bl	sub_81CBEB4
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r0}
	bx	r0
.L302:
	.align	2, 0
.L301:
	.word	0x1869f
.Lfe33:
	.size	 sub_81CBE50,.Lfe33-sub_81CBE50
	.align	2, 0
	.type	 sub_81CBE88,function
	.thumb_func
sub_81CBE88:
	push	{lr}
	add	sp, sp, #-0xc
	add	r3, r1, #0
	lsl	r2, r2, #0x4
	add	r2, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	str	r2, [sp]
	mov	r1, #0xff
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	mov	r1, #0x7
	add	r2, r3, #0
	mov	r3, #0x2
	bl	AddTextPrinterParameterized
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 sub_81CBE88,.Lfe34-sub_81CBE88
	.align	2, 0
	.type	 sub_81CBEB4,function
	.thumb_func
sub_81CBEB4:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	add	r5, r0, #0
	add	r6, r1, #0
	add	r4, r2, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	mov	r0, #0x7
	mov	r2, #0x56
	bl	GetStringRightAlignXOffset
	add	r3, r0, #0
	lsl	r4, r4, #0x4
	add	r4, r4, #0x1
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	add	r0, r5, #0
	mov	r1, #0x7
	add	r2, r6, #0
	bl	AddTextPrinterParameterized
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 sub_81CBEB4,.Lfe35-sub_81CBEB4
	.align	2, 0
	.type	 sub_81CBEF8,function
	.thumb_func
sub_81CBEF8:
	push	{r4, r5, lr}
	add	sp, sp, #-0x2c
	add	r5, r0, #0
	add	r4, r1, #0
	bl	GetSelectedMatchCall
	add	r0, r0, r4
	bl	sub_81CAEA4
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0xd5
	beq	.L306	@cond_branch
	add	r0, sp, #0xc
	mov	r2, #0x0
	bl	GetMapName
	b	.L307
.L306:
	ldr	r1, .L308
	add	r0, sp, #0xc
	bl	StringCopy
.L307:
	mov	r0, #0x7
	add	r1, sp, #0xc
	mov	r2, #0x58
	bl	GetStringCenterAlignXOffset
	add	r4, r0, #0
	ldrb	r0, [r5, #0x10]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldrb	r0, [r5, #0x10]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r1, #0x1
	str	r1, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r1, #0x7
	add	r2, sp, #0xc
	add	r3, r4, #0
	bl	AddTextPrinterParameterized
	add	sp, sp, #0x2c
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L309:
	.align	2, 0
.L308:
	.word	gText_Unknown
.Lfe36:
	.size	 sub_81CBEF8,.Lfe36-sub_81CBEF8
	.align	2, 0
	.type	 sub_81CBF60,function
	.thumb_func
sub_81CBF60:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	add	r5, r0, #0
	ldrb	r0, [r5, #0x12]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r4, #0x0
	mov	r6, #0x80
	lsl	r6, r6, #0x11
	b	.L311
.L315:
	ldrb	r0, [r5, #0x12]
	ldr	r2, .L317
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r2, [r1]
	lsr	r1, r6, #0x18
	str	r1, [sp]
	mov	r1, #0xff
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	mov	r1, #0x7
	mov	r3, #0x10
	bl	AddTextPrinterParameterized
	mov	r0, #0x80
	lsl	r0, r0, #0x15
	add	r6, r6, r0
	add	r4, r4, #0x1
.L311:
	cmp	r4, #0x2
	bhi	.L312	@cond_branch
	add	r0, r4, #0
	bl	sub_81CB02C
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x3
	bne	.L315	@cond_branch
.L312:
	ldrb	r0, [r5, #0x12]
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L318:
	.align	2, 0
.L317:
	.word	gUnknown_086227E8
.Lfe37:
	.size	 sub_81CBF60,.Lfe37-sub_81CBF60
	.align	2, 0
	.type	 sub_81CBFC4,function
	.thumb_func
sub_81CBFC4:
	push	{r4, lr}
	add	r4, r0, #0
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L320	@cond_branch
	mov	r0, #0x1
	b	.L321
.L320:
	bl	sub_81CB01C
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	sub_81CC2F0
	mov	r0, #0x0
.L321:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe38:
	.size	 sub_81CBFC4,.Lfe38-sub_81CBFC4
	.align	2, 0
	.type	 sub_81CBFF0,function
	.thumb_func
sub_81CBFF0:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_81CC330
	add	r0, r4, #0
	bl	sub_81CBDC0
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 sub_81CBFF0,.Lfe39-sub_81CBFF0
	.align	2, 0
	.type	 sub_81CC004,function
	.thumb_func
sub_81CC004:
	push	{lr}
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe40:
	.size	 sub_81CC004,.Lfe40-sub_81CC004
	.align	2, 0
	.type	 sub_81CC014,function
	.thumb_func
sub_81CC014:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_81CC330
	ldrb	r0, [r4, #0x12]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldrb	r0, [r4, #0x12]
	mov	r1, #0x2
	bl	CopyWindowToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 sub_81CC014,.Lfe41-sub_81CC014
	.align	2, 0
	.type	 sub_81CC034,function
	.thumb_func
sub_81CC034:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L326
	bl	AddWindow
	strh	r0, [r4, #0x14]
	ldrh	r0, [r4, #0x14]
	mov	r1, #0x1
	mov	r2, #0x4
	bl	sub_8197184
	bl	sub_81C7B40
	pop	{r4}
	pop	{r0}
	bx	r0
.L327:
	.align	2, 0
.L326:
	.word	gUnknown_08622808
.Lfe42:
	.size	 sub_81CC034,.Lfe42-sub_81CC034
	.align	2, 0
	.type	 sub_81CC058,function
	.thumb_func
sub_81CC058:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x14]
	mov	r1, #0x1
	mov	r2, #0x4
	bl	sub_8197184
	ldrh	r0, [r4, #0x14]
	mov	r1, #0x1
	mov	r2, #0x4
	bl	sub_81971C4
	ldrb	r0, [r4, #0x14]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldrb	r0, [r4, #0x14]
	bl	PutWindowTilemap
	ldrb	r0, [r4, #0x14]
	mov	r1, #0x3
	bl	CopyWindowToVram
	bl	PauseSpinningPokenavSprite
	mov	r2, #0x0
	mov	r1, #0x18
	strh	r1, [r0, #0x20]
	mov	r1, #0x70
	strh	r1, [r0, #0x22]
	strh	r2, [r0, #0x26]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 sub_81CC058,.Lfe43-sub_81CC058
	.align	2, 0
	.type	 sub_81CC09C,function
	.thumb_func
sub_81CC09C:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4, #0x14]
	mov	r1, #0x1
	mov	r2, #0x40
	bl	LoadUserWindowBorderGfx
	ldrb	r0, [r4, #0x14]
	mov	r1, #0x1
	mov	r2, #0x4
	bl	DrawTextBorderOuter
	ldrb	r0, [r4, #0x14]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldrb	r0, [r4, #0x14]
	bl	PutWindowTilemap
	ldrb	r0, [r4, #0x14]
	mov	r1, #0x3
	bl	CopyWindowToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 sub_81CC09C,.Lfe44-sub_81CC09C
	.align	2, 0
	.type	 sub_81CC0D0,function
	.thumb_func
sub_81CC0D0:
	push	{lr}
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe45:
	.size	 sub_81CC0D0,.Lfe45-sub_81CC0D0
	.align	2, 0
	.type	 sub_81CC0E0,function
	.thumb_func
sub_81CC0E0:
	push	{lr}
	add	sp, sp, #-0xc
	ldrb	r0, [r0, #0x14]
	ldr	r2, .L332
	mov	r1, #0x1
	str	r1, [sp]
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x20
	bl	AddTextPrinterParameterized
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L333:
	.align	2, 0
.L332:
	.word	gUnknown_086227F4
.Lfe46:
	.size	 sub_81CC0E0,.Lfe46-sub_81CC0E0
	.align	2, 0
	.type	 sub_81CC104,function
	.thumb_func
sub_81CC104:
	push	{r4, lr}
	add	r4, r0, #0
	bl	RunTextPrinters
	ldrb	r0, [r4, #0x14]
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe47:
	.size	 sub_81CC104,.Lfe47-sub_81CC104
	.align	2, 0
	.type	 sub_81CC11C,function
	.thumb_func
sub_81CC11C:
	push	{lr}
	add	sp, sp, #-0xc
	ldrb	r0, [r0, #0x14]
	ldr	r2, .L336
	mov	r1, #0x1
	str	r1, [sp]
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
	add	sp, sp, #0xc
	pop	{r0}
	bx	r0
.L337:
	.align	2, 0
.L336:
	.word	gText_TrainerCloseBy
.Lfe48:
	.size	 sub_81CC11C,.Lfe48-sub_81CC11C
	.align	2, 0
	.type	 sub_81CC140,function
	.thumb_func
sub_81CC140:
	push	{r4, lr}
	add	r4, r0, #0
	bl	RunTextPrinters
	ldrb	r0, [r4, #0x14]
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe49:
	.size	 sub_81CC140,.Lfe49-sub_81CC140
	.align	2, 0
	.type	 sub_81CC158,function
	.thumb_func
sub_81CC158:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	bl	GetSelectedMatchCall
	add	r1, r4, #0
	add	r1, r1, #0xf
	bl	sub_81CAF78
	add	r5, r0, #0
	bl	GetPlayerTextSpeedDelay
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r2, [r4, #0x14]
	mov	r1, #0x1
	str	r1, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	add	r0, r2, #0
	add	r2, r5, #0
	mov	r3, #0x20
	bl	AddTextPrinterParameterized
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 sub_81CC158,.Lfe50-sub_81CC158
	.align	2, 0
	.type	 sub_81CC194,function
	.thumb_func
sub_81CC194:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L343
	ldrh	r1, [r0, #0x2c]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L341	@cond_branch
	ldr	r0, .L343+0x4
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L342
.L344:
	.align	2, 0
.L343:
	.word	gMain
	.word	gTextFlags
.L341:
	ldr	r2, .L345
	ldrb	r1, [r2]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L342:
	bl	RunTextPrinters
	ldrb	r0, [r4, #0x14]
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r4}
	pop	{r1}
	bx	r1
.L346:
	.align	2, 0
.L345:
	.word	gTextFlags
.Lfe51:
	.size	 sub_81CC194,.Lfe51-sub_81CC194
	.align	2, 0
	.type	 sub_81CC1DC,function
	.thumb_func
sub_81CC1DC:
	push	{lr}
	add	sp, sp, #-0x8
	bl	ResumeSpinningPokenavSprite
	mov	r0, #0x20
	str	r0, [sp]
	mov	r0, #0x14
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 sub_81CC1DC,.Lfe52-sub_81CC1DC
	.align	2, 0
	.type	 sub_81CC204,function
	.thumb_func
sub_81CC204:
	push	{lr}
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe53:
	.size	 sub_81CC204,.Lfe53-sub_81CC204
	.align	2, 0
	.type	 sub_81CC214,function
	.thumb_func
sub_81CC214:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r6, r0, #0
	mov	r5, #0x0
	ldr	r4, .L355
.L353:
	add	r0, r4, #0
	bl	LoadCompressedSpriteSheet
	add	r4, r4, #0x8
	add	r5, r5, #0x1
	cmp	r5, #0
	beq	.L353	@cond_branch
	ldr	r0, .L355+0x4
	bl	Pokenav_AllocAndLoadPalettes
	mov	r0, #0x0
	str	r0, [r6, #0x1c]
	ldr	r1, .L355+0x8
	add	r0, r6, r1
	str	r0, [sp]
	ldr	r1, .L355+0xc
	ldr	r0, [sp, #0x4]
	and	r0, r0, r1
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	orr	r0, r0, r1
	ldr	r1, .L355+0x10
	and	r0, r0, r1
	mov	r1, #0x80
	lsl	r1, r1, #0xc
	orr	r0, r0, r1
	str	r0, [sp, #0x4]
	mov	r0, sp
	bl	LoadSpriteSheet
	ldr	r2, .L355+0x14
	add	r1, r6, r2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xb
	ldr	r2, .L355+0x18
	add	r0, r0, r2
	str	r0, [r1]
	mov	r0, #0xd
	bl	AllocSpritePalette
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	strh	r0, [r6, #0x1a]
	bl	sub_81CC370
	str	r0, [r6, #0x20]
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L356:
	.align	2, 0
.L355:
	.word	gUnknown_08622810
	.word	gUnknown_08622818
	.word	0x1828
	.word	-0x10000
	.word	0xffff
	.word	0x1824
	.word	0x6010000
.Lfe54:
	.size	 sub_81CC214,.Lfe54-sub_81CC214
	.align	2, 0
	.type	 sub_81CC2B4,function
	.thumb_func
sub_81CC2B4:
	push	{r4, lr}
	mov	r0, #0x6
	bl	GetSubstructPtr
	add	r4, r0, #0
	ldr	r0, [r4, #0x1c]
	cmp	r0, #0
	beq	.L358	@cond_branch
	bl	DestroySprite
.L358:
	ldr	r0, [r4, #0x20]
	cmp	r0, #0
	beq	.L359	@cond_branch
	bl	DestroySprite
.L359:
	mov	r0, #0x8
	bl	FreeSpriteTilesByTag
	mov	r0, #0x7
	bl	FreeSpriteTilesByTag
	mov	r0, #0xc
	bl	FreeSpritePaletteByTag
	mov	r0, #0xd
	bl	FreeSpritePaletteByTag
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 sub_81CC2B4,.Lfe55-sub_81CC2B4
	.align	2, 0
	.type	 sub_81CC2F0,function
	.thumb_func
sub_81CC2F0:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	ldr	r0, [r4, #0x1c]
	cmp	r0, #0
	bne	.L361	@cond_branch
	ldr	r0, .L362
	mov	r1, #0x4
	mov	r2, #0x50
	mov	r3, #0x5
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L362+0x4
	add	r1, r1, r0
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_81CC344
.L361:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L363:
	.align	2, 0
.L362:
	.word	gUnknown_08622830
	.word	gSprites
.Lfe56:
	.size	 sub_81CC2F0,.Lfe56-sub_81CC2F0
	.align	2, 0
	.type	 sub_81CC330,function
	.thumb_func
sub_81CC330:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, [r4, #0x1c]
	bl	DestroySprite
	mov	r0, #0x0
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 sub_81CC330,.Lfe57-sub_81CC330
	.align	2, 0
	.type	 sub_81CC344,function
	.thumb_func
sub_81CC344:
	ldr	r0, [r0, #0x1c]
	lsl	r1, r1, #0x4
	strh	r1, [r0, #0x26]
	bx	lr
.Lfe58:
	.size	 sub_81CC344,.Lfe58-sub_81CC344
	.align	2, 0
	.globl	sub_81CC34C
	.type	 sub_81CC34C,function
	.thumb_func
sub_81CC34C:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L367	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x2e]
	ldrh	r0, [r2, #0x24]
	add	r0, r0, #0x1
	mov	r1, #0x7
	and	r0, r0, r1
	strh	r0, [r2, #0x24]
.L367:
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 sub_81CC34C,.Lfe59-sub_81CC34C
	.align	2, 0
	.type	 sub_81CC370,function
	.thumb_func
sub_81CC370:
	push	{lr}
	ldr	r0, .L369
	mov	r1, #0x2c
	mov	r2, #0x68
	mov	r3, #0x6
	bl	CreateSprite
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L369+0x4
	add	r0, r0, r1
	pop	{r1}
	bx	r1
.L370:
	.align	2, 0
.L369:
	.word	gUnknown_08622850
	.word	gSprites
.Lfe60:
	.size	 sub_81CC370,.Lfe60-sub_81CC370
	.align	2, 0
	.type	 sub_81CC39C,function
	.thumb_func
sub_81CC39C:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	bl	GetSelectedMatchCall
	bl	sub_81CAF04
	cmp	r0, #0
	blt	.L372	@cond_branch
	lsl	r4, r0, #0x3
	ldr	r0, .L373
	add	r0, r4, r0
	ldr	r1, .L373+0x4
	add	r5, r7, r1
	add	r1, r5, #0
	mov	r2, #0x0
	bl	DecompressPicFromTable
	ldr	r0, .L373+0x8
	add	r4, r4, r0
	ldr	r0, [r4]
	ldr	r1, .L373+0xc
	add	r6, r7, r1
	add	r1, r6, #0
	bl	LZ77UnCompWram
	ldr	r1, .L373+0x10
	add	r0, r7, r1
	ldr	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	add	r0, r5, #0
	mov	r3, #0x1
	bl	RequestDma3Copy
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrh	r1, [r7, #0x1a]
	add	r0, r6, #0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r1, [r7, #0x20]
	mov	r0, #0x0
	strh	r0, [r1, #0x2e]
	ldr	r0, [r7, #0x20]
	strh	r4, [r0, #0x3c]
	ldr	r1, [r7, #0x20]
	ldr	r0, .L373+0x14
	str	r0, [r1, #0x1c]
.L372:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L374:
	.align	2, 0
.L373:
	.word	gTrainerFrontPicTable
	.word	0x1828
	.word	gTrainerFrontPicPaletteTable
	.word	0x2028
	.word	0x1824
	.word	sub_81CC440
.Lfe61:
	.size	 sub_81CC39C,.Lfe61-sub_81CC39C
	.align	2, 0
	.type	 sub_81CC420,function
	.thumb_func
sub_81CC420:
	ldr	r1, [r0, #0x20]
	ldr	r0, .L376
	str	r0, [r1, #0x1c]
	bx	lr
.L377:
	.align	2, 0
.L376:
	.word	sub_81CC4A4
.Lfe62:
	.size	 sub_81CC420,.Lfe62-sub_81CC420
	.align	2, 0
	.type	 sub_81CC42C,function
	.thumb_func
sub_81CC42C:
	ldr	r0, [r0, #0x20]
	ldr	r1, [r0, #0x1c]
	ldr	r0, .L380
	eor	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
	bx	lr
.L381:
	.align	2, 0
.L380:
	.word	SpriteCallbackDummy
.Lfe63:
	.size	 sub_81CC42C,.Lfe63-sub_81CC42C
	.align	2, 0
	.type	 sub_81CC440,function
	.thumb_func
sub_81CC440:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L384	@cond_branch
	cmp	r0, #0x1
	beq	.L386	@cond_branch
	b	.L383
.L384:
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	bl	CheckForSpaceForDma3Request
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	beq	.L383	@cond_branch
	ldr	r0, .L390
	strh	r0, [r4, #0x24]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L383
.L391:
	.align	2, 0
.L390:
	.word	0xffb0
.L386:
	ldrh	r0, [r4, #0x24]
	add	r0, r0, #0x8
	strh	r0, [r4, #0x24]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	blt	.L383	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x24]
	ldr	r0, .L392
	str	r0, [r4, #0x1c]
.L383:
	pop	{r4}
	pop	{r0}
	bx	r0
.L393:
	.align	2, 0
.L392:
	.word	SpriteCallbackDummy
.Lfe64:
	.size	 sub_81CC440,.Lfe64-sub_81CC440
	.align	2, 0
	.type	 sub_81CC4A4,function
	.thumb_func
sub_81CC4A4:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x24]
	sub	r0, r0, #0x8
	strh	r0, [r3, #0x24]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x50
	neg	r1, r1
	cmp	r0, r1
	bgt	.L395	@cond_branch
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L396
	str	r0, [r3, #0x1c]
.L395:
	pop	{r0}
	bx	r0
.L397:
	.align	2, 0
.L396:
	.word	SpriteCallbackDummy
.Lfe65:
	.size	 sub_81CC4A4,.Lfe65-sub_81CC4A4
.text
	.align	2, 0

