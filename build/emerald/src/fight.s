@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gUnknown_08595E14
	.section .rodata
	.align	2, 0
	.type	 gUnknown_08595E14,object
	.size	 gUnknown_08595E14,24
gUnknown_08595E14:
	.short	0x2742
	.short	0x2742
	.word	gUnknown_08524914
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	unc_080B08A0
	.globl	gUnknown_08595E2C
	.align	2, 0
	.type	 gUnknown_08595E2C,object
gUnknown_08595E2C:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08595E2C,8
	.globl	gUnknown_08595E34
	.align	2, 0
	.type	 gUnknown_08595E34,object
gUnknown_08595E34:
	.short	0x10
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08595E34,8
	.globl	gUnknown_08595E3C
	.align	2, 0
	.type	 gUnknown_08595E3C,object
gUnknown_08595E3C:
	.short	0x20
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08595E3C,8
	.globl	gUnknown_08595E44
	.align	2, 0
	.type	 gUnknown_08595E44,object
gUnknown_08595E44:
	.short	0x30
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08595E44,8
	.globl	gUnknown_08595E4C
	.align	2, 0
	.type	 gUnknown_08595E4C,object
gUnknown_08595E4C:
	.short	0x30
	.byte	0x41
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08595E4C,8
	.globl	gUnknown_08595E54
	.align	2, 0
	.type	 gUnknown_08595E54,object
gUnknown_08595E54:
	.word	gUnknown_08595E2C
	.size	 gUnknown_08595E54,4
	.globl	gUnknown_08595E58
	.align	2, 0
	.type	 gUnknown_08595E58,object
gUnknown_08595E58:
	.word	gUnknown_08595E34
	.word	gUnknown_08595E3C
	.size	 gUnknown_08595E58,8
	.globl	gUnknown_08595E60
	.align	2, 0
	.type	 gUnknown_08595E60,object
gUnknown_08595E60:
	.word	gUnknown_08595E44
	.word	gUnknown_08595E4C
	.size	 gUnknown_08595E60,8
	.globl	gUnknown_08595E68
	.align	2, 0
	.type	 gUnknown_08595E68,object
	.size	 gUnknown_08595E68,24
gUnknown_08595E68:
	.short	0x279f
	.short	0x279f
	.word	gUnknown_08524914
	.word	gUnknown_08595E54
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810CE68
	.globl	gUnknown_08595E80
	.align	2, 0
	.type	 gUnknown_08595E80,object
	.size	 gUnknown_08595E80,24
gUnknown_08595E80:
	.short	0x279f
	.short	0x279f
	.word	gUnknown_08524914
	.word	gUnknown_08595E54
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810CEB4
	.globl	gFistFootSpriteTemplate
	.align	2, 0
	.type	 gFistFootSpriteTemplate,object
	.size	 gFistFootSpriteTemplate,24
gFistFootSpriteTemplate:
	.short	0x279f
	.short	0x279f
	.word	gUnknown_08524914
	.word	gUnknown_08595E54
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimBasicFistOrFoot
	.globl	gUnknown_08595EB0
	.align	2, 0
	.type	 gUnknown_08595EB0,object
	.size	 gUnknown_08595EB0,24
gUnknown_08595EB0:
	.short	0x279f
	.short	0x279f
	.word	gUnknown_08524914
	.word	gUnknown_08595E54
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810CF30
	.globl	gUnknown_08595EC8
	.align	2, 0
	.type	 gUnknown_08595EC8,object
	.size	 gUnknown_08595EC8,24
gUnknown_08595EC8:
	.short	0x279f
	.short	0x279f
	.word	gUnknown_08524914
	.word	gUnknown_08595E60
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810D10C
	.globl	gUnknown_08595EE0
	.align	2, 0
	.type	 gUnknown_08595EE0,object
	.size	 gUnknown_08595EE0,24
gUnknown_08595EE0:
	.short	0x279f
	.short	0x279f
	.word	gUnknown_08524914
	.word	gUnknown_08595E58
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810D1B4
	.globl	gUnknown_08595EF8
	.align	2, 0
	.type	 gUnknown_08595EF8,object
gUnknown_08595EF8:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x8
	.short	-0x8
	.byte	0x14
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gUnknown_08595EF8,24
	.globl	gUnknown_08595F10
	.align	2, 0
	.type	 gUnknown_08595F10,object
gUnknown_08595F10:
	.word	gUnknown_08595EF8
	.size	 gUnknown_08595F10,4
	.globl	gUnknown_08595F14
	.align	2, 0
	.type	 gUnknown_08595F14,object
	.size	 gUnknown_08595F14,24
gUnknown_08595F14:
	.short	0x279f
	.short	0x279f
	.word	gUnknown_085249D4
	.word	gUnknown_08595E54
	.word	0x0
	.word	gUnknown_08595F10
	.word	AnimSpinningKickOrPunch
	.globl	gUnknown_08595F2C
	.align	2, 0
	.type	 gUnknown_08595F2C,object
gUnknown_08595F2C:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x4
	.short	-0x4
	.byte	0x14
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gUnknown_08595F2C,24
	.globl	gUnknown_08595F44
	.align	2, 0
	.type	 gUnknown_08595F44,object
gUnknown_08595F44:
	.word	gUnknown_08595F2C
	.size	 gUnknown_08595F44,4
	.globl	gMegaPunchKickSpriteTemplate
	.align	2, 0
	.type	 gMegaPunchKickSpriteTemplate,object
	.size	 gMegaPunchKickSpriteTemplate,24
gMegaPunchKickSpriteTemplate:
	.short	0x279f
	.short	0x279f
	.word	gUnknown_085249D4
	.word	gUnknown_08595E54
	.word	0x0
	.word	gUnknown_08595F44
	.word	AnimSpinningKickOrPunch
	.globl	gUnknown_08595F60
	.align	2, 0
	.type	 gUnknown_08595F60,object
	.size	 gUnknown_08595F60,24
gUnknown_08595F60:
	.short	0x279f
	.short	0x279f
	.word	gUnknown_08524914
	.word	gUnknown_08595E58
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimStompFoot
	.globl	gUnknown_08595F78
	.align	2, 0
	.type	 gUnknown_08595F78,object
	.size	 gUnknown_08595F78,24
gUnknown_08595F78:
	.short	0x2759
	.short	0x2759
	.word	gUnknown_0852490C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810D37C
	.globl	gUnknown_08595F90
	.align	2, 0
	.type	 gUnknown_08595F90,object
	.size	 gUnknown_08595F90,24
gUnknown_08595F90:
	.short	0x27b7
	.short	0x27b7
	.word	gUnknown_08524A3C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810D40C
	.globl	gUnknown_08595FA8
	.align	2, 0
	.type	 gUnknown_08595FA8,object
	.size	 gUnknown_08595FA8,24
gUnknown_08595FA8:
	.short	0x27e0
	.short	0x27e0
	.word	gUnknown_08524914
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810D4F4
	.globl	gUnknown_08595FC0
	.align	2, 0
	.type	 gUnknown_08595FC0,object
gUnknown_08595FC0:
	.short	0x20
	.short	0x20
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x4
	.short	0x4
	.byte	0x0
	.byte	0x40
	.space	2
	.short	-0x6
	.short	-0x6
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x6
	.short	0x6
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7ffe
	.short	0x2
	.space	4
	.size	 gUnknown_08595FC0,40
	.globl	gUnknown_08595FE8
	.align	2, 0
	.type	 gUnknown_08595FE8,object
gUnknown_08595FE8:
	.word	gUnknown_08595FC0
	.size	 gUnknown_08595FE8,4
	.globl	gUnknown_08595FEC
	.align	2, 0
	.type	 gUnknown_08595FEC,object
	.size	 gUnknown_08595FEC,24
gUnknown_08595FEC:
	.short	0x27e4
	.short	0x27e4
	.word	gUnknown_08524AFC
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_08595FE8
	.word	sub_810D608
	.globl	gUnknown_08596004
	.align	2, 0
	.type	 gUnknown_08596004,object
	.size	 gUnknown_08596004,24
gUnknown_08596004:
	.short	0x2811
	.short	0x2811
	.word	gUnknown_0852490C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810D714
	.globl	gUnknown_0859601C
	.align	2, 0
	.type	 gUnknown_0859601C,object
	.size	 gUnknown_0859601C,24
gUnknown_0859601C:
	.short	0x2810
	.short	0x2810
	.word	gUnknown_0852491C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810D874
	.globl	gUnknown_08596034
	.align	2, 0
	.type	 gUnknown_08596034,object
	.size	 gUnknown_08596034,24
gUnknown_08596034:
	.short	0x279f
	.short	0x279f
	.word	gUnknown_08524914
	.word	gUnknown_08595E54
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810D984
	.globl	gUnknown_0859604C
	.align	2, 0
	.type	 gUnknown_0859604C,object
gUnknown_0859604C:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0859604C,16
	.globl	gUnknown_0859605C
	.align	2, 0
	.type	 gUnknown_0859605C,object
gUnknown_0859605C:
	.short	0x0
	.byte	0x84
	.space	1
	.short	0x10
	.byte	0x84
	.space	1
	.short	0x20
	.byte	0x84
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0859605C,16
	.globl	gUnknown_0859606C
	.align	2, 0
	.type	 gUnknown_0859606C,object
gUnknown_0859606C:
	.short	0x0
	.byte	0x44
	.space	1
	.short	0x10
	.byte	0x44
	.space	1
	.short	0x20
	.byte	0x44
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_0859606C,16
	.globl	gUnknown_0859607C
	.align	2, 0
	.type	 gUnknown_0859607C,object
gUnknown_0859607C:
	.word	gUnknown_0859604C
	.word	gUnknown_0859605C
	.word	gUnknown_0859606C
	.size	 gUnknown_0859607C,12
	.globl	gUnknown_08596088
	.align	2, 0
	.type	 gUnknown_08596088,object
	.size	 gUnknown_08596088,24
gUnknown_08596088:
	.short	0x2805
	.short	0x2805
	.word	gUnknown_08524914
	.word	gUnknown_0859607C
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810DA10
	.globl	gUnknown_085960A0
	.align	2, 0
	.type	 gUnknown_085960A0,object
gUnknown_085960A0:
	.short	0x0
	.byte	0x6
	.space	1
	.short	0x40
	.byte	0x6
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085960A0,12
	.globl	gUnknown_085960AC
	.align	2, 0
	.type	 gUnknown_085960AC,object
gUnknown_085960AC:
	.short	0x0
	.byte	0xc6
	.space	1
	.short	0x40
	.byte	0xc6
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085960AC,12
	.globl	gUnknown_085960B8
	.align	2, 0
	.type	 gUnknown_085960B8,object
gUnknown_085960B8:
	.short	0x0
	.byte	0x46
	.space	1
	.short	0x40
	.byte	0x46
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085960B8,12
	.globl	gUnknown_085960C4
	.align	2, 0
	.type	 gUnknown_085960C4,object
gUnknown_085960C4:
	.word	gUnknown_085960A0
	.word	gUnknown_085960AC
	.word	gUnknown_085960B8
	.size	 gUnknown_085960C4,12
	.globl	gUnknown_085960D0
	.align	2, 0
	.type	 gUnknown_085960D0,object
	.size	 gUnknown_085960D0,24
gUnknown_085960D0:
	.short	0x2806
	.short	0x2806
	.word	gUnknown_0852491C
	.word	gUnknown_085960C4
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_810DA10
	.globl	gUnknown_085960E8
	.align	2, 0
	.type	 gUnknown_085960E8,object
gUnknown_085960E8:
	.short	0x200
	.short	0x200
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0x20
	.short	-0x20
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_085960E8,24
	.globl	gUnknown_08596100
	.align	2, 0
	.type	 gUnknown_08596100,object
gUnknown_08596100:
	.word	gUnknown_085960E8
	.size	 gUnknown_08596100,4
	.globl	gUnknown_08596104
	.align	2, 0
	.type	 gUnknown_08596104,object
	.size	 gUnknown_08596104,24
gUnknown_08596104:
	.short	0x279f
	.short	0x279f
	.word	gUnknown_085249D4
	.word	gUnknown_08595E54
	.word	0x0
	.word	gUnknown_08596100
	.word	sub_810DA7C
.text
	.align	2, 0
	.globl	unc_080B08A0
	.type	 unc_080B08A0,function
	.thumb_func
unc_080B08A0:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L3
	mov	r0, #0x0
	ldrsh	r1, [r5, r0]
	add	r0, r4, #0
	bl	SetAnimSpriteInitialXOffset
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	mov	r0, #0xf
	strh	r0, [r4, #0x2e]
	ldr	r0, .L3+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L3+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	gBattleAnimArgs
	.word	WaitAnimForDuration
	.word	DestroyAnimSprite
.Lfe1:
	.size	 unc_080B08A0,.Lfe1-unc_080B08A0
	.align	2, 0
	.globl	sub_810CE68
	.type	 sub_810CE68,function
	.thumb_func
sub_810CE68:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L7
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	bne	.L6	@cond_branch
	ldr	r0, .L7+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L6	@cond_branch
	ldrh	r0, [r4, #0x2]
	neg	r0, r0
	strh	r0, [r4, #0x2]
	ldrh	r0, [r4, #0x6]
	neg	r0, r0
	strh	r0, [r4, #0x6]
.L6:
	ldr	r4, .L7
	ldrb	r1, [r4, #0xc]
	add	r0, r5, #0
	bl	StartSpriteAnim
	mov	r0, #0x0
	strh	r0, [r4, #0xc]
	add	r0, r5, #0
	bl	sub_80A7938
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L8:
	.align	2, 0
.L7:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.Lfe2:
	.size	 sub_810CE68,.Lfe2-sub_810CE68
	.align	2, 0
	.globl	sub_810CEB4
	.type	 sub_810CEB4,function
	.thumb_func
sub_810CEB4:
	push	{r4, lr}
	add	r4, r0, #0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L10	@cond_branch
	ldr	r0, .L11
	ldrh	r1, [r0, #0x2]
	neg	r1, r1
	strh	r1, [r0, #0x2]
	ldrh	r1, [r0, #0x6]
	neg	r1, r1
	strh	r1, [r0, #0x6]
.L10:
	add	r0, r4, #0
	bl	sub_810CE68
	pop	{r4}
	pop	{r0}
	bx	r0
.L12:
	.align	2, 0
.L11:
	.word	gBattleAnimArgs
.Lfe3:
	.size	 sub_810CEB4,.Lfe3-sub_810CEB4
	.align	2, 0
	.globl	AnimBasicFistOrFoot
	.type	 AnimBasicFistOrFoot,function
	.thumb_func
AnimBasicFistOrFoot:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L16
	ldrb	r1, [r4, #0x8]
	bl	StartSpriteAnim
	mov	r1, #0x6
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L14	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	b	.L15
.L17:
	.align	2, 0
.L16:
	.word	gBattleAnimArgs
.L14:
	add	r0, r5, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
.L15:
	ldr	r0, .L18
	ldrh	r0, [r0, #0x4]
	strh	r0, [r5, #0x2e]
	ldr	r0, .L18+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L18+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L19:
	.align	2, 0
.L18:
	.word	gBattleAnimArgs
	.word	WaitAnimForDuration
	.word	DestroyAnimSprite
.Lfe4:
	.size	 AnimBasicFistOrFoot,.Lfe4-AnimBasicFistOrFoot
	.align	2, 0
	.globl	sub_810CF30
	.type	 sub_810CF30,function
	.thumb_func
sub_810CF30:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r5, r0, #0
	ldr	r0, .L30
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	mov	r9, r0
	cmp	r1, #0
	bne	.L21	@cond_branch
	ldr	r0, .L30+0x4
	b	.L29
.L31:
	.align	2, 0
.L30:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L21:
	ldr	r0, .L32
.L29:
	ldrb	r0, [r0]
	mov	r8, r0
	mov	r4, r9
	mov	r3, #0x4
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	bge	.L23	@cond_branch
	bl	Random2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x5
	bl	__umodsi3
	strh	r0, [r4, #0x4]
.L23:
	ldrb	r1, [r4, #0x4]
	add	r0, r5, #0
	bl	StartSpriteAnim
	mov	r0, r8
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	mov	r0, r8
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	mov	r0, r8
	mov	r1, #0x1
	bl	GetBattlerSpriteCoordAttr
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	lsr	r0, r0, #0x1f
	add	r1, r1, r0
	lsl	r1, r1, #0xf
	lsr	r6, r1, #0x10
	mov	r0, r8
	mov	r1, #0x0
	bl	GetBattlerSpriteCoordAttr
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L24	@cond_branch
	add	r0, r0, #0x3
.L24:
	lsl	r4, r0, #0xe
	lsr	r4, r4, #0x10
	bl	Random2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r6, #0x10
	asr	r1, r1, #0x10
	bl	__modsi3
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	bl	Random2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	add	r1, r4, #0
	bl	__modsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	bl	Random2
	mov	r7, #0x1
	add	r1, r7, #0
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L25	@cond_branch
	lsl	r0, r6, #0x10
	neg	r0, r0
	lsr	r6, r0, #0x10
.L25:
	bl	Random2
	add	r1, r7, #0
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L26	@cond_branch
	lsl	r0, r4, #0x10
	neg	r0, r0
	lsr	r4, r0, #0x10
.L26:
	ldr	r0, .L32+0x4
	add	r0, r0, r8
	ldrb	r1, [r0]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L27	@cond_branch
	lsl	r0, r4, #0x10
	ldr	r1, .L32+0x8
	add	r0, r0, r1
	lsr	r4, r0, #0x10
.L27:
	lsl	r0, r6, #0x10
	asr	r0, r0, #0x10
	ldrh	r2, [r5, #0x20]
	add	r0, r0, r2
	strh	r0, [r5, #0x20]
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	ldrh	r3, [r5, #0x22]
	add	r0, r0, r3
	strh	r0, [r5, #0x22]
	mov	r1, r9
	ldrh	r0, [r1, #0x2]
	strh	r0, [r5, #0x2e]
	ldr	r0, .L32+0xc
	mov	r2, #0x20
	ldrsh	r1, [r5, r2]
	mov	r3, #0x22
	ldrsh	r2, [r5, r3]
	add	r3, r5, #0
	add	r3, r3, #0x43
	ldrb	r3, [r3]
	add	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x3c]
	cmp	r0, #0x40
	beq	.L28	@cond_branch
	mov	r0, #0x3c
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L32+0x10
	add	r0, r0, r4
	mov	r1, #0x0
	bl	StartSpriteAffineAnim
	mov	r2, #0x3c
	ldrsh	r1, [r5, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r1, .L32+0x14
	str	r1, [r0]
.L28:
	ldr	r0, .L32+0x18
	str	r0, [r5, #0x1c]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L33:
	.align	2, 0
.L32:
	.word	gBattleAnimTarget
	.word	gBattlerPositions
	.word	-0x100000
	.word	gBasicHitSplatSpriteTemplate
	.word	gSprites
	.word	SpriteCallbackDummy
	.word	sub_810D0B8
.Lfe5:
	.size	 sub_810CF30,.Lfe5-sub_810CF30
	.align	2, 0
	.type	 sub_810D0B8,function
	.thumb_func
sub_810D0B8:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r1, [r5, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r5, r2]
	cmp	r0, #0
	bne	.L35	@cond_branch
	mov	r1, #0x3c
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x40
	beq	.L36	@cond_branch
	ldr	r4, .L38
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	mov	r0, #0x3c
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
.L36:
	add	r0, r5, #0
	bl	DestroyAnimSprite
	b	.L37
.L39:
	.align	2, 0
.L38:
	.word	gSprites
.L35:
	sub	r0, r1, #0x1
	strh	r0, [r5, #0x2e]
.L37:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 sub_810D0B8,.Lfe6-sub_810D0B8
	.align	2, 0
	.globl	sub_810D10C
	.type	 sub_810D10C,function
	.thumb_func
sub_810D10C:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
	mov	r0, #0x1e
	strh	r0, [r4, #0x2e]
	ldr	r0, .L43
	mov	r1, #0x4
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L41	@cond_branch
	ldrh	r0, [r4, #0x20]
	sub	r0, r0, #0x14
	strh	r0, [r4, #0x32]
	b	.L42
.L44:
	.align	2, 0
.L43:
	.word	gBattleAnimArgs
.L41:
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x14
	strh	r0, [r4, #0x32]
	add	r2, r4, #0
	add	r2, r2, #0x3f
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
.L42:
	ldrh	r0, [r4, #0x22]
	sub	r0, r0, #0x14
	strh	r0, [r4, #0x36]
	ldr	r0, .L45
	str	r0, [r4, #0x1c]
	ldr	r1, .L45+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4}
	pop	{r0}
	bx	r0
.L46:
	.align	2, 0
.L45:
	.word	StartAnimLinearTranslation
	.word	sub_810D164
.Lfe7:
	.size	 sub_810D10C,.Lfe7-sub_810D10C
	.align	2, 0
	.type	 sub_810D164,function
	.thumb_func
sub_810D164:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x38]
	add	r0, r0, #0x1
	mov	r6, #0x0
	strh	r0, [r5, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xb
	bne	.L48	@cond_branch
	ldrh	r2, [r5, #0x20]
	ldrh	r4, [r5, #0x24]
	sub	r0, r2, r4
	strh	r0, [r5, #0x32]
	ldrh	r1, [r5, #0x22]
	ldrh	r3, [r5, #0x26]
	sub	r0, r1, r3
	strh	r0, [r5, #0x36]
	mov	r0, #0x8
	strh	r0, [r5, #0x2e]
	add	r2, r2, r4
	strh	r2, [r5, #0x20]
	add	r1, r1, r3
	strh	r1, [r5, #0x22]
	strh	r6, [r5, #0x26]
	strh	r6, [r5, #0x24]
	ldr	r0, .L49
	str	r0, [r5, #0x1c]
	ldr	r1, .L49+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
.L48:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L50:
	.align	2, 0
.L49:
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe8:
	.size	 sub_810D164,.Lfe8-sub_810D164
	.align	2, 0
	.globl	sub_810D1B4
	.type	 sub_810D1B4,function
	.thumb_func
sub_810D1B4:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	ldr	r0, .L54
	ldrb	r1, [r0]
	mov	r0, #0x2
	ldr	r2, .L54+0x4
	eor	r0, r0, r1
	ldrb	r1, [r2]
	cmp	r0, r1
	bne	.L52	@cond_branch
	ldrb	r0, [r2]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L52	@cond_branch
	ldr	r1, .L54+0x8
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	neg	r0, r0
	strh	r0, [r1]
.L52:
	add	r0, r6, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
	ldr	r0, .L54
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L53	@cond_branch
	ldr	r1, .L54+0x8
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L53:
	ldr	r4, .L54+0x8
	ldrh	r0, [r4, #0x6]
	mov	r5, #0x0
	strh	r0, [r6, #0x2e]
	ldrh	r0, [r6, #0x20]
	strh	r0, [r6, #0x30]
	ldrh	r1, [r4, #0x4]
	add	r0, r0, r1
	strh	r0, [r6, #0x32]
	ldrh	r0, [r6, #0x22]
	strh	r0, [r6, #0x34]
	strh	r0, [r6, #0x36]
	add	r0, r6, #0
	bl	InitAnimLinearTranslation
	ldrh	r0, [r4, #0xa]
	strh	r0, [r6, #0x38]
	ldrh	r0, [r4, #0x8]
	strh	r0, [r6, #0x3a]
	strh	r5, [r6, #0x3c]
	ldr	r0, .L54+0xc
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L55:
	.align	2, 0
.L54:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	sub_810D240
.Lfe9:
	.size	 sub_810D1B4,.Lfe9-sub_810D1B4
	.align	2, 0
	.type	 sub_810D240,function
	.thumb_func
sub_810D240:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L57	@cond_branch
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	bl	Sin
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x3a]
	ldrh	r2, [r4, #0x3c]
	add	r0, r0, r2
	strh	r0, [r4, #0x3c]
	b	.L58
.L57:
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L58:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 sub_810D240,.Lfe10-sub_810D240
	.align	2, 0
	.globl	AnimSpinningKickOrPunch
	.type	 AnimSpinningKickOrPunch,function
	.thumb_func
AnimSpinningKickOrPunch:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
	ldr	r5, .L60
	ldrb	r1, [r5, #0x4]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x2e]
	ldr	r0, .L60+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L60+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L61:
	.align	2, 0
.L60:
	.word	gBattleAnimArgs
	.word	WaitAnimForDuration
	.word	AnimSpinningKickOrPunchFinish
.Lfe11:
	.size	 AnimSpinningKickOrPunch,.Lfe11-AnimSpinningKickOrPunch
	.align	2, 0
	.type	 AnimSpinningKickOrPunchFinish,function
	.thumb_func
AnimSpinningKickOrPunchFinish:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	StartSpriteAffineAnim
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x14
	strh	r0, [r4, #0x2e]
	ldr	r0, .L63
	str	r0, [r4, #0x1c]
	ldr	r1, .L63+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4}
	pop	{r0}
	bx	r0
.L64:
	.align	2, 0
.L63:
	.word	WaitAnimForDuration
	.word	DestroyAnimSprite
.Lfe12:
	.size	 AnimSpinningKickOrPunchFinish,.Lfe12-AnimSpinningKickOrPunchFinish
	.align	2, 0
	.globl	AnimStompFoot
	.type	 AnimStompFoot,function
	.thumb_func
AnimStompFoot:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
	ldr	r0, .L66
	ldrh	r0, [r0, #0x4]
	strh	r0, [r4, #0x2e]
	ldr	r0, .L66+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L67:
	.align	2, 0
.L66:
	.word	gBattleAnimArgs
	.word	AnimStompFootStep
.Lfe13:
	.size	 AnimStompFoot,.Lfe13-AnimStompFoot
	.align	2, 0
	.type	 AnimStompFootStep,function
	.thumb_func
AnimStompFootStep:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L69	@cond_branch
	mov	r0, #0x6
	strh	r0, [r5, #0x2e]
	ldr	r4, .L70
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	ldr	r0, .L70+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L70+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
.L69:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L71:
	.align	2, 0
.L70:
	.word	gBattleAnimTarget
	.word	StartAnimLinearTranslation
	.word	AnimStompFootEnd
.Lfe14:
	.size	 AnimStompFootStep,.Lfe14-AnimStompFootStep
	.align	2, 0
	.type	 AnimStompFootEnd,function
	.thumb_func
AnimStompFootEnd:
	push	{lr}
	mov	r1, #0xf
	strh	r1, [r0, #0x2e]
	ldr	r1, .L73
	str	r1, [r0, #0x1c]
	ldr	r1, .L73+0x4
	bl	StoreSpriteCallbackInData6
	pop	{r0}
	bx	r0
.L74:
	.align	2, 0
.L73:
	.word	WaitAnimForDuration
	.word	DestroyAnimSprite
.Lfe15:
	.size	 AnimStompFootEnd,.Lfe15-AnimStompFootEnd
	.align	2, 0
	.globl	sub_810D37C
	.type	 sub_810D37C,function
	.thumb_func
sub_810D37C:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L76	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
	ldr	r1, .L80
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L77
.L81:
	.align	2, 0
.L80:
	.word	gBattleAnimArgs
.L76:
	ldrh	r0, [r4, #0x30]
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	strh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x3
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x34]
	cmp	r0, #0x64
	ble	.L78	@cond_branch
	mov	r0, #0x34
	ldrsh	r1, [r4, r0]
	lsr	r0, r1, #0x1f
	add	r0, r1, r0
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x1
	sub	r1, r1, r0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L78:
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x78
	ble	.L77	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L77:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 sub_810D37C,.Lfe16-sub_810D37C
	.align	2, 0
	.globl	sub_810D40C
	.type	 sub_810D40C,function
	.thumb_func
sub_810D40C:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L86
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L83	@cond_branch
	ldr	r4, .L86+0x4
	b	.L85
.L87:
	.align	2, 0
.L86:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L83:
	ldr	r4, .L88
.L85:
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r1, .L88+0x4
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r5, #0x20]
	add	r0, r0, r2
	mov	r2, #0x0
	strh	r0, [r5, #0x20]
	ldrh	r0, [r1, #0x4]
	ldrh	r3, [r5, #0x22]
	add	r0, r0, r3
	strh	r0, [r5, #0x22]
	strh	r2, [r5, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r5, #0x30]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r5, #0x32]
	strh	r2, [r5, #0x34]
	ldr	r0, .L88+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L89:
	.align	2, 0
.L88:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	sub_810D47C
.Lfe17:
	.size	 sub_810D40C,.Lfe17-sub_810D40C
	.align	2, 0
	.type	 sub_810D47C,function
	.thumb_func
sub_810D47C:
	push	{lr}
	add	r1, r0, #0
	mov	r0, #0x2e
	ldrsh	r2, [r1, r0]
	cmp	r2, #0
	beq	.L92	@cond_branch
	cmp	r2, #0x1
	beq	.L96	@cond_branch
	b	.L91
.L92:
	ldrh	r0, [r1, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L91	@cond_branch
	mov	r2, #0x32
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L94	@cond_branch
	add	r0, r1, #0
	bl	DestroyAnimSprite
	b	.L91
.L94:
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x2e]
	b	.L91
.L96:
	ldrh	r0, [r1, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L97	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x30]
	ldrh	r0, [r1, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x34]
	and	r0, r0, r2
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L98	@cond_branch
	mov	r0, #0x2
	b	.L103
.L98:
	ldr	r0, .L104
.L103:
	strh	r0, [r1, #0x24]
.L97:
	ldrh	r0, [r1, #0x32]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x32]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L91	@cond_branch
	add	r0, r1, #0
	bl	DestroyAnimSprite
.L91:
	pop	{r0}
	bx	r0
.L105:
	.align	2, 0
.L104:
	.word	0xfffe
.Lfe18:
	.size	 sub_810D47C,.Lfe18-sub_810D47C
	.align	2, 0
	.globl	sub_810D4F4
	.type	 sub_810D4F4,function
	.thumb_func
sub_810D4F4:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L118
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L107	@cond_branch
	ldr	r4, .L118+0x4
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r2, [r6, #0x4]
	add	r0, r0, r2
	b	.L117
.L119:
	.align	2, 0
.L118:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L107:
	ldr	r4, .L120
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x4]
	add	r0, r0, r1
.L117:
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x6]
	add	r0, r0, r6
	strh	r0, [r5, #0x22]
	ldrh	r2, [r5, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	ldr	r3, .L120+0x4
	mov	r4, #0x2
	ldrsh	r0, [r3, r4]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	ldr	r4, .L120+0x8
	add	r0, r4, #0
	and	r1, r1, r0
	ldr	r0, .L120+0xc
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5, #0x4]
	mov	r1, #0x0
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	mov	r2, #0x2
	ldrsh	r0, [r3, r2]
	cmp	r0, #0x1
	beq	.L111	@cond_branch
	cmp	r0, #0x1
	bgt	.L116	@cond_branch
	cmp	r0, #0
	beq	.L110	@cond_branch
	b	.L114
.L121:
	.align	2, 0
.L120:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	0x3ff
	.word	-0x400
.L116:
	cmp	r0, #0x2
	beq	.L112	@cond_branch
	cmp	r0, #0x3
	beq	.L113	@cond_branch
	b	.L114
.L110:
	ldr	r0, .L122
	b	.L113
.L123:
	.align	2, 0
.L122:
	.word	0xfffd
.L111:
	mov	r0, #0x3
	strh	r0, [r5, #0x3a]
	ldr	r0, .L124
	strh	r0, [r5, #0x3c]
	b	.L109
.L125:
	.align	2, 0
.L124:
	.word	0xfffd
.L112:
	ldr	r0, .L126
	strh	r0, [r5, #0x3a]
	mov	r0, #0x3
	strh	r0, [r5, #0x3c]
	b	.L109
.L127:
	.align	2, 0
.L126:
	.word	0xfffd
.L113:
	strh	r0, [r5, #0x3a]
	strh	r0, [r5, #0x3c]
	b	.L109
.L114:
	add	r0, r5, #0
	bl	DestroyAnimSprite
	b	.L106
.L109:
	ldr	r0, .L128
	str	r0, [r5, #0x1c]
.L106:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L129:
	.align	2, 0
.L128:
	.word	sub_810D5DC
.Lfe19:
	.size	 sub_810D4F4,.Lfe19-sub_810D4F4
	.align	2, 0
	.type	 sub_810D5DC,function
	.thumb_func
sub_810D5DC:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x3a]
	ldrh	r2, [r1, #0x20]
	add	r0, r0, r2
	strh	r0, [r1, #0x20]
	ldrh	r0, [r1, #0x3c]
	ldrh	r2, [r1, #0x22]
	add	r0, r0, r2
	strh	r0, [r1, #0x22]
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x28
	ble	.L131	@cond_branch
	add	r0, r1, #0
	bl	DestroyAnimSprite
.L131:
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 sub_810D5DC,.Lfe20-sub_810D5DC
	.align	2, 0
	.globl	sub_810D608
	.type	 sub_810D608,function
	.thumb_func
sub_810D608:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L136
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L133	@cond_branch
	ldr	r4, .L136+0x4
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r0, .L136+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r5, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	ldr	r0, .L136+0xc
	b	.L135
.L137:
	.align	2, 0
.L136:
	.word	gBattleAnimArgs
	.word	gBattlerAttacker
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L133:
	ldr	r0, .L138
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r5, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	ldr	r0, .L138+0x4
.L135:
	ldrb	r0, [r0]
	strh	r0, [r5, #0x3c]
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	mov	r0, #0xc
	strh	r0, [r5, #0x30]
	mov	r0, #0x8
	strh	r0, [r5, #0x32]
	ldr	r0, .L138+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L139:
	.align	2, 0
.L138:
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
	.word	sub_810D6A8
.Lfe21:
	.size	 sub_810D608,.Lfe21-sub_810D608
	.align	2, 0
	.type	 sub_810D6A8,function
	.thumb_func
sub_810D6A8:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xb4
	bne	.L141	@cond_branch
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x10
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	ldr	r1, .L142
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L142+0x4
	str	r0, [r4, #0x1c]
.L141:
	pop	{r4}
	pop	{r0}
	bx	r0
.L143:
	.align	2, 0
.L142:
	.word	DestroySpriteAndMatrix
	.word	sub_80A6F98
.Lfe22:
	.size	 sub_810D6A8,.Lfe22-sub_810D6A8
	.align	2, 0
	.globl	sub_810D714
	.type	 sub_810D714,function
	.thumb_func
sub_810D714:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L145
	ldrh	r0, [r4]
	strh	r0, [r5, #0x20]
	mov	r2, #0x78
	strh	r2, [r5, #0x22]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r5, #0x2e]
	add	r0, r5, #0
	add	r0, r0, #0x36
	add	r1, r5, #0
	add	r1, r1, #0x38
	lsl	r2, r2, #0x8
	bl	StorePointerInVars
	ldrh	r0, [r4, #0x2]
	strh	r0, [r5, #0x3a]
	ldrh	r2, [r5, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	mov	r3, #0x4
	ldrsh	r0, [r4, r3]
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldr	r3, .L145+0x4
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r0, .L145+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5, #0x4]
	ldr	r0, .L145+0xc
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L146:
	.align	2, 0
.L145:
	.word	gBattleAnimArgs
	.word	0x3ff
	.word	-0x400
	.word	sub_810D770
.Lfe23:
	.size	 sub_810D714,.Lfe23-sub_810D714
	.align	2, 0
	.type	 sub_810D770,function
	.thumb_func
sub_810D770:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r7, r1]
	cmp	r0, #0
	beq	.L148	@cond_branch
	mov	r2, #0x36
	ldrsh	r0, [r7, r2]
	mov	r2, #0x38
	ldrsh	r1, [r7, r2]
	bl	LoadPointerFromVars
	add	r4, r0, #0
	mov	r1, #0x3a
	ldrsh	r0, [r7, r1]
	sub	r4, r4, r0
	add	r0, r7, #0
	add	r0, r0, #0x36
	add	r1, r7, #0
	add	r1, r1, #0x38
	add	r2, r4, #0
	bl	StorePointerInVars
	asr	r4, r4, #0x8
	strh	r4, [r7, #0x22]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r0, #0x8
	neg	r0, r0
	cmp	r4, r0
	bge	.L149	@cond_branch
	add	r0, r7, #0
	bl	DestroyAnimSprite
	b	.L151
.L149:
	ldrh	r0, [r7, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r7, #0x2e]
	b	.L151
.L148:
	ldr	r4, .L152
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r2, .L152+0x4
	mov	r8, r2
	ldrb	r0, [r2]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	sub	r4, r4, r6
	strh	r4, [r7, #0x2e]
	lsr	r0, r0, #0x18
	sub	r0, r0, r5
	strh	r0, [r7, #0x30]
	ldrh	r0, [r7, #0x20]
	lsl	r0, r0, #0x4
	strh	r0, [r7, #0x32]
	ldrh	r0, [r7, #0x22]
	lsl	r0, r0, #0x4
	strh	r0, [r7, #0x34]
	ldr	r0, .L152+0x8
	str	r0, [r7, #0x1c]
.L151:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L153:
	.align	2, 0
.L152:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	sub_810D830
.Lfe24:
	.size	 sub_810D770,.Lfe24-sub_810D770
	.align	2, 0
	.type	 sub_810D830,function
	.thumb_func
sub_810D830:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	ldrh	r1, [r2, #0x32]
	add	r0, r0, r1
	strh	r0, [r2, #0x32]
	ldrh	r1, [r2, #0x30]
	ldrh	r3, [r2, #0x34]
	add	r1, r1, r3
	strh	r1, [r2, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r2, #0x20]
	lsl	r1, r1, #0x10
	asr	r3, r1, #0x14
	strh	r3, [r2, #0x22]
	add	r0, r0, #0x8
	lsl	r0, r0, #0x10
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	cmp	r0, r1
	bhi	.L156	@cond_branch
	add	r1, r3, #0
	mov	r0, #0x8
	neg	r0, r0
	cmp	r1, r0
	blt	.L156	@cond_branch
	cmp	r1, #0x78
	ble	.L155	@cond_branch
.L156:
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L155:
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 sub_810D830,.Lfe25-sub_810D830
	.align	2, 0
	.globl	sub_810D874
	.type	 sub_810D874,function
	.thumb_func
sub_810D874:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L165
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L158	@cond_branch
	ldr	r4, .L165+0x4
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r0, .L165+0x8
	ldrb	r4, [r0]
	ldr	r0, .L165+0xc
	b	.L163
.L166:
	.align	2, 0
.L165:
	.word	gBattleAnimArgs
	.word	gBattlerAttacker
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
.L158:
	ldr	r0, .L167
	ldrb	r4, [r0]
	ldr	r0, .L167+0x4
.L163:
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r5, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L160	@cond_branch
	ldrb	r2, [r5, #0x3]
	lsl	r1, r2, #0x1a
	lsr	r1, r1, #0x1b
	mov	r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x1
	sub	r0, r0, #0x47
	b	.L164
.L168:
	.align	2, 0
.L167:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L160:
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L161	@cond_branch
	ldrb	r2, [r5, #0x3]
	lsl	r1, r2, #0x1a
	lsr	r1, r1, #0x1b
	mov	r0, #0x18
	orr	r1, r1, r0
	lsl	r1, r1, #0x1
	sub	r0, r0, #0x57
.L164:
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x3]
.L161:
	mov	r0, #0x10
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r5, #0x20]
	strh	r0, [r5, #0x30]
	add	r0, r4, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x22]
	strh	r0, [r5, #0x34]
	add	r0, r4, #0
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	add	r0, r5, #0
	bl	InitAnimLinearTranslation
	ldr	r1, .L169
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L169+0x4
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L170:
	.align	2, 0
.L169:
	.word	DestroyAnimSprite
	.word	sub_80A6F98
.Lfe26:
	.size	 sub_810D874,.Lfe26-sub_810D874
	.align	2, 0
	.type	 sub_810D960,function
	.thumb_func
sub_810D960:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	mov	r2, #0x36
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L172	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L172:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 sub_810D960,.Lfe27-sub_810D960
	.align	2, 0
	.globl	sub_810D984
	.type	 sub_810D984,function
	.thumb_func
sub_810D984:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r4, .L176
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r1, .L176+0x4
	ldrh	r0, [r1, #0x6]
	strh	r0, [r5, #0x30]
	ldrh	r0, [r1]
	strh	r0, [r5, #0x32]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r5, #0x34]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r5, #0x36]
	ldr	r0, .L176+0x8
	ldrb	r6, [r0]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L174	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L174:
	mov	r0, #0x1
	and	r6, r6, r0
	cmp	r6, #0
	beq	.L175	@cond_branch
	ldrh	r0, [r5, #0x32]
	neg	r0, r0
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x30]
.L175:
	ldrh	r1, [r5, #0x30]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldrh	r0, [r5, #0x32]
	strh	r0, [r5, #0x24]
	ldrh	r0, [r5, #0x34]
	strh	r0, [r5, #0x26]
	ldr	r0, .L176+0xc
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L177:
	.align	2, 0
.L176:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	gAnimMoveTurn
	.word	sub_810D960
.Lfe28:
	.size	 sub_810D984,.Lfe28-sub_810D984
	.align	2, 0
	.globl	sub_810DA10
	.type	 sub_810DA10,function
	.thumb_func
sub_810DA10:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L184
	mov	r1, #0x4
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L179	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	b	.L180
.L185:
	.align	2, 0
.L184:
	.word	gBattleAnimArgs
.L179:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
.L180:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L181	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	bl	StartSpriteAnim
	b	.L182
.L181:
	ldr	r0, .L186
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L182	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
.L182:
	ldr	r0, .L186+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L186+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4}
	pop	{r0}
	bx	r0
.L187:
	.align	2, 0
.L186:
	.word	gBattleAnimAttacker
	.word	RunStoredCallbackWhenAnimEnds
	.word	DestroyAnimSprite
.Lfe29:
	.size	 sub_810DA10,.Lfe29-sub_810DA10
	.align	2, 0
	.globl	sub_810DA7C
	.type	 sub_810DA7C,function
	.thumb_func
sub_810DA7C:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L189	@cond_branch
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x28
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x2
	bl	Sin
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x28
	ble	.L189	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L189:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 sub_810DA7C,.Lfe30-sub_810DA7C
	.align	2, 0
	.globl	sub_810DABC
	.type	 sub_810DABC,function
	.thumb_func
sub_810DABC:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L204
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L194	@cond_branch
	cmp	r0, #0x1
	bgt	.L197	@cond_branch
	cmp	r0, #0
	bne	.L197	@cond_branch
	mov	r0, #0x0
	bl	sub_80A6DAC
	ldr	r0, .L204+0x4
	ldrh	r0, [r0]
	strh	r0, [r4, #0x18]
	b	.L203
.L205:
	.align	2, 0
.L204:
	.word	gTasks
	.word	gBattleAnimArgs
.L194:
	ldrh	r0, [r4, #0x18]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x18]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L192	@cond_branch
.L203:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L192
.L197:
	mov	r2, #0xa0
	lsl	r2, r2, #0x3
	add	r0, r2, #0
	ldrh	r1, [r4, #0x1a]
	add	r0, r0, r1
	strh	r0, [r4, #0x1a]
.L192:
	mov	r2, #0xb0
	lsl	r2, r2, #0x4
	add	r0, r2, #0
	ldrh	r1, [r4, #0x1c]
	add	r0, r0, r1
	strh	r0, [r4, #0x1c]
	ldr	r0, .L206
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L200	@cond_branch
	ldr	r1, .L206+0x4
	ldrh	r0, [r4, #0x1a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r2, [r1]
	add	r0, r0, r2
	strh	r0, [r1]
	add	r7, r1, #0
	b	.L201
.L207:
	.align	2, 0
.L206:
	.word	gBattleAnimTarget
	.word	gBattle_BG3_X
.L200:
	ldr	r2, .L208
	ldrh	r1, [r4, #0x1a]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r2]
	sub	r0, r0, r1
	strh	r0, [r2]
	add	r7, r2, #0
.L201:
	ldr	r3, .L208+0x4
	ldrh	r2, [r4, #0x1c]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r3]
	add	r0, r0, r1
	strh	r0, [r3]
	mov	r0, #0xff
	ldrb	r1, [r4, #0x1a]
	mov	r5, #0x0
	strh	r1, [r4, #0x1a]
	and	r0, r0, r2
	strh	r0, [r4, #0x1c]
	ldr	r0, .L208+0x8
	mov	r2, #0xe
	ldrsh	r1, [r0, r2]
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L202	@cond_branch
	strh	r5, [r7]
	strh	r5, [r3]
	mov	r0, #0x1
	bl	sub_80A6DAC
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L202:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L209:
	.align	2, 0
.L208:
	.word	gBattle_BG3_X
	.word	gBattle_BG3_Y
	.word	gBattleAnimArgs
.Lfe31:
	.size	 sub_810DABC,.Lfe31-sub_810DABC
.text
	.align	2, 0

