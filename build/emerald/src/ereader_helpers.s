@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.type	 sub_81D38D4,function
	.thumb_func
sub_81D38D4:
	push	{lr}
	ldr	r0, .L4
	ldr	r0, [r0]
	ldr	r1, .L4+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	add	r2, r1, #0x1
	add	r0, r2, #0
	asr	r0, r0, #0x8
	lsl	r0, r0, #0x8
	sub	r0, r2, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L5:
	.align	2, 0
.L4:
	.word	gSaveBlock1Ptr
	.word	0x3d6d
.Lfe1:
	.size	 sub_81D38D4,.Lfe1-sub_81D38D4
	.align	2, 0
	.type	 Struct_Unk81D38FC_ValidateChecksum,function
	.thumb_func
Struct_Unk81D38FC_ValidateChecksum:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r5, #0x9c
	lsl	r5, r5, #0x2
	add	r1, r5, #0
	bl	CalcByteArraySum
	add	r4, r4, r5
	ldr	r1, [r4]
	cmp	r0, r1
	bne	.L7	@cond_branch
	mov	r0, #0x1
	b	.L8
.L7:
	mov	r0, #0x0
.L8:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 Struct_Unk81D38FC_ValidateChecksum,.Lfe2-Struct_Unk81D38FC_ValidateChecksum
	.align	2, 0
	.globl	EReader_IsReceivedDataValid
	.type	 EReader_IsReceivedDataValid,function
	.thumb_func
EReader_IsReceivedDataValid:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	ldrb	r6, [r7]
	sub	r0, r6, #0x1
	cmp	r0, #0x7
	bhi	.L17	@cond_branch
	mov	r5, #0x0
	cmp	r5, r6
	bcs	.L12	@cond_branch
	add	r4, r7, #0
	add	r4, r4, #0x8
.L14:
	add	r0, r4, #0
	bl	Struct_Unk81D38FC_ValidateChecksum
	cmp	r0, #0
	beq	.L19	@cond_branch
	mov	r0, #0x9d
	lsl	r0, r0, #0x2
	add	r4, r4, r0
	add	r5, r5, #0x1
	cmp	r5, r6
	bcc	.L14	@cond_branch
.L12:
	add	r0, r7, #0
	add	r0, r0, #0x8
	mov	r1, #0x9d
	lsl	r1, r1, #0x2
	mul	r1, r1, r6
	bl	CalcByteArraySum
	ldr	r1, [r7, #0x4]
	cmp	r0, r1
	bne	.L17	@cond_branch
	mov	r0, #0x1
	b	.L18
.L19:
.L17:
	mov	r0, #0x0
.L18:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 EReader_IsReceivedDataValid,.Lfe3-EReader_IsReceivedDataValid
	.align	2, 0
	.type	 TrainerHill_VerifyChecksum,function
	.thumb_func
TrainerHill_VerifyChecksum:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	sub	r0, r0, #0x1
	cmp	r0, #0x7
	bhi	.L22	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x8
	mov	r1, #0xee
	lsl	r1, r1, #0x4
	bl	CalcByteArraySum
	ldr	r1, [r4, #0x4]
	cmp	r0, r1
	bne	.L22	@cond_branch
	mov	r0, #0x1
	b	.L23
.L22:
	mov	r0, #0x0
.L23:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe4:
	.size	 TrainerHill_VerifyChecksum,.Lfe4-TrainerHill_VerifyChecksum
	.align	2, 0
	.type	 TryWriteTrainerHill_r,function
	.thumb_func
TryWriteTrainerHill_r:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r0, #0
	mov	r8, r1
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	mov	r0, r8
	mov	r1, #0x0
	bl	memset
	ldrb	r0, [r7]
	mov	r1, r8
	strb	r0, [r1]
	bl	sub_81D38D4
	mov	r2, r8
	strb	r0, [r2, #0x1]
	ldrb	r0, [r7]
	add	r0, r0, #0x1
	asr	r0, r0, #0x1
	strb	r0, [r2, #0x2]
	mov	r6, #0x0
	b	.L35
.L28:
	mov	r0, #0x1
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L29	@cond_branch
	lsr	r0, r6, #0x1f
	add	r0, r6, r0
	asr	r0, r0, #0x1
	lsl	r4, r0, #0x4
	sub	r4, r4, r0
	lsl	r4, r4, #0x3
	sub	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r8
	mov	r0, #0x9d
	lsl	r0, r0, #0x2
	mov	r5, r6
	mul	r5, r5, r0
	add	r5, r7, r5
	ldrb	r0, [r5, #0x8]
	strb	r0, [r4, #0x8]
	mov	r1, #0xa7
	lsl	r1, r1, #0x2
	add	r0, r4, r1
	mov	r2, #0xaa
	lsl	r2, r2, #0x1
	add	r1, r5, r2
	sub	r2, r2, #0x30
	bl	memcpy
	add	r4, r4, #0xc
	add	r5, r5, #0xc
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0xa4
	lsl	r2, r2, #0x1
	bl	memcpy
	b	.L27
.L29:
	lsr	r1, r6, #0x1f
	add	r1, r6, r1
	asr	r1, r1, #0x1
	lsl	r0, r1, #0x4
	sub	r0, r0, r1
	lsl	r0, r0, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r8
	mov	r1, #0x9d
	lsl	r1, r1, #0x2
	mul	r1, r1, r6
	add	r1, r7, r1
	ldrb	r2, [r1, #0x8]
	strb	r2, [r0, #0x9]
	mov	r2, #0xaa
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	add	r1, r1, #0xc
	sub	r2, r2, #0xc
	bl	memcpy
.L27:
	add	r6, r6, #0x1
.L35:
	ldrb	r0, [r7]
	cmp	r6, r0
	blt	.L28	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L32	@cond_branch
	lsr	r2, r6, #0x1f
	add	r2, r6, r2
	asr	r2, r2, #0x1
	lsl	r0, r2, #0x4
	sub	r0, r0, r2
	lsl	r0, r0, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r8
	mov	r1, #0xaa
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldr	r3, .L36
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r3
	mov	r2, #0xa4
	lsl	r2, r2, #0x1
	bl	memcpy
.L32:
	mov	r0, r8
	add	r0, r0, #0x8
	mov	r1, #0xee
	lsl	r1, r1, #0x4
	bl	CalcByteArraySum
	mov	r2, r8
	str	r0, [r2, #0x4]
	mov	r0, #0x1e
	mov	r1, r8
	bl	TryWriteSpecialSaveSection
	cmp	r0, #0x1
	bne	.L33	@cond_branch
	mov	r0, #0x1
	b	.L34
.L37:
	.align	2, 0
.L36:
	.word	gUnknown_08625B6C
.L33:
	mov	r0, #0x0
.L34:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 TryWriteTrainerHill_r,.Lfe5-TryWriteTrainerHill_r
	.align	2, 0
	.globl	TryWriteTrainerHill
	.type	 TryWriteTrainerHill,function
	.thumb_func
TryWriteTrainerHill:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	bl	AllocZeroed
	add	r5, r0, #0
	add	r0, r4, #0
	add	r1, r5, #0
	bl	TryWriteTrainerHill_r
	add	r4, r0, #0
	add	r0, r5, #0
	bl	Free
	add	r0, r4, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 TryWriteTrainerHill,.Lfe6-TryWriteTrainerHill
	.align	2, 0
	.type	 TryReadTrainerHill_r,function
	.thumb_func
TryReadTrainerHill_r:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	mov	r0, #0x1e
	bl	TryReadSpecialSaveSection
	cmp	r0, #0x1
	bne	.L41	@cond_branch
	ldr	r2, .L43
	add	r0, r5, #0
	add	r1, r4, #0
	bl	memcpy
	add	r0, r5, #0
	bl	TrainerHill_VerifyChecksum
	cmp	r0, #0
	beq	.L41	@cond_branch
	mov	r0, #0x1
	b	.L42
.L44:
	.align	2, 0
.L43:
	.word	0xee8
.L41:
	mov	r0, #0x0
.L42:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 TryReadTrainerHill_r,.Lfe7-TryReadTrainerHill_r
	.align	2, 0
	.type	 TryReadTrainerHill,function
	.thumb_func
TryReadTrainerHill:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	bl	AllocZeroed
	add	r5, r0, #0
	add	r0, r4, #0
	add	r1, r5, #0
	bl	TryReadTrainerHill_r
	add	r4, r0, #0
	add	r0, r5, #0
	bl	Free
	add	r0, r4, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 TryReadTrainerHill,.Lfe8-TryReadTrainerHill
	.align	2, 0
	.globl	ReadTrainerHillAndValidate
	.type	 ReadTrainerHillAndValidate,function
	.thumb_func
ReadTrainerHillAndValidate:
	push	{r4, r5, lr}
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	bl	AllocZeroed
	add	r4, r0, #0
	bl	TryReadTrainerHill
	add	r5, r0, #0
	add	r0, r4, #0
	bl	Free
	add	r0, r5, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 ReadTrainerHillAndValidate,.Lfe9-ReadTrainerHillAndValidate
	.align	2, 0
	.type	 unref_sub_81D3B54,function
	.thumb_func
unref_sub_81D3B54:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	add	r5, r1, #0
	bl	sub_81D41A0
	mov	r7, #0x2
	ldr	r4, .L56
.L50:
	bl	sub_81D4170
	ldr	r0, .L56+0x4
	ldrh	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L51	@cond_branch
	strb	r7, [r4]
.L51:
	mov	r0, #0x1
	add	r1, r6, #0
	add	r2, r5, #0
	mov	r3, #0x0
	bl	sub_81D3D70
	add	r1, r0, #0
	ldr	r0, .L56+0x8
	strh	r1, [r0]
	mov	r0, #0x13
	and	r0, r0, r1
	cmp	r0, #0x10
	bne	.L52	@cond_branch
	mov	r4, #0x0
	b	.L49
.L57:
	.align	2, 0
.L56:
	.word	gShouldAdvanceLinkState
	.word	gUnknown_030012E2
	.word	gUnknown_030012E4
.L52:
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L53	@cond_branch
	mov	r4, #0x1
	b	.L49
.L53:
	mov	r0, #0x4
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L54	@cond_branch
	strb	r0, [r4]
	bl	VBlankIntrWait
	b	.L50
.L54:
	mov	r4, #0x2
.L49:
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r1, .L58
	ldr	r2, .L58+0x4
	mov	r0, sp
	bl	CpuSet
	bl	sub_81D41F4
	add	r0, r4, #0
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L59:
	.align	2, 0
.L58:
	.word	gUnknown_030012C8
	.word	0x5000006
.Lfe10:
	.size	 unref_sub_81D3B54,.Lfe10-unref_sub_81D3B54
	.align	2, 0
	.type	 unref_sub_81D3BE8,function
	.thumb_func
unref_sub_81D3BE8:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	bl	sub_81D41A0
	mov	r6, #0x2
	ldr	r4, .L69
.L63:
	bl	sub_81D4170
	ldr	r0, .L69+0x4
	ldrh	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L64	@cond_branch
	strb	r6, [r4]
.L64:
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	add	r3, r5, #0
	bl	sub_81D3D70
	add	r1, r0, #0
	ldr	r0, .L69+0x8
	strh	r1, [r0]
	mov	r0, #0x13
	and	r0, r0, r1
	cmp	r0, #0x10
	bne	.L65	@cond_branch
	mov	r4, #0x0
	b	.L62
.L70:
	.align	2, 0
.L69:
	.word	gShouldAdvanceLinkState
	.word	gUnknown_030012E2
	.word	gUnknown_030012E4
.L65:
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L66	@cond_branch
	mov	r4, #0x1
	b	.L62
.L66:
	mov	r0, #0x4
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L67	@cond_branch
	strb	r0, [r4]
	bl	VBlankIntrWait
	b	.L63
.L67:
	mov	r4, #0x2
.L62:
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r1, .L71
	ldr	r2, .L71+0x4
	mov	r0, sp
	bl	CpuSet
	bl	sub_81D41F4
	add	r0, r4, #0
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L72:
	.align	2, 0
.L71:
	.word	gUnknown_030012C8
	.word	0x5000006
.Lfe11:
	.size	 unref_sub_81D3BE8,.Lfe11-unref_sub_81D3BE8
	.align	2, 0
	.type	 sub_81D3C7C,function
	.thumb_func
sub_81D3C7C:
	push	{r4, lr}
	ldr	r4, .L74
	mov	r3, #0x0
	strh	r3, [r4]
	ldr	r2, .L74+0x4
	ldrh	r1, [r2]
	ldr	r0, .L74+0x8
	and	r0, r0, r1
	strh	r0, [r2]
	mov	r0, #0x1
	strh	r0, [r4]
	ldr	r0, .L74+0xc
	strh	r3, [r0]
	sub	r0, r0, #0x1a
	strh	r3, [r0]
	ldr	r1, .L74+0x10
	mov	r0, #0xc0
	strh	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L75:
	.align	2, 0
.L74:
	.word	0x4000208
	.word	0x4000200
	.word	0xff3f
	.word	0x4000128
	.word	0x4000202
.Lfe12:
	.size	 sub_81D3C7C,.Lfe12-sub_81D3C7C
	.align	2, 0
	.type	 sub_81D3CBC,function
	.thumb_func
sub_81D3CBC:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r5, .L78
	mov	r4, #0x0
	strh	r4, [r5]
	ldr	r3, .L78+0x4
	ldrh	r1, [r3]
	ldr	r0, .L78+0x8
	and	r0, r0, r1
	strh	r0, [r3]
	mov	r6, #0x1
	strh	r6, [r5]
	ldr	r0, .L78+0xc
	strh	r4, [r0]
	ldr	r2, .L78+0x10
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	add	r0, r1, #0
	strh	r0, [r2]
	ldrh	r0, [r2]
	ldr	r7, .L78+0x14
	add	r1, r7, #0
	orr	r0, r0, r1
	strh	r0, [r2]
	strh	r4, [r5]
	ldrh	r0, [r3]
	mov	r1, #0x80
	orr	r0, r0, r1
	strh	r0, [r3]
	strh	r6, [r5]
	ldr	r1, .L78+0x18
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.L77	@cond_branch
	str	r0, [sp]
	ldr	r2, .L78+0x1c
	mov	r0, sp
	bl	CpuSet
.L77:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L79:
	.align	2, 0
.L78:
	.word	0x4000208
	.word	0x4000200
	.word	0xff3f
	.word	0x4000134
	.word	0x4000128
	.word	0x4003
	.word	gUnknown_030012C8
	.word	0x5000006
.Lfe13:
	.size	 sub_81D3CBC,.Lfe13-sub_81D3CBC
	.align	2, 0
	.type	 sub_81D3D34,function
	.thumb_func
sub_81D3D34:
	ldr	r0, .L81
	mov	r3, #0x0
	strh	r3, [r0]
	ldr	r2, .L81+0x4
	mov	r1, #0xa0
	lsl	r1, r1, #0x7
	add	r0, r1, #0
	strh	r0, [r2]
	ldrh	r0, [r2]
	mov	r1, #0x8
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r0, .L81+0x8
	strb	r3, [r0]
	ldr	r0, .L81+0xc
	strh	r3, [r0]
	ldr	r1, .L81+0x10
	mov	r0, #0x0
	str	r0, [r1]
	bx	lr
.L82:
	.align	2, 0
.L81:
	.word	0x4000134
	.word	0x4000128
	.word	gShouldAdvanceLinkState
	.word	gUnknown_030012E6
	.word	gUnknown_030012E8
.Lfe14:
	.size	 sub_81D3D34,.Lfe14-sub_81D3D34
	.align	2, 0
	.globl	sub_81D3D70
	.type	 sub_81D3D70,function
	.thumb_func
sub_81D3D70:
	push	{r4, r5, r6, lr}
	add	r4, r1, #0
	add	r5, r2, #0
	add	r6, r3, #0
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L107
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x6
	bls	.LCB837
	b	.L84	@long jump
.LCB837:
	lsl	r0, r0, #0x2
	ldr	r1, .L107+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L108:
	.align	2, 0
.L107:
	.word	gUnknown_030012C8
	.word	.L103
	.align	2, 0
	.align	2, 0
.L103:
	.word	.L85
	.word	.L86
	.word	.L89
	.word	.L90
	.word	.L97
	.word	.L98
	.word	.L101
.L85:
	bl	sub_81D3CBC
	ldr	r1, .L109
	mov	r0, #0x1
	strb	r0, [r1, #0x2]
	strb	r0, [r1, #0x1]
	b	.L84
.L110:
	.align	2, 0
.L109:
	.word	gUnknown_030012C8
.L86:
	add	r0, r2, #0
	bl	sub_81D3EE8
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L87	@cond_branch
	bl	sub_81D413C
.L87:
	ldr	r0, .L111
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.LCB886
	b	.L84	@long jump
.LCB886:
	b	.L105
.L112:
	.align	2, 0
.L111:
	.word	gShouldAdvanceLinkState
.L89:
	bl	sub_81D3D34
	add	r0, r4, #0
	add	r1, r5, #0
	add	r2, r6, #0
	bl	sub_81D3F1C
	ldr	r1, .L113
	mov	r0, #0x3
	strb	r0, [r1, #0x1]
.L90:
	ldr	r0, .L113+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L91	@cond_branch
.L105:
	ldr	r1, .L113
	strb	r0, [r1, #0x4]
	mov	r0, #0x6
	strb	r0, [r1, #0x1]
	b	.L84
.L114:
	.align	2, 0
.L113:
	.word	gUnknown_030012C8
	.word	gShouldAdvanceLinkState
.L91:
	ldr	r2, .L115
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	strh	r0, [r2]
	ldr	r1, .L115+0x4
	ldr	r0, [r1]
	add	r3, r0, #0x1
	str	r3, [r1]
	ldr	r1, .L115+0x8
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L93	@cond_branch
	cmp	r3, #0x3c
	bls	.L93	@cond_branch
	mov	r0, #0x1
	strb	r0, [r1, #0x4]
	mov	r0, #0x6
	strb	r0, [r1, #0x1]
.L93:
	ldr	r4, .L115+0x8
	ldrb	r0, [r4, #0x2]
	cmp	r0, #0x2
	beq	.L84	@cond_branch
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L95	@cond_branch
	ldrh	r0, [r2]
	cmp	r0, #0x2
	bls	.L95	@cond_branch
	bl	sub_81D413C
	mov	r0, #0x2
	b	.L106
.L116:
	.align	2, 0
.L115:
	.word	gUnknown_030012E6
	.word	gUnknown_030012E8
	.word	gUnknown_030012C8
.L95:
	bl	sub_81D413C
	ldr	r1, .L117
	mov	r0, #0x2
	strb	r0, [r1, #0x2]
	b	.L84
.L118:
	.align	2, 0
.L117:
	.word	gUnknown_030012C8
.L97:
	bl	sub_81D3CBC
	ldr	r1, .L119
	mov	r0, #0x5
	strb	r0, [r1, #0x1]
	b	.L84
.L120:
	.align	2, 0
.L119:
	.word	gUnknown_030012C8
.L98:
	ldr	r0, .L121
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L99	@cond_branch
	ldr	r0, .L121+0x4
	ldrh	r0, [r0]
	cmp	r0, #0x2
	bls	.L99	@cond_branch
	bl	sub_81D413C
.L99:
	ldr	r1, .L121+0x4
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x3c
	bls	.L84	@cond_branch
	ldr	r0, .L121
	mov	r1, #0x1
	strb	r1, [r0, #0x4]
	mov	r1, #0x6
	strb	r1, [r0, #0x1]
	b	.L84
.L122:
	.align	2, 0
.L121:
	.word	gUnknown_030012C8
	.word	gUnknown_030012E6
.L101:
	ldr	r4, .L123
	ldrb	r0, [r4, #0x2]
	cmp	r0, #0
	beq	.L84	@cond_branch
	bl	sub_81D3C7C
	mov	r0, #0x0
.L106:
	strb	r0, [r4, #0x2]
.L84:
	ldr	r2, .L123
	ldrb	r0, [r2, #0x2]
	ldrb	r1, [r2, #0x4]
	lsl	r1, r1, #0x2
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x4
	orr	r0, r0, r1
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L124:
	.align	2, 0
.L123:
	.word	gUnknown_030012C8
.Lfe15:
	.size	 sub_81D3D70,.Lfe15-sub_81D3D70
	.align	2, 0
	.type	 sub_81D3EE8,function
	.thumb_func
sub_81D3EE8:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L131
	ldr	r0, [r0]
	mov	r1, #0xc
	and	r0, r0, r1
	cmp	r0, #0x8
	bne	.L126	@cond_branch
	cmp	r2, #0
	beq	.L126	@cond_branch
	ldr	r1, .L131+0x4
	mov	r0, #0x1
	b	.L130
.L132:
	.align	2, 0
.L131:
	.word	0x4000128
	.word	gUnknown_030012C8
.L126:
	ldr	r1, .L133
	mov	r0, #0x0
.L130:
	strb	r0, [r1]
	pop	{r1}
	bx	r1
.L134:
	.align	2, 0
.L133:
	.word	gUnknown_030012C8
.Lfe16:
	.size	 sub_81D3EE8,.Lfe16-sub_81D3EE8
	.align	2, 0
	.type	 sub_81D3F1C,function
	.thumb_func
sub_81D3F1C:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	ldr	r3, .L138
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L136	@cond_branch
	ldr	r2, .L138+0x4
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	str	r5, [r3, #0x8]
	ldr	r0, .L138+0x8
	str	r4, [r0]
	lsr	r0, r4, #0x2
	add	r0, r0, #0x1
	str	r0, [r3, #0x10]
	bl	sub_81D3F68
	b	.L137
.L139:
	.align	2, 0
.L138:
	.word	gUnknown_030012C8
	.word	0x4000128
	.word	0x4000120
.L136:
	ldr	r1, .L140
	ldrh	r0, [r1]
	strh	r0, [r1]
	str	r2, [r3, #0x8]
.L137:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L141:
	.align	2, 0
.L140:
	.word	0x4000128
.Lfe17:
	.size	 sub_81D3F1C,.Lfe17-sub_81D3F1C
	.align	2, 0
	.type	 sub_81D3F68,function
	.thumb_func
sub_81D3F68:
	ldr	r1, .L143
	ldr	r2, .L143+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r0, .L143+0x8
	mov	r2, #0x40
	strh	r2, [r0]
	ldr	r3, .L143+0xc
	mov	r0, #0x0
	strh	r0, [r3]
	add	r1, r1, #0xf4
	ldrh	r0, [r1]
	orr	r0, r0, r2
	strh	r0, [r1]
	mov	r0, #0x1
	strh	r0, [r3]
	bx	lr
.L144:
	.align	2, 0
.L143:
	.word	0x400010c
	.word	0xfda7
	.word	0x400010e
	.word	0x4000208
.Lfe18:
	.size	 sub_81D3F68,.Lfe18-sub_81D3F68
	.align	2, 0
	.globl	sub_81D3F9C
	.type	 sub_81D3F9C,function
	.thumb_func
sub_81D3F9C:
	push	{lr}
	bl	sub_81D414C
	bl	sub_81D413C
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 sub_81D3F9C,.Lfe19-sub_81D3F9C
	.align	2, 0
	.globl	sub_81D3FAC
	.type	 sub_81D3FAC,function
	.thumb_func
sub_81D3FAC:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	ldr	r2, .L182
	ldrb	r0, [r2, #0x1]
	add	r3, r2, #0
	cmp	r0, #0x3
	beq	.L158	@cond_branch
	cmp	r0, #0x3
	bgt	.L179	@cond_branch
	cmp	r0, #0x1
	beq	.L148	@cond_branch
	b	.L147
.L183:
	.align	2, 0
.L182:
	.word	gUnknown_030012C8
.L179:
	cmp	r0, #0x5
	bne	.LCB1258
	b	.L173	@long jump
.LCB1258:
	b	.L147
.L148:
	ldr	r1, .L184
	ldr	r2, .L184+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r0, .L184+0x8
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [sp]
	str	r1, [sp, #0x4]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r4, #0x0
	ldr	r6, .L184+0x4
	ldr	r5, .L184+0xc
.L152:
	lsl	r0, r1, #0x1
	add	r0, r0, sp
	ldrh	r0, [r0]
	cmp	r0, r6
	bne	.L153	@cond_branch
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	b	.L151
.L185:
	.align	2, 0
.L184:
	.word	0x400012a
	.word	0xccd0
	.word	0x4000120
	.word	0xffff
.L153:
	cmp	r0, r5
	beq	.L151	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L151:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x3
	bls	.L152	@cond_branch
	cmp	r2, #0x2
	beq	.LCB1318
	b	.L147	@long jump
.LCB1318:
	cmp	r4, #0
	beq	.LCB1320
	b	.L147	@long jump
.LCB1320:
	strb	r2, [r3, #0x1]
	b	.L147
.L158:
	ldr	r0, .L186
	ldr	r4, [r0]
	ldr	r0, [r2, #0xc]
	cmp	r0, #0
	bne	.L159	@cond_branch
	ldrb	r0, [r2]
	cmp	r0, #0
	bne	.L159	@cond_branch
	lsr	r0, r4, #0x2
	add	r0, r0, #0x1
	str	r0, [r2, #0x10]
.L159:
	ldrb	r0, [r3]
	cmp	r0, #0x1
	bne	.L160	@cond_branch
	ldr	r1, [r3, #0xc]
	ldr	r0, [r3, #0x10]
	cmp	r1, r0
	bge	.L161	@cond_branch
	ldr	r2, .L186
	ldr	r0, [r3, #0x8]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	str	r0, [r2]
	ldr	r0, [r3, #0x14]
	ldr	r1, [r1]
	add	r0, r0, r1
	str	r0, [r3, #0x14]
	b	.L163
.L187:
	.align	2, 0
.L186:
	.word	0x4000120
.L161:
	ldr	r1, .L188
	ldr	r0, [r3, #0x14]
	b	.L180
.L189:
	.align	2, 0
.L188:
	.word	0x4000120
.L160:
	ldr	r1, [r3, #0xc]
	cmp	r1, #0
	ble	.L164	@cond_branch
	ldr	r0, [r3, #0x10]
	add	r0, r0, #0x1
	cmp	r1, r0
	bge	.L164	@cond_branch
	ldr	r0, [r3, #0x8]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	sub	r1, r1, #0x4
	str	r4, [r1]
	ldr	r0, [r3, #0x14]
	add	r0, r0, r4
	str	r0, [r3, #0x14]
	b	.L165
.L164:
	ldr	r0, [r3, #0xc]
	cmp	r0, #0
	beq	.L165	@cond_branch
	ldr	r0, [r3, #0x14]
	cmp	r0, r4
	bne	.L167	@cond_branch
	mov	r0, #0x1
	b	.L181
.L167:
	mov	r0, #0x2
.L181:
	strb	r0, [r3, #0x3]
.L165:
	ldr	r1, .L190
	mov	r0, #0x0
.L180:
	str	r0, [r1]
.L163:
	ldr	r1, [r3, #0xc]
	add	r1, r1, #0x1
	str	r1, [r3, #0xc]
	ldr	r0, [r3, #0x10]
	add	r0, r0, #0x2
	cmp	r1, r0
	bge	.L169	@cond_branch
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L170	@cond_branch
	ldr	r0, .L190+0x4
	ldrh	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strh	r1, [r0]
	b	.L147
.L191:
	.align	2, 0
.L190:
	.word	gUnknown_030012E8
	.word	0x400010e
.L170:
	bl	sub_81D413C
	b	.L147
.L169:
	mov	r0, #0x0
	mov	r1, #0x4
	strb	r1, [r3, #0x1]
	ldr	r1, .L192
	strh	r0, [r1]
	b	.L147
.L193:
	.align	2, 0
.L192:
	.word	gUnknown_030012E6
.L173:
	ldrb	r3, [r2]
	cmp	r3, #0
	bne	.L174	@cond_branch
	ldr	r1, .L194
	ldrb	r0, [r2, #0x3]
	strh	r0, [r1]
.L174:
	ldr	r0, .L194+0x4
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [sp]
	str	r1, [sp, #0x4]
	mov	r0, sp
	ldrh	r1, [r0, #0x2]
	sub	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L147	@cond_branch
	cmp	r3, #0x1
	bne	.L176	@cond_branch
	strb	r1, [r2, #0x3]
.L176:
	mov	r0, #0x6
	strb	r0, [r2, #0x1]
.L147:
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L195:
	.align	2, 0
.L194:
	.word	0x400012a
	.word	0x4000120
.Lfe20:
	.size	 sub_81D3FAC,.Lfe20-sub_81D3FAC
	.align	2, 0
	.type	 sub_81D413C,function
	.thumb_func
sub_81D413C:
	ldr	r0, .L197
	ldrh	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strh	r1, [r0]
	bx	lr
.L198:
	.align	2, 0
.L197:
	.word	0x4000128
.Lfe21:
	.size	 sub_81D413C,.Lfe21-sub_81D413C
	.align	2, 0
	.type	 sub_81D414C,function
	.thumb_func
sub_81D414C:
	ldr	r2, .L200
	ldrh	r1, [r2]
	ldr	r0, .L200+0x4
	and	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L200+0x8
	ldr	r2, .L200+0xc
	add	r0, r2, #0
	strh	r0, [r1]
	bx	lr
.L201:
	.align	2, 0
.L200:
	.word	0x400010e
	.word	0xff7f
	.word	0x400010c
	.word	0xfda7
.Lfe22:
	.size	 sub_81D414C,.Lfe22-sub_81D414C
	.align	2, 0
	.type	 sub_81D4170,function
	.thumb_func
sub_81D4170:
	push	{r4, lr}
	ldr	r0, .L203
	ldrh	r0, [r0]
	ldr	r2, .L203+0x4
	add	r1, r2, #0
	eor	r1, r1, r0
	ldr	r4, .L203+0x8
	ldr	r3, .L203+0xc
	ldrh	r2, [r3]
	add	r0, r1, #0
	bic	r0, r0, r2
	strh	r0, [r4]
	strh	r1, [r3]
	pop	{r4}
	pop	{r0}
	bx	r0
.L204:
	.align	2, 0
.L203:
	.word	0x4000130
	.word	0x3ff
	.word	gUnknown_030012E2
	.word	gUnknown_030012E0
.Lfe23:
	.size	 sub_81D4170,.Lfe23-sub_81D4170
	.align	2, 0
	.globl	sub_81D41A0
	.type	 sub_81D41A0,function
	.thumb_func
sub_81D41A0:
	ldr	r1, .L206
	ldr	r0, .L206+0x4
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L206+0x8
	ldr	r0, .L206+0xc
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L206+0x10
	ldr	r0, .L206+0x14
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L206+0x18
	ldr	r0, .L206+0x1c
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L206+0x20
	ldr	r0, .L206+0x24
	ldrh	r0, [r0]
	strh	r0, [r1]
	bx	lr
.L207:
	.align	2, 0
.L206:
	.word	gUnknown_030012EC
	.word	0x4000208
	.word	gUnknown_030012EE
	.word	0x4000200
	.word	gUnknown_030012F0
	.word	0x400010e
	.word	gUnknown_030012F2
	.word	0x4000128
	.word	gUnknown_030012F4
	.word	0x4000134
.Lfe24:
	.size	 sub_81D41A0,.Lfe24-sub_81D41A0
	.align	2, 0
	.globl	sub_81D41F4
	.type	 sub_81D41F4,function
	.thumb_func
sub_81D41F4:
	ldr	r1, .L209
	ldr	r0, .L209+0x4
	ldrh	r0, [r0]
	strh	r0, [r1]
	sub	r1, r1, #0x8
	ldr	r0, .L209+0x8
	ldrh	r0, [r0]
	strh	r0, [r1]
	sub	r1, r1, #0xf2
	ldr	r0, .L209+0xc
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x1a
	ldr	r0, .L209+0x10
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0xc
	ldr	r0, .L209+0x14
	ldrh	r0, [r0]
	strh	r0, [r1]
	bx	lr
.L210:
	.align	2, 0
.L209:
	.word	0x4000208
	.word	gUnknown_030012EC
	.word	gUnknown_030012EE
	.word	gUnknown_030012F0
	.word	gUnknown_030012F2
	.word	gUnknown_030012F4
.Lfe25:
	.size	 sub_81D41F4,.Lfe25-sub_81D41F4
	.align	2, 0
	.globl	sub_81D4238
	.type	 sub_81D4238,function
	.thumb_func
sub_81D4238:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r1, .L212
	ldr	r2, .L212+0x4
	mov	r0, sp
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L213:
	.align	2, 0
.L212:
	.word	gUnknown_030012C8
	.word	0x5000006
.Lfe26:
	.size	 sub_81D4238,.Lfe26-sub_81D4238

	.lcomm	gUnknown_030012C8,24

	.lcomm	gUnknown_030012E0,2

	.lcomm	gUnknown_030012E2,2

	.lcomm	gUnknown_030012E4,2

	.lcomm	gUnknown_030012E6,2

	.lcomm	gUnknown_030012E8,4

	.lcomm	gUnknown_030012EC,2

	.lcomm	gUnknown_030012EE,2

	.lcomm	gUnknown_030012F0,2

	.lcomm	gUnknown_030012F2,2

	.lcomm	gUnknown_030012F4,2
.text
	.align	2, 0

