@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gWirelessStatusIndicatorSpriteId
	.section ewram_data,"aw"
	.type	 gWirelessStatusIndicatorSpriteId,object
	.size	 gWirelessStatusIndicatorSpriteId,1
gWirelessStatusIndicatorSpriteId:
	.byte	0x0
	.globl	gUnknown_02022B14
	.align	2, 0
	.type	 gUnknown_02022B14,object
	.size	 gUnknown_02022B14,14
gUnknown_02022B14:
	.space	14
	.globl	gUnknown_02022B22
	.align	1, 0
	.type	 gUnknown_02022B22,object
	.size	 gUnknown_02022B22,8
gUnknown_02022B22:
	.space	8
	.globl	gUnknown_02022B2C
	.align	2, 0
	.type	 gUnknown_02022B2C,object
	.size	 gUnknown_02022B2C,24
gUnknown_02022B2C:
	.space	24
	.globl	gUnknown_02022B44
	.align	2, 0
	.type	 gUnknown_02022B44,object
	.size	 gUnknown_02022B44,220
gUnknown_02022B44:
	.space	220
	.globl	gWirelessLinkIconPalette
	.section .rodata
	.align	1, 0
	.type	 gWirelessLinkIconPalette,object
gWirelessLinkIconPalette:
	.short	0x7ed5
	.short	0x5250
	.short	0x7bdd
	.short	0x5ed6
	.short	0x3569
	.short	0x1f
	.short	0x42df
	.short	0x7fff
	.short	0x0
	.short	0x7bdd
	.short	0x7bdd
	.short	0x7bdd
	.short	0x7bdd
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 gWirelessLinkIconPalette,32
	.globl	gWirelessLinkIconPic
	.align	2, 0
	.type	 gWirelessLinkIconPic,object
gWirelessLinkIconPic:
	.word	0x38010
	.word	0x44444000
	.word	0x77773444
	.word	-0xf8b8a89
	.word	0x32003
	.word	0x600041e
	.word	0x48030043
	.word	0x7c03f047
	.word	-0x56d49fb4
	.word	0x7430777a
	.word	0x10030079
	.word	0x7777a907
	.word	0x700e034
	.word	0x23105b10
	.word	0x4ccc7777
	.word	0x7bb73377
	.word	0x3000700
	.word	0x37007bb7
	.word	-0x48e0fd00
	.word	0x5b10437b
	.word	0x7ff07ff0
	.word	0x7ff07ff0
	.word	0x44770080
	.word	0x324a7974
	.word	0x4a02a974
	.word	0x47a97411
	.word	0x447fd044
	.word	0x337f0080
	.word	0x114c7b74
	.word	0x471f7bb4
	.word	0x7ff07444
	.word	0x7ff07bf0
	.word	0x7f2003f0
	.word	0x7ff0576e
	.word	-0xf8a8090
	.word	-0xf800f81
	.word	0x740d5577
	.word	-0xf89a889
	.word	0x5503307f
	.word	0x673e0300
	.word	-0xf800f8b
	.word	-0xf800f81
	.word	0x577f507f
	.word	0x65730086
	.word	0x60577477
	.word	0x55ffa07f
	.word	0x566f10ab
	.word	0x20757310
	.word	0x7ff0777f
	.word	-0xf038010
	.word	-0xf800f81
	.word	-0xe800e01
	.word	-0x56000e81
	.word	0x74550a7a
	.word	0x7f005a79
	.word	0x577f005a
	.word	-0x2eaaac
	.word	0x757f1055
	.word	0x7bb57f00
	.word	0x75554710
	.word	0x55547fb0
	.word	-0xf08aaab
	.word	0x10033003
	.word	0x45060023
	.word	0x33003f0
	.word	0x972b80
	.word	0x324547
	.word	0x3001103
	.word	0x5b105320
	.word	0x2750ce
	.word	0x70334508
	.word	0x13301c
	.word	0x5b
	.size	 gWirelessLinkIconPic,292
	.globl	sWireless_ASCIItoRSETable
	.type	 sWireless_ASCIItoRSETable,object
sWireless_ASCIItoRSETable:
	.byte	0xff
	.byte	0x95
	.byte	0x96
	.byte	0x97
	.byte	0x98
	.byte	0x99
	.byte	0x9a
	.byte	0x37
	.byte	0x38
	.byte	0x39
	.byte	0x3a
	.byte	0x3b
	.byte	0x3c
	.byte	0x3d
	.byte	0x3e
	.byte	0x3f
	.byte	0x40
	.byte	0x41
	.byte	0x42
	.byte	0x43
	.byte	0x44
	.byte	0x45
	.byte	0x46
	.byte	0x47
	.byte	0x48
	.byte	0x49
	.byte	0x4a
	.byte	0x4b
	.byte	0x4c
	.byte	0x4d
	.byte	0x4e
	.byte	0x4f
	.byte	0x0
	.byte	0xab
	.byte	0xb5
	.byte	0xb6
	.byte	0xb1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xb2
	.byte	0xf1
	.byte	0x0
	.byte	0xae
	.byte	0xad
	.byte	0xba
	.byte	0xa1
	.byte	0xa2
	.byte	0xa3
	.byte	0xa4
	.byte	0xa5
	.byte	0xa6
	.byte	0xa7
	.byte	0xa8
	.byte	0xa9
	.byte	0xaa
	.byte	0x0
	.byte	0x9b
	.byte	0x9c
	.byte	0x9d
	.byte	0x9e
	.byte	0x9f
	.byte	0x0
	.byte	0xbb
	.byte	0xbc
	.byte	0xbd
	.byte	0xbe
	.byte	0xbf
	.byte	0xc0
	.byte	0xc1
	.byte	0xc2
	.byte	0xc3
	.byte	0xc4
	.byte	0xc5
	.byte	0xc6
	.byte	0xc7
	.byte	0xc8
	.byte	0xc9
	.byte	0xca
	.byte	0xcb
	.byte	0xcc
	.byte	0xcd
	.byte	0xce
	.byte	0xcf
	.byte	0xd0
	.byte	0xd1
	.byte	0xd2
	.byte	0xd3
	.byte	0xd4
	.byte	0xf2
	.byte	0xf3
	.byte	0xf4
	.byte	0xf5
	.byte	0xf6
	.byte	0x0
	.byte	0xd5
	.byte	0xd6
	.byte	0xd7
	.byte	0xd8
	.byte	0xd9
	.byte	0xda
	.byte	0xdb
	.byte	0xdc
	.byte	0xdd
	.byte	0xde
	.byte	0xdf
	.byte	0xe0
	.byte	0xe1
	.byte	0xe2
	.byte	0xe3
	.byte	0xe4
	.byte	0xe5
	.byte	0xe6
	.byte	0xe7
	.byte	0xe8
	.byte	0xe9
	.byte	0xea
	.byte	0xeb
	.byte	0xec
	.byte	0xed
	.byte	0xee
	.byte	0x2d
	.byte	0x2f
	.byte	0x30
	.byte	0x31
	.byte	0x32
	.byte	0x33
	.byte	0x34
	.byte	0x35
	.byte	0x36
	.byte	0x50
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.byte	0x4
	.byte	0x5
	.byte	0x6
	.byte	0x7
	.byte	0x8
	.byte	0x9
	.byte	0xa
	.byte	0xb
	.byte	0xc
	.byte	0xd
	.byte	0xe
	.byte	0xf
	.byte	0x10
	.byte	0x11
	.byte	0x12
	.byte	0x13
	.byte	0x14
	.byte	0x15
	.byte	0x16
	.byte	0x17
	.byte	0x18
	.byte	0x19
	.byte	0x1a
	.byte	0x1b
	.byte	0xad
	.byte	0xb3
	.byte	0xb4
	.byte	0x0
	.byte	0xaf
	.byte	0x7d
	.byte	0x7f
	.byte	0x80
	.byte	0x81
	.byte	0x82
	.byte	0x83
	.byte	0x84
	.byte	0x85
	.byte	0x86
	.byte	0xa0
	.byte	0xae
	.byte	0x51
	.byte	0x52
	.byte	0x53
	.byte	0x54
	.byte	0x55
	.byte	0x56
	.byte	0x57
	.byte	0x58
	.byte	0x59
	.byte	0x5a
	.byte	0x5b
	.byte	0x5c
	.byte	0x5d
	.byte	0x5e
	.byte	0x5f
	.byte	0x60
	.byte	0x61
	.byte	0x62
	.byte	0x63
	.byte	0x64
	.byte	0x65
	.byte	0x66
	.byte	0x67
	.byte	0x68
	.byte	0x69
	.byte	0x6a
	.byte	0x6b
	.byte	0x6c
	.byte	0x6d
	.byte	0x6e
	.byte	0x6f
	.byte	0x70
	.byte	0x71
	.byte	0x72
	.byte	0x73
	.byte	0x74
	.byte	0x75
	.byte	0x76
	.byte	0x77
	.byte	0x78
	.byte	0x79
	.byte	0x7a
	.byte	0x7b
	.byte	0x7c
	.byte	0x7e
	.byte	0xb0
	.byte	0xac
	.byte	0x1c
	.byte	0x1d
	.byte	0x1e
	.byte	0x1f
	.byte	0x20
	.byte	0x21
	.byte	0x22
	.byte	0x23
	.byte	0x24
	.byte	0x25
	.byte	0x26
	.byte	0x27
	.byte	0x28
	.byte	0x29
	.byte	0x2a
	.byte	0x2b
	.byte	0x2c
	.byte	0x2e
	.byte	0x87
	.byte	0x88
	.byte	0x89
	.byte	0x8a
	.byte	0x8b
	.byte	0x8c
	.byte	0x8d
	.byte	0x8e
	.byte	0x8f
	.byte	0x90
	.byte	0x91
	.byte	0x92
	.byte	0x93
	.byte	0x94
	.size	 sWireless_ASCIItoRSETable,256
	.globl	sWireless_RSEtoASCIITable
	.type	 sWireless_RSEtoASCIITable,object
sWireless_RSEtoASCIITable:
	.byte	0x20
	.byte	0x86
	.byte	0x87
	.byte	0x88
	.byte	0x89
	.byte	0x8a
	.byte	0x8b
	.byte	0x8c
	.byte	0x8d
	.byte	0x8e
	.byte	0x8f
	.byte	0x90
	.byte	0x91
	.byte	0x92
	.byte	0x93
	.byte	0x94
	.byte	0x95
	.byte	0x96
	.byte	0x97
	.byte	0x98
	.byte	0x99
	.byte	0x9a
	.byte	0x9b
	.byte	0x9c
	.byte	0x9d
	.byte	0x9e
	.byte	0x9f
	.byte	0xa0
	.byte	0xe0
	.byte	0xe1
	.byte	0xe2
	.byte	0xe3
	.byte	0xe4
	.byte	0xe5
	.byte	0xe6
	.byte	0xe7
	.byte	0xe8
	.byte	0xe9
	.byte	0xea
	.byte	0xeb
	.byte	0xec
	.byte	0xed
	.byte	0xee
	.byte	0xef
	.byte	0xf0
	.byte	0x7b
	.byte	0xf1
	.byte	0x7c
	.byte	0x7d
	.byte	0x7e
	.byte	0x7f
	.byte	0x80
	.byte	0x81
	.byte	0x82
	.byte	0x83
	.byte	0x7
	.byte	0x8
	.byte	0x9
	.byte	0xa
	.byte	0xb
	.byte	0xc
	.byte	0xd
	.byte	0xe
	.byte	0xf
	.byte	0x10
	.byte	0x11
	.byte	0x12
	.byte	0x13
	.byte	0x14
	.byte	0x15
	.byte	0x16
	.byte	0x17
	.byte	0x18
	.byte	0x19
	.byte	0x1a
	.byte	0x1b
	.byte	0x1c
	.byte	0x1d
	.byte	0x1e
	.byte	0x1f
	.byte	0x84
	.byte	0xb1
	.byte	0xb2
	.byte	0xb3
	.byte	0xb4
	.byte	0xb5
	.byte	0xb6
	.byte	0xb7
	.byte	0xb8
	.byte	0xb9
	.byte	0xba
	.byte	0xbb
	.byte	0xbc
	.byte	0xbd
	.byte	0xbe
	.byte	0xbf
	.byte	0xc0
	.byte	0xc1
	.byte	0xc2
	.byte	0xc3
	.byte	0xc4
	.byte	0xc5
	.byte	0xc6
	.byte	0xc7
	.byte	0xc8
	.byte	0xc9
	.byte	0xca
	.byte	0xcb
	.byte	0xcc
	.byte	0xcd
	.byte	0xce
	.byte	0xcf
	.byte	0xd0
	.byte	0xd1
	.byte	0xd2
	.byte	0xd3
	.byte	0xd4
	.byte	0xd5
	.byte	0xd6
	.byte	0xd7
	.byte	0xd8
	.byte	0xd9
	.byte	0xda
	.byte	0xdb
	.byte	0xdc
	.byte	0xa6
	.byte	0xdd
	.byte	0xa7
	.byte	0xa8
	.byte	0xa9
	.byte	0xaa
	.byte	0xab
	.byte	0xac
	.byte	0xad
	.byte	0xae
	.byte	0xf2
	.byte	0xf3
	.byte	0xf4
	.byte	0xf5
	.byte	0xf6
	.byte	0xf7
	.byte	0xf8
	.byte	0xf9
	.byte	0xfa
	.byte	0xfb
	.byte	0xfc
	.byte	0xfd
	.byte	0xfe
	.byte	0xff
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.byte	0x4
	.byte	0x5
	.byte	0x6
	.byte	0x3b
	.byte	0x3c
	.byte	0x3d
	.byte	0x3e
	.byte	0x3f
	.byte	0xaf
	.byte	0x30
	.byte	0x31
	.byte	0x32
	.byte	0x33
	.byte	0x34
	.byte	0x35
	.byte	0x36
	.byte	0x37
	.byte	0x38
	.byte	0x39
	.byte	0x21
	.byte	0xdf
	.byte	0xa1
	.byte	0xb0
	.byte	0xa5
	.byte	0xde
	.byte	0x24
	.byte	0x2a
	.byte	0xa2
	.byte	0xa3
	.byte	0x22
	.byte	0x23
	.byte	0x20
	.byte	0xa4
	.byte	0x20
	.byte	0x2f
	.byte	0x41
	.byte	0x42
	.byte	0x43
	.byte	0x44
	.byte	0x45
	.byte	0x46
	.byte	0x47
	.byte	0x48
	.byte	0x49
	.byte	0x4a
	.byte	0x4b
	.byte	0x4c
	.byte	0x4d
	.byte	0x4e
	.byte	0x4f
	.byte	0x50
	.byte	0x51
	.byte	0x52
	.byte	0x53
	.byte	0x54
	.byte	0x55
	.byte	0x56
	.byte	0x57
	.byte	0x58
	.byte	0x59
	.byte	0x5a
	.byte	0x61
	.byte	0x62
	.byte	0x63
	.byte	0x64
	.byte	0x65
	.byte	0x66
	.byte	0x67
	.byte	0x68
	.byte	0x69
	.byte	0x6a
	.byte	0x6b
	.byte	0x6c
	.byte	0x6d
	.byte	0x6e
	.byte	0x6f
	.byte	0x70
	.byte	0x71
	.byte	0x72
	.byte	0x73
	.byte	0x74
	.byte	0x75
	.byte	0x76
	.byte	0x77
	.byte	0x78
	.byte	0x79
	.byte	0x7a
	.byte	0x20
	.byte	0x20
	.byte	0x2b
	.byte	0x5b
	.byte	0x5c
	.byte	0x5d
	.byte	0x5e
	.byte	0x5f
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x0
	.size	 sWireless_RSEtoASCIITable,256
	.globl	sWirelessStatusIndicatorOamData
	.align	2, 0
	.type	 sWirelessStatusIndicatorOamData,object
	.size	 sWirelessStatusIndicatorOamData,8
sWirelessStatusIndicatorOamData:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.space	2
	.align	2, 0
	.type	 sWirelessStatusIndicatorAnim0,object
sWirelessStatusIndicatorAnim0:
	.short	0x4
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	0xc
	.byte	0x5
	.space	1
	.short	0x10
	.byte	0xa
	.space	1
	.short	0xc
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sWirelessStatusIndicatorAnim0,28
	.align	2, 0
	.type	 sWirelessStatusIndicatorAnim1,object
sWirelessStatusIndicatorAnim1:
	.short	0x4
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	0xc
	.byte	0xa
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sWirelessStatusIndicatorAnim1,20
	.align	2, 0
	.type	 sWirelessStatusIndicatorAnim2,object
sWirelessStatusIndicatorAnim2:
	.short	0x4
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sWirelessStatusIndicatorAnim2,12
	.align	2, 0
	.type	 sWirelessStatusIndicatorAnim3,object
sWirelessStatusIndicatorAnim3:
	.short	0x4
	.byte	0xa
	.space	1
	.short	0x14
	.byte	0xa
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sWirelessStatusIndicatorAnim3,12
	.align	2, 0
	.type	 sWirelessStatusIndicatorAnim4,object
sWirelessStatusIndicatorAnim4:
	.short	0x18
	.byte	0xa
	.space	1
	.short	0x4
	.byte	0xa
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sWirelessStatusIndicatorAnim4,12
	.align	2, 0
	.type	 sWirelessStatusIndicatorAnims,object
sWirelessStatusIndicatorAnims:
	.word	sWirelessStatusIndicatorAnim0
	.word	sWirelessStatusIndicatorAnim1
	.word	sWirelessStatusIndicatorAnim2
	.word	sWirelessStatusIndicatorAnim3
	.word	sWirelessStatusIndicatorAnim4
	.size	 sWirelessStatusIndicatorAnims,20
	.globl	sWirelessStatusIndicatorSpriteSheet
	.align	2, 0
	.type	 sWirelessStatusIndicatorSpriteSheet,object
	.size	 sWirelessStatusIndicatorSpriteSheet,8
sWirelessStatusIndicatorSpriteSheet:
	.word	gWirelessLinkIconPic
	.short	0x380
	.short	0xd431
	.globl	sWirelessStatusIndicatorSpritePalette
	.align	2, 0
	.type	 sWirelessStatusIndicatorSpritePalette,object
	.size	 sWirelessStatusIndicatorSpritePalette,8
sWirelessStatusIndicatorSpritePalette:
	.word	gWirelessLinkIconPalette
	.short	0xd432
	.space	2
	.align	2, 0
	.type	 sWirelessStatusIndicatorSpriteTemplate,object
	.size	 sWirelessStatusIndicatorSpriteTemplate,24
sWirelessStatusIndicatorSpriteTemplate:
	.short	0xd431
	.short	0xd432
	.word	sWirelessStatusIndicatorOamData
	.word	sWirelessStatusIndicatorAnims
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.globl	gUnknown_082ED608
	.align	2, 0
	.type	 gUnknown_082ED608,object
	.size	 gUnknown_082ED608,24
gUnknown_082ED608:
	.byte	0x4
	.byte	0x20
	.short	0x0
	.byte	0x0
	.space	1
	.short	0x2
	.word	gUnknown_02022B14
	.word	gUnknown_02022B22
	.byte	0x1
	.byte	0x0
	.short	0x258
	.short	0x12c
	.space	2
	.globl	gUnknown_082ED620
	.type	 gUnknown_082ED620,object
gUnknown_082ED620:
	.byte	0x0
	.byte	0x3
	.byte	0x2
	.byte	0x1
	.byte	0x0
	.size	 gUnknown_082ED620,5
	.globl	gUnknown_082ED628
	.align	2, 0
	.type	 gUnknown_082ED628,object
gUnknown_082ED628:
	.word	0x0
	.word	0x1
	.word	0x3
	.word	0x7
	.word	0xf
	.word	0x1f
	.word	0x3f
	.word	0x7f
	.word	0xff
	.word	0x1ff
	.word	0x3ff
	.word	0x7ff
	.word	0xfff
	.word	0x1fff
	.word	0x3fff
	.word	0x7fff
	.word	0xffff
	.word	0x1ffff
	.word	0x3ffff
	.word	0x7ffff
	.word	0xfffff
	.word	0x1fffff
	.word	0x3fffff
	.word	0x7fffff
	.word	0xffffff
	.size	 gUnknown_082ED628,100
	.globl	gUnknown_082ED68C
	.type	 gUnknown_082ED68C,object
gUnknown_082ED68C:
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.size	 gUnknown_082ED68C,9
	.globl	gUnknown_082ED695
	.type	 gUnknown_082ED695,object
gUnknown_082ED695:
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.byte	0x2
	.byte	0x3
	.byte	0x3
	.byte	0x4
	.size	 gUnknown_082ED695,16
	.globl	gUnknown_082ED6A5
	.type	 gUnknown_082ED6A5,object
gUnknown_082ED6A5:
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.size	 gUnknown_082ED6A5,16
	.globl	gUnknown_082ED6B8
	.align	2, 0
	.type	 gUnknown_082ED6B8,object
gUnknown_082ED6B8:
	.word	gBlockSendBuffer
	.word	0xc8
	.word	gBlockSendBuffer
	.word	0xc8
	.word	gBlockSendBuffer
	.word	0x64
	.word	gBlockSendBuffer
	.word	0xdc
	.word	gBlockSendBuffer
	.word	0x28
	.size	 gUnknown_082ED6B8,40
	.globl	gUnknown_082ED6E0
	.align	1, 0
	.type	 gUnknown_082ED6E0,object
gUnknown_082ED6E0:
	.short	0x2
	.short	0x7f7d
	.short	0x0
	.short	0xffff
	.size	 gUnknown_082ED6E0,8
	.globl	sUnref_082ED6E8
	.type	 sUnref_082ED6E8,object
sUnref_082ED6E8:
	.ascii	"RFU WAIT\000"
	.space	6
	.ascii	"RFU BOOT\000"
	.space	6
	.ascii	"RFU ERROR\000"
	.space	5
	.ascii	"RFU RESET\000"
	.space	5
	.ascii	"RFU CONFIG\000"
	.space	4
	.ascii	"RFU START\000"
	.space	5
	.ascii	"RFU SC POLL\000"
	.space	3
	.ascii	"RFU SP POLL\000"
	.space	3
	.ascii	"RFU START\000"
	.space	5
	.ascii	"RFU SEND ERR\000"
	.space	2
	.ascii	"RFU CP POLL\000"
	.space	3
	.size	 sUnref_082ED6E8,165
	.globl	sUnref_082ED6E9
	.type	 sUnref_082ED6E9,object
sUnref_082ED6E9:
	.ascii	"              \000"
	.space	1
	.ascii	"RECOVER START \000"
	.space	1
	.ascii	"DISSCONECT    \000"
	.space	1
	.ascii	"RECOVER SUUSES\000"
	.space	1
	.ascii	"RECOVER FAILED\000"
	.space	1
	.size	 sUnref_082ED6E9,80
	.globl	gUnknown_082ED7E0
	.align	2, 0
	.type	 gUnknown_082ED7E0,object
gUnknown_082ED7E0:
	.word	sub_801084C
	.word	sub_8010AAC
	.word	sub_8010D0C
	.size	 gUnknown_082ED7E0,12
	.globl	gUnknown_082ED7EC
	.align	2, 0
	.type	 gUnknown_082ED7EC,object
	.size	 gUnknown_082ED7EC,15
gUnknown_082ED7EC:
	.ascii	"PokemonSioInfo\000"
	.globl	gUnknown_082ED7FC
	.align	2, 0
	.type	 gUnknown_082ED7FC,object
	.size	 gUnknown_082ED7FC,22
gUnknown_082ED7FC:
	.ascii	"LINK LOSS DISCONNECT!\000"
	.globl	gUnknown_082ED814
	.align	2, 0
	.type	 gUnknown_082ED814,object
	.size	 gUnknown_082ED814,23
gUnknown_082ED814:
	.ascii	"LINK LOSS RECOVERY NOW\000"
	.globl	gUnknown_082ED82C
	.align	2, 0
	.type	 gUnknown_082ED82C,object
	.size	 gUnknown_082ED82C,31
gUnknown_082ED82C:
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x0
	.globl	gUnknown_082ED84B
	.type	 gUnknown_082ED84B,object
	.size	 gUnknown_082ED84B,16
gUnknown_082ED84B:
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x0
	.globl	gUnknown_082ED85B
	.type	 gUnknown_082ED85B,object
	.size	 gUnknown_082ED85B,9
gUnknown_082ED85B:
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x0
	.globl	gUnknown_082ED864
	.align	2, 0
	.type	 gUnknown_082ED864,object
	.size	 gUnknown_082ED864,2
gUnknown_082ED864:
	.byte	0x20
	.byte	0x0
	.globl	gUnknown_082ED866
	.type	 gUnknown_082ED866,object
	.size	 gUnknown_082ED866,2
gUnknown_082ED866:
	.byte	0x2a
	.byte	0x0
	.globl	gUnknown_082ED868
	.align	2, 0
	.type	 gUnknown_082ED868,object
	.size	 gUnknown_082ED868,8
gUnknown_082ED868:
	.ascii	"NOWSLOT\000"
	.globl	gUnknown_082ED870
	.align	2, 0
	.type	 gUnknown_082ED870,object
	.size	 gUnknown_082ED870,12
gUnknown_082ED870:
	.ascii	"           \000"
	.globl	gUnknown_082ED87C
	.align	2, 0
	.type	 gUnknown_082ED87C,object
	.size	 gUnknown_082ED87C,12
gUnknown_082ED87C:
	.ascii	"CLOCK DRIFT\000"
	.globl	gUnknown_082ED888
	.align	2, 0
	.type	 gUnknown_082ED888,object
	.size	 gUnknown_082ED888,12
gUnknown_082ED888:
	.ascii	"BUSY SEND  \000"
	.globl	gUnknown_082ED894
	.align	2, 0
	.type	 gUnknown_082ED894,object
	.size	 gUnknown_082ED894,12
gUnknown_082ED894:
	.ascii	"CMD REJECT \000"
	.globl	gUnknown_082ED8A0
	.align	2, 0
	.type	 gUnknown_082ED8A0,object
	.size	 gUnknown_082ED8A0,12
gUnknown_082ED8A0:
	.ascii	"CLOCK SLAVE\000"
	.globl	gUnknown_082ED8A8
	.type	 gUnknown_082ED8A8,object
	.size	 gUnknown_082ED8A8,24
gUnknown_082ED8A8:
	.ascii	"CHILD \000"
	.space	1
	.ascii	"PARENT\000"
	.space	1
	.ascii	"SEARCH\000"
	.space	1
.text
	.align	2, 0
	.globl	sub_800BEC0
	.type	 sub_800BEC0,function
	.thumb_func
sub_800BEC0:
	push	{r4, lr}
	bl	rfu_REQBN_softReset_and_checkID
	add	r4, r0, #0
	ldr	r0, .L5
	cmp	r4, r0
	bne	.L3	@cond_branch
	ldr	r1, .L5+0x4
	mov	r0, #0x1
	strb	r0, [r1, #0x8]
.L3:
	ldr	r0, .L5+0x4
	ldrb	r2, [r0, #0x4]
	add	r1, r0, #0
	cmp	r2, #0x17
	beq	.L4	@cond_branch
	cmp	r2, #0x1
	beq	.L4	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	strb	r0, [r1, #0x4]
.L4:
	mov	r0, #0x0
	strb	r0, [r1, #0x7]
	strb	r0, [r1, #0xd]
	strb	r0, [r1, #0x1]
	strb	r0, [r1]
	mov	r0, #0xff
	strb	r0, [r1, #0x6]
	bl	sub_800D610
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L6:
	.align	2, 0
.L5:
	.word	0x8001
	.word	gUnknown_03004140
.Lfe1:
	.size	 sub_800BEC0,.Lfe1-sub_800BEC0
	.align	2, 0
	.globl	rfu_REQ_sendData_wrapper
	.type	 rfu_REQ_sendData_wrapper,function
	.thumb_func
rfu_REQ_sendData_wrapper:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L11
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L8	@cond_branch
	ldr	r0, .L11+0x4
	ldrb	r0, [r0, #0x2]
	mov	r2, #0x0
	cmp	r0, #0x1
	bne	.L10	@cond_branch
	mov	r2, #0x1
	b	.L10
.L12:
	.align	2, 0
.L11:
	.word	gUnknown_03007890
	.word	gUnknown_03004140
.L8:
	ldr	r0, .L13
	ldrb	r1, [r0, #0x3]
	mov	r1, #0x0
	strb	r1, [r0, #0x3]
.L10:
	add	r0, r2, #0
	bl	rfu_REQ_sendData
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	gUnknown_03004140
.Lfe2:
	.size	 rfu_REQ_sendData_wrapper,.Lfe2-rfu_REQ_sendData_wrapper
	.align	2, 0
	.globl	sub_800BF4C
	.type	 sub_800BF4C,function
	.thumb_func
sub_800BF4C:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	add	r6, r1, #0
	cmp	r5, #0
	beq	.L16	@cond_branch
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r4, .L18
	ldr	r2, .L18+0x4
	mov	r0, sp
	add	r1, r4, #0
	bl	CpuSet
	mov	r0, #0xff
	strb	r0, [r4, #0x6]
	str	r5, [r4, #0x40]
	str	r6, [r4, #0x44]
	ldr	r0, .L18+0x8
	bl	rfu_setMSCCallback
	ldr	r0, .L18+0xc
	bl	rfu_setREQCallback
	mov	r0, #0x0
	b	.L17
.L19:
	.align	2, 0
.L18:
	.word	gUnknown_03004140
	.word	0x1000024
	.word	sub_800CEB0
	.word	sub_800C7B4
.L16:
	mov	r0, #0x4
.L17:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 sub_800BF4C,.Lfe3-sub_800BF4C
	.align	2, 0
	.globl	sub_800BFA0
	.type	 sub_800BFA0,function
	.thumb_func
sub_800BFA0:
	push	{r4, lr}
	add	sp, sp, #-0x4
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r4, .L21
	ldr	r2, .L21+0x4
	mov	r0, sp
	add	r1, r4, #0
	bl	CpuSet
	mov	r0, #0xff
	strb	r0, [r4, #0x6]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L22:
	.align	2, 0
.L21:
	.word	gUnknown_03004140
	.word	0x1000020
.Lfe4:
	.size	 sub_800BFA0,.Lfe4-sub_800BFA0
	.align	2, 0
	.globl	sub_800BFCC
	.type	 sub_800BFCC,function
	.thumb_func
sub_800BFCC:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_800C000
	ldr	r1, .L25
	mov	r2, #0x1
	strb	r2, [r1, #0x4]
	mov	r0, #0x2
	strb	r0, [r1, #0x5]
	str	r4, [r1, #0x3c]
	ldrb	r0, [r4, #0x11]
	strb	r0, [r1, #0x9]
	ldrh	r0, [r4, #0x12]
	strh	r0, [r1, #0x32]
	ldrh	r0, [r4, #0x14]
	strh	r0, [r1, #0x18]
	ldrb	r0, [r4, #0x10]
	cmp	r0, #0
	beq	.L24	@cond_branch
	strb	r2, [r1, #0xb]
.L24:
	pop	{r4}
	pop	{r0}
	bx	r0
.L26:
	.align	2, 0
.L25:
	.word	gUnknown_03004140
.Lfe5:
	.size	 sub_800BFCC,.Lfe5-sub_800BFCC
	.align	2, 0
	.type	 sub_800C000,function
	.thumb_func
sub_800C000:
	push	{r4, r5, lr}
	ldr	r2, .L33
	mov	r0, #0x0
	strb	r0, [r2, #0x5]
	strb	r0, [r2, #0x4]
	mov	r1, #0xff
	strb	r1, [r2, #0x6]
	strb	r0, [r2, #0x7]
	strb	r0, [r2, #0x10]
	strb	r0, [r2, #0xc]
	add	r1, r2, #0
	add	r1, r1, #0x24
	strb	r0, [r1]
	add	r1, r1, #0xc
	strb	r0, [r1]
	mov	r3, #0x0
	add	r5, r2, #0
	add	r5, r5, #0x28
	mov	r4, #0x0
	add	r2, r2, #0x34
.L31:
	lsl	r1, r3, #0x1
	add	r0, r1, r5
	strh	r4, [r0]
	add	r1, r1, r2
	strh	r4, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L31	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L34:
	.align	2, 0
.L33:
	.word	gUnknown_03004140
.Lfe6:
	.size	 sub_800C000,.Lfe6-sub_800C000
	.align	2, 0
	.globl	sub_800C048
	.type	 sub_800C048,function
	.thumb_func
sub_800C048:
	ldr	r1, .L36
	mov	r0, #0x15
	strb	r0, [r1, #0x4]
	bx	lr
.L37:
	.align	2, 0
.L36:
	.word	gUnknown_03004140
.Lfe7:
	.size	 sub_800C048,.Lfe7-sub_800C048
	.align	2, 0
	.globl	sub_800C054
	.type	 sub_800C054,function
	.thumb_func
sub_800C054:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r3, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r8, r2
	ldr	r1, .L55
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.L39	@cond_branch
	cmp	r0, #0x8
	bne	.L40	@cond_branch
	cmp	r5, #0x1
	beq	.L39	@cond_branch
.L40:
	mov	r0, #0x1
	strh	r0, [r1, #0x14]
	mov	r0, #0xf3
	mov	r1, #0x1
	bl	sub_800D30C
	mov	r0, #0x1
	b	.L54
.L56:
	.align	2, 0
.L55:
	.word	gUnknown_03004140
.L39:
	bl	rfu_getMasterSlave
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L41	@cond_branch
	ldr	r1, .L57
	mov	r0, #0x2
	strh	r0, [r1, #0x14]
	mov	r0, #0xf3
	mov	r1, #0x1
	bl	sub_800D30C
	mov	r0, #0x2
	b	.L54
.L58:
	.align	2, 0
.L57:
	.word	gUnknown_03004140
.L41:
	mov	r2, #0x0
	ldrh	r0, [r6]
	ldr	r4, .L59
	add	r1, r6, #0x2
	ldr	r3, .L59+0x4
	cmp	r0, r4
	beq	.L43	@cond_branch
.L44:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xf
	bhi	.L43	@cond_branch
	ldrh	r0, [r1]
	add	r1, r1, #0x2
	cmp	r0, r4
	bne	.L44	@cond_branch
.L43:
	cmp	r2, #0x10
	bne	.L48	@cond_branch
	mov	r0, #0x4
	strh	r0, [r3, #0x14]
	mov	r0, #0xf3
	mov	r1, #0x1
	bl	sub_800D30C
	mov	r0, #0x4
	b	.L54
.L60:
	.align	2, 0
.L59:
	.word	0xffff
	.word	gUnknown_03004140
.L48:
	cmp	r5, #0x1
	bls	.L49	@cond_branch
	mov	r0, #0x1
	strb	r0, [r3, #0x7]
	mov	r5, #0x1
	mov	r7, #0x0
	b	.L50
.L49:
	mov	r0, #0x0
	strb	r0, [r3, #0x7]
.L50:
	cmp	r5, #0
	beq	.L51	@cond_branch
	mov	r0, #0x5
	strb	r0, [r3, #0x4]
	b	.L52
.L51:
	mov	r0, #0x9
	strb	r0, [r3, #0x4]
	ldrb	r0, [r3, #0xb]
	cmp	r0, #0
	beq	.L52	@cond_branch
	mov	r0, #0x2
	strb	r0, [r3, #0xb]
.L52:
	strb	r5, [r3, #0x6]
	strh	r7, [r3, #0x1a]
	mov	r0, r8
	strh	r0, [r3, #0x26]
	str	r6, [r3, #0x20]
	mov	r0, #0x0
.L54:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 sub_800C054,.Lfe8-sub_800C054
	.align	2, 0
	.globl	sub_800C12C
	.type	 sub_800C12C,function
	.thumb_func
sub_800C12C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r8, r1
	ldr	r1, .L78
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.L62	@cond_branch
	sub	r0, r0, #0x9
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bls	.L62	@cond_branch
	mov	r0, #0x1
	strh	r0, [r1, #0x14]
	mov	r0, #0xf3
	mov	r1, #0x1
	bl	sub_800D30C
	mov	r0, #0x1
	b	.L76
.L79:
	.align	2, 0
.L78:
	.word	gUnknown_03004140
.L62:
	bl	rfu_getMasterSlave
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L63	@cond_branch
	ldr	r1, .L80
	mov	r0, #0x2
	strh	r0, [r1, #0x14]
	mov	r0, #0xf3
	mov	r1, #0x1
	bl	sub_800D30C
	mov	r0, #0x2
	b	.L76
.L81:
	.align	2, 0
.L80:
	.word	gUnknown_03004140
.L63:
	mov	r2, #0x0
	ldr	r0, .L82
	ldr	r1, [r0]
	ldrb	r3, [r1, #0x8]
	ldr	r5, .L82+0x4
	add	r7, r0, #0
	cmp	r2, r3
	bcs	.L65	@cond_branch
	ldrh	r0, [r1, #0x14]
	cmp	r0, r6
	beq	.L65	@cond_branch
	add	r4, r1, #0
	add	r1, r3, #0
.L66:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, r1
	bcs	.L65	@cond_branch
	lsl	r0, r2, #0x5
	add	r0, r4, r0
	ldrh	r0, [r0, #0x14]
	cmp	r0, r6
	bne	.L66	@cond_branch
.L65:
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	beq	.L71	@cond_branch
	cmp	r2, r0
	bne	.L70	@cond_branch
.L71:
	mov	r0, #0x3
	strh	r0, [r5, #0x14]
	mov	r0, #0xf3
	mov	r1, #0x1
	bl	sub_800D30C
	mov	r0, #0x3
	b	.L76
.L83:
	.align	2, 0
.L82:
	.word	gUnknown_03007890
	.word	gUnknown_03004140
.L70:
	ldrb	r0, [r5, #0x4]
	cmp	r0, #0
	beq	.L73	@cond_branch
	cmp	r0, #0x9
	bne	.L72	@cond_branch
.L73:
	mov	r0, #0xc
	strb	r0, [r5, #0x4]
	mov	r0, #0xd
	b	.L77
.L72:
	mov	r0, #0xb
	strb	r0, [r5, #0x4]
	mov	r0, #0xc
.L77:
	strb	r0, [r5, #0x5]
	strh	r6, [r5, #0x1e]
	mov	r0, r8
	strh	r0, [r5, #0x1a]
	ldrb	r0, [r5, #0x7]
	cmp	r0, #0
	beq	.L75	@cond_branch
	mov	r0, #0x7
	strb	r0, [r5, #0x7]
.L75:
	mov	r0, #0x0
.L76:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 sub_800C12C,.Lfe9-sub_800C12C
	.align	2, 0
	.globl	sub_800C210
	.type	 sub_800C210,function
	.thumb_func
sub_800C210:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r6, .L93
	add	r3, r6, #0
	add	r3, r3, #0x30
	ldrb	r2, [r3]
	add	r0, r1, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L85	@cond_branch
	add	r0, r2, #0
	bic	r0, r0, r1
	strb	r0, [r3]
	mov	r4, #0x0
	ldr	r7, .L93+0x4
	mov	r5, #0x1
	add	r3, r3, #0x4
	mov	r2, #0x0
.L89:
	add	r0, r1, #0
	asr	r0, r0, r4
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L88	@cond_branch
	lsl	r0, r4, #0x1
	add	r0, r0, r3
	strh	r2, [r0]
.L88:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L89	@cond_branch
	ldr	r0, [r7]
	ldrb	r4, [r0, #0x3]
	and	r4, r4, r1
	cmp	r4, #0
	beq	.L92	@cond_branch
	add	r0, r4, #0
	bl	sub_800D334
.L92:
	ldr	r0, .L93
	strh	r4, [r0, #0x14]
	mov	r0, #0x33
	add	r1, r4, #0
	bl	sub_800D30C
.L85:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L94:
	.align	2, 0
.L93:
	.word	gUnknown_03004140
	.word	gUnknown_03007890
.Lfe10:
	.size	 sub_800C210,.Lfe10-sub_800C210
	.align	2, 0
	.globl	sub_800C27C
	.type	 sub_800C27C,function
	.thumb_func
sub_800C27C:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	mov	r2, #0x0
	ldr	r1, .L116
	strb	r2, [r1, #0x7]
	add	r5, r1, #0
	cmp	r0, #0
	beq	.L96	@cond_branch
	bl	sub_800C000
	mov	r0, #0x17
	strb	r0, [r5, #0x4]
	b	.L95
.L117:
	.align	2, 0
.L116:
	.word	gUnknown_03004140
.L96:
	ldrb	r0, [r5, #0x4]
	sub	r0, r0, #0x5
	cmp	r0, #0xd
	bhi	.L113	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L118
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L119:
	.align	2, 0
.L118:
	.word	.L114
	.align	2, 0
	.align	2, 0
.L114:
	.word	.L99
	.word	.L100
	.word	.L101
	.word	.L98
	.word	.L103
	.word	.L104
	.word	.L105
	.word	.L106
	.word	.L107
	.word	.L108
	.word	.L98
	.word	.L110
	.word	.L111
	.word	.L112
.L99:
	mov	r1, #0x0
	mov	r0, #0x8
	strb	r0, [r5, #0x4]
	strb	r1, [r5, #0x5]
	mov	r2, #0x13
	b	.L98
.L100:
.L101:
	mov	r0, #0x7
	strb	r0, [r5, #0x4]
	mov	r0, #0x8
	strb	r0, [r5, #0x5]
	b	.L98
.L103:
	mov	r0, #0x0
	strb	r0, [r5, #0x5]
	strb	r0, [r5, #0x4]
	mov	r2, #0x21
	b	.L98
.L104:
.L105:
	mov	r1, #0x0
	mov	r0, #0xb
	strb	r0, [r5, #0x4]
	strb	r1, [r5, #0x5]
	b	.L98
.L106:
	mov	r0, #0x0
	strb	r0, [r5, #0x5]
	strb	r0, [r5, #0x4]
	mov	r2, #0x23
	b	.L98
.L107:
.L108:
	mov	r0, #0xe
	strb	r0, [r5, #0x4]
	b	.L98
.L110:
	ldrb	r0, [r5, #0x11]
	strb	r0, [r5, #0x4]
	ldrb	r0, [r5, #0x12]
	strb	r0, [r5, #0x5]
	ldr	r4, .L120
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x3]
	bl	sub_800D334
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x3]
	strh	r0, [r5, #0x14]
	mov	r0, #0x33
	mov	r1, #0x1
	bl	sub_800D30C
	b	.L95
.L121:
	.align	2, 0
.L120:
	.word	gUnknown_03007890
.L111:
.L112:
	mov	r0, #0x12
	strb	r0, [r5, #0x4]
	b	.L98
.L113:
	strb	r2, [r5, #0x5]
	strb	r2, [r5, #0x4]
	mov	r2, #0x43
.L98:
	ldrb	r0, [r5, #0x4]
	cmp	r0, #0
	bne	.L95	@cond_branch
	add	r0, r2, #0
	mov	r1, #0x0
	bl	sub_800D30C
.L95:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 sub_800C27C,.Lfe11-sub_800C27C
	.align	2, 0
	.globl	sub_800C36C
	.type	 sub_800C36C,function
	.thumb_func
sub_800C36C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x0
	mov	r8, r1
	mov	r5, sp
	add	r5, r5, #0x1
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r1, sp
	add	r2, r5, #0
	add	r3, r4, #0
	bl	rfu_REQBN_watchLink
	mov	r0, sp
	ldrb	r0, [r0]
	add	r7, r4, #0
	cmp	r0, #0
	beq	.L123	@cond_branch
	ldr	r1, .L154
	mov	r0, sp
	ldrb	r0, [r0]
	strh	r0, [r1, #0x14]
	ldrb	r0, [r5]
	strh	r0, [r1, #0x16]
	ldrb	r0, [r1, #0x9]
	add	r6, r1, #0
	cmp	r0, #0
	beq	.L124	@cond_branch
	mov	r0, #0x1
	strb	r0, [r6, #0xa]
	ldrb	r0, [r6, #0x6]
	cmp	r0, #0
	bne	.L125	@cond_branch
	ldrb	r0, [r5]
	cmp	r0, #0
	bne	.L125	@cond_branch
	mov	r0, #0x4
	strb	r0, [r6, #0xa]
.L125:
	ldrb	r0, [r6, #0xa]
	cmp	r0, #0x1
	bne	.L126	@cond_branch
	mov	r2, #0x0
	mov	r4, sp
	mov	r5, #0x1
	mov	ip, r6
	mov	r3, ip
	add	r3, r3, #0x30
	mov	r6, #0x34
	add	r6, r6, ip
	mov	r9, r6
.L130:
	ldrb	r0, [r4]
	asr	r0, r0, r2
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L129	@cond_branch
	add	r0, r5, #0
	lsl	r0, r0, r2
	ldrb	r1, [r3]
	orr	r0, r0, r1
	strb	r0, [r3]
	lsl	r0, r2, #0x1
	add	r0, r0, r9
	mov	r6, ip
	ldrh	r1, [r6, #0x32]
	strh	r1, [r0]
.L129:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L130	@cond_branch
	mov	r0, #0x31
	b	.L153
.L155:
	.align	2, 0
.L154:
	.word	gUnknown_03004140
.L126:
	mov	r0, #0x0
	strb	r0, [r6, #0xa]
	mov	r0, sp
	ldrb	r0, [r0]
	bl	sub_800D334
	mov	r0, #0x1
	mov	r8, r0
	mov	r0, #0x33
.L153:
	mov	r1, #0x1
	bl	sub_800D30C
	b	.L134
.L124:
	mov	r0, sp
	ldrb	r0, [r0]
	bl	sub_800D334
	mov	r1, #0x1
	mov	r8, r1
	mov	r0, #0x30
	mov	r1, #0x2
	bl	sub_800D30C
.L134:
	bl	sub_800D610
.L123:
	ldr	r0, .L156
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L135	@cond_branch
	ldrb	r0, [r7]
	cmp	r0, #0
	beq	.L136	@cond_branch
	mov	r2, #0x0
	ldr	r6, .L156+0x4
	mov	r3, #0x1
	add	r4, r6, #0
	add	r4, r4, #0x34
	add	r6, r6, #0x30
	add	r5, r7, #0
.L140:
	ldrb	r0, [r6]
	asr	r0, r0, r2
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L139	@cond_branch
	ldrb	r0, [r5]
	asr	r0, r0, r2
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L139	@cond_branch
	lsl	r0, r2, #0x1
	add	r0, r0, r4
	mov	r1, #0x0
	strh	r1, [r0]
.L139:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L140	@cond_branch
	ldr	r3, .L156+0x4
	add	r2, r3, #0
	add	r2, r2, #0x30
	ldrb	r1, [r7]
	ldrb	r0, [r2]
	bic	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r7]
	strh	r0, [r3, #0x14]
	mov	r0, #0x32
	mov	r1, #0x1
	bl	sub_800D30C
.L136:
	ldr	r0, .L156+0x4
	add	r3, r0, #0
	add	r3, r3, #0x30
	ldrb	r1, [r3]
	add	r6, r0, #0
	cmp	r1, #0
	beq	.L152	@cond_branch
	mov	r4, #0x0
	mov	r2, #0x0
	mov	r5, #0x1
.L147:
	ldrb	r0, [r3]
	asr	r0, r0, r2
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L146	@cond_branch
	lsl	r1, r2, #0x1
	add	r0, r6, #0
	add	r0, r0, #0x34
	add	r1, r1, r0
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L146	@cond_branch
	sub	r0, r0, #0x1
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L146	@cond_branch
	add	r0, r5, #0
	lsl	r0, r0, r2
	ldrb	r1, [r3]
	bic	r1, r1, r0
	strb	r1, [r3]
	orr	r4, r4, r0
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
.L146:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L147	@cond_branch
	cmp	r4, #0
	beq	.L143	@cond_branch
	add	r0, r4, #0
	bl	sub_800D334
	mov	r6, #0x1
	mov	r8, r6
	ldr	r0, .L156+0x4
	strh	r4, [r0, #0x14]
	mov	r0, #0x33
	mov	r1, #0x1
	bl	sub_800D30C
.L143:
	ldr	r0, .L156+0x4
	add	r1, r0, #0
	add	r1, r1, #0x30
	ldrb	r1, [r1]
	add	r6, r0, #0
	cmp	r1, #0
	bne	.L135	@cond_branch
.L152:
	mov	r0, #0x0
	strb	r0, [r6, #0xa]
.L135:
	mov	r0, r8
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L157:
	.align	2, 0
.L156:
	.word	gUnknown_03007890
	.word	gUnknown_03004140
.Lfe12:
	.size	 sub_800C36C,.Lfe12-sub_800C36C
	.align	2, 0
	.globl	rfu_syncVBlank_
	.type	 rfu_syncVBlank_,function
	.thumb_func
rfu_syncVBlank_:
	push	{lr}
	bl	rfu_syncVBlank
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L159	@cond_branch
	mov	r0, #0xf1
	mov	r1, #0x0
	bl	sub_800D30C
	bl	sub_800D610
.L159:
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 rfu_syncVBlank_,.Lfe13-rfu_syncVBlank_
	.align	2, 0
	.globl	sub_800C54C
	.type	 sub_800C54C,function
	.thumb_func
sub_800C54C:
	push	{r4, lr}
	add	r3, r0, #0
	ldr	r1, .L203
	ldr	r2, [r1, #0x40]
	cmp	r2, #0
	bne	.L161	@cond_branch
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.L161	@cond_branch
	strb	r2, [r1, #0x4]
	b	.L162
.L204:
	.align	2, 0
.L203:
	.word	gUnknown_03004140
.L161:
	ldr	r0, .L205
	ldrb	r0, [r0, #0x7]
	cmp	r0, #0
	beq	.L164	@cond_branch
	add	r0, r3, #0
	bl	sub_800C744
.L164:
	ldr	r4, .L205
	ldrb	r0, [r4, #0x4]
	cmp	r0, #0
	bne	.LCB1291
	b	.L166	@long jump
.LCB1291:
	bl	rfu_waitREQComplete
	mov	r0, #0x1
	strb	r0, [r4, #0xe]
	ldrb	r0, [r4, #0x4]
	sub	r0, r0, #0x1
	cmp	r0, #0x16
	bls	.LCB1300
	b	.L168	@long jump
.LCB1300:
	lsl	r0, r0, #0x2
	ldr	r1, .L205+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L206:
	.align	2, 0
.L205:
	.word	gUnknown_03004140
	.word	.L196
	.align	2, 0
	.align	2, 0
.L196:
	.word	.L172
	.word	.L175
	.word	.L176
	.word	.L177
	.word	.L178
	.word	.L179
	.word	.L180
	.word	.L168
	.word	.L182
	.word	.L183
	.word	.L184
	.word	.L185
	.word	.L186
	.word	.L187
	.word	.L168
	.word	.L189
	.word	.L190
	.word	.L191
	.word	.L192
	.word	.L168
	.word	.L194
	.word	.L168
	.word	.L169
.L169:
	bl	sub_800BEC0
	ldr	r1, .L207
	mov	r2, #0xff
	cmp	r0, r1
	bne	.L170	@cond_branch
	mov	r2, #0x44
.L170:
	ldr	r1, .L207+0x4
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	strb	r0, [r1, #0x4]
	add	r0, r2, #0
	b	.L202
.L208:
	.align	2, 0
.L207:
	.word	0x8001
	.word	gUnknown_03004140
.L172:
	bl	sub_800BEC0
	ldr	r1, .L209
	cmp	r0, r1
	bne	.L173	@cond_branch
	ldr	r0, .L209+0x4
	ldrb	r1, [r0, #0x5]
	strb	r1, [r0, #0x4]
	mov	r1, #0x3
	strb	r1, [r0, #0x5]
	b	.L168
.L210:
	.align	2, 0
.L209:
	.word	0x8001
	.word	gUnknown_03004140
.L173:
	ldr	r1, .L211
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	strb	r0, [r1, #0x4]
	mov	r0, #0xff
.L202:
	mov	r1, #0x0
	bl	sub_800D30C
	b	.L168
.L212:
	.align	2, 0
.L211:
	.word	gUnknown_03004140
.L175:
	bl	rfu_REQ_reset
	b	.L168
.L176:
	ldr	r0, .L213
	ldr	r2, [r0, #0x3c]
	ldrh	r0, [r2, #0x2]
	ldrb	r1, [r2]
	ldrb	r2, [r2, #0x1]
	bl	rfu_REQ_configSystem
	b	.L168
.L214:
	.align	2, 0
.L213:
	.word	gUnknown_03004140
.L177:
	ldr	r0, .L215
	ldr	r3, [r0, #0x3c]
	ldrb	r0, [r3, #0x4]
	ldrh	r1, [r3, #0x6]
	ldr	r2, [r3, #0x8]
	ldr	r3, [r3, #0xc]
	bl	rfu_REQ_configGameData
	b	.L168
.L216:
	.align	2, 0
.L215:
	.word	gUnknown_03004140
.L178:
	bl	rfu_REQ_startSearchChild
	b	.L168
.L179:
	bl	rfu_REQ_pollSearchChild
	b	.L168
.L180:
	bl	rfu_REQ_endSearchChild
	b	.L168
.L182:
	bl	rfu_REQ_startSearchParent
	b	.L168
.L183:
	bl	rfu_REQ_pollSearchParent
	b	.L168
.L184:
	bl	rfu_REQ_endSearchParent
	b	.L168
.L185:
	ldr	r0, .L217
	ldrh	r0, [r0, #0x1e]
	bl	rfu_REQ_startConnectParent
	b	.L168
.L218:
	.align	2, 0
.L217:
	.word	gUnknown_03004140
.L186:
	bl	rfu_REQ_pollConnectParent
	b	.L168
.L187:
	bl	rfu_REQ_endConnectParent
	b	.L168
.L189:
	ldr	r0, .L219
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x3]
	bl	rfu_REQ_CHILD_startConnectRecovery
	b	.L168
.L220:
	.align	2, 0
.L219:
	.word	gUnknown_03007890
.L190:
	bl	rfu_REQ_CHILD_pollConnectRecovery
	b	.L168
.L191:
	bl	rfu_REQ_CHILD_endConnectRecovery
	b	.L168
.L192:
	bl	rfu_REQ_changeMasterSlave
	b	.L168
.L194:
	bl	rfu_REQ_stopMode
.L168:
	bl	rfu_waitREQComplete
	ldr	r1, .L221
	mov	r0, #0x0
	strb	r0, [r1, #0xe]
.L166:
	ldr	r0, .L221
	ldrb	r0, [r0, #0x4]
	sub	r0, r0, #0x12
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.LCB1510
	b	.L164	@long jump
.LCB1510:
	ldr	r0, .L221+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L201	@cond_branch
	mov	r0, #0x0
	bl	sub_800C36C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L162	@cond_branch
.L201:
	bl	sub_800CF34
	bl	sub_800D158
	bl	sub_800D268
	bl	sub_800D434
.L162:
	pop	{r4}
	pop	{r0}
	bx	r0
.L222:
	.align	2, 0
.L221:
	.word	gUnknown_03004140
	.word	gUnknown_03007890
.Lfe14:
	.size	 sub_800C54C,.Lfe14-sub_800C54C
	.align	2, 0
	.type	 sub_800C744,function
	.thumb_func
sub_800C744:
	push	{r4, lr}
	add	r3, r0, #0
	ldr	r0, .L232
	ldrb	r1, [r0, #0x7]
	add	r4, r0, #0
	cmp	r1, #0x5
	bne	.L224	@cond_branch
	mov	r2, #0x1
	strb	r2, [r4, #0x6]
	strb	r1, [r4, #0x4]
	ldrh	r0, [r4, #0x1c]
	strh	r0, [r4, #0x1a]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L225	@cond_branch
	mov	r0, #0x6
	strb	r0, [r4, #0x7]
	b	.L224
.L233:
	.align	2, 0
.L232:
	.word	gUnknown_03004140
.L225:
	strb	r2, [r4, #0x7]
.L224:
	ldrb	r0, [r4, #0x7]
	cmp	r0, #0x1
	bne	.L227	@cond_branch
	strb	r0, [r4, #0x6]
	mov	r0, #0x5
	strb	r0, [r4, #0x4]
	add	r0, r3, #0
	mov	r1, #0x8c
	bl	__umodsi3
	strh	r0, [r4, #0x1a]
	mov	r1, #0x8c
	sub	r1, r1, r0
	strh	r1, [r4, #0x1c]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L228	@cond_branch
	mov	r0, #0x2
	b	.L231
.L228:
	mov	r0, #0x3
.L231:
	strb	r0, [r4, #0x7]
.L227:
	ldrb	r0, [r4, #0x7]
	cmp	r0, #0x3
	bne	.L230	@cond_branch
	mov	r0, #0x0
	strb	r0, [r4, #0x6]
	mov	r0, #0x28
	strh	r0, [r4, #0x1a]
	mov	r0, #0x4
	strb	r0, [r4, #0x7]
	mov	r0, #0x9
	strb	r0, [r4, #0x4]
.L230:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 sub_800C744,.Lfe15-sub_800C744
	.align	2, 0
	.type	 sub_800C7B4,function
	.thumb_func
sub_800C7B4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	ldr	r0, .L347
	ldrb	r1, [r0, #0xe]
	add	r7, r0, #0
	cmp	r1, #0
	bne	.LCB1656
	b	.L235	@long jump
.LCB1656:
	mov	r0, #0x0
	strb	r0, [r7, #0xe]
	mov	r0, r8
	sub	r0, r0, #0x10
	cmp	r0, #0x2d
	bls	.LCB1664
	b	.L236	@long jump
.LCB1664:
	lsl	r0, r0, #0x2
	ldr	r1, .L347+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L348:
	.align	2, 0
.L347:
	.word	gUnknown_03004140
	.word	.L297
	.align	2, 0
	.align	2, 0
.L297:
	.word	.L237
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L241
	.word	.L239
	.word	.L236
	.word	.L243
	.word	.L245
	.word	.L247
	.word	.L250
	.word	.L253
	.word	.L258
	.word	.L264
	.word	.L266
	.word	.L269
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L289
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L274
	.word	.L282
	.word	.L285
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L236
	.word	.L295
.L237:
	cmp	r6, #0
	beq	.LCB1685
	b	.L236	@long jump
.LCB1685:
	ldr	r0, .L349
	ldrb	r1, [r0, #0x5]
	strb	r1, [r0, #0x4]
	mov	r1, #0x4
	strb	r1, [r0, #0x5]
	b	.L236
.L350:
	.align	2, 0
.L349:
	.word	gUnknown_03004140
.L239:
	cmp	r6, #0
	beq	.LCB1702
	b	.L236	@long jump
.LCB1702:
	ldr	r0, .L351
	ldrb	r1, [r0, #0x5]
	strb	r1, [r0, #0x4]
	strb	r6, [r0, #0x5]
	b	.L236
.L352:
	.align	2, 0
.L351:
	.word	gUnknown_03004140
.L241:
	cmp	r6, #0
	beq	.LCB1718
	b	.L236	@long jump
.LCB1718:
	ldr	r0, .L353
	strb	r6, [r0, #0x5]
	strb	r6, [r0, #0x4]
	mov	r0, #0x0
	b	.L344
.L354:
	.align	2, 0
.L353:
	.word	gUnknown_03004140
.L243:
	cmp	r6, #0
	beq	.LCB1734
	b	.L236	@long jump
.LCB1734:
	ldr	r1, .L355
	mov	r0, #0x6
	b	.L345
.L356:
	.align	2, 0
.L355:
	.word	gUnknown_03004140
.L245:
	ldr	r1, .L357
	ldrh	r0, [r1, #0x1a]
	cmp	r0, #0
	bne	.LCB1752
	b	.L236	@long jump
.LCB1752:
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x1a]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB1760
	b	.L236	@long jump
.LCB1760:
	mov	r0, #0x7
	strb	r0, [r1, #0x4]
	mov	r0, #0x8
	strb	r0, [r1, #0x5]
	b	.L236
.L358:
	.align	2, 0
.L357:
	.word	gUnknown_03004140
.L247:
	cmp	r6, #0
	beq	.LCB1776
	b	.L236	@long jump
.LCB1776:
	ldr	r0, .L359
	ldrb	r1, [r0, #0x5]
	strb	r1, [r0, #0x4]
	strb	r6, [r0, #0x5]
	ldrb	r0, [r0, #0x7]
	cmp	r0, #0
	beq	.LCB1786
	b	.L236	@long jump
.LCB1786:
	mov	r0, #0x13
	b	.L344
.L360:
	.align	2, 0
.L359:
	.word	gUnknown_03004140
.L250:
	cmp	r6, #0
	beq	.LCB1799
	b	.L236	@long jump
.LCB1799:
	ldrb	r0, [r7, #0xb]
	cmp	r0, #0x1
	bne	.L252	@cond_branch
	ldrh	r0, [r7, #0x1a]
	cmp	r0, #0x1
	bls	.L252	@cond_branch
	sub	r0, r0, #0x1
	strh	r0, [r7, #0x1a]
.L252:
	ldr	r1, .L361
	mov	r0, #0xa
	b	.L345
.L362:
	.align	2, 0
.L361:
	.word	gUnknown_03004140
.L253:
	cmp	r6, #0
	bne	.L254	@cond_branch
	bl	sub_800D294
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, sp
	strb	r0, [r1]
	ldr	r4, .L363
	strh	r0, [r4, #0x14]
	cmp	r0, #0
	beq	.L255	@cond_branch
	mov	r0, #0x20
	mov	r1, #0x1
	bl	sub_800D30C
.L255:
	ldrb	r0, [r4, #0xb]
	cmp	r0, #0
	beq	.L254	@cond_branch
	ldrh	r0, [r4, #0x1a]
	cmp	r0, #0x1
	beq	.L254	@cond_branch
	ldr	r0, .L363+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0x4
	bne	.L254	@cond_branch
	bl	rfu_REQ_endSearchParent
	bl	rfu_waitREQComplete
	mov	r0, #0x9
	strb	r0, [r4, #0x4]
	mov	r0, #0x1
	strb	r0, [r4, #0xb]
.L254:
	ldr	r1, .L363
	ldrh	r0, [r1, #0x1a]
	cmp	r0, #0
	bne	.LCB1880
	b	.L236	@long jump
.LCB1880:
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x1a]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB1889
	b	.L236	@long jump
.LCB1889:
	mov	r0, #0xb
	strb	r0, [r1, #0x4]
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	b	.L236
.L364:
	.align	2, 0
.L363:
	.word	gUnknown_03004140
	.word	gUnknown_03007890
.L258:
	cmp	r6, #0
	beq	.LCB1906
	b	.L236	@long jump
.LCB1906:
	ldr	r2, .L365
	ldrb	r0, [r2, #0x5]
	strb	r0, [r2, #0x4]
	ldrb	r1, [r2, #0x7]
	cmp	r1, #0
	bne	.L260	@cond_branch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1920
	b	.L236	@long jump
.LCB1920:
	mov	r0, #0x21
	b	.L344
.L366:
	.align	2, 0
.L365:
	.word	gUnknown_03004140
.L260:
	cmp	r1, #0x7
	bne	.LCB1933
	b	.L236	@long jump
.LCB1933:
	mov	r0, #0x5
	strb	r0, [r2, #0x4]
	strb	r0, [r2, #0x7]
	b	.L236
.L264:
	cmp	r6, #0
	beq	.LCB1942
	b	.L236	@long jump
.LCB1942:
	ldr	r1, .L367
	mov	r0, #0xd
.L345:
	strb	r0, [r1, #0x5]
	strb	r0, [r1, #0x4]
	b	.L236
.L368:
	.align	2, 0
.L367:
	.word	gUnknown_03004140
.L266:
	cmp	r6, #0
	bne	.L267	@cond_branch
	ldr	r4, .L369
	mov	r0, sp
	add	r1, r4, #0
	bl	rfu_getConnectParentStatus
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L267	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L267	@cond_branch
	add	r1, r4, #0
	sub	r1, r1, #0x10
	mov	r0, #0xe
	strb	r0, [r1, #0x4]
.L267:
	ldr	r1, .L369+0x4
	ldrh	r0, [r1, #0x1a]
	cmp	r0, #0
	bne	.LCB1986
	b	.L236	@long jump
.LCB1986:
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x1a]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB1994
	b	.L236	@long jump
.LCB1994:
	mov	r0, #0xe
	strb	r0, [r1, #0x4]
	b	.L236
.L370:
	.align	2, 0
.L369:
	.word	gUnknown_03004140+0x10
	.word	gUnknown_03004140
.L269:
	cmp	r6, #0
	beq	.LCB2009
	b	.L236	@long jump
.LCB2009:
	ldr	r4, .L371
	mov	r0, sp
	add	r1, r4, #0
	bl	rfu_getConnectParentStatus
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB2018
	b	.L236	@long jump
.LCB2018:
	mov	r0, sp
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L271	@cond_branch
	add	r1, r4, #0
	sub	r1, r1, #0x10
	mov	r0, #0x13
	strb	r0, [r1, #0x4]
	mov	r0, #0xf
	strb	r0, [r1, #0x5]
	mov	r0, #0x22
	strh	r0, [r1, #0x1e]
	ldrb	r0, [r1, #0x10]
	strh	r0, [r1, #0x14]
	b	.L272
.L372:
	.align	2, 0
.L371:
	.word	gUnknown_03004140+0x10
.L271:
	add	r1, r4, #0
	sub	r1, r1, #0x10
	strb	r6, [r1, #0x5]
	strb	r6, [r1, #0x4]
	mov	r0, #0x23
	strh	r0, [r1, #0x1e]
	mov	r0, sp
	ldrb	r0, [r0]
	strh	r0, [r1, #0x14]
	ldrb	r0, [r1, #0x7]
	cmp	r0, #0
	beq	.L272	@cond_branch
	mov	r0, #0x3
	strb	r0, [r1, #0x7]
	mov	r0, #0x9
	strb	r0, [r1, #0x4]
.L272:
	ldr	r4, .L373
	ldrb	r0, [r4, #0x1e]
	mov	r1, #0x1
	bl	sub_800D30C
	mov	r0, #0x0
	strh	r0, [r4, #0x1e]
	b	.L236
.L374:
	.align	2, 0
.L373:
	.word	gUnknown_03004140
.L274:
	cmp	r6, #0
	beq	.LCB2087
	b	.L236	@long jump
.LCB2087:
	ldr	r2, .L375
	ldr	r3, [r2]
	ldrb	r0, [r3, #0x3]
	mov	r1, #0x0
	strh	r0, [r7, #0x14]
	mov	r0, #0x11
	strb	r0, [r7, #0x5]
	strb	r0, [r7, #0x4]
	strb	r1, [r7, #0x10]
	ldrb	r0, [r3, #0x3]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB2111
	b	.L236	@long jump
.LCB2111:
	add	r1, r7, #0
	mov	r3, #0x1
.L278:
	ldrb	r0, [r1, #0x10]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x10]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bls	.LCB2126
	b	.L236	@long jump
.LCB2126:
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x3]
	ldrb	r4, [r7, #0x10]
	asr	r0, r0, r4
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L278	@cond_branch
	b	.L236
.L376:
	.align	2, 0
.L375:
	.word	gUnknown_03007890
.L282:
	cmp	r6, #0
	bne	.L283	@cond_branch
	mov	r0, sp
	bl	rfu_CHILD_getConnectRecoveryStatus
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L283	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bhi	.L283	@cond_branch
	ldr	r1, .L377
	mov	r0, #0x12
	strb	r0, [r1, #0x4]
.L283:
	ldr	r2, .L377
	ldrb	r0, [r2, #0x10]
	lsl	r0, r0, #0x1
	add	r1, r2, #0
	add	r1, r1, #0x34
	add	r1, r0, r1
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.LCB2177
	b	.L236	@long jump
.LCB2177:
	sub	r0, r0, #0x1
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB2185
	b	.L236	@long jump
.LCB2185:
	mov	r0, #0x12
	strb	r0, [r2, #0x4]
	b	.L236
.L378:
	.align	2, 0
.L377:
	.word	gUnknown_03004140
.L285:
	cmp	r6, #0
	beq	.LCB2199
	b	.L236	@long jump
.LCB2199:
	mov	r0, sp
	bl	rfu_CHILD_getConnectRecoveryStatus
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB2206
	b	.L236	@long jump
.LCB2206:
	mov	r0, sp
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L287	@cond_branch
	ldr	r1, .L379
	mov	r0, #0x13
	strb	r0, [r1, #0x4]
	mov	r0, #0x16
	strb	r0, [r1, #0x5]
	mov	r0, #0x32
	strh	r0, [r1, #0x1e]
	b	.L288
.L380:
	.align	2, 0
.L379:
	.word	gUnknown_03004140
.L287:
	ldr	r4, .L381
	strb	r6, [r4, #0x5]
	strb	r6, [r4, #0x4]
	ldr	r0, .L381+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x3]
	bl	sub_800D334
	mov	r0, #0x33
	strh	r0, [r4, #0x1e]
.L288:
	ldr	r5, .L381
	ldrb	r0, [r5, #0x10]
	lsl	r0, r0, #0x1
	add	r1, r5, #0
	add	r1, r1, #0x34
	add	r0, r0, r1
	mov	r1, #0x0
	mov	r4, #0x0
	strh	r4, [r0]
	add	r0, r5, #0
	add	r0, r0, #0x30
	strb	r1, [r0]
	strb	r1, [r5, #0xa]
	ldrb	r0, [r5, #0x1e]
	mov	r1, #0x1
	bl	sub_800D30C
	strh	r4, [r5, #0x1e]
	b	.L236
.L382:
	.align	2, 0
.L381:
	.word	gUnknown_03004140
	.word	gUnknown_03007890
.L289:
	cmp	r6, #0
	bne	.L236	@cond_branch
	ldr	r5, .L383
	ldrb	r1, [r5, #0x5]
	add	r0, r1, #0
	cmp	r0, #0x16
	bne	.L291	@cond_branch
	ldrb	r0, [r5, #0x11]
	strb	r0, [r5, #0x4]
	ldrb	r0, [r5, #0x12]
	strb	r0, [r5, #0x5]
	ldrb	r0, [r5, #0x2]
	mov	r0, #0x1
	strb	r0, [r5, #0x2]
	mov	r0, #0x41
.L344:
	mov	r1, #0x0
	bl	sub_800D30C
	b	.L236
.L384:
	.align	2, 0
.L383:
	.word	gUnknown_03004140
.L291:
	cmp	r0, #0xf
	bne	.L236	@cond_branch
	strb	r1, [r5, #0x4]
	ldrb	r0, [r5, #0x2]
	mov	r4, #0x1
	strb	r4, [r5, #0x2]
	mov	r0, #0x41
	mov	r1, #0x0
	bl	sub_800D30C
	add	r1, r5, #0
	add	r1, r1, #0x24
	ldrb	r0, [r5, #0x10]
	lsl	r4, r4, r0
	ldrb	r0, [r1]
	orr	r4, r4, r0
	strb	r4, [r1]
	ldrb	r0, [r5, #0x10]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x4
	add	r0, r0, r1
	ldrh	r1, [r5, #0x26]
	mov	r7, #0x0
	strh	r1, [r0]
	ldrb	r1, [r5, #0x10]
	mov	r0, #0x4
	bl	rfu_clearSlot
	mov	r4, sp
	ldrb	r0, [r5, #0x10]
	mov	r1, #0xe
	bl	rfu_NI_CHILD_setSendGameName
	strb	r0, [r4]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L236	@cond_branch
	strb	r7, [r5, #0x5]
	strb	r7, [r5, #0x4]
	bl	sub_800D610
	ldr	r0, .L385
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x2]
	ldrb	r0, [r0, #0x3]
	orr	r0, r0, r1
	bl	sub_800D334
	mov	r0, sp
	ldrb	r0, [r0]
	strh	r0, [r5, #0x14]
	mov	r0, #0x25
	mov	r1, #0x1
	bl	sub_800D30C
	b	.L236
.L386:
	.align	2, 0
.L385:
	.word	gUnknown_03007890
.L295:
	cmp	r6, #0
	bne	.L236	@cond_branch
	ldr	r0, .L387
	strb	r6, [r0, #0x5]
	strb	r6, [r0, #0x4]
	mov	r0, #0x42
	mov	r1, #0x0
	bl	sub_800D30C
.L236:
	ldr	r1, .L387
	mov	r0, #0x1
	strb	r0, [r1, #0xe]
	b	.L299
.L388:
	.align	2, 0
.L387:
	.word	gUnknown_03004140
.L235:
	cmp	r6, #0x3
	bne	.L299	@cond_branch
	ldrb	r0, [r7, #0xf]
	cmp	r0, #0
	beq	.L299	@cond_branch
	mov	r3, r8
	cmp	r3, #0x24
	beq	.L301	@cond_branch
	cmp	r3, #0x26
	beq	.L301	@cond_branch
	cmp	r3, #0x27
	bne	.L299	@cond_branch
.L301:
	bl	rfu_REQ_RFUStatus
	bl	rfu_waitREQComplete
	mov	r0, sp
	bl	rfu_getRFUStatus
	mov	r0, sp
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L299	@cond_branch
	ldr	r4, .L389
	ldr	r0, [r4]
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L299	@cond_branch
	bl	rfu_getSTWIRecvBuffer
	ldr	r1, [r4]
	ldrb	r1, [r1, #0x2]
	strb	r1, [r0, #0x4]
	mov	r1, #0x1
	strb	r1, [r0, #0x5]
	mov	r0, #0x29
	bl	sub_800C36C
	mov	r6, #0x0
.L299:
	mov	r4, r8
	cmp	r4, #0x26
	bne	.LCB2447
	b	.L328	@long jump
.LCB2447:
	cmp	r4, #0x26
	bgt	.L336	@cond_branch
	cmp	r4, #0x10
	bne	.LCB2451
	b	.L331	@long jump
.LCB2451:
	b	.L303
.L390:
	.align	2, 0
.L389:
	.word	gUnknown_03007890
.L336:
	mov	r0, r8
	cmp	r0, #0x30
	beq	.L304	@cond_branch
	cmp	r0, #0x3d
	bne	.LCB2465
	b	.L331	@long jump
.LCB2465:
	b	.L303
.L304:
	cmp	r6, #0
	beq	.LCB2472
	b	.L343	@long jump
.LCB2472:
	bl	rfu_getSTWIRecvBuffer
	ldr	r4, .L391
	ldrb	r0, [r0, #0x8]
	strh	r0, [r4, #0x14]
	bl	sub_800D358
	add	r2, r4, #0
	add	r2, r2, #0x30
	ldrb	r1, [r2]
	cmp	r1, #0
	beq	.L306	@cond_branch
	ldrb	r0, [r4, #0x14]
	add	r3, r1, #0
	bic	r3, r3, r0
	add	r0, r3, #0
	strb	r0, [r2]
	mov	r3, #0x0
	add	r7, r4, #0
	add	r1, r7, #0
	mov	r5, #0x1
	add	r4, r1, #0
	add	r4, r4, #0x34
	mov	r2, #0x0
.L310:
	ldrh	r0, [r1, #0x14]
	asr	r0, r0, r3
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L309	@cond_branch
	lsl	r0, r3, #0x1
	add	r0, r0, r4
	strh	r2, [r0]
.L309:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L310	@cond_branch
	ldr	r1, .L391
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0
	bne	.L306	@cond_branch
	strb	r0, [r1, #0x5]
	strb	r0, [r1, #0x4]
.L306:
	mov	r3, sp
	ldr	r1, .L391
	ldrb	r2, [r1]
	ldrb	r0, [r1, #0x14]
	and	r0, r0, r2
	strb	r0, [r3]
	mov	r3, #0x0
	add	r7, r1, #0
	ldr	r2, .L391+0x4
	mov	r1, sp
	mov	r5, #0x1
	add	r4, r7, #0
.L317:
	ldrb	r0, [r1]
	asr	r0, r0, r3
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L316	@cond_branch
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	beq	.L316	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r7, #0x1]
.L316:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L317	@cond_branch
	ldrb	r1, [r7, #0x14]
	ldrb	r0, [r7]
	bic	r0, r0, r1
	strb	r0, [r7]
	ldrb	r1, [r7, #0x7]
	cmp	r1, #0
	beq	.L320	@cond_branch
	ldr	r0, [r2]
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L325	@cond_branch
	cmp	r1, #0x8
	bne	.L322	@cond_branch
	ldrh	r0, [r7, #0x1c]
	strh	r0, [r7, #0x1a]
	mov	r0, #0x6
	strb	r0, [r7, #0x7]
	b	.L346
.L392:
	.align	2, 0
.L391:
	.word	gUnknown_03004140
	.word	gUnknown_03007890
.L322:
	ldrb	r0, [r7, #0x4]
	sub	r0, r0, #0x6
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L320	@cond_branch
	mov	r0, #0x1
	strb	r0, [r7, #0x7]
	mov	r0, #0x5
.L346:
	strb	r0, [r7, #0x4]
.L320:
	ldr	r0, [r2]
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L325	@cond_branch
	ldrb	r0, [r7, #0x4]
	cmp	r0, #0
	bne	.L325	@cond_branch
	mov	r0, #0xff
	strb	r0, [r7, #0x6]
.L325:
	ldrb	r0, [r7, #0xe]
	cmp	r0, #0
	bne	.L303	@cond_branch
	mov	r0, #0x40
	mov	r1, #0x1
	bl	sub_800D30C
	b	.L303
.L328:
	bl	sub_800D20C
	ldr	r0, .L393
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0xff
	beq	.L303	@cond_branch
	mov	r0, #0x50
	mov	r1, #0x0
	bl	sub_800D30C
	b	.L303
.L394:
	.align	2, 0
.L393:
	.word	gUnknown_03007890
.L331:
	cmp	r6, #0
	bne	.L343	@cond_branch
	ldr	r0, .L395
	strb	r6, [r0, #0xd]
	strb	r6, [r0, #0x1]
	strb	r6, [r0]
	mov	r1, #0xff
	strb	r1, [r0, #0x6]
	bl	sub_800D610
	mov	r4, r8
	cmp	r4, #0x3d
	bne	.L303	@cond_branch
	bl	sub_800BFA0
.L303:
	cmp	r6, #0
	beq	.L337	@cond_branch
.L343:
	ldr	r7, .L395
	mov	r0, r8
	cmp	r0, #0x1c
	bne	.L338	@cond_branch
	cmp	r6, #0
	beq	.L338	@cond_branch
	ldrb	r0, [r7, #0x7]
	cmp	r0, #0x4
	bne	.L338	@cond_branch
	ldr	r2, .L395+0x4
	ldr	r1, [r2]
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r1, [r2]
	mov	r0, #0xf
	strb	r0, [r1, #0x2]
	bl	sub_800D334
	bl	rfu_waitREQComplete
	b	.L234
.L396:
	.align	2, 0
.L395:
	.word	gUnknown_03004140
	.word	gUnknown_03007890
.L338:
	mov	r1, #0x0
	mov	r3, r8
	strh	r3, [r7, #0x14]
	strh	r6, [r7, #0x16]
	ldrb	r0, [r7, #0xe]
	cmp	r0, #0
	beq	.L340	@cond_branch
	strb	r1, [r7, #0x5]
	strb	r1, [r7, #0x4]
.L340:
	mov	r0, #0xf0
	mov	r1, #0x2
	bl	sub_800D30C
	bl	sub_800D610
.L337:
	mov	r4, r8
	cmp	r4, #0xff
	bne	.L234	@cond_branch
	mov	r0, #0xf2
	mov	r1, #0x0
	bl	sub_800D30C
	bl	sub_800D610
.L234:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 sub_800C7B4,.Lfe16-sub_800C7B4
	.align	2, 0
	.type	 sub_800CEB0,function
	.thumb_func
sub_800CEB0:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r4, .L404
	ldrb	r7, [r4, #0xe]
	mov	r0, #0x0
	strb	r0, [r4, #0xe]
	mov	r0, #0x1
	strb	r0, [r4, #0xf]
	ldr	r0, .L404+0x4
	ldr	r0, [r0]
	ldrb	r5, [r0]
	cmp	r5, #0
	bne	.L398	@cond_branch
	add	r0, r6, #0
	bl	sub_800C36C
	ldrb	r0, [r4, #0x2]
	cmp	r0, #0x1
	beq	.L400	@cond_branch
	bl	sub_800D610
	strb	r5, [r4, #0xf]
	strb	r7, [r4, #0xe]
	b	.L397
.L405:
	.align	2, 0
.L404:
	.word	gUnknown_03004140
	.word	gUnknown_03007890
.L398:
	mov	r0, sp
	bl	rfu_UNI_PARENT_getDRAC_ACK
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L400	@cond_branch
	mov	r1, sp
	ldrb	r0, [r4, #0x3]
	ldrb	r1, [r1]
	orr	r0, r0, r1
	ldrb	r1, [r4, #0x3]
	strb	r0, [r4, #0x3]
.L400:
	ldr	r4, .L406
	ldr	r1, [r4, #0x44]
	cmp	r1, #0
	beq	.L402	@cond_branch
	add	r0, r6, #0
	bl	_call_via_r1
	bl	rfu_waitREQComplete
	ldrb	r0, [r4, #0x2]
	cmp	r0, #0x2
	bne	.L402	@cond_branch
	bl	sub_800D610
.L402:
	ldr	r1, .L406
	mov	r0, #0x0
	strb	r0, [r1, #0xf]
	strb	r7, [r1, #0xe]
.L397:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L407:
	.align	2, 0
.L406:
	.word	gUnknown_03004140
.Lfe17:
	.size	 sub_800CEB0,.Lfe17-sub_800CEB0
	.align	2, 0
	.type	 sub_800CF34,function
	.thumb_func
sub_800CF34:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r1, .L444
	ldrb	r0, [r1, #0x4]
	sub	r0, r0, #0x5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r3, r1, #0
	cmp	r0, #0x3
	bls	.LCB2895
	b	.L409	@long jump
.LCB2895:
	ldr	r0, .L444+0x4
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r3, #0xc]
	add	r4, r1, #0
	eor	r4, r4, r0
	and	r4, r4, r1
	ldrb	r0, [r2, #0x7]
	bic	r4, r4, r0
	mov	r8, r4
	strb	r1, [r3, #0xc]
	cmp	r4, #0
	beq	.L410	@cond_branch
	strh	r4, [r3, #0x14]
	mov	r0, #0x10
	mov	r1, #0x1
	str	r3, [sp, #0x4]
	bl	sub_800D30C
	ldr	r3, [sp, #0x4]
.L410:
	mov	r0, #0x0
	str	r0, [sp]
	mov	r6, #0x0
	add	r7, r3, #0
	mov	r1, #0x24
	add	r1, r1, r3
	mov	r9, r1
.L414:
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	lsl	r0, r0, r6
	lsr	r4, r0, #0x18
	mov	r5, #0x0
	mov	r0, r8
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L415	@cond_branch
	lsl	r1, r6, #0x1
	add	r0, r7, #0
	add	r0, r0, #0x28
	add	r1, r1, r0
	ldrh	r0, [r7, #0x26]
	strh	r0, [r1]
	mov	r2, r9
	ldrb	r1, [r2]
	add	r0, r4, #0
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r6, r6, #0x1
	mov	sl, r6
	b	.L413
.L445:
	.align	2, 0
.L444:
	.word	gUnknown_03004140
	.word	gUnknown_03007890
.L442:
	ldrb	r1, [r7]
	add	r0, r4, #0
	orr	r0, r0, r1
	strb	r0, [r7]
	ldrb	r0, [r7, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r7, #0x1]
	ldr	r0, [sp]
	orr	r0, r0, r4
	str	r0, [sp]
	mov	r0, #0x1
	orr	r5, r5, r0
	b	.L421
.L415:
	mov	r1, r9
	ldrb	r0, [r1]
	and	r0, r0, r4
	add	r2, r6, #0x1
	mov	sl, r2
	cmp	r0, #0
	beq	.L413	@cond_branch
	ldr	r0, .L446
	lsl	r1, r6, #0x2
	add	r1, r1, r0
	ldr	r1, [r1]
	ldrh	r0, [r1, #0x34]
	cmp	r0, #0x46
	bne	.L418	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x61
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L427	@cond_branch
	mov	r5, #0x2
	ldr	r3, [r3, #0x20]
	ldrh	r2, [r3]
	ldr	r0, .L446+0x4
	cmp	r2, r0
	beq	.L421	@cond_branch
	ldr	r0, .L446+0x8
	ldr	r0, [r0]
	lsl	r1, r6, #0x5
	add	r0, r0, r1
	ldrh	r0, [r0, #0x18]
	ldr	r1, .L446+0x4
.L423:
	cmp	r0, r2
	beq	.L442	@cond_branch
	add	r3, r3, #0x2
	ldrh	r2, [r3]
	cmp	r2, r1
	bne	.L423	@cond_branch
.L421:
	mov	r0, #0x1
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L427	@cond_branch
	mov	r0, #0x4
	orr	r5, r5, r0
	b	.L427
.L447:
	.align	2, 0
.L446:
	.word	gUnknown_03007880
	.word	0xffff
	.word	gUnknown_03007890
.L418:
	lsl	r1, r6, #0x1
	add	r0, r3, #0
	add	r0, r0, #0x28
	add	r1, r1, r0
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	ldr	r1, .L448
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L427	@cond_branch
	mov	r5, #0x6
.L427:
	mov	r0, #0x2
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L429	@cond_branch
	mov	r2, r9
	ldrb	r0, [r2]
	bic	r0, r0, r4
	mov	r2, #0x0
	mov	r1, r9
	strb	r0, [r1]
	lsl	r0, r6, #0x1
	add	r1, r7, #0
	add	r1, r1, #0x28
	add	r0, r0, r1
	strh	r2, [r0]
	mov	r0, #0x8
	add	r1, r6, #0
	bl	rfu_clearSlot
.L429:
	mov	r0, #0x4
	and	r5, r5, r0
	ldr	r3, .L448+0x4
	cmp	r5, #0
	beq	.L413	@cond_branch
	ldrb	r1, [r7, #0xd]
	add	r0, r4, #0
	orr	r0, r0, r1
	strb	r0, [r7, #0xd]
.L413:
	mov	r2, sl
	lsl	r0, r2, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3
	bhi	.LCB3147
	b	.L414	@long jump
.LCB3147:
	ldr	r4, [sp]
	cmp	r4, #0
	beq	.L432	@cond_branch
	ldr	r0, .L448+0x4
	strh	r4, [r0, #0x14]
	mov	r0, #0x11
	mov	r1, #0x1
	bl	sub_800D30C
.L432:
	ldr	r1, .L448+0x4
	ldrb	r0, [r1, #0xd]
	cmp	r0, #0
	beq	.L433	@cond_branch
	mov	r5, #0x1
	ldr	r0, .L448+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0
	beq	.L434	@cond_branch
	ldrb	r0, [r1, #0x3]
	ldrb	r1, [r1]
	and	r0, r0, r1
	cmp	r0, r1
	beq	.L434	@cond_branch
	mov	r5, #0x0
.L434:
	cmp	r5, #0
	beq	.L433	@cond_branch
	ldr	r4, .L448+0x4
	ldrb	r0, [r4, #0xd]
	bl	sub_800D334
	ldrb	r0, [r4, #0xd]
	mov	r1, #0x0
	strh	r0, [r4, #0x14]
	strb	r1, [r4, #0xd]
	mov	r0, #0x12
	mov	r1, #0x1
	bl	sub_800D30C
.L433:
	ldr	r0, .L448+0x4
	add	r1, r0, #0
	add	r1, r1, #0x24
	ldrb	r1, [r1]
	add	r3, r0, #0
	cmp	r1, #0
	bne	.L409	@cond_branch
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0x8
	bne	.L409	@cond_branch
	ldrb	r0, [r3, #0x7]
	cmp	r0, #0
	bne	.L437	@cond_branch
	strb	r0, [r3, #0x5]
	strb	r0, [r3, #0x4]
	mov	r0, #0x14
	mov	r1, #0x0
	bl	sub_800D30C
	b	.L409
.L449:
	.align	2, 0
.L448:
	.word	0xffff
	.word	gUnknown_03004140
	.word	gUnknown_03007890
.L437:
	cmp	r0, #0x2
	bne	.L439	@cond_branch
	mov	r0, #0x3
	strb	r0, [r3, #0x7]
	mov	r0, #0x9
	b	.L443
.L439:
	mov	r0, #0x1
	strb	r0, [r3, #0x7]
	mov	r0, #0x5
.L443:
	strb	r0, [r3, #0x4]
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L409	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x1a]
	mov	r0, #0x8
	strb	r0, [r3, #0x7]
	mov	r0, #0x5
	strb	r0, [r3, #0x4]
.L409:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 sub_800CF34,.Lfe18-sub_800CF34
	.align	2, 0
	.type	 sub_800D158,function
	.thumb_func
sub_800D158:
	push	{r4, r5, r6, lr}
	ldr	r1, .L457
	ldrh	r0, [r1]
	add	r6, r0, #0
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r4, .L457+0x4
	ldrb	r0, [r4, #0x4]
	cmp	r0, #0xf
	bne	.L451	@cond_branch
	ldrb	r1, [r4, #0x10]
	lsl	r1, r1, #0x1
	add	r5, r4, #0
	add	r5, r5, #0x28
	add	r1, r1, r5
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L453	@cond_branch
	ldr	r1, .L457+0x8
	ldrb	r0, [r4, #0x10]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrh	r0, [r0]
	cmp	r0, #0x27
	bne	.L451	@cond_branch
.L453:
	bl	sub_800D630
	mov	r0, #0x18
	strb	r0, [r4, #0x4]
	ldrb	r1, [r4, #0x10]
	mov	r0, #0x4
	bl	rfu_clearSlot
	add	r2, r4, #0
	add	r2, r2, #0x24
	mov	r1, #0x1
	ldrb	r0, [r4, #0x10]
	lsl	r1, r1, r0
	ldrb	r0, [r2]
	bic	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r4, #0x10]
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	mov	r1, #0x0
	strh	r1, [r0]
.L451:
	ldr	r0, .L457
	strh	r6, [r0]
	ldr	r5, .L457+0x4
	ldrb	r0, [r5, #0x4]
	cmp	r0, #0x18
	bne	.L454	@cond_branch
	ldrb	r0, [r5, #0x2]
	cmp	r0, #0x1
	bne	.L455	@cond_branch
	bl	sub_800D630
.L455:
	ldrb	r0, [r5, #0x2]
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L454	@cond_branch
	strb	r4, [r5, #0x5]
	strb	r4, [r5, #0x4]
	ldr	r0, .L457+0xc
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x2]
	ldrb	r0, [r0, #0x3]
	orr	r0, r0, r1
	bl	sub_800D334
	strh	r4, [r5, #0x14]
	mov	r0, #0x25
	mov	r1, #0x1
	bl	sub_800D30C
.L454:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L458:
	.align	2, 0
.L457:
	.word	0x4000208
	.word	gUnknown_03004140
	.word	gUnknown_03007880
	.word	gUnknown_03007890
.Lfe19:
	.size	 sub_800D158,.Lfe19-sub_800D158
	.align	2, 0
	.type	 sub_800D20C,function
	.thumb_func
sub_800D20C:
	push	{r4, r5, lr}
	ldr	r5, .L461
	ldrb	r0, [r5, #0x4]
	cmp	r0, #0xf
	bne	.L460	@cond_branch
	ldr	r1, .L461+0x4
	ldrb	r2, [r5, #0x10]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrh	r0, [r0]
	cmp	r0, #0x26
	bne	.L460	@cond_branch
	mov	r4, #0x0
	strb	r4, [r5, #0x5]
	strb	r4, [r5, #0x4]
	mov	r0, #0x4
	add	r1, r2, #0
	bl	rfu_clearSlot
	add	r2, r5, #0
	add	r2, r2, #0x24
	mov	r1, #0x1
	ldrb	r0, [r5, #0x10]
	lsl	r1, r1, r0
	ldrb	r0, [r2]
	bic	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r5, #0x10]
	lsl	r0, r0, #0x1
	add	r1, r5, #0
	add	r1, r1, #0x28
	add	r0, r0, r1
	strh	r4, [r0]
	mov	r0, #0x24
	mov	r1, #0x0
	bl	sub_800D30C
.L460:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L462:
	.align	2, 0
.L461:
	.word	gUnknown_03004140
	.word	gUnknown_03007880
.Lfe20:
	.size	 sub_800D20C,.Lfe20-sub_800D20C
	.align	2, 0
	.type	 sub_800D268,function
	.thumb_func
sub_800D268:
	push	{lr}
	ldr	r1, .L465
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0
	bne	.L464	@cond_branch
	ldrb	r0, [r1, #0xa]
	cmp	r0, #0x1
	bne	.L464	@cond_branch
	ldrb	r0, [r1, #0x4]
	strb	r0, [r1, #0x11]
	ldrb	r0, [r1, #0x5]
	strb	r0, [r1, #0x12]
	mov	r0, #0x10
	strb	r0, [r1, #0x4]
	mov	r0, #0x11
	strb	r0, [r1, #0x5]
	mov	r0, #0x2
	strb	r0, [r1, #0xa]
.L464:
	pop	{r0}
	bx	r0
.L466:
	.align	2, 0
.L465:
	.word	gUnknown_03004140
.Lfe21:
	.size	 sub_800D268,.Lfe21-sub_800D268
	.align	2, 0
	.type	 sub_800D294,function
	.thumb_func
sub_800D294:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r6, #0x0
	mov	r5, #0x0
	ldr	r1, .L479
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x8]
	cmp	r6, r0
	bcs	.L469	@cond_branch
	mov	r8, r0
	ldr	r0, .L479+0x4
	mov	sl, r0
	mov	r9, r1
.L471:
	mov	r1, sl
	ldr	r3, [r1, #0x20]
	ldrh	r2, [r3]
	add	r0, r5, #0x1
	mov	ip, r0
	ldr	r1, .L479+0x8
	cmp	r2, r1
	beq	.L470	@cond_branch
	mov	r1, r9
	ldr	r0, [r1]
	lsl	r1, r5, #0x5
	add	r0, r0, r1
	ldrh	r4, [r0, #0x18]
	ldr	r7, .L479+0x8
	mov	r1, #0x1
	lsl	r1, r1, r5
.L475:
	cmp	r4, r2
	bne	.L474	@cond_branch
	orr	r6, r6, r1
	lsl	r0, r6, #0x18
	lsr	r6, r0, #0x18
.L474:
	add	r3, r3, #0x2
	ldrh	r2, [r3]
	cmp	r2, r7
	bne	.L475	@cond_branch
.L470:
	mov	r1, ip
	lsl	r0, r1, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, r8
	bcc	.L471	@cond_branch
.L469:
	add	r0, r6, #0
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L480:
	.align	2, 0
.L479:
	.word	gUnknown_03007890
	.word	gUnknown_03004140
	.word	0xffff
.Lfe22:
	.size	 sub_800D294,.Lfe22-sub_800D294
	.align	2, 0
	.type	 sub_800D30C,function
	.thumb_func
sub_800D30C:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r4, .L483
	ldr	r2, [r4, #0x40]
	cmp	r2, #0
	beq	.L482	@cond_branch
	bl	_call_via_r2
.L482:
	mov	r0, #0x0
	strh	r0, [r4, #0x16]
	strh	r0, [r4, #0x14]
	pop	{r4}
	pop	{r0}
	bx	r0
.L484:
	.align	2, 0
.L483:
	.word	gUnknown_03004140
.Lfe23:
	.size	 sub_800D30C,.Lfe23-sub_800D30C
	.align	2, 0
	.type	 sub_800D334,function
	.thumb_func
sub_800D334:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L486
	ldrb	r5, [r4, #0xe]
	mov	r1, #0x1
	strb	r1, [r4, #0xe]
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
	strb	r5, [r4, #0xe]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L487:
	.align	2, 0
.L486:
	.word	gUnknown_03004140
.Lfe24:
	.size	 sub_800D334,.Lfe24-sub_800D334
	.align	2, 0
	.type	 sub_800D358,function
	.thumb_func
sub_800D358:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L510
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	beq	.L489	@cond_branch
	mov	r4, #0x0
.L493:
	ldr	r1, .L510+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	ldrh	r0, [r2]
	mov	r3, #0x80
	lsl	r3, r3, #0x8
	add	r1, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L492	@cond_branch
	ldrb	r1, [r2, #0x1a]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L492	@cond_branch
	add	r2, r1, #0
	bic	r2, r2, r5
	mov	r0, #0x20
	add	r1, r4, #0
	bl	rfu_changeSendTarget
.L492:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L493	@cond_branch
.L489:
	ldr	r0, .L510
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x5]
	cmp	r0, #0
	beq	.L496	@cond_branch
	mov	r4, #0x0
.L500:
	ldr	r1, .L510+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	ldrh	r0, [r2, #0x34]
	mov	r3, #0x80
	lsl	r3, r3, #0x8
	add	r1, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L499	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x4e
	ldrb	r0, [r0]
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L499	@cond_branch
	add	r0, r4, #0
	bl	rfu_NI_stopReceivingData
.L499:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L500	@cond_branch
.L496:
	ldr	r0, .L510
	ldr	r3, [r0]
	ldrb	r2, [r3, #0x6]
	cmp	r2, #0
	beq	.L503	@cond_branch
	mvn	r1, r5
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3, #0x6]
	mov	r4, #0x0
	ldr	r7, .L510+0x8
	ldr	r6, .L510+0xc
.L507:
	lsl	r0, r4, #0x2
	add	r0, r0, r7
	ldr	r2, [r0]
	ldrh	r0, [r2]
	cmp	r0, r6
	bne	.L506	@cond_branch
	ldrb	r3, [r2, #0x3]
	add	r0, r5, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L506	@cond_branch
	add	r0, r1, #0
	and	r0, r0, r3
	strb	r0, [r2, #0x3]
.L506:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L507	@cond_branch
.L503:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L511:
	.align	2, 0
.L510:
	.word	gUnknown_03007890
	.word	gUnknown_03007880
	.word	gUnknown_03007870
	.word	0x8024
.Lfe25:
	.size	 sub_800D358,.Lfe25-sub_800D358
	.align	2, 0
	.type	 sub_800D434,function
	.thumb_func
sub_800D434:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r0, .L535
	ldrh	r0, [r0, #0x18]
	cmp	r0, #0
	beq	.L513	@cond_branch
	ldr	r0, .L535+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	beq	.L514	@cond_branch
	mov	r6, #0x0
.L518:
	ldr	r3, .L535+0x8
	lsl	r2, r6, #0x2
	add	r0, r2, r3
	ldr	r0, [r0]
	ldrh	r1, [r0]
	mov	r4, #0x80
	lsl	r4, r4, #0x8
	add	r0, r4, #0
	and	r1, r1, r0
	add	r7, r2, #0
	add	r0, r6, #0x1
	mov	r9, r0
	cmp	r1, #0
	beq	.L517	@cond_branch
	mov	r5, #0x0
	mov	r4, #0x0
	mov	r1, #0x1
	mov	r8, r1
	mov	sl, r3
.L523:
	add	r0, r7, r3
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1a]
	asr	r0, r0, r4
	mov	r1, r8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L524	@cond_branch
	lsl	r0, r4, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
	ldr	r1, .L535
	ldrh	r0, [r0, #0x2]
	ldrh	r1, [r1, #0x18]
	cmp	r0, r1
	bls	.L524	@cond_branch
	mov	r0, r8
	lsl	r0, r0, r4
	orr	r5, r5, r0
	lsl	r0, r5, #0x18
	lsr	r5, r0, #0x18
.L524:
	cmp	r5, #0
	beq	.L522	@cond_branch
	mov	r1, sl
	add	r0, r7, r1
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1a]
	add	r2, r5, #0
	eor	r2, r2, r0
	mov	r0, #0x20
	add	r1, r6, #0
	str	r3, [sp]
	bl	rfu_changeSendTarget
	ldr	r3, [sp]
.L522:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L523	@cond_branch
.L517:
	mov	r3, r9
	lsl	r0, r3, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3
	bls	.L518	@cond_branch
.L514:
	ldr	r0, .L535+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x5]
	cmp	r0, #0
	beq	.L513	@cond_branch
	mov	r6, #0x0
.L532:
	ldr	r1, .L535+0x8
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	ldr	r2, [r0]
	ldrh	r0, [r2, #0x34]
	mov	r4, #0x80
	lsl	r4, r4, #0x8
	add	r1, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L531	@cond_branch
	ldr	r1, .L535
	ldrh	r0, [r2, #0x36]
	ldrh	r1, [r1, #0x18]
	cmp	r0, r1
	bls	.L531	@cond_branch
	add	r0, r6, #0
	bl	rfu_NI_stopReceivingData
.L531:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3
	bls	.L532	@cond_branch
.L513:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L536:
	.align	2, 0
.L535:
	.word	gUnknown_03004140
	.word	gUnknown_03007890
	.word	gUnknown_03007880
.Lfe26:
	.size	 sub_800D434,.Lfe26-sub_800D434
	.align	2, 0
	.globl	sub_800D52C
	.type	 sub_800D52C,function
	.thumb_func
sub_800D52C:
	push	{lr}
	ldr	r1, .L538
	str	r0, [r1, #0x44]
	ldr	r0, .L538+0x4
	bl	rfu_setMSCCallback
	pop	{r0}
	bx	r0
.L539:
	.align	2, 0
.L538:
	.word	gUnknown_03004140
	.word	sub_800CEB0
.Lfe27:
	.size	 sub_800D52C,.Lfe27-sub_800D52C
	.align	2, 0
	.globl	sub_800D544
	.type	 sub_800D544,function
	.thumb_func
sub_800D544:
	ldr	r1, .L541
	str	r0, [r1, #0x40]
	bx	lr
.L542:
	.align	2, 0
.L541:
	.word	gUnknown_03004140
.Lfe28:
	.size	 sub_800D544,.Lfe28-sub_800D544
	.align	2, 0
	.globl	sub_800D550
	.type	 sub_800D550,function
	.thumb_func
sub_800D550:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	ldr	r0, .L546
	ldrb	r1, [r0, #0x9]
	add	r3, r0, #0
	cmp	r1, #0
	beq	.L544	@cond_branch
	cmp	r4, #0
	bne	.L544	@cond_branch
	add	r0, r0, #0x30
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L544	@cond_branch
	mov	r0, #0x5
	b	.L545
.L547:
	.align	2, 0
.L546:
	.word	gUnknown_03004140
.L544:
	ldr	r2, .L548
	ldrh	r1, [r2]
	mov	r0, #0x0
	strh	r0, [r2]
	strb	r4, [r3, #0x9]
	strh	r5, [r3, #0x32]
	strh	r1, [r2]
	mov	r0, #0x0
.L545:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L549:
	.align	2, 0
.L548:
	.word	0x4000208
.Lfe29:
	.size	 sub_800D550,.Lfe29-sub_800D550
	.align	2, 0
	.globl	sub_800D594
	.type	 sub_800D594,function
	.thumb_func
sub_800D594:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r0, .L553
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x4]
	ldrb	r0, [r0, #0x5]
	orr	r0, r0, r1
	cmp	r0, #0
	bne	.L551	@cond_branch
	ldr	r0, .L553+0x4
	strh	r2, [r0, #0x18]
	mov	r0, #0x0
	b	.L552
.L554:
	.align	2, 0
.L553:
	.word	gUnknown_03007890
	.word	gUnknown_03004140
.L551:
	ldr	r1, .L555
	mov	r0, #0x6
	strh	r0, [r1, #0x14]
	mov	r0, #0xf3
	mov	r1, #0x1
	bl	sub_800D30C
	mov	r0, #0x6
.L552:
	pop	{r1}
	bx	r1
.L556:
	.align	2, 0
.L555:
	.word	gUnknown_03004140
.Lfe30:
	.size	 sub_800D594,.Lfe30-sub_800D594
	.align	2, 0
	.globl	sub_800D5D0
	.type	 sub_800D5D0,function
	.thumb_func
sub_800D5D0:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r3, r2, #0
	ldr	r1, .L562
	ldrb	r0, [r1, #0x4]
	sub	r0, r0, #0x9
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bhi	.L558	@cond_branch
	mov	r0, #0x7
	strh	r0, [r1, #0x14]
	mov	r0, #0xf3
	mov	r1, #0x1
	bl	sub_800D30C
	mov	r0, #0x7
	b	.L561
.L563:
	.align	2, 0
.L562:
	.word	gUnknown_03004140
.L558:
	cmp	r2, #0
	beq	.L559	@cond_branch
	mov	r0, #0x1
	strb	r0, [r1, #0xb]
	b	.L560
.L559:
	strb	r3, [r1, #0xb]
.L560:
	mov	r0, #0x0
.L561:
	pop	{r1}
	bx	r1
.Lfe31:
	.size	 sub_800D5D0,.Lfe31-sub_800D5D0
	.align	2, 0
	.type	 sub_800D610,function
	.thumb_func
sub_800D610:
	push	{lr}
	ldr	r1, .L566
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L565	@cond_branch
	ldrb	r0, [r1, #0x2]
	mov	r0, #0x0
	strb	r0, [r1, #0x2]
	mov	r0, #0x45
	mov	r1, #0x0
	bl	sub_800D30C
.L565:
	pop	{r0}
	bx	r0
.L567:
	.align	2, 0
.L566:
	.word	gUnknown_03004140
.Lfe32:
	.size	 sub_800D610,.Lfe32-sub_800D610
	.align	2, 0
	.globl	sub_800D630
	.type	 sub_800D630,function
	.thumb_func
sub_800D630:
	push	{lr}
	ldr	r1, .L572
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L569	@cond_branch
	mov	r0, #0x45
	mov	r1, #0x0
	bl	sub_800D30C
	b	.L570
.L573:
	.align	2, 0
.L572:
	.word	gUnknown_03004140
.L569:
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0x1
	bne	.L570	@cond_branch
	ldrb	r0, [r1, #0x2]
	mov	r0, #0x2
	strb	r0, [r1, #0x2]
.L570:
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 sub_800D630,.Lfe33-sub_800D630
	.align	2, 0
	.globl	sub_800D658
	.type	 sub_800D658,function
	.thumb_func
sub_800D658:
	push	{lr}
	ldr	r0, .L587
	ldrb	r1, [r0, #0x7]
	add	r2, r0, #0
	cmp	r1, #0
	beq	.L575	@cond_branch
	ldrb	r0, [r2, #0x4]
	sub	r0, r0, #0x5
	cmp	r0, #0x6
	bhi	.L575	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L587+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L588:
	.align	2, 0
.L587:
	.word	gUnknown_03004140
	.word	.L584
	.align	2, 0
	.align	2, 0
.L584:
	.word	.L577
	.word	.L578
	.word	.L580
	.word	.L580
	.word	.L582
	.word	.L582
	.word	.L583
.L577:
	mov	r0, #0x3
	strb	r0, [r2, #0x7]
	mov	r0, #0x9
	b	.L586
.L578:
	mov	r0, #0x2
	strb	r0, [r2, #0x7]
	mov	r0, #0x1
	strh	r0, [r2, #0x1a]
	b	.L575
.L580:
	mov	r0, #0x2
	strb	r0, [r2, #0x7]
	b	.L575
.L582:
	mov	r0, #0x28
	strh	r0, [r2, #0x1a]
	b	.L575
.L583:
	mov	r0, #0x28
	strh	r0, [r2, #0x1a]
	mov	r0, #0xa
.L586:
	strb	r0, [r2, #0x4]
.L575:
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 sub_800D658,.Lfe34-sub_800D658
	.align	2, 0
	.globl	sub_800D6C8
	.type	 sub_800D6C8,function
	.thumb_func
sub_800D6C8:
	push	{r4, r5, lr}
	add	r3, r0, #0
	mov	r0, #0x0
	mov	r4, #0x0
	mov	r5, #0x46
.L593:
	add	r2, r0, #0x1
	mov	r1, #0x45
	mul	r0, r0, r5
	add	r0, r0, r3
	add	r0, r0, #0x45
.L597:
	strb	r4, [r0]
	sub	r0, r0, #0x1
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L597	@cond_branch
	add	r0, r2, #0
	cmp	r0, #0x1f
	ble	.L593	@cond_branch
	mov	r1, #0x0
	ldr	r2, .L600
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r2, #0x8c
	lsl	r2, r2, #0x4
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	ldr	r2, .L600+0x4
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	ldr	r2, .L600+0x8
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L601:
	.align	2, 0
.L600:
	.word	0x8c1
	.word	0x8c2
	.word	0x8c3
.Lfe35:
	.size	 sub_800D6C8,.Lfe35-sub_800D6C8
	.align	2, 0
	.globl	sub_800D724
	.type	 sub_800D724,function
	.thumb_func
sub_800D724:
	push	{r4, lr}
	add	r3, r0, #0
	mov	r1, #0x0
	mov	r4, #0x0
.L606:
	lsl	r0, r1, #0x3
	add	r2, r1, #0x1
	sub	r0, r0, r1
	mov	r1, #0xd
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	add	r0, r0, #0xd
.L610:
	strb	r4, [r0]
	sub	r0, r0, #0x1
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L610	@cond_branch
	add	r1, r2, #0
	cmp	r1, #0x27
	ble	.L606	@cond_branch
	mov	r1, #0x0
	ldr	r2, .L613
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r2, #0x8c
	lsl	r2, r2, #0x2
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	ldr	r2, .L613+0x4
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	ldr	r2, .L613+0x8
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L614:
	.align	2, 0
.L613:
	.word	0x231
	.word	0x232
	.word	0x233
.Lfe36:
	.size	 sub_800D724,.Lfe36-sub_800D724
	.align	2, 0
	.globl	sub_800D780
	.type	 sub_800D780,function
	.thumb_func
sub_800D780:
	push	{r4, lr}
	add	r3, r0, #0
	mov	r1, #0x0
	mov	r4, #0x0
.L619:
	lsl	r0, r1, #0x8
	add	r2, r1, #0x1
	mov	r1, #0xff
	add	r0, r0, r3
	add	r0, r0, #0xff
.L623:
	strb	r4, [r0]
	sub	r0, r0, #0x1
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L623	@cond_branch
	add	r1, r2, #0
	cmp	r1, #0x1
	ble	.L619	@cond_branch
	mov	r1, #0x0
	ldr	r2, .L626
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	ldr	r2, .L626+0x4
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	ldr	r2, .L626+0x8
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L627:
	.align	2, 0
.L626:
	.word	0x201
	.word	0x202
	.word	0x203
.Lfe37:
	.size	 sub_800D780,.Lfe37-sub_800D780
	.align	2, 0
	.globl	sub_800D7D8
	.type	 sub_800D7D8,function
	.thumb_func
sub_800D7D8:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	add	r4, r1, #0
	ldr	r1, .L648
	add	r0, r3, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1f
	bhi	.L629	@cond_branch
	ldr	r0, .L648+0x4
	ldrh	r1, [r0]
	add	r7, r1, #0
	mov	r1, #0x0
	strh	r1, [r0]
	mov	r5, #0x0
	mov	r2, #0x0
.L633:
	add	r1, r4, r2
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L632	@cond_branch
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.L632	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L632:
	add	r2, r2, #0xe
	cmp	r2, #0x45
	ble	.L633	@cond_branch
	cmp	r5, #0x5
	beq	.L636	@cond_branch
	mov	r2, #0x0
	mov	r0, #0x8c
	lsl	r0, r0, #0x4
	add	r5, r3, r0
	mov	r6, #0x46
.L640:
	ldrb	r0, [r5]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r2, r1
	add	r1, r3, r1
	add	r0, r4, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r2, r2, #0x1
	cmp	r2, #0x45
	ble	.L640	@cond_branch
	mov	r0, #0x8c
	lsl	r0, r0, #0x4
	add	r1, r3, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldrb	r2, [r1]
	mov	r0, #0x1f
	and	r0, r0, r2
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldr	r0, .L648
	add	r1, r3, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r1, #0x0
	add	r0, r4, #0
	add	r0, r0, #0x45
.L645:
	strb	r1, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r4
	bge	.L645	@cond_branch
.L636:
	ldr	r0, .L648+0x4
	strh	r7, [r0]
	b	.L647
.L649:
	.align	2, 0
.L648:
	.word	0x8c2
	.word	0x4000208
.L629:
	ldr	r1, .L650
	add	r0, r3, r1
	ldrb	r1, [r0]
	mov	r1, #0x1
	strb	r1, [r0]
.L647:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L651:
	.align	2, 0
.L650:
	.word	0x8c3
.Lfe38:
	.size	 sub_800D7D8,.Lfe38-sub_800D7D8
	.align	2, 0
	.globl	sub_800D888
	.type	 sub_800D888,function
	.thumb_func
sub_800D888:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	add	r5, r1, #0
	ldr	r1, .L672
	add	r0, r6, r1
	ldrb	r0, [r0]
	cmp	r0, #0x27
	bhi	.L653	@cond_branch
	ldr	r1, .L672+0x4
	ldrh	r0, [r1]
	add	r7, r0, #0
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r2, #0x0
	ldrb	r0, [r5]
	cmp	r0, #0
	bne	.L655	@cond_branch
.L656:
	add	r2, r2, #0x1
	cmp	r2, #0xd
	bgt	.L655	@cond_branch
	add	r0, r5, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L656	@cond_branch
.L655:
	cmp	r2, #0xe
	beq	.L660	@cond_branch
	mov	r2, #0x0
	mov	r0, #0x8c
	lsl	r0, r0, #0x2
	add	r3, r6, r0
.L664:
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r2, r0
	add	r0, r6, r0
	add	r1, r5, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0xd
	ble	.L664	@cond_branch
	mov	r1, #0x8c
	lsl	r1, r1, #0x2
	add	r4, r6, r1
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	ldrb	r1, [r4]
	strb	r0, [r4]
	ldrb	r0, [r4]
	mov	r1, #0x28
	bl	__umodsi3
	ldrb	r1, [r4]
	strb	r0, [r4]
	ldr	r0, .L672
	add	r1, r6, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r1, #0x0
	add	r0, r5, #0
	add	r0, r0, #0xd
.L669:
	strb	r1, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r5
	bge	.L669	@cond_branch
.L660:
	ldr	r0, .L672+0x4
	strh	r7, [r0]
	b	.L671
.L673:
	.align	2, 0
.L672:
	.word	0x232
	.word	0x4000208
.L653:
	ldr	r1, .L674
	add	r0, r6, r1
	ldrb	r1, [r0]
	mov	r1, #0x1
	strb	r1, [r0]
.L671:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L675:
	.align	2, 0
.L674:
	.word	0x233
.Lfe39:
	.size	 sub_800D888,.Lfe39-sub_800D888
	.align	2, 0
	.globl	sub_800D934
	.type	 sub_800D934,function
	.thumb_func
sub_800D934:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	add	r4, r1, #0
	ldr	r1, .L690
	ldrh	r0, [r1]
	mov	ip, r0
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r1, #0x8c
	lsl	r1, r1, #0x4
	add	r0, r3, r1
	ldr	r7, .L690+0x4
	add	r5, r3, r7
	ldrb	r1, [r0]
	ldrb	r0, [r5]
	cmp	r1, r0
	beq	.L678	@cond_branch
	ldr	r1, .L690+0x8
	add	r0, r3, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L677	@cond_branch
.L678:
	mov	r1, #0x0
	add	r0, r4, #0
	add	r0, r0, #0x45
.L682:
	strb	r1, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r4
	bge	.L682	@cond_branch
	ldr	r0, .L690
	mov	r7, ip
	strh	r7, [r0]
	mov	r0, #0x0
	b	.L689
.L691:
	.align	2, 0
.L690:
	.word	0x4000208
	.word	0x8c1
	.word	0x8c3
.L677:
	mov	r2, #0x0
	mov	r6, #0x46
.L687:
	add	r1, r4, r2
	ldrb	r0, [r5]
	mov	r7, r0
	mul	r7, r7, r6
	add	r0, r7, #0
	add	r0, r2, r0
	add	r0, r3, r0
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r2, r2, #0x1
	cmp	r2, #0x45
	ble	.L687	@cond_branch
	ldr	r0, .L692
	add	r1, r3, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldrb	r2, [r1]
	mov	r0, #0x1f
	and	r0, r0, r2
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldr	r7, .L692+0x4
	add	r1, r3, r7
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldr	r0, .L692+0x8
	mov	r1, ip
	strh	r1, [r0]
	mov	r0, #0x1
.L689:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L693:
	.align	2, 0
.L692:
	.word	0x8c1
	.word	0x8c2
	.word	0x4000208
.Lfe40:
	.size	 sub_800D934,.Lfe40-sub_800D934
	.align	2, 0
	.globl	sub_800D9DC
	.type	 sub_800D9DC,function
	.thumb_func
sub_800D9DC:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	add	r6, r1, #0
	mov	r1, #0x8c
	lsl	r1, r1, #0x2
	add	r0, r5, r1
	add	r1, r1, #0x1
	add	r4, r5, r1
	ldrb	r1, [r0]
	ldrb	r0, [r4]
	cmp	r1, r0
	beq	.L696	@cond_branch
	ldr	r1, .L703
	add	r0, r5, r1
	ldrb	r0, [r0]
	add	r2, r0, #0
	cmp	r2, #0
	beq	.L695	@cond_branch
.L696:
	mov	r0, #0x0
	b	.L702
.L704:
	.align	2, 0
.L703:
	.word	0x233
.L695:
	ldr	r1, .L705
	ldrh	r0, [r1]
	add	r7, r0, #0
	strh	r2, [r1]
	mov	r3, #0x0
.L700:
	add	r2, r6, r3
	ldrb	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r3, r0
	add	r0, r5, r0
	ldrb	r0, [r0]
	strb	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, #0xd
	ble	.L700	@cond_branch
	ldr	r0, .L705+0x4
	add	r4, r5, r0
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	ldrb	r1, [r4]
	strb	r0, [r4]
	ldrb	r0, [r4]
	mov	r1, #0x28
	bl	__umodsi3
	ldrb	r1, [r4]
	strb	r0, [r4]
	ldr	r0, .L705+0x8
	add	r1, r5, r0
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldr	r0, .L705
	strh	r7, [r0]
	mov	r0, #0x1
.L702:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L706:
	.align	2, 0
.L705:
	.word	0x4000208
	.word	0x231
	.word	0x232
.Lfe41:
	.size	 sub_800D9DC,.Lfe41-sub_800D9DC
	.align	2, 0
	.globl	sub_800DA68
	.type	 sub_800DA68,function
	.thumb_func
sub_800DA68:
	push	{r4, lr}
	add	r2, r0, #0
	add	r4, r1, #0
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	bne	.L708	@cond_branch
	add	r0, r2, #0
	mov	r1, #0x0
	bl	sub_800DAC8
	b	.L709
.L708:
	mov	r3, #0x0
.L713:
	ldrb	r1, [r2, #0x1c]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r3, r0
	add	r0, r2, r0
	add	r1, r4, r3
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r3, r3, #0x1
	cmp	r3, #0xd
	ble	.L713	@cond_branch
	ldrb	r0, [r2, #0x1c]
	add	r0, r0, #0x1
	ldrb	r1, [r2, #0x1c]
	strb	r0, [r2, #0x1c]
	ldrb	r1, [r2, #0x1c]
	mov	r0, #0x1
	and	r0, r0, r1
	ldrb	r1, [r2, #0x1c]
	strb	r0, [r2, #0x1c]
	ldrb	r0, [r2, #0x1e]
	cmp	r0, #0x1
	bhi	.L715	@cond_branch
	ldrb	r0, [r2, #0x1e]
	add	r0, r0, #0x1
	ldrb	r1, [r2, #0x1e]
	strb	r0, [r2, #0x1e]
	b	.L709
.L715:
	ldrb	r0, [r2, #0x1c]
	ldrb	r1, [r2, #0x1d]
	strb	r0, [r2, #0x1d]
.L709:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 sub_800DA68,.Lfe42-sub_800DA68
	.align	2, 0
	.type	 sub_800DAC8,function
	.thumb_func
sub_800DAC8:
	push	{r4, r5, lr}
	add	r3, r0, #0
	add	r5, r1, #0
	ldrb	r0, [r3, #0x1e]
	cmp	r0, #0
	bne	.L718	@cond_branch
	mov	r0, #0x0
	b	.L725
.L718:
	cmp	r5, #0
	beq	.L719	@cond_branch
	mov	r4, #0x0
.L723:
	add	r2, r5, r4
	ldrb	r1, [r3, #0x1d]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r4, r0
	add	r0, r3, r0
	ldrb	r0, [r0]
	strb	r0, [r2]
	add	r4, r4, #0x1
	cmp	r4, #0xd
	ble	.L723	@cond_branch
.L719:
	ldrb	r0, [r3, #0x1d]
	add	r0, r0, #0x1
	ldrb	r1, [r3, #0x1d]
	strb	r0, [r3, #0x1d]
	ldrb	r1, [r3, #0x1d]
	mov	r0, #0x1
	and	r0, r0, r1
	ldrb	r1, [r3, #0x1d]
	strb	r0, [r3, #0x1d]
	ldrb	r0, [r3, #0x1e]
	sub	r0, r0, #0x1
	ldrb	r1, [r3, #0x1e]
	strb	r0, [r3, #0x1e]
	mov	r0, #0x1
.L725:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe43:
	.size	 sub_800DAC8,.Lfe43-sub_800DAC8
	.align	2, 0
	.globl	sub_800DB18
	.type	 sub_800DB18,function
	.thumb_func
sub_800DB18:
	push	{r4, r5, lr}
	add	r3, r0, #0
	add	r5, r1, #0
	ldr	r1, .L734
	add	r0, r3, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bhi	.L727	@cond_branch
	mov	r2, #0x0
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	add	r4, r3, r0
.L731:
	ldrb	r0, [r4]
	lsl	r0, r0, #0x8
	add	r0, r2, r0
	add	r0, r3, r0
	add	r1, r5, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0xff
	ble	.L731	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	add	r1, r3, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldrb	r2, [r1]
	mov	r0, #0x1
	and	r0, r0, r2
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldr	r0, .L734
	add	r1, r3, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	b	.L733
.L735:
	.align	2, 0
.L734:
	.word	0x202
.L727:
	ldr	r1, .L736
	add	r0, r3, r1
	ldrb	r1, [r0]
	mov	r1, #0x1
	strb	r1, [r0]
.L733:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L737:
	.align	2, 0
.L736:
	.word	0x203
.Lfe44:
	.size	 sub_800DB18,.Lfe44-sub_800DB18
	.align	2, 0
	.globl	sub_800DB84
	.type	 sub_800DB84,function
	.thumb_func
sub_800DB84:
	push	{r4, r5, lr}
	add	r3, r0, #0
	add	r5, r1, #0
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	add	r0, r3, r1
	add	r1, r1, #0x1
	add	r4, r3, r1
	ldrb	r1, [r0]
	ldrb	r0, [r4]
	cmp	r1, r0
	beq	.L740	@cond_branch
	ldr	r1, .L747
	add	r0, r3, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L739	@cond_branch
.L740:
	mov	r0, #0x0
	b	.L746
.L748:
	.align	2, 0
.L747:
	.word	0x203
.L739:
	mov	r2, #0x0
.L744:
	add	r0, r5, r2
	ldrb	r1, [r4]
	lsl	r1, r1, #0x8
	add	r1, r2, r1
	add	r1, r3, r1
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0xff
	ble	.L744	@cond_branch
	ldr	r0, .L749
	add	r1, r3, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldrb	r2, [r1]
	mov	r0, #0x1
	and	r0, r0, r2
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldr	r0, .L749+0x4
	add	r1, r3, r0
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r0, #0x1
.L746:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L750:
	.align	2, 0
.L749:
	.word	0x201
	.word	0x202
.Lfe45:
	.size	 sub_800DB84,.Lfe45-sub_800DB84
	.align	2, 0
	.globl	sub_800DBF8
	.type	 sub_800DBF8,function
	.thumb_func
sub_800DBF8:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r1, #0
	mov	r5, #0x0
	cmp	r1, #0x1
	beq	.L759	@cond_branch
	cmp	r1, #0x1
	bgt	.L779	@cond_branch
	cmp	r1, #0
	beq	.L753	@cond_branch
	b	.L752
.L779:
	cmp	r0, #0x2
	beq	.L765	@cond_branch
	cmp	r0, #0x3
	beq	.L771	@cond_branch
	b	.L752
.L753:
	mov	r4, #0x0
.L757:
	add	r0, r6, r4
	add	r1, r4, #0x1
	strb	r1, [r0]
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r4, r1, #0
	cmp	r4, #0xc7
	ble	.L757	@cond_branch
	b	.L780
.L759:
	mov	r4, #0x0
	add	r2, r6, #0
	add	r2, r2, #0xc8
.L763:
	add	r0, r6, r4
	add	r1, r4, #0x1
	strb	r1, [r0]
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r4, r1, #0
	cmp	r4, #0x63
	ble	.L763	@cond_branch
	strh	r5, [r2]
	b	.L752
.L765:
	mov	r4, #0x0
.L769:
	bl	Random
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r6, r4
	strb	r0, [r1]
	add	r0, r5, r0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r4, r4, #0x1
	cmp	r4, #0xc7
	ble	.L769	@cond_branch
.L780:
	add	r0, r6, r4
	strh	r5, [r0]
	b	.L752
.L771:
	mov	r4, #0x0
	ldr	r3, .L781
	ldrb	r1, [r3]
	ldrb	r0, [r3]
	add	r7, r0, #0x1
	add	r2, r1, #0x1
	mov	r0, #0xff
	mov	ip, r0
.L775:
	add	r0, r6, r4
	add	r1, r4, #0x1
	strb	r2, [r0]
	add	r0, r4, r7
	mov	r4, ip
	and	r0, r0, r4
	add	r0, r5, r0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r2, r2, #0x1
	add	r4, r1, #0
	cmp	r1, #0xc7
	ble	.L775	@cond_branch
	add	r0, r6, r1
	strh	r5, [r0]
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
.L752:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L782:
	.align	2, 0
.L781:
	.word	gUnknown_03000D74
.Lfe46:
	.size	 sub_800DBF8,.Lfe46-sub_800DBF8
	.align	2, 0
	.globl	PkmnStrToASCII
	.type	 PkmnStrToASCII,function
	.thumb_func
PkmnStrToASCII:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r3, #0x0
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L785	@cond_branch
	ldr	r5, .L789
	add	r2, r1, #0
.L787:
	add	r1, r4, r3
	ldrb	r0, [r2]
	add	r0, r0, r5
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r3, r3, #0x1
	ldrb	r0, [r2]
	cmp	r0, #0xff
	bne	.L787	@cond_branch
.L785:
	add	r1, r4, r3
	mov	r0, #0x0
	strb	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L790:
	.align	2, 0
.L789:
	.word	sWireless_RSEtoASCIITable
.Lfe47:
	.size	 PkmnStrToASCII,.Lfe47-PkmnStrToASCII
	.align	2, 0
	.globl	ASCIIToPkmnStr
	.type	 ASCIIToPkmnStr,function
	.thumb_func
ASCIIToPkmnStr:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r3, #0x0
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L793	@cond_branch
	ldr	r5, .L797
	add	r2, r1, #0
.L795:
	add	r1, r4, r3
	ldrb	r0, [r2]
	add	r0, r0, r5
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r3, r3, #0x1
	ldrb	r0, [r2]
	cmp	r0, #0
	bne	.L795	@cond_branch
.L793:
	add	r1, r4, r3
	mov	r0, #0xff
	strb	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L798:
	.align	2, 0
.L797:
	.word	sWireless_ASCIItoRSETable
.Lfe48:
	.size	 ASCIIToPkmnStr,.Lfe48-ASCIIToPkmnStr
	.align	2, 0
	.globl	sub_800DD1C
	.type	 sub_800DD1C,function
	.thumb_func
sub_800DD1C:
	.syntax unified
	push {r4-r7,lr}
	lsls r0, 24
	lsrs r5, r0, 24
	movs r6, 0
	ldr r0, =gUnknown_03007890
	ldr r4, [r0]
	ldrb r2, [r4, 0x2]
	ldrb r1, [r4]
	adds r7, r0, 0
	cmp r1, 0x1
	bne _0800DD72
	movs r3, 0
	ands r1, r2
	cmp r1, 0
	beq _0800DD4E
	cmp r5, 0x1
	bne _0800DD48
	ldrb r0, [r4, 0xA]
	b _0800DD8C
	.pool
_0800DD48:
	adds r0, r6, 0x1
	lsls r0, 24
	lsrs r6, r0, 24
_0800DD4E:
	lsrs r2, 1
	adds r0, r3, 0x1
	lsls r0, 24
	lsrs r3, r0, 24
	cmp r3, 0x3
	bhi _0800DD8A
	movs r0, 0x1
	ands r0, r2
	cmp r0, 0
	beq _0800DD4E
	adds r0, r6, 0x1
	cmp r5, r0
	bne _0800DD48
_0800DD68:
	ldr r0, [r7]
	adds r0, 0xA
	adds r0, r3
	ldrb r0, [r0]
	b _0800DD8C
_0800DD72:
	movs r3, 0
	movs r1, 0x1
_0800DD76:
	adds r0, r2, 0
	ands r0, r1
	cmp r0, 0
	bne _0800DD68
	lsrs r2, 1
	adds r0, r3, 0x1
	lsls r0, 24
	lsrs r3, r0, 24
	cmp r3, 0x3
	bls _0800DD76
_0800DD8A:
	movs r0, 0
_0800DD8C:
	pop {r4-r7}
	pop {r1}
	bx r1
.syntax divided
	.code	16
.Lfe49:
	.size	 sub_800DD1C,.Lfe49-sub_800DD1C
	.align	2, 0
	.globl	sub_800DD94
	.type	 sub_800DD94,function
	.thumb_func
sub_800DD94:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	mov	r4, #0x0
	ldr	r0, .L811
	mov	r8, r0
	add	r6, r7, #0x2
	ldr	r0, [r0]
	add	r5, r0, #0
	add	r5, r5, #0xa
.L804:
	add	r0, r6, r4
	add	r1, r5, r4
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x1
	ble	.L804	@cond_branch
	mov	r4, #0x0
	lsl	r2, r2, #0x7
	mov	ip, r2
	add	r1, r7, #0x4
.L809:
	add	r0, r1, r4
	strb	r3, [r0]
	asr	r3, r3, #0x8
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L809	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x8]
	mov	r6, #0x1
	mov	r1, #0x1
	and	r1, r1, r0
	ldrb	r2, [r7, #0xb]
	mov	r5, #0x2
	neg	r5, r5
	add	r0, r5, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r7, #0xb]
	mov	r4, #0x7f
	mov	r1, r9
	and	r1, r1, r4
	ldrb	r2, [r7, #0xa]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	and	r0, r0, r4
	mov	r1, ip
	orr	r0, r0, r1
	strb	r0, [r7, #0xa]
	ldrb	r0, [r7]
	mov	r1, #0x10
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x2
	orr	r1, r1, r0
	ldrb	r2, [r7, #0x1]
	mov	r0, #0x3d
	neg	r0, r0
	and	r0, r0, r2
	mov	r2, #0xc
	orr	r0, r0, r2
	strb	r0, [r7, #0x1]
	mov	r0, #0x11
	neg	r0, r0
	and	r1, r1, r0
	sub	r0, r0, #0x10
	and	r1, r1, r0
	sub	r0, r0, #0x20
	and	r1, r1, r0
	strb	r1, [r7]
	ldr	r0, .L811+0x4
	bl	FlagGet
	lsl	r0, r0, #0x7
	ldrb	r1, [r7]
	and	r4, r4, r1
	orr	r4, r4, r0
	strb	r4, [r7]
	bl	IsNationalPokedexEnabled
	and	r0, r0, r6
	ldrb	r1, [r7, #0x1]
	and	r5, r5, r1
	orr	r5, r5, r0
	strb	r5, [r7, #0x1]
	ldr	r0, .L811+0x8
	bl	FlagGet
	and	r6, r6, r0
	lsl	r6, r6, #0x1
	ldrb	r1, [r7, #0x1]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r1
	orr	r0, r0, r6
	strb	r0, [r7, #0x1]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L812:
	.align	2, 0
.L811:
	.word	gSaveBlock2Ptr
	.word	0x87f
	.word	0x864
.Lfe50:
	.size	 sub_800DD94,.Lfe50-sub_800DD94
	.align	2, 0
	.globl	sub_800DE7C
	.type	 sub_800DE7C,function
	.thumb_func
sub_800DE7C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r0, #0
	mov	r8, r1
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	ldr	r0, .L821
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0x1
	bne	.L814	@cond_branch
	mov	r0, #0x1
	mov	r9, r0
	ldr	r6, .L821+0x4
	ldr	r0, [r6]
	lsl	r4, r5, #0x5
	add	r0, r0, r4
	ldrh	r0, [r0, #0x18]
	bl	sub_8010454
	cmp	r0, #0
	beq	.L815	@cond_branch
	ldr	r1, [r6]
	ldrb	r0, [r1, #0x7]
	asr	r0, r0, r5
	mov	r2, r9
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L820	@cond_branch
.L815:
	add	r0, r7, #0
	mov	r1, #0x0
	mov	r2, #0xd
	bl	memset
	mov	r0, r8
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
	b	.L817
.L822:
	.align	2, 0
.L821:
	.word	gUnknown_03004140
	.word	gUnknown_03007890
.L814:
	mov	r0, #0x0
	mov	r9, r0
	ldr	r6, .L823
	ldr	r0, [r6]
	lsl	r4, r5, #0x5
	add	r0, r0, r4
	ldrh	r0, [r0, #0x18]
	bl	sub_8010454
	cmp	r0, #0
	beq	.L818	@cond_branch
	ldr	r1, [r6]
.L820:
	add	r1, r4, r1
	add	r1, r1, #0x1a
	add	r0, r7, #0
	mov	r2, #0xd
	bl	memcpy
	ldr	r1, [r6]
	add	r1, r4, r1
	add	r1, r1, #0x29
	mov	r0, r8
	mov	r2, #0x8
	bl	memcpy
	b	.L817
.L824:
	.align	2, 0
.L823:
	.word	gUnknown_03007890
.L818:
	add	r0, r7, #0
	mov	r1, #0x0
	mov	r2, #0xd
	bl	memset
	mov	r0, r8
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
.L817:
	mov	r0, r9
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe51:
	.size	 sub_800DE7C,.Lfe51-sub_800DE7C
	.align	2, 0
	.globl	sub_800DF34
	.type	 sub_800DF34,function
	.thumb_func
sub_800DF34:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	add	r5, r1, #0
	lsl	r2, r2, #0x18
	mov	r7, #0x0
	ldr	r6, .L828
	ldr	r0, [r6]
	lsr	r4, r2, #0x13
	add	r2, r0, r4
	ldrh	r1, [r2, #0x18]
	ldr	r0, .L828+0x4
	cmp	r1, r0
	bne	.L826	@cond_branch
	add	r1, r2, #0
	add	r1, r1, #0x1a
	add	r0, r3, #0
	mov	r2, #0xd
	bl	memcpy
	ldr	r1, [r6]
	add	r1, r4, r1
	add	r1, r1, #0x29
	add	r0, r5, #0
	mov	r2, #0x8
	bl	memcpy
	mov	r7, #0x1
	b	.L827
.L829:
	.align	2, 0
.L828:
	.word	gUnknown_03007890
	.word	0x7f7d
.L826:
	add	r0, r3, #0
	mov	r1, #0x0
	mov	r2, #0xd
	bl	memset
	add	r0, r5, #0
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
.L827:
	add	r0, r7, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe52:
	.size	 sub_800DF34,.Lfe52-sub_800DF34
	.align	2, 0
	.globl	sub_800DF90
	.type	 sub_800DF90,function
	.thumb_func
sub_800DF90:
	push	{r4, lr}
	add	r4, r1, #0
	ldr	r1, .L831
	mov	r2, #0xd
	bl	memcpy
	ldr	r1, .L831+0x4
	add	r0, r4, #0
	mov	r2, #0x8
	bl	memcpy
	pop	{r4}
	pop	{r0}
	bx	r0
.L832:
	.align	2, 0
.L831:
	.word	gUnknown_02022B14
	.word	gUnknown_02022B22
.Lfe53:
	.size	 sub_800DF90,.Lfe53-sub_800DF90
	.align	2, 0
	.globl	CreateWirelessStatusIndicatorSprite
	.type	 CreateWirelessStatusIndicatorSprite,function
	.thumb_func
CreateWirelessStatusIndicatorSprite:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r2, r1, #0x18
	cmp	r3, #0
	bne	.L834	@cond_branch
	cmp	r2, #0
	bne	.L834	@cond_branch
	mov	r3, #0xe7
	mov	r2, #0x8
.L834:
	ldr	r0, .L837
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L835	@cond_branch
	ldr	r0, .L837+0x4
	add	r1, r3, #0
	mov	r3, #0x0
	bl	CreateSprite
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L837+0x8
	lsl	r4, r5, #0x4
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	ldr	r0, .L837+0xc
	strh	r0, [r4, #0x3c]
	ldr	r0, .L837+0x10
	ldrh	r0, [r0, #0x6]
	bl	GetSpriteTileStartByTag
	strh	r0, [r4, #0x3a]
	add	r4, r4, #0x3e
	ldrb	r0, [r4]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r4]
	ldr	r0, .L837+0x14
	strb	r5, [r0]
	b	.L836
.L838:
	.align	2, 0
.L837:
	.word	gUnknown_03007890
	.word	sWirelessStatusIndicatorSpriteTemplate
	.word	gSprites
	.word	0x1234
	.word	sWirelessStatusIndicatorSpriteSheet
	.word	gWirelessStatusIndicatorSpriteId
.L835:
	ldr	r0, .L839
	add	r1, r3, #0
	mov	r3, #0x0
	bl	CreateSprite
	ldr	r4, .L839+0x4
	strb	r0, [r4]
	ldr	r5, .L839+0x8
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L839+0xc
	strh	r1, [r0, #0x3c]
	ldr	r0, .L839+0x10
	ldrh	r0, [r0, #0x6]
	bl	GetSpriteTileStartByTag
	ldrb	r2, [r4]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	strh	r0, [r1, #0x3a]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L836:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L840:
	.align	2, 0
.L839:
	.word	sWirelessStatusIndicatorSpriteTemplate
	.word	gWirelessStatusIndicatorSpriteId
	.word	gSprites
	.word	0x1234
	.word	sWirelessStatusIndicatorSpriteSheet
.Lfe54:
	.size	 CreateWirelessStatusIndicatorSprite,.Lfe54-CreateWirelessStatusIndicatorSprite
	.align	2, 0
	.globl	DestroyWirelessStatusIndicatorSprite
	.type	 DestroyWirelessStatusIndicatorSprite,function
	.thumb_func
DestroyWirelessStatusIndicatorSprite:
	push	{r4, lr}
	ldr	r4, .L843
	ldr	r3, .L843+0x4
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r4
	mov	r0, #0x3c
	ldrsh	r1, [r2, r0]
	ldr	r0, .L843+0x8
	cmp	r1, r0
	bne	.L842	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x3c]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldr	r3, .L843+0xc
	mov	r0, #0x84
	lsl	r0, r0, #0x3
	add	r3, r3, r0
	ldr	r0, .L843+0x10
	ldr	r1, [r0]		@ created by thumb_load_double_from_address
	ldr	r2, [r0, #0x4]		@ created by thumb_load_double_from_address
	str	r1, [r3]
	str	r2, [r3, #0x4]
	ldr	r1, .L843+0x14
	mov	r2, #0x4
	bl	CpuSet
.L842:
	pop	{r4}
	pop	{r0}
	bx	r0
.L844:
	.align	2, 0
.L843:
	.word	gSprites
	.word	gWirelessStatusIndicatorSpriteId
	.word	0x1234
	.word	gMain
	.word	gDummyOamData
	.word	0x70003e8
.Lfe55:
	.size	 DestroyWirelessStatusIndicatorSprite,.Lfe55-DestroyWirelessStatusIndicatorSprite
	.align	2, 0
	.globl	LoadWirelessStatusIndicatorSpriteGfx
	.type	 LoadWirelessStatusIndicatorSpriteGfx,function
	.thumb_func
LoadWirelessStatusIndicatorSpriteGfx:
	push	{r4, lr}
	ldr	r4, .L847
	ldrh	r0, [r4, #0x6]
	bl	GetSpriteTileStartByTag
	lsl	r0, r0, #0x10
	ldr	r1, .L847+0x4
	cmp	r0, r1
	bne	.L846	@cond_branch
	add	r0, r4, #0
	bl	LoadCompressedSpriteSheet
.L846:
	ldr	r0, .L847+0x8
	bl	LoadSpritePalette
	ldr	r1, .L847+0xc
	mov	r0, #0xff
	strb	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L848:
	.align	2, 0
.L847:
	.word	sWirelessStatusIndicatorSpriteSheet
	.word	-0x10000
	.word	sWirelessStatusIndicatorSpritePalette
	.word	gWirelessStatusIndicatorSpriteId
.Lfe56:
	.size	 LoadWirelessStatusIndicatorSpriteGfx,.Lfe56-LoadWirelessStatusIndicatorSpriteGfx
	.align	2, 0
	.globl	sub_800E124
	.type	 sub_800E124,function
	.thumb_func
sub_800E124:
	push	{r4, lr}
	ldr	r1, .L857
	ldr	r0, [r1]
	ldrb	r2, [r0, #0x2]
	mov	r3, #0x0
	mov	r4, #0x1
.L853:
	add	r0, r2, #0
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L854	@cond_branch
	ldr	r0, [r1]
	add	r0, r0, #0xa
	add	r0, r0, r3
	ldrb	r0, [r0]
	b	.L856
.L858:
	.align	2, 0
.L857:
	.word	gUnknown_03007890
.L854:
	lsr	r2, r2, #0x1
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L853	@cond_branch
	mov	r0, #0x0
.L856:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe57:
	.size	 sub_800E124,.Lfe57-sub_800E124
	.align	2, 0
	.globl	sub_800E15C
	.type	 sub_800E15C,function
	.thumb_func
sub_800E15C:
	push	{lr}
	add	r2, r0, #0
	mov	r3, #0x32
	ldrsh	r0, [r2, r3]
	cmp	r0, r1
	beq	.L860	@cond_branch
	mov	r0, #0x0
	strh	r1, [r2, #0x32]
	strh	r0, [r2, #0x34]
	strh	r0, [r2, #0x36]
.L860:
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 sub_800E15C,.Lfe58-sub_800E15C
	.align	2, 0
	.globl	sub_800E174
	.type	 sub_800E174,function
	.thumb_func
sub_800E174:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r1, .L886
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.LCB6479
	b	.L862	@long jump
.LCB6479:
	ldr	r2, .L886+0x4
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	mov	r0, #0x3c
	ldrsh	r1, [r2, r0]
	ldr	r0, .L886+0x8
	cmp	r1, r0
	beq	.LCB6493
	b	.L862	@long jump
.LCB6493:
	add	r6, r2, #0
	mov	r5, #0xff
	mov	r4, #0x0
	ldr	r0, .L886+0xc
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L863	@cond_branch
	add	r7, r6, #0
	add	r7, r7, #0x28
	mov	r1, #0x29
	add	r1, r1, r6
	mov	r8, r1
	b	.L864
.L887:
	.align	2, 0
.L886:
	.word	gWirelessStatusIndicatorSpriteId
	.word	gSprites
	.word	0x1234
	.word	gUnknown_03007890
.L867:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	sub_800DD1C
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r5, r0
	bcc	.L864	@cond_branch
	add	r0, r4, #0
	bl	sub_800DD1C
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L864:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x1
	cmp	r4, r0
	blt	.L867	@cond_branch
	b	.L870
.L863:
	bl	sub_800E124
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r7, r6, #0
	add	r7, r7, #0x28
	mov	r2, #0x29
	add	r2, r2, r6
	mov	r8, r2
.L870:
	bl	sub_8012224
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L871	@cond_branch
	mov	r0, #0x4
	b	.L885
.L871:
	cmp	r5, #0x18
	bhi	.L873	@cond_branch
	mov	r0, #0x3
	b	.L885
.L873:
	add	r0, r5, #0
	sub	r0, r0, #0x19
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x65
	bhi	.L875	@cond_branch
	mov	r0, #0x2
	b	.L885
.L875:
	add	r0, r5, #0
	sub	r0, r0, #0x7f
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x65
	bhi	.L877	@cond_branch
	mov	r0, #0x1
	b	.L885
.L877:
	cmp	r5, #0xe4
	bls	.L872	@cond_branch
	mov	r0, #0x0
.L885:
	strh	r0, [r6, #0x2e]
.L872:
	mov	r3, #0x2e
	ldrsh	r1, [r6, r3]
	mov	r2, #0x30
	ldrsh	r0, [r6, r2]
	cmp	r1, r0
	beq	.L880	@cond_branch
	add	r0, r6, #0
	bl	sub_800E15C
	ldrh	r0, [r6, #0x2e]
	strh	r0, [r6, #0x30]
.L880:
	mov	r0, #0x32
	ldrsh	r1, [r6, r0]
	ldr	r2, [r6, #0x8]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r3, #0x36
	ldrsh	r0, [r6, r3]
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	lsl	r0, r0, #0xa
	lsr	r0, r0, #0x1a
	mov	r3, #0x34
	ldrsh	r1, [r6, r3]
	cmp	r0, r1
	bge	.L881	@cond_branch
	ldrh	r0, [r6, #0x36]
	add	r0, r0, #0x1
	mov	r3, #0x0
	strh	r0, [r6, #0x36]
	strh	r3, [r6, #0x34]
	mov	r1, #0x32
	ldrsh	r0, [r6, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r2, #0x36
	ldrsh	r1, [r6, r2]
	ldr	r0, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x0
	ldrsh	r1, [r1, r0]
	mov	r0, #0x2
	neg	r0, r0
	cmp	r1, r0
	bne	.L883	@cond_branch
	strh	r3, [r6, #0x36]
	b	.L883
.L881:
	ldrh	r0, [r6, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x34]
.L883:
	ldr	r4, .L888
	mov	r1, #0x84
	lsl	r1, r1, #0x3
	add	r0, r4, r1
	ldr	r1, .L888+0x4
	ldr	r2, [r1, #0x4]		@ created by thumb_load_double_from_address
	ldr	r1, [r1]		@ created by thumb_load_double_from_address
	str	r1, [r0]
	str	r2, [r0, #0x4]
	mov	r3, #0x20
	ldrsh	r2, [r6, r3]
	mov	r1, #0x0
	ldrsb	r1, [r7, r1]
	add	r2, r2, r1
	ldr	r1, .L888+0x8
	add	r5, r4, r1
	ldr	r3, .L888+0xc
	add	r1, r3, #0
	and	r2, r2, r1
	ldrh	r3, [r5]
	ldr	r1, .L888+0x10
	and	r1, r1, r3
	orr	r1, r1, r2
	strh	r1, [r5]
	ldrh	r1, [r6, #0x22]
	mov	r2, r8
	ldrb	r2, [r2]
	add	r1, r1, r2
	strb	r1, [r0]
	ldrb	r2, [r6, #0x5]
	ldr	r3, .L888+0x14
	add	r5, r4, r3
	lsr	r2, r2, #0x4
	lsl	r2, r2, #0x4
	ldrb	r3, [r5]
	mov	r1, #0xf
	and	r1, r1, r3
	orr	r1, r1, r2
	strb	r1, [r5]
	mov	r1, #0x32
	ldrsh	r2, [r6, r1]
	ldr	r1, [r6, #0x8]
	lsl	r2, r2, #0x2
	add	r2, r2, r1
	mov	r3, #0x36
	ldrsh	r1, [r6, r3]
	ldr	r2, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r2, [r1]
	ldrh	r6, [r6, #0x3a]
	add	r2, r2, r6
	ldr	r1, .L888+0x18
	add	r4, r4, r1
	ldr	r3, .L888+0x1c
	add	r1, r3, #0
	and	r2, r2, r1
	ldrh	r3, [r4]
	ldr	r1, .L888+0x20
	and	r1, r1, r3
	orr	r1, r1, r2
	strh	r1, [r4]
	ldr	r1, .L888+0x24
	mov	r2, #0x4
	bl	CpuSet
	bl	sub_8011A74
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L862	@cond_branch
	bl	DestroyWirelessStatusIndicatorSprite
.L862:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L889:
	.align	2, 0
.L888:
	.word	gMain
	.word	sWirelessStatusIndicatorOamData
	.word	0x422
	.word	0x1ff
	.word	-0x200
	.word	0x425
	.word	0x424
	.word	0x3ff
	.word	-0x400
	.word	0x70003e8
.Lfe59:
	.size	 sub_800E174,.Lfe59-sub_800E174
	.align	2, 0
	.globl	CopyTrainerRecord
	.type	 CopyTrainerRecord,function
	.thumb_func
CopyTrainerRecord:
	push	{lr}
	stmia	r0!, {r1}
	add	r1, r2, #0
	bl	StringCopy
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 CopyTrainerRecord,.Lfe60-CopyTrainerRecord
	.align	2, 0
	.globl	NameIsNotEmpty
	.type	 NameIsNotEmpty,function
	.thumb_func
NameIsNotEmpty:
	push	{lr}
	add	r2, r0, #0
	mov	r1, #0x0
.L895:
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L894	@cond_branch
	mov	r0, #0x1
	b	.L898
.L894:
	add	r1, r1, #0x1
	cmp	r1, #0x7
	ble	.L895	@cond_branch
	mov	r0, #0x0
.L898:
	pop	{r1}
	bx	r1
.Lfe61:
	.size	 NameIsNotEmpty,.Lfe61-NameIsNotEmpty
	.align	2, 0
	.globl	RecordMixTrainerNames
	.type	 RecordMixTrainerNames,function
	.thumb_func
RecordMixTrainerNames:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	ldr	r0, .L926
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB6846
	b	.L900	@long jump
.LCB6846:
	mov	r0, #0xf0
	bl	AllocZeroed
	str	r0, [sp, #0x14]
	mov	r4, #0x0
	b	.L901
.L927:
	.align	2, 0
.L926:
	.word	gWirelessCommType
.L904:
	lsl	r2, r4, #0x2
	mov	r0, sp
	add	r1, r0, r2
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [r1]
	mov	r5, #0x0
	mov	r8, r2
	lsl	r0, r4, #0x3
	add	r1, r4, #0x1
	mov	r9, r1
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	str	r0, [sp, #0x1c]
	ldr	r7, .L928
	mov	sl, r7
	ldr	r6, .L928+0x4
	mov	r4, #0x0
	mov	r0, sl
	sub	r0, r0, #0x4
	ldr	r1, [sp, #0x1c]
	add	r3, r1, r0
.L908:
	ldrh	r1, [r3]
	ldr	r0, .L928+0x8
	ldr	r2, [r0]
	ldr	r7, .L928+0x4
	add	r0, r2, r7
	add	r0, r0, r4
	ldr	r0, [r0]
	cmp	r1, r0
	bne	.L907	@cond_branch
	add	r1, r2, r6
	add	r1, r1, #0x4
	ldr	r0, [sp, #0x1c]
	add	r0, r0, sl
	str	r3, [sp, #0x18]
	bl	StringCompare
	ldr	r3, [sp, #0x18]
	cmp	r0, #0
	bne	.L907	@cond_branch
	mov	r0, sp
	add	r0, r0, r8
	str	r5, [r0]
.L907:
	add	r6, r6, #0xc
	add	r4, r4, #0xc
	add	r5, r5, #0x1
	cmp	r5, #0x13
	ble	.L908	@cond_branch
	mov	r4, r9
.L901:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	blt	.L904	@cond_branch
	mov	r0, #0x0
	mov	r8, r0
	mov	r4, #0x0
	mov	r7, sp
	mov	r5, #0x0
	ldr	r6, [sp, #0x14]
	b	.L912
.L929:
	.align	2, 0
.L928:
	.word	gLinkPlayers+0x8
	.word	0x3b98
	.word	gSaveBlock1Ptr
.L915:
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	beq	.L914	@cond_branch
	ldr	r2, .L930
	add	r0, r5, r2
	ldrh	r0, [r0, #0x1a]
	cmp	r0, #0x1
	beq	.L914	@cond_branch
	add	r0, r2, #0x4
	add	r0, r5, r0
	ldrh	r1, [r0]
	add	r2, r2, #0x8
	add	r2, r5, r2
	add	r0, r6, #0
	bl	CopyTrainerRecord
	ldr	r2, [r7]
	cmp	r2, #0
	blt	.L917	@cond_branch
	ldr	r0, .L930+0x4
	ldr	r1, [r0]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L930+0x8
	add	r0, r0, r1
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
.L917:
	add	r6, r6, #0xc
	mov	r0, #0x1
	add	r8, r8, r0
.L914:
	add	r7, r7, #0x4
	add	r5, r5, #0x1c
	add	r4, r4, #0x1
.L912:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	blt	.L915	@cond_branch
	mov	r4, #0x0
	ldr	r1, .L930+0x4
	mov	r9, r1
	ldr	r6, .L930+0xc
	mov	r7, #0x0
	mov	r1, r8
	lsl	r0, r1, #0x1
	add	r0, r0, r8
	lsl	r0, r0, #0x2
	ldr	r1, [sp, #0x14]
	add	r5, r0, r1
.L922:
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r0, r6
	add	r0, r0, #0x4
	bl	NameIsNotEmpty
	cmp	r0, #0
	beq	.L921	@cond_branch
	mov	r0, r9
	ldr	r2, [r0]
	ldr	r1, .L930+0xc
	add	r0, r2, r1
	add	r0, r0, r7
	ldr	r1, [r0]
	add	r2, r2, r6
	add	r2, r2, #0x4
	add	r0, r5, #0
	bl	CopyTrainerRecord
	add	r5, r5, #0xc
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r1, r8
	cmp	r1, #0x13
	bgt	.L920	@cond_branch
.L921:
	add	r6, r6, #0xc
	add	r7, r7, #0xc
	add	r4, r4, #0x1
	cmp	r4, #0x13
	ble	.L922	@cond_branch
.L920:
	ldr	r0, .L930+0x4
	ldr	r0, [r0]
	ldr	r7, .L930+0xc
	add	r0, r0, r7
	ldr	r1, [sp, #0x14]
	mov	r2, #0xf0
	bl	memcpy
	ldr	r0, [sp, #0x14]
	bl	Free
.L900:
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L931:
	.align	2, 0
.L930:
	.word	gLinkPlayers
	.word	gSaveBlock1Ptr
	.word	0x3b9c
	.word	0x3b98
.Lfe62:
	.size	 RecordMixTrainerNames,.Lfe62-RecordMixTrainerNames
	.align	2, 0
	.globl	sub_800E540
	.type	 sub_800E540,function
	.thumb_func
sub_800E540:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r9, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	mov	r7, #0x0
	ldr	r6, .L942
	ldr	r4, .L942+0x4
	mov	r5, #0x0
.L936:
	ldr	r0, [r6]
	add	r0, r0, r4
	add	r0, r0, #0x4
	mov	r1, r9
	bl	StringCompare
	cmp	r0, #0
	bne	.L937	@cond_branch
	ldr	r0, [r6]
	ldr	r1, .L942+0x4
	add	r0, r0, r1
	add	r0, r0, r5
	ldr	r0, [r0]
	cmp	r0, r8
	bne	.L937	@cond_branch
	mov	r0, #0x1
	b	.L940
.L943:
	.align	2, 0
.L942:
	.word	gSaveBlock1Ptr
	.word	0x3b98
.L937:
	ldr	r0, [r6]
	add	r0, r0, r4
	add	r0, r0, #0x4
	bl	NameIsNotEmpty
	cmp	r0, #0
	beq	.L941	@cond_branch
	add	r4, r4, #0xc
	add	r5, r5, #0xc
	add	r7, r7, #0x1
	cmp	r7, #0x13
	ble	.L936	@cond_branch
.L941:
	mov	r0, #0x0
.L940:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe63:
	.size	 sub_800E540,.Lfe63-sub_800E540
	.align	2, 0
	.globl	WipeTrainerNameRecords
	.type	 WipeTrainerNameRecords,function
	.thumb_func
WipeTrainerNameRecords:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	ldr	r0, .L950
	mov	r8, r0
	mov	r7, #0x0
	mov	r6, r8
	mov	r5, #0x0
	mov	r4, #0x13
.L948:
	ldr	r0, .L950+0x4
	ldr	r1, [r0]
	mov	r2, r8
	add	r0, r1, r2
	add	r0, r0, r5
	str	r7, [r0]
	mov	r0, sp
	strh	r7, [r0]
	add	r1, r1, r6
	add	r1, r1, #0x4
	ldr	r2, .L950+0x8
	bl	CpuSet
	add	r6, r6, #0xc
	add	r5, r5, #0xc
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L948	@cond_branch
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L951:
	.align	2, 0
.L950:
	.word	0x3b98
	.word	gSaveBlock1Ptr
	.word	0x1000004
.Lfe64:
	.size	 WipeTrainerNameRecords,.Lfe64-WipeTrainerNameRecords
	.align	2, 0
	.globl	nullsub_5
	.type	 nullsub_5,function
	.thumb_func
nullsub_5:
	bx	lr
.Lfe65:
	.size	 nullsub_5,.Lfe65-nullsub_5
	.align	2, 0
	.globl	nullsub_13
	.type	 nullsub_13,function
	.thumb_func
nullsub_13:
	bx	lr
.Lfe66:
	.size	 nullsub_13,.Lfe66-nullsub_13
	.align	2, 0
	.globl	sub_800E604
	.type	 sub_800E604,function
	.thumb_func
sub_800E604:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	ldr	r6, .L961
	add	r5, r6, #0
	add	r5, r5, #0xee
	ldrb	r4, [r5]
	mov	r0, sp
	mov	r7, #0x0
	strh	r7, [r0]
	ldr	r2, .L961+0x4
	add	r1, r6, #0
	bl	CpuSet
	ldrb	r0, [r5]
	strb	r4, [r5]
	mov	r0, #0xff
	strb	r0, [r6, #0xc]
	ldrb	r0, [r5]
	cmp	r0, #0x4
	beq	.L955	@cond_branch
	ldrb	r0, [r5]
	strb	r7, [r5]
.L955:
	mov	r7, sp
	add	r7, r7, #0x2
	add	r0, sp, #0x4
	mov	r8, r0
	mov	r0, #0x6
	add	r0, r0, sp
	mov	r9, r0
	add	r5, r6, #0
	add	r5, r5, #0x80
	mov	r4, #0x4
.L959:
	add	r0, r5, #0
	bl	sub_800FCC4
	add	r5, r5, #0x14
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L959	@cond_branch
	mov	r5, #0x0
	ldr	r4, .L961+0x8
	add	r0, r4, #0
	bl	sub_800FCC4
	add	r0, r4, #0
	add	r0, r0, #0xb8
	bl	sub_800D6C8
	ldr	r0, .L961+0xc
	add	r4, r4, r0
	add	r0, r4, #0
	bl	sub_800D724
	strh	r5, [r7]
	ldr	r1, .L961+0x10
	ldr	r2, .L961+0x14
	add	r0, r7, #0
	bl	CpuSet
	mov	r0, r8
	strh	r5, [r0]
	ldr	r1, .L961+0x18
	ldr	r2, .L961+0x1c
	bl	CpuSet
	mov	r0, r9
	strh	r5, [r0]
	ldr	r1, .L961+0x20
	ldr	r2, .L961+0x24
	bl	CpuSet
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L962:
	.align	2, 0
.L961:
	.word	gUnknown_03005000
	.word	0x100067a
	.word	gUnknown_03005000+0x6c
	.word	0x97c
	.word	gSendCmd
	.word	0x1000008
	.word	gRecvCmds
	.word	0x1000028
	.word	gLinkPlayers
	.word	0x1000046
.Lfe67:
	.size	 sub_800E604,.Lfe67-sub_800E604
	.align	2, 0
	.globl	sub_800E6D0
	.type	 sub_800E6D0,function
	.thumb_func
sub_800E6D0:
	push	{r4, r5, r6, lr}
	ldr	r4, .L964
	ldr	r5, [r4, #0x4]
	ldr	r6, [r4, #0x8]
	bl	sub_800E700
	bl	rfu_REQ_stopMode
	bl	rfu_waitREQComplete
	ldr	r1, .L964+0x4
	mov	r0, #0x0
	strh	r0, [r1]
	str	r5, [r4, #0x4]
	str	r6, [r4, #0x8]
	mov	r0, #0x1
	strh	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L965:
	.align	2, 0
.L964:
	.word	gIntrTable
	.word	0x4000208
.Lfe68:
	.size	 sub_800E6D0,.Lfe68-sub_800E6D0
	.align	2, 0
	.globl	sub_800E700
	.type	 sub_800E700,function
	.thumb_func
sub_800E700:
	push	{r4, lr}
	ldr	r0, .L968
	ldr	r1, .L968+0x4
	ldr	r4, .L968+0x8
	add	r2, r4, #0
	mov	r3, #0x1
	bl	rfu_initializeAPI
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0
	bne	.L967	@cond_branch
	ldr	r0, .L968+0xc
	strh	r1, [r0]
	bl	sub_800AAF4
	mov	r0, #0x0
	bl	sub_80111B0
	bl	sub_800E604
	add	r1, r4, #0x4
	mov	r0, #0x3
	bl	rfu_setTimerInterrupt
.L967:
	pop	{r4}
	pop	{r0}
	bx	r0
.L969:
	.align	2, 0
.L968:
	.word	gUnknown_03004140+0x50
	.word	0xe64
	.word	gIntrTable+0x4
	.word	gLinkType
.Lfe69:
	.size	 sub_800E700,.Lfe69-sub_800E700
	.align	2, 0
	.globl	sub_800E748
	.type	 sub_800E748,function
	.thumb_func
sub_800E748:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	bl	sub_8010750
	ldr	r0, .L981
	ldrh	r0, [r0, #0x4]
	cmp	r0, #0x12
	bls	.LCB7491
	b	.L971	@long jump
.LCB7491:
	lsl	r0, r0, #0x2
	ldr	r1, .L981+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L982:
	.align	2, 0
.L981:
	.word	gUnknown_03005000
	.word	.L979
	.align	2, 0
	.align	2, 0
.L979:
	.word	.L972
	.word	.L971
	.word	.L974
	.word	.L971
	.word	.L976
	.word	.L971
	.word	.L971
	.word	.L971
	.word	.L971
	.word	.L971
	.word	.L971
	.word	.L971
	.word	.L971
	.word	.L971
	.word	.L971
	.word	.L971
	.word	.L971
	.word	.L971
	.word	.L978
.L972:
	ldr	r0, .L983
	bl	sub_800BFCC
	ldr	r0, .L983+0x4
	mov	r2, #0x1
	strh	r2, [r0, #0x4]
	ldr	r1, .L983+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r2, [r0, #0xa]
	b	.L971
.L984:
	.align	2, 0
.L983:
	.word	gUnknown_02022B2C
	.word	gUnknown_03005000
	.word	gTasks
.L974:
	ldr	r4, .L985
	ldrb	r0, [r4, #0xc]
	ldr	r3, .L985+0x4
	mov	r1, #0x0
	mov	r2, #0xf0
	bl	sub_800C054
	mov	r0, #0x3
	strh	r0, [r4, #0x4]
	ldr	r1, .L985+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x6
	strh	r1, [r0, #0xa]
	b	.L971
.L986:
	.align	2, 0
.L985:
	.word	gUnknown_03005000
	.word	gUnknown_082ED6E0
	.word	gTasks
.L976:
	mov	r0, #0x0
	bl	sub_800C27C
	ldr	r1, .L987
	mov	r0, #0x5
	strh	r0, [r1, #0x4]
	b	.L971
.L988:
	.align	2, 0
.L987:
	.word	gUnknown_03005000
.L978:
	ldr	r4, .L989
	ldr	r0, .L989+0x4
	add	r1, r4, r0
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L989+0x8
	bl	sub_800D52C
	bl	sub_800EAB4
	bl	sub_800EAFC
	mov	r0, #0x14
	strh	r0, [r4, #0x4]
	ldr	r1, .L989+0xc
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	strh	r1, [r0, #0xa]
	ldr	r0, .L989+0x10
	mov	r1, #0x5
	bl	CreateTask
	add	r0, r5, #0
	bl	DestroyTask
.L971:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L990:
	.align	2, 0
.L989:
	.word	gUnknown_03005000
	.word	0xcdb
	.word	sub_800EDBC
	.word	gTasks
	.word	sub_801084C
.Lfe70:
	.size	 sub_800E748,.Lfe70-sub_800E748
	.align	2, 0
	.globl	sub_800E87C
	.type	 sub_800E87C,function
	.thumb_func
sub_800E87C:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L992
	add	r0, r0, r1
	ldrb	r0, [r0]
	bx	lr
.L993:
	.align	2, 0
.L992:
	.word	gUnknown_082ED6A5
.Lfe71:
	.size	 sub_800E87C,.Lfe71-sub_800E87C
	.align	2, 0
	.globl	sub_800E88C
	.type	 sub_800E88C,function
	.thumb_func
sub_800E88C:
	push	{r4, r5, r6, r7, lr}
	add	r2, r0, #0
	add	r5, r1, #0
	mov	r4, #0x1
	add	r1, r2, #0
	mov	r6, #0x0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r5, r0
	bne	.L995	@cond_branch
	mov	r3, #0x0
	mov	r5, #0x1
	ldr	r1, .L1027
.L999:
	add	r0, r2, #0
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L998	@cond_branch
	add	r0, r3, r1
	strb	r4, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L998:
	asr	r2, r2, #0x1
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L999	@cond_branch
	b	.L1002
.L1028:
	.align	2, 0
.L1027:
	.word	gUnknown_03005000+0xcde
.L995:
	mov	r3, #0x0
	mvn	r0, r1
	mov	ip, r0
	mov	r7, #0x1
	ldr	r4, .L1029
.L1006:
	add	r2, r1, #0
	and	r2, r2, r7
	cmp	r2, #0
	bne	.L1005	@cond_branch
	add	r0, r3, r4
	strb	r2, [r0]
.L1005:
	asr	r1, r1, #0x1
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L1006	@cond_branch
	mov	r4, #0x4
	ldr	r0, .L1029
	ldrb	r7, [r0]
.L1012:
	mov	r3, #0x0
	sub	r1, r4, #0x1
	cmp	r7, r4
	beq	.L1014	@cond_branch
	ldr	r2, .L1029
.L1015:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bhi	.L1014	@cond_branch
	add	r0, r3, r2
	ldrb	r0, [r0]
	cmp	r0, r4
	bne	.L1015	@cond_branch
.L1014:
	cmp	r3, #0x4
	bne	.L1011	@cond_branch
	add	r6, r4, #0
.L1011:
	lsl	r0, r1, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L1012	@cond_branch
	mov	r0, ip
	and	r5, r5, r0
	mov	r3, #0x0
	mov	r2, #0x1
	ldr	r1, .L1029
.L1024:
	add	r0, r5, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1023	@cond_branch
	add	r0, r3, r1
	strb	r6, [r0]
	add	r6, r6, #0x1
.L1023:
	asr	r5, r5, #0x1
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L1024	@cond_branch
.L1002:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1030:
	.align	2, 0
.L1029:
	.word	gUnknown_03005000+0xcde
.Lfe72:
	.size	 sub_800E88C,.Lfe72-sub_800E88C
	.align	2, 0
	.globl	sub_800E94C
	.type	 sub_800E94C,function
	.thumb_func
sub_800E94C:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L1051
	ldrh	r3, [r0, #0x4]
	add	r7, r0, #0
	cmp	r3, #0xc
	bls	.LCB7823
	b	.L1032	@long jump
.LCB7823:
	lsl	r0, r3, #0x2
	ldr	r1, .L1051+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1052:
	.align	2, 0
.L1051:
	.word	gUnknown_03005000
	.word	.L1048
	.align	2, 0
	.align	2, 0
.L1048:
	.word	.L1033
	.word	.L1032
	.word	.L1032
	.word	.L1032
	.word	.L1032
	.word	.L1032
	.word	.L1035
	.word	.L1032
	.word	.L1032
	.word	.L1037
	.word	.L1032
	.word	.L1038
	.word	.L1046
.L1033:
	ldr	r0, .L1053
	bl	sub_800BFCC
	ldr	r0, .L1053+0x4
	mov	r2, #0x1
	strh	r2, [r0, #0x4]
	b	.L1050
.L1054:
	.align	2, 0
.L1053:
	.word	gUnknown_082ED608
	.word	gUnknown_03005000
.L1035:
	ldrb	r0, [r7, #0xc]
	ldr	r3, .L1055
	mov	r1, #0x0
	mov	r2, #0xf0
	bl	sub_800C054
	mov	r2, #0x7
	strh	r2, [r7, #0x4]
.L1050:
	ldr	r1, .L1055+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r2, [r0, #0xa]
	b	.L1032
.L1056:
	.align	2, 0
.L1055:
	.word	gUnknown_082ED6E0
	.word	gTasks
.L1037:
	ldr	r0, .L1057
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0xa
	strh	r0, [r1, #0xa]
	b	.L1032
.L1058:
	.align	2, 0
.L1057:
	.word	gTasks
.L1038:
	bl	sub_80107A0
	cmp	r0, #0x6
	beq	.L1042	@cond_branch
	cmp	r0, #0x6
	bgt	.L1045	@cond_branch
	cmp	r0, #0x5
	beq	.L1040	@cond_branch
	b	.L1032
.L1045:
	cmp	r0, #0x9
	beq	.L1042	@cond_branch
	b	.L1032
.L1040:
	ldr	r1, .L1059
	mov	r0, #0xc
	strh	r0, [r1, #0x4]
	b	.L1032
.L1060:
	.align	2, 0
.L1059:
	.word	gUnknown_03005000
.L1042:
	bl	sub_800D630
	ldr	r0, .L1061
	ldr	r1, .L1061+0x4
	add	r0, r0, r1
	mov	r1, #0x2
	strb	r1, [r0]
	add	r0, r6, #0
	bl	DestroyTask
	b	.L1032
.L1062:
	.align	2, 0
.L1061:
	.word	gUnknown_03005000
	.word	0xce4
.L1046:
	ldr	r0, .L1063
	add	r4, r7, r0
	ldrb	r0, [r4]
	mov	r5, #0x80
	lsl	r5, r5, #0x11
	lsl	r5, r5, r0
	lsr	r5, r5, #0x18
	ldrb	r1, [r4]
	mov	r0, #0xc
	bl	rfu_clearSlot
	ldrb	r1, [r4]
	ldr	r0, .L1063+0x4
	add	r2, r7, r0
	mov	r0, #0x10
	mov	r3, #0x46
	bl	rfu_setRecvBuffer
	add	r1, r7, #0
	add	r1, r1, #0x4c
	add	r0, r5, #0
	mov	r2, #0xe
	bl	rfu_UNI_setSendData
	ldr	r1, .L1063+0x8
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	strh	r1, [r0, #0xa]
	add	r0, r6, #0
	bl	DestroyTask
	ldr	r4, .L1063+0xc
	ldrb	r0, [r4, #0xf]
	cmp	r0, #0
	bne	.L1047	@cond_branch
	bl	sub_801227C
	ldrb	r0, [r4, #0xf]
	add	r0, r0, #0x1
	strb	r0, [r4, #0xf]
.L1047:
	ldr	r0, .L1063+0x10
	mov	r1, #0x5
	bl	CreateTask
.L1032:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1064:
	.align	2, 0
.L1063:
	.word	0xc3e
	.word	0xc3f
	.word	gTasks
	.word	gUnknown_02022B44
	.word	sub_801084C
.Lfe73:
	.size	 sub_800E94C,.Lfe73-sub_800E94C
	.align	2, 0
	.type	 sub_800EAB4,function
	.thumb_func
sub_800EAB4:
	push	{r4, r5, lr}
	ldr	r0, .L1072
	ldrb	r5, [r0]
	mov	r4, #0x0
.L1069:
	mov	r0, #0x1
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1070	@cond_branch
	lsl	r2, r4, #0x3
	sub	r2, r2, r4
	lsl	r2, r2, #0x1
	ldr	r0, .L1072+0x4
	add	r2, r2, r0
	mov	r0, #0x10
	add	r1, r4, #0
	mov	r3, #0xe
	bl	rfu_setRecvBuffer
	mov	r0, #0x3
	add	r1, r4, #0
	bl	rfu_clearSlot
.L1070:
	lsr	r5, r5, #0x1
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L1069	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1073:
	.align	2, 0
.L1072:
	.word	gUnknown_03004140
	.word	gUnknown_03005000+0x14
.Lfe74:
	.size	 sub_800EAB4,.Lfe74-sub_800EAB4
	.align	2, 0
	.type	 sub_800EAFC,function
	.thumb_func
sub_800EAFC:
	push	{r4, r5, r6, lr}
	ldr	r0, .L1075
	ldrb	r5, [r0]
	ldr	r4, .L1075+0x4
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, #0x46
	bl	rfu_UNI_setSendData
	add	r0, r5, #0
	bl	sub_800E87C
	ldr	r1, .L1075+0x8
	add	r6, r4, r1
	add	r1, r4, #0
	add	r1, r1, #0x53
	strb	r0, [r1]
	add	r4, r4, #0x5b
	strb	r5, [r4]
	mov	r1, #0x1
	neg	r1, r1
	add	r0, r5, #0
	bl	sub_800E88C
	mov	r0, #0x1
	strb	r0, [r6, #0xc]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1076:
	.align	2, 0
.L1075:
	.word	gUnknown_03004140
	.word	gUnknown_03005000+0xc87
	.word	-0xc87
.Lfe75:
	.size	 sub_800EAFC,.Lfe75-sub_800EAFC
	.align	2, 0
	.globl	sub_800EB44
	.type	 sub_800EB44,function
	.thumb_func
sub_800EB44:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	bl	sub_800F7DC
	ldrb	r1, [r0, #0xa]
	mov	r0, #0x7f
	and	r0, r0, r1
	cmp	r0, #0x54
	bne	.L1078	@cond_branch
	bl	sub_8011A74
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bne	.L1078	@cond_branch
	ldr	r0, .L1093
	ldrb	r0, [r0]
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
	mov	r0, #0x0
	mov	r1, #0x0
	bl	sub_8011A64
.L1078:
	ldr	r0, .L1093+0x4
	ldrh	r2, [r0, #0x4]
	add	r6, r0, #0
	cmp	r2, #0x12
	bls	.LCB8170
	b	.L1079	@long jump
.LCB8170:
	lsl	r0, r2, #0x2
	ldr	r1, .L1093+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1094:
	.align	2, 0
.L1093:
	.word	gUnknown_03004140
	.word	gUnknown_03005000
	.word	.L1091
	.align	2, 0
	.align	2, 0
.L1091:
	.word	.L1080
	.word	.L1079
	.word	.L1079
	.word	.L1079
	.word	.L1079
	.word	.L1079
	.word	.L1079
	.word	.L1079
	.word	.L1079
	.word	.L1079
	.word	.L1079
	.word	.L1079
	.word	.L1079
	.word	.L1084
	.word	.L1088
	.word	.L1079
	.word	.L1090
	.word	.L1082
	.word	.L1079
.L1080:
	ldr	r0, .L1095
	bl	sub_800BFCC
	ldr	r0, .L1095+0x4
	mov	r2, #0x1
	strh	r2, [r0, #0x4]
	ldr	r1, .L1095+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r2, [r0, #0xa]
	b	.L1079
.L1096:
	.align	2, 0
.L1095:
	.word	gUnknown_02022B2C
	.word	gUnknown_03005000
	.word	gTasks
.L1082:
	ldr	r3, .L1097
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0xf0
	bl	sub_800C054
	ldr	r0, .L1097+0x4
	bl	sub_800D52C
	ldr	r1, .L1097+0x8
	mov	r0, #0x12
	strh	r0, [r1, #0x4]
	b	.L1079
.L1098:
	.align	2, 0
.L1097:
	.word	gUnknown_082ED6E0
	.word	sub_800ED34
	.word	gUnknown_03005000
.L1084:
	ldr	r1, .L1099
	add	r0, r6, r1
	ldrb	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	lsl	r0, r0, r1
	lsr	r0, r0, #0x18
	add	r1, r6, #0
	add	r1, r1, #0x4c
	mov	r2, #0xe
	bl	rfu_UNI_setSendData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1079	@cond_branch
	strb	r0, [r6, #0xc]
	add	r0, r5, #0
	bl	DestroyTask
	ldr	r0, .L1099+0x4
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, #0x16
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L1086	@cond_branch
	ldr	r0, .L1099+0x8
	mov	r1, #0x1
	bl	CreateTask
	b	.L1079
.L1100:
	.align	2, 0
.L1099:
	.word	0xc3e
	.word	gTasks
	.word	sub_8010D0C
.L1086:
	ldr	r0, .L1101
	mov	r1, #0x5
	bl	CreateTask
	b	.L1079
.L1102:
	.align	2, 0
.L1101:
	.word	sub_801084C
.L1088:
	mov	r0, #0x0
	bl	sub_800C27C
	ldr	r1, .L1103
	mov	r0, #0xf
	strh	r0, [r1, #0x4]
	b	.L1079
.L1104:
	.align	2, 0
.L1103:
	.word	gUnknown_03005000
.L1090:
	ldr	r0, .L1105
	add	r1, r6, r0
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L1105+0x4
	bl	sub_800D52C
	mov	r0, #0x1
	bl	sub_8011068
	bl	sub_800EAB4
	bl	sub_800EAFC
	mov	r0, #0x14
	strh	r0, [r6, #0x4]
	ldr	r1, .L1105+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	strh	r1, [r0, #0xa]
	mov	r4, #0x1
	strb	r4, [r6, #0xc]
	ldr	r0, .L1105+0xc
	mov	r1, #0x5
	bl	CreateTask
	ldr	r1, .L1105+0x10
	add	r0, r6, r1
	strb	r4, [r0]
	add	r0, r5, #0
	bl	DestroyTask
.L1079:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1106:
	.align	2, 0
.L1105:
	.word	0xcdb
	.word	sub_800EDBC
	.word	gTasks
	.word	sub_801084C
	.word	0xce8
.Lfe76:
	.size	 sub_800EB44,.Lfe76-sub_800EB44
	.align	2, 0
	.globl	sub_800ED10
	.type	 sub_800ED10,function
	.thumb_func
sub_800ED10:
	push	{lr}
	ldr	r3, .L1108
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0xf0
	bl	sub_800C054
	pop	{r0}
	bx	r0
.L1109:
	.align	2, 0
.L1108:
	.word	gUnknown_082ED6E0
.Lfe77:
	.size	 sub_800ED10,.Lfe77-sub_800ED10
	.align	2, 0
	.globl	sub_800ED28
	.type	 sub_800ED28,function
	.thumb_func
sub_800ED28:
	push	{lr}
	mov	r0, #0x0
	bl	sub_800C27C
	pop	{r0}
	bx	r0
.Lfe78:
	.size	 sub_800ED28,.Lfe78-sub_800ED28
	.align	2, 0
	.globl	sub_800ED34
	.type	 sub_800ED34,function
	.thumb_func
sub_800ED34:
	push	{r4, lr}
	ldr	r0, .L1118
	mov	r2, #0x0
	mov	r1, #0xd
	add	r0, r0, #0x59
.L1115:
	strb	r2, [r0]
	sub	r0, r0, #0x1
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L1115	@cond_branch
	bl	rfu_REQ_recvData
	bl	rfu_waitREQComplete
	ldr	r1, .L1118+0x4
	ldr	r3, .L1118
	ldr	r0, .L1118+0x8
	add	r4, r3, r0
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x12]
	cmp	r0, #0
	beq	.L1117	@cond_branch
	mov	r2, #0xcd
	lsl	r2, r2, #0x4
	add	r1, r3, r2
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r1, #0x92
	lsl	r1, r1, #0x1
	add	r0, r3, r1
	ldr	r2, .L1118+0xc
	add	r1, r3, r2
	bl	sub_800D7D8
	ldr	r1, .L1118+0x10
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
	bl	sub_800F048
	ldrb	r0, [r4]
	bl	rfu_UNI_readySendData
	ldrb	r0, [r4]
	bl	rfu_UNI_clearRecvNewDataFlag
.L1117:
	mov	r0, #0x1
	bl	rfu_REQ_sendData_wrapper
	pop	{r4}
	pop	{r0}
	bx	r0
.L1119:
	.align	2, 0
.L1118:
	.word	gUnknown_03005000
	.word	gUnknown_03007870
	.word	0xc3e
	.word	0xc3f
	.word	gUnknown_02022B44
.Lfe79:
	.size	 sub_800ED34,.Lfe79-sub_800ED34
	.align	2, 0
	.type	 sub_800EDBC,function
	.thumb_func
sub_800EDBC:
	ldr	r0, .L1121
	ldr	r1, .L1121+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r1, #0x1
	strb	r1, [r0]
	bx	lr
.L1122:
	.align	2, 0
.L1121:
	.word	gUnknown_03005000
	.word	0xcdb
.Lfe80:
	.size	 sub_800EDBC,.Lfe80-sub_800EDBC
	.align	2, 0
	.globl	sub_800EDD4
	.type	 sub_800EDD4,function
	.thumb_func
sub_800EDD4:
	push	{r4, r5, r6, lr}
	bl	sub_800C048
	ldr	r4, .L1139
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0x1
	bne	.L1124	@cond_branch
	ldr	r0, .L1139+0x4
	b	.L1138
.L1140:
	.align	2, 0
.L1139:
	.word	gUnknown_03005000
	.word	sub_800E748
.L1124:
	cmp	r0, #0
	bne	.L1127	@cond_branch
	ldr	r0, .L1141
.L1138:
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1126	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x67
	ldrb	r0, [r0]
	bl	DestroyTask
	bl	sub_800E604
	b	.L1126
.L1142:
	.align	2, 0
.L1141:
	.word	sub_800E94C
.L1127:
	cmp	r0, #0x2
	bne	.L1126	@cond_branch
	ldr	r0, .L1143
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1126	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x67
	ldrb	r0, [r0]
	bl	DestroyTask
	bl	sub_800E604
.L1126:
	mov	r5, #0x0
	ldr	r6, .L1143+0x4
.L1135:
	lsl	r0, r5, #0x2
	add	r0, r0, r6
	ldr	r4, [r0]
	add	r0, r4, #0
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1134	@cond_branch
	add	r0, r4, #0
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
.L1134:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x2
	bls	.L1135	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1144:
	.align	2, 0
.L1143:
	.word	sub_800EB44
	.word	gUnknown_082ED7E0
.Lfe81:
	.size	 sub_800EDD4,.Lfe81-sub_800EDD4
	.align	2, 0
	.globl	sub_800EE78
	.type	 sub_800EE78,function
	.thumb_func
sub_800EE78:
	push	{lr}
	ldr	r0, .L1146
	mov	r1, #0x1
	bl	CreateTask
	ldr	r1, .L1146+0x4
	add	r1, r1, #0x67
	strb	r0, [r1]
	pop	{r0}
	bx	r0
.L1147:
	.align	2, 0
.L1146:
	.word	sub_800E748
	.word	gUnknown_03005000
.Lfe82:
	.size	 sub_800EE78,.Lfe82-sub_800EE78
	.align	2, 0
	.globl	sub_800EE94
	.type	 sub_800EE94,function
	.thumb_func
sub_800EE94:
	push	{lr}
	ldr	r1, .L1151
	ldrh	r0, [r1, #0x4]
	cmp	r0, #0x7
	bne	.L1149	@cond_branch
	ldr	r2, .L1151+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1149	@cond_branch
	mov	r0, #0x1
	b	.L1150
.L1152:
	.align	2, 0
.L1151:
	.word	gUnknown_03005000
	.word	0xccd
.L1149:
	mov	r0, #0x0
.L1150:
	pop	{r1}
	bx	r1
.Lfe83:
	.size	 sub_800EE94,.Lfe83-sub_800EE94
	.align	2, 0
	.globl	sub_800EEBC
	.type	 sub_800EEBC,function
	.thumb_func
sub_800EEBC:
	push	{r4, lr}
	ldr	r4, .L1156
	ldrh	r0, [r4, #0x4]
	cmp	r0, #0x7
	bne	.L1154	@cond_branch
	ldr	r0, .L1156+0x4
	ldr	r1, [r0]
	ldr	r2, .L1156+0x8
	add	r0, r4, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	ldrh	r0, [r1, #0x14]
	mov	r1, #0xf0
	bl	sub_800C12C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1154	@cond_branch
	mov	r0, #0x9
	strh	r0, [r4, #0x4]
	mov	r0, #0x1
	b	.L1155
.L1157:
	.align	2, 0
.L1156:
	.word	gUnknown_03005000
	.word	gUnknown_03007890
	.word	0xc3d
.L1154:
	mov	r0, #0x0
.L1155:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe84:
	.size	 sub_800EEBC,.Lfe84-sub_800EEBC
	.align	2, 0
	.globl	sub_800EF00
	.type	 sub_800EF00,function
	.thumb_func
sub_800EF00:
	push	{lr}
	ldr	r0, .L1159
	mov	r1, #0x1
	bl	CreateTask
	ldr	r1, .L1159+0x4
	add	r1, r1, #0x67
	strb	r0, [r1]
	pop	{r0}
	bx	r0
.L1160:
	.align	2, 0
.L1159:
	.word	sub_800E94C
	.word	gUnknown_03005000
.Lfe85:
	.size	 sub_800EF00,.Lfe85-sub_800EF00
	.align	2, 0
	.globl	sub_800EF1C
	.type	 sub_800EF1C,function
	.thumb_func
sub_800EF1C:
	push	{lr}
	ldr	r0, .L1164
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1162	@cond_branch
	mov	r0, #0x0
	b	.L1163
.L1165:
	.align	2, 0
.L1164:
	.word	gUnknown_03004140
.L1162:
	mov	r0, #0x1
.L1163:
	pop	{r1}
	bx	r1
.Lfe86:
	.size	 sub_800EF1C,.Lfe86-sub_800EF1C
	.align	2, 0
	.globl	sub_800EF38
	.type	 sub_800EF38,function
	.thumb_func
sub_800EF38:
	ldr	r1, .L1167
	mov	r0, #0x4
	strh	r0, [r1, #0x4]
	ldr	r0, .L1167+0x4
	ldrb	r0, [r0]
	ldr	r2, .L1167+0x8
	add	r1, r1, r2
	strb	r0, [r1]
	bx	lr
.L1168:
	.align	2, 0
.L1167:
	.word	gUnknown_03005000
	.word	gUnknown_03004140
	.word	0xce7
.Lfe87:
	.size	 sub_800EF38,.Lfe87-sub_800EF38
	.align	2, 0
	.globl	sub_800EF58
	.type	 sub_800EF58,function
	.thumb_func
sub_800EF58:
	push	{lr}
	add	r1, r0, #0
	ldr	r2, .L1173
	ldrh	r0, [r2, #0x4]
	cmp	r0, #0x11
	beq	.L1171	@cond_branch
	cmp	r1, #0
	beq	.L1170	@cond_branch
.L1171:
	mov	r0, #0x12
	strh	r0, [r2, #0x4]
	mov	r0, #0x1
	b	.L1172
.L1174:
	.align	2, 0
.L1173:
	.word	gUnknown_03005000
.L1170:
	mov	r0, #0x0
.L1172:
	pop	{r1}
	bx	r1
.Lfe88:
	.size	 sub_800EF58,.Lfe88-sub_800EF58
	.align	2, 0
	.globl	sub_800EF7C
	.type	 sub_800EF7C,function
	.thumb_func
sub_800EF7C:
	ldr	r1, .L1176
	mov	r0, #0xe
	strh	r0, [r1, #0x4]
	bx	lr
.L1177:
	.align	2, 0
.L1176:
	.word	gUnknown_03005000
.Lfe89:
	.size	 sub_800EF7C,.Lfe89-sub_800EF7C
	.align	2, 0
	.globl	sub_800EF88
	.type	 sub_800EF88,function
	.thumb_func
sub_800EF88:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r2, #0x0
	b	.L1179
.L1183:
	lsr	r1, r1, #0x1
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L1179:
	cmp	r2, #0x3
	bhi	.L1180	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1183	@cond_branch
	add	r0, r2, #0
	bl	rfu_UNI_readySendData
.L1180:
	pop	{r0}
	bx	r0
.Lfe90:
	.size	 sub_800EF88,.Lfe90-sub_800EF88
	.align	2, 0
	.globl	sub_800EFB0
	.type	 sub_800EFB0,function
	.thumb_func
sub_800EFB0:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	mov	r2, #0x0
	ldr	r7, .L1196
	ldr	r0, .L1196+0x4
	add	r6, r7, #0
	ldr	r1, .L1196+0x8
	add	r5, r0, r1
.L1189:
	mov	r3, #0x0
	lsl	r0, r2, #0x3
	lsl	r1, r2, #0x4
	add	r4, r2, #0x1
	sub	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r2, r0, r5
	add	r1, r1, r6
.L1193:
	ldrh	r0, [r1]
	lsr	r0, r0, #0x8
	strb	r0, [r2, #0x1]
	ldrh	r0, [r1]
	strb	r0, [r2]
	add	r2, r2, #0x2
	add	r1, r1, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x6
	ble	.L1193	@cond_branch
	add	r2, r4, #0
	cmp	r2, #0x4
	ble	.L1189	@cond_branch
	mov	r0, #0x0
	mov	r1, sp
	strh	r0, [r1]
	ldr	r2, .L1196+0xc
	mov	r0, sp
	add	r1, r7, #0
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1197:
	.align	2, 0
.L1196:
	.word	gRecvCmds
	.word	gUnknown_03005000
	.word	0xc87
	.word	0x1000028
.Lfe91:
	.size	 sub_800EFB0,.Lfe91-sub_800EFB0
	.align	2, 0
	.globl	sub_800F014
	.type	 sub_800F014,function
	.thumb_func
sub_800F014:
	push	{lr}
	ldr	r3, .L1209
	ldr	r2, .L1209+0x4
	mov	r1, #0x6
.L1202:
	ldrh	r0, [r3]
	strh	r0, [r2]
	add	r3, r3, #0x2
	add	r2, r2, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L1202	@cond_branch
	ldr	r1, .L1209
	mov	r2, #0x0
	add	r0, r1, #0
	add	r0, r0, #0xc
.L1207:
	strh	r2, [r0]
	sub	r0, r0, #0x2
	cmp	r0, r1
	bge	.L1207	@cond_branch
	pop	{r0}
	bx	r0
.L1210:
	.align	2, 0
.L1209:
	.word	gSendCmd
	.word	gRecvCmds
.Lfe92:
	.size	 sub_800F014,.Lfe92-sub_800F014
	.align	2, 0
	.type	 sub_800F048,function
	.thumb_func
sub_800F048:
	push	{r4, r5, lr}
	ldr	r4, .L1216
	ldr	r0, .L1216+0x4
	add	r5, r4, r0
	ldrb	r0, [r5]
	cmp	r0, #0
	beq	.L1212	@cond_branch
	ldr	r1, .L1216+0x8
	add	r0, r4, r1
	add	r1, r4, #0
	add	r1, r1, #0x4c
	bl	sub_800DAC8
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L1216+0xc
	add	r0, r4, r1
	ldrb	r0, [r0]
	add	r1, r0, #0
	cmp	r1, #0
	bne	.L1213	@cond_branch
	ldrb	r0, [r5]
	strb	r1, [r5]
.L1213:
	cmp	r2, #0
	bne	.L1211	@cond_branch
.L1212:
	ldr	r5, .L1216
	ldr	r1, .L1216+0x4
	add	r0, r5, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1211	@cond_branch
	ldr	r1, .L1216+0x10
	add	r0, r5, r1
	add	r4, r5, #0
	add	r4, r4, #0x4c
	add	r1, r4, #0
	bl	sub_800D9DC
	ldr	r1, .L1216+0x8
	add	r0, r5, r1
	add	r1, r4, #0
	bl	sub_800DA68
.L1211:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1217:
	.align	2, 0
.L1216:
	.word	gUnknown_03005000
	.word	0xc3c
	.word	0xc1c
	.word	0xc3a
	.word	0x9e8
.Lfe93:
	.size	 sub_800F048,.Lfe93-sub_800F048
	.align	2, 0
	.globl	IsRfuRecvQueueEmpty
	.type	 IsRfuRecvQueueEmpty,function
	.thumb_func
IsRfuRecvQueueEmpty:
	push	{r4, lr}
	ldr	r0, .L1234
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0
	bne	.L1219	@cond_branch
.L1233:
	mov	r0, #0x0
	b	.L1231
.L1235:
	.align	2, 0
.L1234:
	.word	gUnknown_03007890
.L1219:
	mov	r3, #0x0
	ldr	r4, .L1236
.L1223:
	mov	r2, #0x0
	lsl	r0, r3, #0x4
	add	r1, r0, r4
.L1227:
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L1233	@cond_branch
	add	r1, r1, #0x2
	add	r2, r2, #0x1
	cmp	r2, #0x6
	ble	.L1227	@cond_branch
	add	r3, r3, #0x1
	cmp	r3, #0x4
	ble	.L1223	@cond_branch
	mov	r0, #0x1
.L1231:
	pop	{r4}
	pop	{r1}
	bx	r1
.L1237:
	.align	2, 0
.L1236:
	.word	gRecvCmds
.Lfe94:
	.size	 IsRfuRecvQueueEmpty,.Lfe94-IsRfuRecvQueueEmpty
	.align	2, 0
	.globl	sub_800F0F8
	.type	 sub_800F0F8,function
	.thumb_func
sub_800F0F8:
	push	{r4, r5, r6, lr}
	ldr	r6, .L1248
	ldrh	r0, [r6, #0x4]
	cmp	r0, #0x13
	bhi	.L1239	@cond_branch
	bl	rfu_REQ_recvData
	bl	rfu_waitREQComplete
	mov	r0, #0x0
	bl	rfu_REQ_sendData_wrapper
	b	.L1240
.L1249:
	.align	2, 0
.L1248:
	.word	gUnknown_03005000
.L1239:
	ldr	r0, .L1250
	add	r1, r6, r0
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L1250+0x4
	add	r1, r6, r0
	ldr	r0, .L1250+0x8
	ldr	r0, [r0]
	ldrb	r1, [r1]
	ldrb	r0, [r0, #0x2]
	and	r0, r0, r1
	cmp	r0, r1
	bne	.L1240	@cond_branch
	cmp	r0, #0
	beq	.L1240	@cond_branch
	ldr	r1, .L1250+0xc
	add	r0, r6, r1
	ldrb	r0, [r0]
	add	r5, r0, #0
	cmp	r5, #0
	bne	.L1242	@cond_branch
	ldr	r0, .L1250+0x10
	add	r4, r6, r0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L1243	@cond_branch
	bl	sub_8011D6C
	strb	r5, [r4]
	ldr	r1, .L1250+0x14
	add	r0, r6, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L1244	@cond_branch
	mov	r4, #0x80
	lsl	r4, r4, #0x8
	mov	r0, #0x2
	add	r1, r4, #0
	bl	sub_8011A64
	add	r0, r4, #0
	bl	sub_8011170
	b	.L1240
.L1251:
	.align	2, 0
.L1250:
	.word	0xcdb
	.word	0xce2
	.word	gUnknown_03007890
	.word	0xcdc
	.word	0xce3
	.word	0xce4
.L1244:
	ldr	r0, .L1252
	ldrb	r4, [r0]
	cmp	r4, #0
	bne	.L1243	@cond_branch
	bl	sub_800EDD4
	ldr	r0, .L1252+0x4
	strb	r4, [r0]
	b	.L1240
.L1253:
	.align	2, 0
.L1252:
	.word	gUnknown_03004140
	.word	gReceivedRemoteLinkPlayers
.L1243:
	bl	sub_800EFB0
	ldr	r0, .L1254
	ldr	r1, .L1254+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	rfu_UNI_readySendData
	mov	r0, #0x1
	bl	rfu_REQ_sendData_wrapper
	b	.L1246
.L1255:
	.align	2, 0
.L1254:
	.word	gUnknown_03005000
	.word	0xcda
.L1242:
	bl	rfu_REQ_PARENT_resumeRetransmitAndChange
.L1246:
	ldr	r1, .L1256
	mov	r0, #0x1
	strb	r0, [r1, #0xe]
.L1240:
	mov	r0, #0x0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L1257:
	.align	2, 0
.L1256:
	.word	gUnknown_03005000
.Lfe95:
	.size	 sub_800F0F8,.Lfe95-sub_800F0F8
	.align	2, 0
	.globl	sub_800F1E0
	.type	 sub_800F1E0,function
	.thumb_func
sub_800F1E0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r0, .L1293
	ldrh	r1, [r0, #0x4]
	add	r6, r0, #0
	cmp	r1, #0x13
	bhi	.LCB9410
	b	.L1259	@long jump
.LCB9410:
	ldrb	r0, [r6, #0xe]
	cmp	r0, #0x1
	beq	.LCB9415
	b	.L1259	@long jump
.LCB9415:
	bl	rfu_waitREQComplete
	ldr	r0, .L1293+0x4
	add	r2, r6, r0
	ldrb	r0, [r2]
	cmp	r0, #0
	bne	.L1261	@cond_branch
	add	r1, r6, #0
	add	r1, r1, #0xee
.L1262:
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.LCB9436
	b	.L1292	@long jump
.LCB9436:
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L1262	@cond_branch
.L1261:
	bl	rfu_REQ_recvData
	bl	rfu_waitREQComplete
	ldr	r2, .L1293+0x8
	ldr	r4, .L1293
	ldr	r1, .L1293+0xc
	add	r0, r4, r1
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r0]
	and	r1, r1, r0
	cmp	r1, r0
	beq	.LCB9462
	b	.L1265	@long jump
.LCB9462:
	ldr	r6, .L1293+0x10
	add	r1, r4, r6
	ldrb	r0, [r1]
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L1293+0x14
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
	ldrb	r7, [r2]
	mov	r5, #0x0
.L1269:
	mov	r0, #0x1
	and	r0, r0, r7
	lsr	r1, r7, #0x1
	str	r1, [sp, #0x4]
	add	r2, r5, #0x1
	str	r2, [sp]
	cmp	r0, #0
	bne	.LCB9493
	b	.L1270	@long jump
.LCB9493:
	ldr	r1, .L1293
	lsl	r2, r5, #0x3
	sub	r0, r2, r5
	lsl	r4, r0, #0x1
	add	r0, r1, #0
	add	r0, r0, #0x15
	add	r0, r4, r0
	ldrb	r0, [r0]
	add	r6, r1, #0
	add	r3, r2, #0
	lsl	r1, r5, #0x18
	mov	sl, r1
	cmp	r0, #0
	beq	.L1271	@cond_branch
	ldr	r2, .L1293+0x18
	add	r0, r6, r2
	add	r1, r5, r0
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L1272	@cond_branch
	add	r0, r6, #0
	add	r0, r0, #0x14
	add	r0, r4, r0
	ldrb	r2, [r0]
	lsr	r2, r2, #0x5
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r2, r0
	beq	.L1272	@cond_branch
	ldr	r0, .L1293+0x1c
	add	r1, r6, r0
	add	r1, r5, r1
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L1271	@cond_branch
	mov	r0, #0x81
	lsl	r0, r0, #0x8
	bl	sub_8011170
	b	.L1271
.L1294:
	.align	2, 0
.L1293:
	.word	gUnknown_03005000
	.word	0xcdb
	.word	gUnknown_03004140
	.word	0xce2
	.word	0xcdc
	.word	gUnknown_02022B44
	.word	0xcee
	.word	0xcea
.L1272:
	ldr	r2, .L1295
	ldr	r6, .L1295+0x4
	add	r1, r2, r6
	add	r1, r5, r1
	sub	r3, r3, r5
	lsl	r3, r3, #0x1
	add	r4, r2, #0
	add	r4, r4, #0x14
	add	r2, r3, r4
	ldrb	r0, [r2]
	lsr	r0, r0, #0x5
	strb	r0, [r1]
	ldr	r1, .L1295
	sub	r6, r6, #0x4
	add	r0, r1, r6
	add	r0, r5, r0
	mov	r1, #0x0
	strb	r1, [r0]
	ldrb	r1, [r2]
	mov	r0, #0x1f
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, .L1295+0x8
	add	r0, r5, r2
	ldrb	r0, [r0]
	mov	r6, #0x0
	lsl	r1, r5, #0x18
	mov	sl, r1
	lsr	r2, r7, #0x1
	str	r2, [sp, #0x4]
	add	r5, r5, #0x1
	str	r5, [sp]
	ldr	r1, .L1295+0xc
	mov	r9, r1
	add	r5, r3, #0
	add	r7, r4, #0
	lsl	r0, r0, #0x4
	mov	r8, r0
	add	r2, r5, #0x1
	mov	ip, r2
.L1278:
	lsl	r1, r6, #0x1
	mov	r0, r8
	add	r4, r1, r0
	add	r4, r4, r9
	mov	r2, ip
	add	r3, r1, r2
	add	r3, r3, r7
	ldrb	r2, [r3]
	lsl	r2, r2, #0x8
	add	r1, r1, r5
	add	r1, r1, r7
	ldrb	r0, [r1]
	orr	r0, r0, r2
	strh	r0, [r4]
	mov	r0, #0x0
	strb	r0, [r3]
	strb	r0, [r1]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x6
	bls	.L1278	@cond_branch
.L1271:
	mov	r1, sl
	lsr	r0, r1, #0x18
	bl	rfu_UNI_clearRecvNewDataFlag
.L1270:
	ldr	r2, [sp, #0x4]
	lsl	r0, r2, #0x10
	lsr	r7, r0, #0x10
	ldr	r6, [sp]
	lsl	r0, r6, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x3
	bhi	.LCB9674
	b	.L1269	@long jump
.LCB9674:
	bl	sub_800F014
	mov	r0, #0x0
	bl	sub_800F86C
	bl	sub_8010528
	ldr	r4, .L1295
	ldr	r1, .L1295+0x10
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1288	@cond_branch
	ldr	r2, .L1295+0x14
	add	r0, r4, r2
	ldrb	r2, [r0]
	cmp	r2, #0
	bne	.L1288	@cond_branch
	ldr	r0, .L1295+0x18
	ldrb	r1, [r0, #0xe]
	strb	r2, [r0, #0xe]
	ldr	r6, .L1295+0x1c
	add	r0, r4, r6
	ldrb	r1, [r0]
	mov	r0, #0x3
	bl	rfu_clearSlot
	mov	r5, #0x0
	add	r7, r4, #0
	add	r7, r7, #0x14
.L1285:
	ldr	r0, .L1295+0x10
	add	r6, r4, r0
	ldrb	r0, [r6]
	asr	r0, r0, r5
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1284	@cond_branch
	lsl	r1, r5, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r5, #0x3
	sub	r2, r2, r5
	lsl	r2, r2, #0x1
	add	r2, r2, r7
	mov	r0, #0x10
	mov	r3, #0xe
	bl	rfu_setRecvBuffer
.L1284:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0x3
	bls	.L1285	@cond_branch
	sub	r4, r6, #0x3
	ldrb	r0, [r4]
	ldrb	r2, [r6]
	add	r1, r0, #0
	orr	r1, r1, r2
	bl	sub_800E88C
	ldrb	r1, [r6]
	mov	r2, #0x0
	strb	r1, [r6, #0x4]
	ldrb	r0, [r4]
	orr	r0, r0, r1
	strb	r0, [r4]
	strb	r2, [r6]
	ldrb	r0, [r4]
	add	r1, r6, #0
	sub	r1, r1, #0x5e
	mov	r2, #0x46
	bl	rfu_UNI_setSendData
	ldrb	r0, [r4]
	bl	sub_800E87C
	add	r1, r6, #0
	sub	r1, r1, #0xb
	strb	r0, [r1]
	ldr	r0, .L1295+0x20
	mov	r1, #0x0
	bl	CreateTask
	b	.L1288
.L1296:
	.align	2, 0
.L1295:
	.word	gUnknown_03005000
	.word	0xcee
	.word	gUnknown_03005000+0xcde
	.word	gRecvCmds
	.word	0xce5
	.word	0xcd9
	.word	gUnknown_02022B44
	.word	0xcda
	.word	sub_8010AAC
.L1265:
	ldr	r2, .L1297
	add	r1, r4, r2
	ldrb	r0, [r1]
	mov	r2, #0x0
	mov	r0, #0x1
	strb	r0, [r1]
	strb	r2, [r4, #0xe]
.L1288:
	ldr	r1, .L1297+0x4
	mov	r0, #0x0
	strb	r0, [r1, #0xe]
	add	r6, r1, #0
.L1259:
	ldr	r1, .L1297
	add	r0, r6, r1
	ldrb	r0, [r0]
	add	r1, r0, #0
	ldr	r0, .L1297+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0
	beq	.L1289	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r1
	b	.L1291
.L1298:
	.align	2, 0
.L1297:
	.word	0xcdc
	.word	gUnknown_03005000
	.word	gUnknown_03007890
.L1292:
	mov	r0, #0x0
	b	.L1291
.L1289:
	mov	r0, #0x0
.L1291:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe96:
	.size	 sub_800F1E0,.Lfe96-sub_800F1E0
	.align	2, 0
	.globl	sub_800F498
	.type	 sub_800F498,function
	.thumb_func
sub_800F498:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r2, r1, #0
	ldrh	r1, [r4]
	cmp	r1, #0
	beq	.L1300	@cond_branch
	ldr	r0, .L1312
	mov	r5, #0x81
	lsl	r5, r5, #0x1
	add	r3, r0, r5
	ldrb	r0, [r3]
	lsl	r0, r0, #0x5
	orr	r0, r0, r1
	strh	r0, [r4]
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	mov	r1, #0x7
	and	r0, r0, r1
	strb	r0, [r3]
	add	r3, r4, #0
	mov	r4, #0x6
.L1304:
	ldrh	r1, [r3]
	lsr	r0, r1, #0x8
	strb	r0, [r2, #0x1]
	strb	r1, [r2]
	add	r2, r2, #0x2
	add	r3, r3, #0x2
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L1304	@cond_branch
	b	.L1306
.L1313:
	.align	2, 0
.L1312:
	.word	gUnknown_03005000
.L1300:
	mov	r1, #0x0
	add	r0, r2, #0
	add	r0, r0, #0xd
.L1310:
	strb	r1, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r2
	bge	.L1310	@cond_branch
.L1306:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe97:
	.size	 sub_800F498,.Lfe97-sub_800F498
	.align	2, 0
	.globl	sub_800F4F0
	.type	 sub_800F4F0,function
	.thumb_func
sub_800F4F0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x58
	ldr	r0, .L1334
	mov	r1, sp
	bl	sub_800D934
	mov	r1, #0x0
	ldr	r0, .L1334+0x4
	mov	ip, r0
.L1318:
	mov	r4, #0x0
	lsl	r0, r1, #0x3
	add	r2, r1, #0x1
	mov	r8, r2
	lsl	r6, r1, #0x4
	sub	r0, r0, r1
	lsl	r5, r0, #0x1
.L1322:
	lsl	r1, r4, #0x1
	add	r3, r1, r6
	add	r3, r3, ip
	add	r1, r5, r1
	add	r0, r1, #0x1
	add	r0, r0, sp
	ldrb	r2, [r0]
	lsl	r2, r2, #0x8
	mov	r7, sp
	add	r0, r7, r1
	ldrb	r0, [r0]
	orr	r0, r0, r2
	strh	r0, [r3]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x6
	bls	.L1322	@cond_branch
	mov	r1, r8
	lsl	r0, r1, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x4
	bls	.L1318	@cond_branch
	mov	r0, #0x0
	bl	sub_800F86C
	ldr	r0, .L1334+0x8
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.L1325	@cond_branch
	ldr	r0, .L1334+0xc
	ldr	r2, .L1334+0x10
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1325	@cond_branch
	ldr	r0, .L1334+0x14
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x2]
	ldrb	r0, [r0, #0x3]
	orr	r0, r0, r1
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
	bl	sub_8011A74
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L1326	@cond_branch
	cmp	r0, #0x6
	beq	.L1326	@cond_branch
	cmp	r0, #0x9
	beq	.L1326	@cond_branch
	mov	r1, #0x90
	lsl	r1, r1, #0x8
	mov	r0, #0x2
	bl	sub_8011A64
.L1326:
	bl	rfu_clearAllSlot
	ldr	r1, .L1334+0x18
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L1334+0xc
	mov	r5, #0x0
	str	r5, [r0]
	ldr	r7, .L1334+0x10
	add	r6, r0, r7
	ldrb	r0, [r6]
	cmp	r0, #0x1
	bne	.L1327	@cond_branch
	mov	r4, #0x90
	lsl	r4, r4, #0x8
	mov	r0, #0x2
	add	r1, r4, #0
	bl	sub_8011A64
	add	r0, r4, #0
	bl	sub_8011170
.L1327:
	ldr	r0, .L1334+0x8
	strb	r5, [r0, #0x5]
	strb	r5, [r0, #0x4]
	strb	r5, [r6]
.L1325:
	ldr	r6, .L1334+0xc
	mov	r0, #0xcd
	lsl	r0, r0, #0x4
	add	r2, r6, r0
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L1328	@cond_branch
	ldrb	r0, [r2]
	sub	r0, r0, #0x1
	ldrb	r1, [r2]
	strb	r0, [r2]
	bl	sub_8010528
	ldr	r5, .L1334+0x1c
	add	r4, sp, #0x48
	add	r0, r5, #0
	add	r1, r4, #0
	bl	sub_800F498
	ldr	r1, .L1334+0x20
	add	r0, r6, r1
	add	r1, r4, #0
	bl	sub_800D888
	mov	r1, #0x0
	mov	r2, #0x0
.L1332:
	lsl	r0, r1, #0x1
	add	r0, r0, r5
	strh	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x6
	bls	.L1332	@cond_branch
.L1328:
	bl	IsRfuRecvQueueEmpty
	add	sp, sp, #0x58
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1335:
	.align	2, 0
.L1334:
	.word	gUnknown_03005000+0x124
	.word	gRecvCmds
	.word	gUnknown_03004140
	.word	gUnknown_03005000
	.word	0xce4
	.word	gUnknown_03007890
	.word	gReceivedRemoteLinkPlayers
	.word	gSendCmd
	.word	0x9e8
.Lfe98:
	.size	 sub_800F4F0,.Lfe98-sub_800F4F0
	.align	2, 0
	.globl	sub_800F638
	.type	 sub_800F638,function
	.thumb_func
sub_800F638:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L1353
	ldr	r2, [r0, #0x70]
	mov	sl, r2
	mov	r5, #0x0
	add	r2, r0, #0
	add	r2, r2, #0x6e
	ldrh	r3, [r2]
	cmp	r5, r3
	bge	.L1338	@cond_branch
	mov	r9, r0
	ldr	r0, .L1353+0x4
	mov	r8, r0
.L1340:
	mov	r0, #0x1
	and	r0, r0, r1
	lsr	r7, r1, #0x1
	add	r6, r5, #0x1
	cmp	r0, #0
	bne	.L1341	@cond_branch
	ldr	r1, .L1353+0x8
	add	r0, r1, #0
	add	r1, r5, #0
	orr	r1, r1, r0
	mov	r2, r8
	strh	r1, [r2]
	mov	r4, #0x0
	lsl	r0, r5, #0x1
	ldr	r3, .L1353+0xc
	mov	ip, r3
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	mov	r1, sl
	add	r2, r0, r1
	mov	r3, r8
	add	r3, r3, #0x2
.L1345:
	ldrb	r1, [r2, #0x1]
	lsl	r1, r1, #0x8
	ldrb	r0, [r2]
	orr	r0, r0, r1
	strh	r0, [r3]
	add	r2, r2, #0x2
	add	r3, r3, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x6
	ble	.L1345	@cond_branch
	mov	r4, #0x0
	ldr	r2, .L1353+0x4
	ldr	r1, .L1353+0xc
.L1350:
	ldrh	r0, [r2]
	lsr	r0, r0, #0x8
	strb	r0, [r1, #0x1]
	ldrh	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x2
	add	r1, r1, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x6
	ble	.L1350	@cond_branch
	ldr	r0, .L1353+0x10
	mov	r1, ip
	bl	sub_800D888
	mov	r1, #0x1
	lsl	r1, r1, r5
	mov	r2, r9
	ldr	r0, [r2, #0x78]
	orr	r0, r0, r1
	str	r0, [r2, #0x78]
.L1341:
	add	r1, r7, #0
	add	r5, r6, #0
	ldr	r3, .L1353+0x14
	ldrh	r3, [r3]
	cmp	r5, r3
	blt	.L1340	@cond_branch
.L1338:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1354:
	.align	2, 0
.L1353:
	.word	gUnknown_03005000
	.word	gUnknown_03000D90
	.word	-0x7700
	.word	gUnknown_03000D80
	.word	gUnknown_03005000+0x9e8
	.word	gUnknown_03005000+0x6e
.Lfe99:
	.size	 sub_800F638,.Lfe99-sub_800F638
	.align	2, 0
	.globl	sub_800F6FC
	.type	 sub_800F6FC,function
	.thumb_func
sub_800F6FC:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r0, .L1358
	ldrb	r2, [r0, #0xc]
	cmp	r2, #0x1
	bne	.L1356	@cond_branch
	cmp	r1, #0
	beq	.L1356	@cond_branch
	add	r0, r0, #0x61
	add	r0, r1, r0
	strb	r2, [r0]
	b	.L1357
.L1359:
	.align	2, 0
.L1358:
	.word	gUnknown_03005000
.L1356:
	add	r0, r0, #0x5c
	add	r0, r1, r0
	mov	r1, #0x1
	strb	r1, [r0]
.L1357:
	pop	{r0}
	bx	r0
.Lfe100:
	.size	 sub_800F6FC,.Lfe100-sub_800F6FC
	.align	2, 0
	.globl	sub_800F728
	.type	 sub_800F728,function
	.thumb_func
sub_800F728:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L1361
	add	r1, r3, #0
	add	r1, r1, #0x5c
	add	r1, r0, r1
	mov	r2, #0x0
	strb	r2, [r1]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	add	r1, r1, #0x92
	strb	r2, [r1]
	bx	lr
.L1362:
	.align	2, 0
.L1361:
	.word	gUnknown_03005000
.Lfe101:
	.size	 sub_800F728,.Lfe101-sub_800F728
	.align	2, 0
	.globl	sub_800F74C
	.type	 sub_800F74C,function
	.thumb_func
sub_800F74C:
	push	{r4, r5, lr}
	add	r3, r0, #0
	ldr	r0, .L1371
	ldrb	r1, [r0, #0xc]
	add	r5, r0, #0
	cmp	r1, #0x1
	bne	.L1364	@cond_branch
	mov	r0, #0x0
	b	.L1370
.L1372:
	.align	2, 0
.L1371:
	.word	gUnknown_03005000
.L1364:
	mov	r2, #0x0
	ldr	r0, .L1373
	add	r4, r5, r0
.L1368:
	add	r1, r2, r4
	add	r0, r3, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L1368	@cond_branch
	ldr	r1, .L1373+0x4
	add	r0, r5, r1
	ldrb	r0, [r0]
	add	r0, r0, r3
	ldrb	r0, [r0]
.L1370:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L1374:
	.align	2, 0
.L1373:
	.word	0xcde
	.word	0xc3e
.Lfe102:
	.size	 sub_800F74C,.Lfe102-sub_800F74C
	.align	2, 0
	.globl	rfu_func_080F97B8
	.type	 rfu_func_080F97B8,function
	.thumb_func
rfu_func_080F97B8:
	push	{lr}
	ldr	r0, .L1377
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1376	@cond_branch
	ldr	r3, .L1377+0x4
	ldrh	r2, [r3]
	cmp	r2, #0
	beq	.L1376	@cond_branch
	ldr	r0, .L1377+0x8
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L1376	@cond_branch
	ldr	r1, .L1377+0xc
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r0, r0, r2
	strh	r0, [r3]
	mov	r0, #0xbe
	lsl	r0, r0, #0x8
	bl	sub_800FD14
.L1376:
	pop	{r0}
	bx	r0
.L1378:
	.align	2, 0
.L1377:
	.word	gReceivedRemoteLinkPlayers
	.word	gHeldKeyCodeToSend
	.word	gLinkTransferringData
	.word	gUnknown_03000D78
.Lfe103:
	.size	 rfu_func_080F97B8,.Lfe103-rfu_func_080F97B8
	.align	2, 0
	.globl	sub_800F7DC
	.type	 sub_800F7DC,function
	.thumb_func
sub_800F7DC:
	ldr	r0, .L1380
	bx	lr
.L1381:
	.align	2, 0
.L1380:
	.word	gUnknown_02022B14
.Lfe104:
	.size	 sub_800F7DC,.Lfe104-sub_800F7DC
	.align	2, 0
	.globl	IsSendingKeysToRfu
	.type	 IsSendingKeysToRfu,function
	.thumb_func
IsSendingKeysToRfu:
	push	{lr}
	mov	r2, #0x0
	ldr	r0, .L1384
	ldr	r1, [r0]
	ldr	r0, .L1384+0x4
	cmp	r1, r0
	bne	.L1383	@cond_branch
	mov	r2, #0x1
.L1383:
	add	r0, r2, #0
	pop	{r1}
	bx	r1
.L1385:
	.align	2, 0
.L1384:
	.word	gUnknown_03005000
	.word	rfu_func_080F97B8
.Lfe105:
	.size	 IsSendingKeysToRfu,.Lfe105-IsSendingKeysToRfu
	.align	2, 0
	.globl	sub_800F804
	.type	 sub_800F804,function
	.thumb_func
sub_800F804:
	ldr	r1, .L1387
	ldr	r0, .L1387+0x4
	str	r0, [r1]
	bx	lr
.L1388:
	.align	2, 0
.L1387:
	.word	gUnknown_03005000
	.word	rfu_func_080F97B8
.Lfe106:
	.size	 sub_800F804,.Lfe106-sub_800F804
	.align	2, 0
	.globl	Rfu_set_zero
	.type	 Rfu_set_zero,function
	.thumb_func
Rfu_set_zero:
	ldr	r1, .L1390
	mov	r0, #0x0
	str	r0, [r1]
	bx	lr
.L1391:
	.align	2, 0
.L1390:
	.word	gUnknown_03005000
.Lfe107:
	.size	 Rfu_set_zero,.Lfe107-Rfu_set_zero
	.align	2, 0
	.globl	sub_800F820
	.type	 sub_800F820,function
	.thumb_func
sub_800F820:
	push	{lr}
	mov	r0, #0x88
	lsl	r0, r0, #0x7
	bl	sub_800FD14
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1393	@cond_branch
	bl	GetBlenderArrowPosition
	ldr	r1, .L1394
	strh	r0, [r1, #0xc]
.L1393:
	ldr	r1, .L1394+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1395:
	.align	2, 0
.L1394:
	.word	gSendCmd
	.word	gUnknown_020223C0
.Lfe108:
	.size	 sub_800F820,.Lfe108-sub_800F820
	.align	2, 0
	.globl	sub_800F850
	.type	 sub_800F850,function
	.thumb_func
sub_800F850:
	push	{lr}
	ldr	r1, .L1398
	ldr	r0, [r1]
	cmp	r0, #0
	bne	.L1397	@cond_branch
	ldr	r0, .L1398+0x4
	str	r0, [r1]
.L1397:
	pop	{r0}
	bx	r0
.L1399:
	.align	2, 0
.L1398:
	.word	gUnknown_03005000
	.word	sub_800F820
.Lfe109:
	.size	 sub_800F850,.Lfe109-sub_800F850
	.align	2, 0
	.type	 sub_800F86C,function
	.thumb_func
sub_800F86C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r0, #0x0
	mov	r8, r0
.L1404:
	mov	r1, r8
	lsl	r0, r1, #0x4
	ldr	r2, .L1444
	add	r1, r0, r2
	ldrh	r7, [r1]
	mov	r3, #0xff
	lsl	r3, r3, #0x8
	add	r1, r3, #0
	and	r1, r1, r7
	mov	r2, #0x88
	lsl	r2, r2, #0x8
	add	r5, r0, #0
	cmp	r1, r2
	beq	.L1410	@cond_branch
	cmp	r1, r2
	bgt	.L1436	@cond_branch
	mov	r0, #0xcc
	lsl	r0, r0, #0x7
	cmp	r1, r0
	bne	.LCB10675
	b	.L1423	@long jump
.LCB10675:
	cmp	r1, r0
	bgt	.L1437	@cond_branch
	mov	r0, #0x88
	lsl	r0, r0, #0x7
	cmp	r1, r0
	bne	.LCB10681
	b	.L1433	@long jump
.LCB10681:
	mov	r0, #0xbe
	lsl	r0, r0, #0x7
	cmp	r1, r0
	bne	.LCB10685
	b	.L1422	@long jump
.LCB10685:
	b	.L1443
.L1445:
	.align	2, 0
.L1444:
	.word	gRecvCmds
.L1437:
	mov	r0, #0xee
	lsl	r0, r0, #0x7
	cmp	r1, r0
	beq	.L1408	@cond_branch
	mov	r0, #0xf0
	lsl	r0, r0, #0x7
	cmp	r1, r0
	beq	.L1406	@cond_branch
	b	.L1443
.L1436:
	mov	r0, #0xbe
	lsl	r0, r0, #0x8
	cmp	r1, r0
	bne	.LCB10709
	b	.L1433	@long jump
.LCB10709:
	cmp	r1, r0
	bgt	.L1438	@cond_branch
	mov	r0, #0x89
	lsl	r0, r0, #0x8
	cmp	r1, r0
	beq	.L1412	@cond_branch
	mov	r0, #0xa1
	lsl	r0, r0, #0x8
	cmp	r1, r0
	bne	.LCB10719
	b	.L1421	@long jump
.LCB10719:
	b	.L1443
.L1438:
	mov	r0, #0xed
	lsl	r0, r0, #0x8
	cmp	r1, r0
	bne	.LCB10726
	b	.L1425	@long jump
.LCB10726:
	mov	r0, #0xee
	lsl	r0, r0, #0x8
	cmp	r1, r0
	bne	.LCB10730
	b	.L1430	@long jump
.LCB10730:
	b	.L1443
.L1406:
	ldr	r4, .L1446
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0
	bne	.L1408	@cond_branch
	ldr	r0, .L1446+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB10747
	b	.L1400	@long jump
.LCB10747:
.L1408:
	ldr	r0, .L1446+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0]
	mov	r6, r8
	add	r6, r6, #0x1
	cmp	r0, #0
	beq	.LCB10757
	b	.L1405	@long jump
.LCB10757:
	ldr	r1, .L1446+0xc
	add	r0, r5, r1
	ldrh	r0, [r0]
	ldr	r2, .L1446
	strb	r0, [r2, #0xd]
	ldr	r3, .L1446+0x10
	add	r0, r5, r3
	bl	sub_800F74C
	ldr	r4, .L1446+0x14
	strb	r0, [r4]
	b	.L1405
.L1447:
	.align	2, 0
.L1446:
	.word	gUnknown_03005000
	.word	gReceivedRemoteLinkPlayers
	.word	gUnknown_03007890
	.word	gRecvCmds+0x2
	.word	gRecvCmds+0x4
	.word	gUnknown_03005000+0xcce
.L1410:
	ldr	r0, .L1448
	mov	r9, r0
	mov	r1, r8
	lsl	r0, r1, #0x2
	add	r0, r0, r8
	lsl	r7, r0, #0x2
	mov	r2, r9
	add	r3, r7, r2
	mov	r4, #0x92
	add	r4, r4, r3
	mov	ip, r4
	ldrb	r4, [r4]
	mov	r6, r8
	add	r6, r6, #0x1
	cmp	r4, #0
	beq	.LCB10805
	b	.L1405	@long jump
.LCB10805:
	add	r0, r3, #0
	add	r0, r0, #0x80
	mov	r2, #0x0
	strh	r4, [r0]
	ldr	r1, .L1448+0x4
	add	r0, r5, r1
	ldrh	r0, [r0]
	add	r1, r3, #0
	add	r1, r1, #0x82
	strh	r0, [r1]
	ldr	r1, .L1448+0x8
	add	r0, r5, r1
	ldrh	r1, [r0]
	add	r0, r3, #0
	add	r0, r0, #0x91
	strb	r1, [r0]
	mov	r0, r9
	add	r0, r0, #0x88
	add	r0, r7, r0
	str	r4, [r0]
	mov	r0, #0x1
	mov	r3, ip
	strb	r0, [r3]
	mov	r0, r9
	add	r0, r0, #0x5c
	add	r0, r0, r8
	strb	r2, [r0]
	b	.L1405
.L1449:
	.align	2, 0
.L1448:
	.word	gUnknown_03005000
	.word	gRecvCmds+0x2
	.word	gRecvCmds+0x4
.L1412:
	ldr	r4, .L1450
	mov	r9, r4
	mov	r0, r8
	lsl	r1, r0, #0x2
	add	r0, r1, r0
	lsl	r4, r0, #0x2
	mov	r3, r9
	add	r2, r4, r3
	add	r0, r2, #0
	add	r0, r0, #0x92
	ldrb	r3, [r0]
	mov	sl, r1
	mov	r6, r8
	add	r6, r6, #0x1
	cmp	r3, #0x1
	beq	.LCB10863
	b	.L1405	@long jump
.LCB10863:
	mov	r0, #0xff
	and	r0, r0, r7
	add	r2, r2, #0x80
	strh	r0, [r2]
	mov	r1, r9
	add	r1, r1, #0x88
	add	r1, r4, r1
	lsl	r3, r3, r0
	ldr	r0, [r1]
	orr	r0, r0, r3
	str	r0, [r1]
	mov	r4, #0x0
	ldr	r0, .L1450+0x4
	mov	r9, r0
	mov	ip, r2
	mov	r1, r8
	lsl	r7, r1, #0x8
	add	r3, r5, #0
.L1417:
	mov	r2, ip
	ldrh	r0, [r2]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	lsl	r1, r1, #0x1
	add	r1, r1, r7
	add	r1, r1, r9
	add	r2, r4, #0x1
	lsl	r0, r2, #0x1
	add	r0, r0, r3
	ldr	r4, .L1450+0x8
	add	r0, r0, r4
	ldrh	r0, [r0]
	strh	r0, [r1]
	lsl	r2, r2, #0x10
	lsr	r4, r2, #0x10
	cmp	r4, #0x5
	bls	.L1417	@cond_branch
	ldr	r4, .L1450
	mov	r0, sl
	add	r0, r0, r8
	lsl	r0, r0, #0x2
	add	r1, r4, #0
	add	r1, r1, #0x88
	add	r1, r0, r1
	add	r2, r0, r4
	add	r0, r2, #0
	add	r0, r0, #0x82
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	ldr	r3, .L1450+0xc
	add	r0, r0, r3
	ldr	r1, [r1]
	ldr	r0, [r0]
	cmp	r1, r0
	beq	.LCB10939
	b	.L1405	@long jump
.LCB10939:
	add	r1, r2, #0
	add	r1, r1, #0x92
	mov	r0, #0x2
	strb	r0, [r1]
	mov	r1, r8
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	bl	sub_800F6FC
	bl	sub_800F7DC
	ldrb	r1, [r0, #0xa]
	mov	r0, #0x7f
	and	r0, r0, r1
	cmp	r0, #0x45
	beq	.LCB10958
	b	.L1405	@long jump
.LCB10958:
	ldr	r0, .L1450+0x10
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB10964
	b	.L1405	@long jump
.LCB10964:
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0
	beq	.LCB10969
	b	.L1405	@long jump
.LCB10969:
	ldr	r0, .L1450+0x4
	bl	sub_8010A70
	b	.L1405
.L1451:
	.align	2, 0
.L1450:
	.word	gUnknown_03005000
	.word	gBlockRecvBuffer
	.word	gRecvCmds
	.word	gUnknown_082ED628
	.word	gReceivedRemoteLinkPlayers
.L1421:
	ldr	r2, .L1452
	ldr	r3, .L1452+0x4
	add	r0, r5, r3
	ldrh	r1, [r0]
	lsl	r1, r1, #0x3
	add	r0, r1, r2
	ldr	r0, [r0]
	add	r2, r2, #0x4
	add	r1, r1, r2
	ldrh	r1, [r1]
	bl	sub_800FE84
	b	.L1443
.L1453:
	.align	2, 0
.L1452:
	.word	gUnknown_082ED6B8
	.word	gRecvCmds+0x2
.L1422:
	ldr	r1, .L1454
	add	r1, r1, r8
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L1443
.L1455:
	.align	2, 0
.L1454:
	.word	gUnknown_03005000+0xe4
.L1423:
	ldr	r2, .L1456
	mov	r4, #0x80
	lsl	r4, r4, #0x1
	add	r0, r2, r4
	ldr	r3, .L1456+0x4
	add	r1, r5, r3
	ldrh	r0, [r0]
	mov	r6, r8
	add	r6, r6, #0x1
	ldrh	r1, [r1]
	cmp	r0, r1
	beq	.LCB11042
	b	.L1405	@long jump
.LCB11042:
	add	r0, r2, #0
	add	r0, r0, #0xe9
	add	r0, r0, r8
	mov	r1, #0x1
	strb	r1, [r0]
	b	.L1405
.L1457:
	.align	2, 0
.L1456:
	.word	gUnknown_03005000
	.word	gRecvCmds+0x2
.L1425:
	ldr	r7, .L1458
	ldrb	r2, [r7, #0xc]
	cmp	r2, #0
	bne	.L1426	@cond_branch
	ldr	r3, .L1458+0x4
	ldrb	r0, [r3]
	mov	r6, r8
	add	r6, r6, #0x1
	cmp	r0, #0
	beq	.L1405	@cond_branch
	ldr	r0, .L1458+0x8
	add	r4, r5, r0
	ldrh	r1, [r4]
	ldr	r0, .L1458+0xc
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x2]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1428	@cond_branch
	strb	r2, [r3]
	bl	sub_800D630
	ldr	r1, .L1458+0x10
	add	r0, r5, r1
	ldrh	r1, [r0]
	ldr	r2, .L1458+0x14
	add	r0, r7, r2
	strb	r1, [r0]
.L1428:
	ldr	r0, .L1458+0x18
	add	r0, r0, #0x6
	add	r0, r5, r0
	ldrh	r0, [r0]
	strb	r0, [r7, #0xd]
	ldrh	r0, [r4]
	bl	sub_80109E8
	b	.L1405
.L1459:
	.align	2, 0
.L1458:
	.word	gUnknown_03005000
	.word	gReceivedRemoteLinkPlayers
	.word	gRecvCmds+0x2
	.word	gUnknown_03007890
	.word	gRecvCmds+0x4
	.word	0xce4
	.word	gRecvCmds
.L1426:
	mov	r0, #0xee
	lsl	r0, r0, #0x8
	bl	sub_800FD14
	ldr	r1, .L1460
	ldr	r3, .L1460+0x4
	add	r0, r5, r3
	ldrh	r0, [r0]
	strh	r0, [r1, #0x2]
	ldr	r4, .L1460+0x8
	add	r0, r5, r4
	ldrh	r0, [r0]
	strh	r0, [r1, #0x4]
	ldr	r0, .L1460+0xc
	add	r0, r0, #0x6
	add	r0, r5, r0
	ldrh	r0, [r0]
	strh	r0, [r1, #0x6]
	b	.L1443
.L1461:
	.align	2, 0
.L1460:
	.word	gSendCmd
	.word	gRecvCmds+0x2
	.word	gRecvCmds+0x4
	.word	gRecvCmds
.L1430:
	ldr	r4, .L1462
	ldrb	r0, [r4, #0xc]
	mov	r6, r8
	add	r6, r6, #0x1
	cmp	r0, #0x1
	bne	.L1403	@cond_branch
	ldr	r0, .L1462+0x4
	add	r2, r4, r0
	ldr	r1, .L1462+0x8
	add	r3, r5, r1
	ldrb	r1, [r3]
	ldrb	r0, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, .L1462+0xc
	add	r0, r5, r2
	ldrh	r1, [r0]
	ldr	r2, .L1462+0x10
	add	r0, r4, r2
	strb	r1, [r0]
	ldrh	r0, [r3]
	bl	sub_80109E8
	b	.L1405
.L1463:
	.align	2, 0
.L1462:
	.word	gUnknown_03005000
	.word	0xce3
	.word	gRecvCmds+0x2
	.word	gRecvCmds+0x4
	.word	0xce4
.L1433:
	ldr	r0, .L1464
	mov	r3, r8
	lsl	r1, r3, #0x1
	add	r1, r1, r0
	ldr	r4, .L1464+0x4
	add	r0, r5, r4
	ldrh	r0, [r0]
	strh	r0, [r1]
.L1443:
	mov	r6, r8
	add	r6, r6, #0x1
.L1405:
	ldr	r3, .L1464+0x8
	ldrb	r4, [r3, #0xc]
	cmp	r4, #0x1
	bne	.L1403	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x61
	mov	r1, r8
	add	r2, r1, r0
	ldrb	r0, [r2]
	add	r1, r0, #0
	cmp	r1, #0
	beq	.L1403	@cond_branch
	cmp	r1, #0x4
	bne	.L1440	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x5c
	add	r0, r0, r8
	mov	r1, #0x0
	strb	r4, [r0]
	strb	r1, [r2]
	b	.L1403
.L1465:
	.align	2, 0
.L1464:
	.word	gLinkPartnersHeldKeys
	.word	gRecvCmds+0x2
	.word	gUnknown_03005000
.L1440:
	add	r0, r0, #0x1
	strb	r0, [r2]
.L1403:
	lsl	r0, r6, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	cmp	r0, #0x4
	bhi	.LCB11253
	b	.L1404	@long jump
.LCB11253:
.L1400:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe110:
	.size	 sub_800F86C,.Lfe110-sub_800F86C
	.align	2, 0
	.globl	sub_800FC60
	.type	 sub_800FC60,function
	.thumb_func
sub_800FC60:
	push	{lr}
	mov	r2, #0x0
	ldr	r0, .L1474
	add	r1, r0, #0
	add	r1, r1, #0x92
.L1470:
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L1469	@cond_branch
	mov	r0, #0x0
	b	.L1473
.L1475:
	.align	2, 0
.L1474:
	.word	gUnknown_03005000
.L1469:
	add	r1, r1, #0x14
	add	r2, r2, #0x1
	cmp	r2, #0x4
	ble	.L1470	@cond_branch
	mov	r0, #0x1
.L1473:
	pop	{r1}
	bx	r1
.Lfe111:
	.size	 sub_800FC60,.Lfe111-sub_800FC60
	.align	2, 0
	.globl	sub_800FC88
	.type	 sub_800FC88,function
	.thumb_func
sub_800FC88:
	push	{r4, lr}
	mov	r1, #0x0
	ldr	r2, .L1485
	ldrb	r0, [r2, #0xd]
	cmp	r1, r0
	bge	.L1478	@cond_branch
	add	r4, r0, #0
	add	r3, r2, #0
	add	r3, r3, #0x92
	add	r2, r2, #0x5c
.L1480:
	ldrb	r0, [r3]
	cmp	r0, #0x2
	bne	.L1482	@cond_branch
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L1479	@cond_branch
.L1482:
	mov	r0, #0x0
	b	.L1484
.L1486:
	.align	2, 0
.L1485:
	.word	gUnknown_03005000
.L1479:
	add	r3, r3, #0x14
	add	r1, r1, #0x1
	cmp	r1, r4
	blt	.L1480	@cond_branch
.L1478:
	mov	r0, #0x1
.L1484:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe112:
	.size	 sub_800FC88,.Lfe112-sub_800FC88
	.align	2, 0
	.type	 sub_800FCC4,function
	.thumb_func
sub_800FCC4:
	mov	r2, #0x0
	mov	r1, #0x0
	strh	r1, [r0]
	strh	r1, [r0, #0x2]
	str	r1, [r0, #0x4]
	str	r1, [r0, #0x8]
	strb	r2, [r0, #0x10]
	strb	r2, [r0, #0x11]
	strb	r2, [r0, #0x12]
	bx	lr
.Lfe113:
	.size	 sub_800FCC4,.Lfe113-sub_800FCC4
	.align	2, 0
	.globl	sub_800FCD8
	.type	 sub_800FCD8,function
	.thumb_func
sub_800FCD8:
	push	{r4, lr}
	mov	r2, #0x0
	mov	r1, #0x0
	ldr	r0, .L1495
	add	r3, r0, #0
	add	r3, r3, #0x92
	add	r4, r0, #0
	add	r4, r4, #0x5c
.L1492:
	ldrb	r0, [r3]
	cmp	r0, #0x2
	bne	.L1491	@cond_branch
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L1491	@cond_branch
	lsl	r0, r0, r1
	orr	r2, r2, r0
	lsl	r0, r2, #0x18
	lsr	r2, r0, #0x18
.L1491:
	add	r3, r3, #0x14
	add	r1, r1, #0x1
	cmp	r1, #0x4
	ble	.L1492	@cond_branch
	add	r0, r2, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L1496:
	.align	2, 0
.L1495:
	.word	gUnknown_03005000
.Lfe114:
	.size	 sub_800FCD8,.Lfe114-sub_800FCD8
	.align	2, 0
	.globl	sub_800FD14
	.type	 sub_800FD14,function
	.thumb_func
sub_800FD14:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	ldr	r5, .L1527
	strh	r1, [r5]
	mov	r0, #0xf0
	lsl	r0, r0, #0x7
	add	r4, r5, #0
	cmp	r1, r0
	beq	.L1503	@cond_branch
	cmp	r1, r0
	bgt	.L1523	@cond_branch
	mov	r0, #0xbe
	lsl	r0, r0, #0x7
	cmp	r1, r0
	beq	.L1510	@cond_branch
	cmp	r1, r0
	bgt	.L1524	@cond_branch
	mov	r0, #0xbc
	lsl	r0, r0, #0x6
	cmp	r1, r0
	beq	.L1512	@cond_branch
	mov	r0, #0x88
	lsl	r0, r0, #0x7
	cmp	r1, r0
	beq	.L1511	@cond_branch
	b	.L1498
.L1528:
	.align	2, 0
.L1527:
	.word	gSendCmd
.L1524:
	mov	r0, #0xcc
	lsl	r0, r0, #0x7
	cmp	r1, r0
	beq	.L1510	@cond_branch
	mov	r0, #0xee
	lsl	r0, r0, #0x7
	cmp	r1, r0
	beq	.L1503	@cond_branch
	b	.L1498
.L1523:
	mov	r0, #0xbe
	lsl	r0, r0, #0x8
	cmp	r1, r0
	beq	.L1518	@cond_branch
	cmp	r1, r0
	bgt	.L1498	@cond_branch
	mov	r0, #0x88
	lsl	r0, r0, #0x8
	cmp	r1, r0
	beq	.L1499	@cond_branch
	mov	r0, #0xa1
	lsl	r0, r0, #0x8
	cmp	r1, r0
	beq	.L1500	@cond_branch
	b	.L1498
.L1499:
	ldr	r0, .L1529
	add	r1, r0, #0
	add	r1, r1, #0x6e
	ldrh	r1, [r1]
	strh	r1, [r5, #0x2]
	add	r0, r0, #0x7d
	ldrb	r0, [r0]
	add	r0, r0, #0x80
	strh	r0, [r5, #0x4]
	b	.L1498
.L1530:
	.align	2, 0
.L1529:
	.word	gUnknown_03005000
.L1500:
	bl	sub_800FC60
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1498	@cond_branch
	ldr	r0, .L1531
	add	r0, r0, #0x5a
	ldrb	r0, [r0]
	b	.L1526
.L1532:
	.align	2, 0
.L1531:
	.word	gUnknown_03005000
.L1503:
	ldr	r3, .L1533
	ldr	r1, .L1533+0x4
	add	r0, r3, r1
	ldr	r2, .L1533+0x8
	add	r1, r3, r2
	ldrb	r2, [r0]
	ldrb	r0, [r1]
	eor	r0, r0, r2
	ldr	r1, .L1533+0xc
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r0, r0, #0x1
	strb	r0, [r3, #0xd]
	ldrb	r0, [r3, #0xd]
	strh	r0, [r4, #0x2]
	add	r2, r4, #0x4
	mov	r4, #0x0
	ldr	r0, .L1533+0x10
	add	r3, r3, r0
.L1507:
	add	r1, r2, r4
	add	r0, r4, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L1507	@cond_branch
	b	.L1498
.L1534:
	.align	2, 0
.L1533:
	.word	gUnknown_03005000
	.word	0xce2
	.word	0xce3
	.word	gUnknown_082ED695
	.word	0xcde
.L1510:
	ldr	r0, .L1535
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r4, #0x2]
	b	.L1498
.L1536:
	.align	2, 0
.L1535:
	.word	gUnknown_03005000
.L1511:
	strh	r1, [r5]
	ldr	r0, .L1537
	ldrh	r0, [r0, #0x2c]
	b	.L1526
.L1538:
	.align	2, 0
.L1537:
	.word	gMain
.L1512:
	mov	r4, #0x0
	ldr	r3, .L1539
.L1516:
	add	r2, r4, #0x1
	lsl	r1, r2, #0x1
	add	r1, r1, r5
	lsl	r0, r4, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strh	r0, [r1]
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	cmp	r4, #0x5
	bls	.L1516	@cond_branch
	b	.L1498
.L1540:
	.align	2, 0
.L1539:
	.word	gUnknown_03005000+0xf2
.L1518:
	ldr	r0, .L1541
	ldrh	r0, [r0]
.L1526:
	strh	r0, [r5, #0x2]
.L1498:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1542:
	.align	2, 0
.L1541:
	.word	gHeldKeyCodeToSend
.Lfe115:
	.size	 sub_800FD14,.Lfe115-sub_800FD14
	.align	2, 0
	.globl	sub_800FE50
	.type	 sub_800FE50,function
	.thumb_func
sub_800FE50:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L1545
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L1544	@cond_branch
	bl	sub_8011A80
	cmp	r0, #0
	bne	.L1544	@cond_branch
	ldr	r0, .L1545+0x4
	add	r1, r4, #0
	mov	r2, #0xc
	bl	memcpy
	mov	r0, #0xbc
	lsl	r0, r0, #0x6
	bl	sub_800FD14
.L1544:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1546:
	.align	2, 0
.L1545:
	.word	gSendCmd
	.word	gUnknown_03005000+0xf2
.Lfe116:
	.size	 sub_800FE50,.Lfe116-sub_800FE50
	.align	2, 0
	.globl	sub_800FE84
	.type	 sub_800FE84,function
	.thumb_func
sub_800FE84:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r0, #0
	add	r6, r1, #0
	ldr	r5, .L1558
	ldr	r0, [r5]
	cmp	r0, #0
	bne	.L1557	@cond_branch
	ldr	r0, .L1558+0x4
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L1557	@cond_branch
	mov	r0, #0x7c
	add	r0, r0, r5
	mov	r9, r0
	ldrb	r1, [r0]
	mov	r8, r1
	cmp	r1, #0
	beq	.L1550	@cond_branch
	ldr	r1, .L1558+0x8
	add	r1, r1, #0x83
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L1557:
	mov	r0, #0x0
	b	.L1555
.L1559:
	.align	2, 0
.L1558:
	.word	gUnknown_03005000
	.word	gSendCmd
	.word	gUnknown_02022B44
.L1550:
	add	r0, r6, #0
	mov	r1, #0xc
	bl	__umodsi3
	neg	r4, r0
	orr	r4, r4, r0
	lsr	r4, r4, #0x1f
	bl	GetMultiplayerId
	add	r1, r5, #0
	add	r1, r1, #0x7d
	strb	r0, [r1]
	mov	r0, #0x1
	mov	r1, r9
	strb	r0, [r1]
	add	r0, r6, #0
	mov	r1, #0xc
	bl	__udivsi3
	add	r0, r0, r4
	add	r1, r5, #0
	add	r1, r1, #0x6e
	strh	r0, [r1]
	add	r0, r5, #0
	add	r0, r0, #0x6c
	mov	r1, r8
	strh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	cmp	r6, r0
	bls	.L1552	@cond_branch
	str	r7, [r5, #0x70]
	b	.L1553
.L1552:
	ldr	r4, .L1560
	cmp	r7, r4
	beq	.L1554	@cond_branch
	add	r0, r4, #0
	add	r1, r7, #0
	add	r2, r6, #0
	bl	memcpy
.L1554:
	str	r4, [r5, #0x70]
.L1553:
	mov	r0, #0x88
	lsl	r0, r0, #0x8
	bl	sub_800FD14
	ldr	r0, .L1560+0x4
	ldr	r1, .L1560+0x8
	str	r1, [r0]
	add	r0, r0, #0x5b
	mov	r1, #0x0
	strb	r1, [r0]
	mov	r0, #0x1
.L1555:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1561:
	.align	2, 0
.L1560:
	.word	gBlockSendBuffer
	.word	gUnknown_03005000
	.word	rfufunc_80F9F44
.Lfe117:
	.size	 sub_800FE84,.Lfe117-sub_800FE84
	.align	2, 0
	.type	 rfufunc_80F9F44,function
	.thumb_func
rfufunc_80F9F44:
	push	{r4, r5, lr}
	ldr	r0, .L1569
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L1563	@cond_branch
	mov	r5, #0x88
	lsl	r5, r5, #0x8
	add	r0, r5, #0
	bl	sub_800FD14
	ldr	r4, .L1569+0x4
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0x1
	bne	.L1564	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x5b
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bls	.L1563	@cond_branch
	b	.L1568
.L1570:
	.align	2, 0
.L1569:
	.word	gSendCmd
	.word	gUnknown_03005000
.L1564:
	bl	GetMultiplayerId
	ldr	r1, .L1571
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x14
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	cmp	r0, r5
	bne	.L1563	@cond_branch
.L1568:
	ldr	r0, .L1571+0x4
	str	r0, [r4]
.L1563:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1572:
	.align	2, 0
.L1571:
	.word	gRecvCmds
	.word	sub_800FFB0
.Lfe118:
	.size	 rfufunc_80F9F44,.Lfe118-rfufunc_80F9F44
	.align	2, 0
	.type	 sub_800FFB0,function
	.thumb_func
sub_800FFB0:
	push	{r4, r5, r6, lr}
	ldr	r0, .L1580
	mov	ip, r0
	ldr	r5, [r0, #0x70]
	ldr	r3, .L1580+0x4
	mov	r2, ip
	add	r2, r2, #0x6c
	ldrh	r1, [r2]
	mov	r4, #0x89
	lsl	r4, r4, #0x8
	add	r0, r4, #0
	orr	r0, r0, r1
	strh	r0, [r3]
	mov	r4, #0x0
	add	r6, r2, #0
	add	r3, r3, #0x2
.L1577:
	lsl	r2, r4, #0x1
	ldrh	r1, [r6]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, r5
	ldrb	r1, [r0, #0x1]
	lsl	r1, r1, #0x8
	ldrb	r0, [r0]
	orr	r0, r0, r1
	strh	r0, [r3]
	add	r3, r3, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x6
	ble	.L1577	@cond_branch
	mov	r0, ip
	add	r0, r0, #0x6c
	ldrh	r1, [r0]
	add	r1, r1, #0x1
	strh	r1, [r0]
	add	r0, r0, #0x2
	ldrh	r0, [r0]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	cmp	r0, r1
	bhi	.L1579	@cond_branch
	mov	r0, ip
	add	r0, r0, #0x7c
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L1580+0x8
	mov	r1, ip
	str	r0, [r1]
.L1579:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1581:
	.align	2, 0
.L1580:
	.word	gUnknown_03005000
	.word	gSendCmd
	.word	rfufunc_80FA020
.Lfe119:
	.size	 sub_800FFB0,.Lfe119-sub_800FFB0
	.align	2, 0
	.type	 rfufunc_80FA020,function
	.thumb_func
rfufunc_80FA020:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r5, .L1593
	ldr	r0, [r5, #0x70]
	mov	r8, r0
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r5, #0xc]
	cmp	r0, #0
	bne	.L1583	@cond_branch
	ldr	r3, .L1593+0x4
	add	r2, r5, #0
	add	r2, r2, #0x6e
	ldrh	r0, [r2]
	sub	r0, r0, #0x1
	ldr	r4, .L1593+0x8
	add	r1, r4, #0
	orr	r0, r0, r1
	strh	r0, [r3]
	mov	r4, #0x0
	mov	r9, r5
	ldr	r0, .L1593+0xc
	mov	ip, r0
	lsl	r5, r6, #0x4
	add	r7, r2, #0
	add	r3, r3, #0x2
.L1587:
	lsl	r2, r4, #0x1
	ldrh	r1, [r7]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, r8
	add	r1, r0, #0
	sub	r1, r1, #0xb
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	sub	r0, r0, #0xc
	ldrb	r0, [r0]
	orr	r0, r0, r1
	strh	r0, [r3]
	add	r3, r3, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x6
	ble	.L1587	@cond_branch
	mov	r1, ip
	add	r0, r5, r1
	ldrb	r1, [r0]
	mov	r3, r9
	add	r0, r3, #0
	add	r0, r0, #0x6e
	ldrh	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bne	.L1592	@cond_branch
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r1, r3, #0
	add	r1, r1, #0x88
	add	r1, r0, r1
	ldr	r2, .L1593+0x10
	add	r0, r0, r3
	add	r0, r0, #0x82
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, [r1]
	ldr	r0, [r0]
	cmp	r1, r0
	beq	.L1590	@cond_branch
	add	r0, r6, #0
	bl	sub_800F638
	ldr	r1, .L1593+0x14
	add	r1, r1, #0x64
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L1592
.L1594:
	.align	2, 0
.L1593:
	.word	gUnknown_03005000
	.word	gSendCmd
	.word	-0x7700
	.word	gRecvCmds
	.word	gUnknown_082ED628
	.word	gUnknown_02022B44
.L1590:
	mov	r0, #0x0
	mov	r4, r9
	str	r0, [r4]
	b	.L1592
.L1583:
	mov	r0, #0x0
	str	r0, [r5]
.L1592:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe120:
	.size	 rfufunc_80FA020,.Lfe120-rfufunc_80FA020
	.align	2, 0
	.globl	sub_8010100
	.type	 sub_8010100,function
	.thumb_func
sub_8010100:
	push	{lr}
	ldr	r1, .L1596
	add	r1, r1, #0x5a
	strb	r0, [r1]
	mov	r0, #0xa1
	lsl	r0, r0, #0x8
	bl	sub_800FD14
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.L1597:
	.align	2, 0
.L1596:
	.word	gUnknown_03005000
.Lfe121:
	.size	 sub_8010100,.Lfe121-sub_8010100
	.align	2, 0
	.globl	sub_801011C
	.type	 sub_801011C,function
	.thumb_func
sub_801011C:
	push	{lr}
	bl	rfu_clearAllSlot
	bl	sub_800C048
	ldr	r1, .L1599
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r2, .L1599+0x4
	add	r3, r2, #0
	add	r3, r3, #0xef
	mov	r1, #0x0
	mov	r0, #0x1
	strb	r0, [r3]
	str	r1, [r2]
	pop	{r0}
	bx	r0
.L1600:
	.align	2, 0
.L1599:
	.word	gReceivedRemoteLinkPlayers
	.word	gUnknown_03005000
.Lfe122:
	.size	 sub_801011C,.Lfe122-sub_801011C
	.align	2, 0
	.globl	sub_8010148
	.type	 sub_8010148,function
	.thumb_func
sub_8010148:
	push	{lr}
	ldr	r0, .L1602
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x2]
	ldrb	r0, [r0, #0x3]
	orr	r0, r0, r1
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
	bl	sub_801011C
	pop	{r0}
	bx	r0
.L1603:
	.align	2, 0
.L1602:
	.word	gUnknown_03007890
.Lfe123:
	.size	 sub_8010148,.Lfe123-sub_8010148
	.align	2, 0
	.globl	sub_8010168
	.type	 sub_8010168,function
	.thumb_func
sub_8010168:
	push	{r4, lr}
	ldr	r4, .L1607
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0
	bne	.L1605	@cond_branch
	bl	sub_800D630
	ldr	r0, .L1607+0x4
	add	r1, r4, r0
	mov	r0, #0x2
	strb	r0, [r1]
	b	.L1606
.L1608:
	.align	2, 0
.L1607:
	.word	gUnknown_03005000
	.word	0xce4
.L1605:
	ldr	r0, .L1609
	str	r0, [r4]
.L1606:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1610:
	.align	2, 0
.L1609:
	.word	sub_8010148
.Lfe124:
	.size	 sub_8010168,.Lfe124-sub_8010168
	.align	2, 0
	.globl	LinkRfu_FatalError
	.type	 LinkRfu_FatalError,function
	.thumb_func
LinkRfu_FatalError:
	push	{lr}
	bl	sub_800D630
	ldr	r2, .L1612
	ldr	r0, .L1612+0x4
	add	r1, r2, r0
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L1612+0x8
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x2]
	ldrb	r1, [r1, #0x3]
	orr	r0, r0, r1
	ldr	r1, .L1612+0xc
	add	r2, r2, r1
	strb	r0, [r2]
	pop	{r0}
	bx	r0
.L1613:
	.align	2, 0
.L1612:
	.word	gUnknown_03005000
	.word	0xce4
	.word	gUnknown_03007890
	.word	0xce3
.Lfe125:
	.size	 LinkRfu_FatalError,.Lfe125-LinkRfu_FatalError
	.align	2, 0
	.globl	sub_80101CC
	.type	 sub_80101CC,function
	.thumb_func
sub_80101CC:
	push	{r4, r5, lr}
	ldr	r0, .L1624
	ldrb	r5, [r0, #0xd]
	mov	r2, #0x0
	mov	r1, #0x0
	add	r3, r0, #0
	add	r4, r3, #0
	add	r4, r4, #0xe4
.L1618:
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1617	@cond_branch
	add	r2, r2, #0x1
.L1617:
	add	r1, r1, #0x1
	cmp	r1, #0x4
	ble	.L1618	@cond_branch
	cmp	r2, r5
	bne	.L1621	@cond_branch
	ldr	r2, .L1624+0x4
	ldr	r0, [r2]
	mov	r1, #0x21
	neg	r1, r1
	and	r0, r0, r1
	str	r0, [r2]
	ldrb	r0, [r3, #0xc]
	cmp	r0, #0
	bne	.L1622	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xee
	ldrb	r1, [r0]
	mov	r1, #0x3
	strb	r1, [r0]
	bl	sub_8010168
	b	.L1621
.L1625:
	.align	2, 0
.L1624:
	.word	gUnknown_03005000
	.word	gBattleTypeFlags
.L1622:
	ldr	r0, .L1626
	str	r0, [r3]
.L1621:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1627:
	.align	2, 0
.L1626:
	.word	sub_8010168
.Lfe126:
	.size	 sub_80101CC,.Lfe126-sub_80101CC
	.align	2, 0
	.globl	sub_801022C
	.type	 sub_801022C,function
	.thumb_func
sub_801022C:
	push	{r4, lr}
	ldr	r0, .L1630
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L1629	@cond_branch
	ldr	r4, .L1630+0x4
	ldr	r1, .L1630+0x8
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1629	@cond_branch
	mov	r0, #0xbe
	lsl	r0, r0, #0x7
	bl	sub_800FD14
	ldr	r0, .L1630+0xc
	str	r0, [r4]
.L1629:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1631:
	.align	2, 0
.L1630:
	.word	gSendCmd
	.word	gUnknown_03005000
	.word	0xce8
	.word	sub_80101CC
.Lfe127:
	.size	 sub_801022C,.Lfe127-sub_801022C
	.align	2, 0
	.globl	sub_8010264
	.type	 sub_8010264,function
	.thumb_func
sub_8010264:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r2, .L1634
	ldr	r0, [r2]
	cmp	r0, #0
	bne	.L1633	@cond_branch
	ldr	r1, .L1634+0x4
	add	r0, r2, r1
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r0, .L1634+0x8
	str	r0, [r2]
	add	r0, r3, #0
	bl	DestroyTask
.L1633:
	pop	{r0}
	bx	r0
.L1635:
	.align	2, 0
.L1634:
	.word	gUnknown_03005000
	.word	0xcd9
	.word	sub_801022C
.Lfe128:
	.size	 sub_8010264,.Lfe128-sub_8010264
	.align	2, 0
	.globl	task_add_05_task_del_08FA224_when_no_RfuFunc
	.type	 task_add_05_task_del_08FA224_when_no_RfuFunc,function
	.thumb_func
task_add_05_task_del_08FA224_when_no_RfuFunc:
	push	{r4, lr}
	ldr	r4, .L1638
	add	r0, r4, #0
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1637	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x5
	bl	CreateTask
.L1637:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1639:
	.align	2, 0
.L1638:
	.word	sub_8010264
.Lfe129:
	.size	 task_add_05_task_del_08FA224_when_no_RfuFunc,.Lfe129-task_add_05_task_del_08FA224_when_no_RfuFunc
	.align	2, 0
	.globl	sub_80102B8
	.type	 sub_80102B8,function
	.thumb_func
sub_80102B8:
	push	{r4, r5, lr}
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1641	@cond_branch
	ldr	r1, .L1655
	ldr	r2, .L1655+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L1641	@cond_branch
	add	r5, r1, #0
	add	r5, r5, #0xfe
	ldrh	r0, [r5]
	cmp	r0, #0x3c
	bls	.L1641	@cond_branch
	mov	r0, #0xcc
	lsl	r0, r0, #0x7
	bl	sub_800FD14
	strh	r4, [r5]
.L1641:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r1, #0x0
	cmp	r1, r2
	bcs	.L1644	@cond_branch
	ldr	r0, .L1655
	add	r3, r0, #0
	add	r3, r3, #0xe9
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L1644	@cond_branch
.L1645:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r2
	bcs	.L1644	@cond_branch
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1645	@cond_branch
.L1644:
	ldr	r4, .L1655
	cmp	r1, r2
	bne	.L1649	@cond_branch
	mov	r1, #0x0
	add	r3, r4, #0
	add	r3, r3, #0xe9
	mov	r2, #0x0
.L1653:
	add	r0, r1, r3
	strb	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x4
	bls	.L1653	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	ldrh	r1, [r0]
	add	r1, r1, #0x1
	mov	r2, #0x0
	strh	r1, [r0]
	str	r2, [r4]
.L1649:
	add	r1, r4, #0
	add	r1, r1, #0xfe
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1656:
	.align	2, 0
.L1655:
	.word	gUnknown_03005000
	.word	0x9e6
.Lfe130:
	.size	 sub_80102B8,.Lfe130-sub_80102B8
	.align	2, 0
	.globl	sub_8010358
	.type	 sub_8010358,function
	.thumb_func
sub_8010358:
	push	{r4, lr}
	ldr	r4, .L1659
	ldr	r1, .L1659+0x4
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1658	@cond_branch
	ldr	r0, .L1659+0x8
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L1658	@cond_branch
	mov	r0, #0xcc
	lsl	r0, r0, #0x7
	bl	sub_800FD14
	ldr	r0, .L1659+0xc
	str	r0, [r4]
.L1658:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1660:
	.align	2, 0
.L1659:
	.word	gUnknown_03005000
	.word	0x9e6
	.word	gSendCmd
	.word	sub_80102B8
.Lfe131:
	.size	 sub_8010358,.Lfe131-sub_8010358
	.align	2, 0
	.globl	sub_8010390
	.type	 sub_8010390,function
	.thumb_func
sub_8010390:
	push	{r4, lr}
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1662	@cond_branch
	ldr	r4, .L1674
	ldr	r1, .L1674+0x4
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1664	@cond_branch
	ldr	r0, .L1674+0x8
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L1664	@cond_branch
	mov	r0, #0xcc
	lsl	r0, r0, #0x7
	bl	sub_800FD14
	ldr	r0, .L1674+0xc
	b	.L1673
.L1675:
	.align	2, 0
.L1674:
	.word	gUnknown_03005000
	.word	0x9e6
	.word	gSendCmd
	.word	sub_80102B8
.L1662:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r1, #0x1
	cmp	r1, r2
	bcs	.L1666	@cond_branch
	ldr	r3, .L1676
	add	r0, r3, #0
	add	r0, r0, #0xea
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1666	@cond_branch
	add	r3, r3, #0xe9
.L1667:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r2
	bcs	.L1666	@cond_branch
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1667	@cond_branch
.L1666:
	cmp	r1, r2
	bne	.L1664	@cond_branch
	ldr	r4, .L1676
	ldr	r1, .L1676+0x4
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1664	@cond_branch
	ldr	r0, .L1676+0x8
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L1664	@cond_branch
	mov	r0, #0xcc
	lsl	r0, r0, #0x7
	bl	sub_800FD14
	ldr	r0, .L1676+0xc
.L1673:
	str	r0, [r4]
.L1664:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1677:
	.align	2, 0
.L1676:
	.word	gUnknown_03005000
	.word	0x9e6
	.word	gSendCmd
	.word	sub_8010358
.Lfe132:
	.size	 sub_8010390,.Lfe132-sub_8010390
	.align	2, 0
	.globl	sub_8010434
	.type	 sub_8010434,function
	.thumb_func
sub_8010434:
	push	{lr}
	ldr	r1, .L1680
	ldr	r2, [r1]
	cmp	r2, #0
	bne	.L1679	@cond_branch
	ldr	r0, .L1680+0x4
	str	r0, [r1]
	add	r0, r1, #0
	add	r0, r0, #0xfe
	strh	r2, [r0]
.L1679:
	pop	{r0}
	bx	r0
.L1681:
	.align	2, 0
.L1680:
	.word	gUnknown_03005000
	.word	sub_8010390
.Lfe133:
	.size	 sub_8010434,.Lfe133-sub_8010434
	.align	2, 0
	.globl	sub_8010454
	.type	 sub_8010454,function
	.thumb_func
sub_8010454:
	push	{r4, lr}
	add	r3, r0, #0
	ldr	r1, .L1690
	ldrh	r0, [r1]
	cmp	r0, r3
	beq	.L1684	@cond_branch
	ldr	r4, .L1690+0x4
	add	r2, r1, #0
.L1686:
	ldrh	r0, [r2]
	cmp	r0, r4
	bne	.L1685	@cond_branch
	mov	r0, #0x0
	b	.L1689
.L1691:
	.align	2, 0
.L1690:
	.word	gUnknown_082ED6E0
	.word	0xffff
.L1685:
	add	r1, r1, #0x2
	add	r2, r2, #0x2
	ldrh	r0, [r1]
	cmp	r0, r3
	bne	.L1686	@cond_branch
.L1684:
	mov	r0, #0x1
.L1689:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe134:
	.size	 sub_8010454,.Lfe134-sub_8010454
	.align	2, 0
	.globl	sub_801048C
	.type	 sub_801048C,function
	.thumb_func
sub_801048C:
	push	{lr}
	cmp	r0, #0
	beq	.L1693	@cond_branch
	mov	r1, #0x96
	lsl	r1, r1, #0x2
	mov	r0, #0x1
	bl	sub_800D550
	mov	r0, #0x0
	b	.L1694
.L1693:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	sub_800D550
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L1694:
	pop	{r1}
	bx	r1
.Lfe135:
	.size	 sub_801048C,.Lfe135-sub_801048C
	.align	2, 0
	.globl	sub_80104B0
	.type	 sub_80104B0,function
	.thumb_func
sub_80104B0:
	push	{lr}
	ldr	r0, .L1696
	ldr	r1, .L1696+0x4
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0]
	mov	r0, #0x0
	bl	sub_800C27C
	pop	{r0}
	bx	r0
.L1697:
	.align	2, 0
.L1696:
	.word	gUnknown_03005000
	.word	0xcd9
.Lfe136:
	.size	 sub_80104B0,.Lfe136-sub_80104B0
	.align	2, 0
	.globl	rfu_get_multiplayer_id
	.type	 rfu_get_multiplayer_id,function
	.thumb_func
rfu_get_multiplayer_id:
	push	{lr}
	ldr	r1, .L1701
	ldrb	r0, [r1, #0xc]
	cmp	r0, #0x1
	beq	.L1699	@cond_branch
	ldr	r2, .L1701+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	b	.L1700
.L1702:
	.align	2, 0
.L1701:
	.word	gUnknown_03005000
	.word	0xcce
.L1699:
	mov	r0, #0x0
.L1700:
	pop	{r1}
	bx	r1
.Lfe137:
	.size	 rfu_get_multiplayer_id,.Lfe137-rfu_get_multiplayer_id
	.align	2, 0
	.globl	sub_80104F4
	.type	 sub_80104F4,function
	.thumb_func
sub_80104F4:
	ldr	r0, .L1704
	ldrb	r0, [r0, #0xd]
	bx	lr
.L1705:
	.align	2, 0
.L1704:
	.word	gUnknown_03005000
.Lfe138:
	.size	 sub_80104F4,.Lfe138-sub_80104F4
	.align	2, 0
	.globl	sub_8010500
	.type	 sub_8010500,function
	.thumb_func
sub_8010500:
	push	{lr}
	ldr	r2, .L1710
	add	r0, r2, #0
	add	r0, r0, #0xf1
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L1707	@cond_branch
	mov	r0, #0x0
	b	.L1709
.L1711:
	.align	2, 0
.L1710:
	.word	gUnknown_03005000
.L1707:
	mov	r1, #0x0
	ldr	r0, [r2]
	cmp	r0, #0
	bne	.L1708	@cond_branch
	mov	r1, #0x1
.L1708:
	add	r0, r1, #0
.L1709:
	pop	{r1}
	bx	r1
.Lfe139:
	.size	 sub_8010500,.Lfe139-sub_8010500
	.align	2, 0
	.type	 sub_8010528,function
	.thumb_func
sub_8010528:
	push	{lr}
	ldr	r0, .L1714
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L1713	@cond_branch
	bl	_call_via_r0
.L1713:
	pop	{r0}
	bx	r0
.L1715:
	.align	2, 0
.L1714:
	.word	gUnknown_03005000
.Lfe140:
	.size	 sub_8010528,.Lfe140-sub_8010528
	.align	2, 0
	.globl	sub_8010540
	.type	 sub_8010540,function
	.thumb_func
sub_8010540:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r7, #0x0
	mov	r5, #0x0
	ldr	r6, .L1728
	ldr	r0, .L1728+0x4
	add	r0, r0, r6
	mov	r8, r0
.L1720:
	ldr	r1, .L1728+0x8
	add	r0, r6, r1
	add	r4, r5, r0
	ldrb	r0, [r4]
	sub	r0, r0, #0x5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L1719	@cond_branch
	ldr	r1, .L1728+0xc
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x34]
	cmp	r0, #0x46
	beq	.L1723	@cond_branch
	cmp	r0, #0x48
	bne	.L1722	@cond_branch
.L1723:
	ldr	r2, .L1728+0x10
	add	r0, r6, r2
	add	r1, r5, r0
	ldrb	r0, [r1]
	cmp	r0, #0x8
	bne	.L1719	@cond_branch
	mov	r0, #0x9
	strb	r0, [r4]
	mov	r0, #0xa
	strb	r0, [r1]
	lsl	r1, r5, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x8
	bl	rfu_clearSlot
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	lsl	r0, r0, r5
	lsr	r0, r0, #0x18
	mov	r1, #0x8
	add	r2, r4, #0
	mov	r3, #0x1
	bl	rfu_NI_setSendData
	mov	r7, #0x1
	b	.L1719
.L1729:
	.align	2, 0
.L1728:
	.word	gUnknown_03005000
	.word	0xc3e
	.word	0xcd1
	.word	gUnknown_03007880
	.word	0xcd5
.L1722:
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x34]
	cmp	r0, #0x47
	bne	.L1719	@cond_branch
	lsl	r1, r5, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x8
	bl	rfu_clearSlot
.L1719:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1720	@cond_branch
	add	r0, r7, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe141:
	.size	 sub_8010540,.Lfe141-sub_8010540
	.align	2, 0
	.globl	sub_80105EC
	.type	 sub_80105EC,function
	.thumb_func
sub_80105EC:
	push	{r4, r5, r6, lr}
	mov	r3, #0x0
	mov	r1, #0x0
	ldr	r5, .L1745
	mov	r6, #0x1
	mov	r4, #0x0
.L1734:
	add	r2, r1, r5
	ldrb	r0, [r2]
	cmp	r0, #0xb
	bne	.L1733	@cond_branch
	add	r0, r6, #0
	lsl	r0, r0, r1
	orr	r3, r3, r0
	lsl	r0, r3, #0x18
	lsr	r3, r0, #0x18
	strb	r4, [r2]
.L1733:
	add	r1, r1, #0x1
	cmp	r1, #0x3
	ble	.L1734	@cond_branch
	cmp	r3, #0
	beq	.L1737	@cond_branch
	add	r0, r3, #0
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
.L1737:
	mov	r1, #0x0
	ldr	r2, .L1745
.L1741:
	add	r0, r1, r2
	ldrb	r0, [r0]
	sub	r0, r0, #0xa
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L1740	@cond_branch
	mov	r0, #0x1
	b	.L1744
.L1746:
	.align	2, 0
.L1745:
	.word	gUnknown_03005000+0xcd5
.L1740:
	add	r1, r1, #0x1
	cmp	r1, #0x3
	ble	.L1741	@cond_branch
	mov	r0, #0x0
.L1744:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe142:
	.size	 sub_80105EC,.Lfe142-sub_80105EC
	.align	2, 0
	.globl	sub_801064C
	.type	 sub_801064C,function
	.thumb_func
sub_801064C:
	push	{lr}
	add	r2, r0, #0
	add	r0, r1, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r1, r2, #0
	bl	sub_8011CE4
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0xff
	beq	.L1749	@cond_branch
	ldr	r0, .L1751
	ldr	r2, .L1751+0x4
	add	r0, r0, r2
	add	r0, r1, r0
	ldrb	r0, [r0]
	cmp	r0, #0x9
	beq	.L1749	@cond_branch
	mov	r0, #0x0
	b	.L1750
.L1752:
	.align	2, 0
.L1751:
	.word	gUnknown_03005000
	.word	0xcd1
.L1749:
	mov	r0, #0x1
.L1750:
	pop	{r1}
	bx	r1
.Lfe143:
	.size	 sub_801064C,.Lfe143-sub_801064C
	.align	2, 0
	.globl	sub_8010688
	.type	 sub_8010688,function
	.thumb_func
sub_8010688:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	add	r0, r2, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	sub_8011CE4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L1754
	ldr	r0, .L1754+0x4
	add	r5, r5, r0
	add	r5, r4, r5
	strb	r6, [r5]
	mov	r0, #0x4
	add	r1, r4, #0
	bl	rfu_clearSlot
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	lsl	r0, r0, r4
	lsr	r0, r0, #0x18
	mov	r1, #0x8
	add	r2, r5, #0
	mov	r3, #0x1
	bl	rfu_NI_setSendData
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1755:
	.align	2, 0
.L1754:
	.word	gUnknown_03005000
	.word	0xcd1
.Lfe144:
	.size	 sub_8010688,.Lfe144-sub_8010688
	.align	2, 0
	.globl	sub_80106D4
	.type	 sub_80106D4,function
	.thumb_func
sub_80106D4:
	push	{r4, r5, lr}
	ldr	r4, .L1757
	ldr	r0, .L1757+0x4
	add	r5, r4, r0
	mov	r0, #0x8
	strb	r0, [r5]
	ldr	r0, .L1757+0x8
	add	r4, r4, r0
	ldrb	r1, [r4]
	mov	r0, #0x4
	bl	rfu_clearSlot
	ldrb	r1, [r4]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	lsl	r0, r0, r1
	lsr	r0, r0, #0x18
	mov	r1, #0x8
	add	r2, r5, #0
	mov	r3, #0x1
	bl	rfu_NI_setSendData
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1758:
	.align	2, 0
.L1757:
	.word	gUnknown_03005000
	.word	0xc85
	.word	0xc3e
.Lfe145:
	.size	 sub_80106D4,.Lfe145-sub_80106D4
	.align	2, 0
	.globl	sub_8010714
	.type	 sub_8010714,function
	.thumb_func
sub_8010714:
	push	{lr}
	add	r2, r0, #0
	add	r0, r1, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r1, r2, #0
	bl	sub_8011CE4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L1760	@cond_branch
	mov	r0, #0x2
	b	.L1762
.L1760:
	ldr	r1, .L1763
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L1761	@cond_branch
	mov	r0, #0x0
	b	.L1762
.L1764:
	.align	2, 0
.L1763:
	.word	gUnknown_03007880
.L1761:
	mov	r0, #0x1
.L1762:
	pop	{r1}
	bx	r1
.Lfe146:
	.size	 sub_8010714,.Lfe146-sub_8010714
	.align	2, 0
	.globl	sub_8010750
	.type	 sub_8010750,function
	.thumb_func
sub_8010750:
	push	{r4, r5, lr}
	bl	sub_8010540
	mov	r4, #0x0
	ldr	r0, .L1773
	ldr	r1, .L1773+0x4
	add	r5, r0, r1
.L1769:
	ldr	r1, .L1773+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	ldrh	r0, [r0]
	sub	r0, r0, #0x26
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bhi	.L1768	@cond_branch
	add	r1, r4, r5
	ldrb	r0, [r1]
	cmp	r0, #0xa
	bne	.L1771	@cond_branch
	mov	r0, #0xb
	strb	r0, [r1]
.L1771:
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x4
	bl	rfu_clearSlot
.L1768:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1769	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1774:
	.align	2, 0
.L1773:
	.word	gUnknown_03005000
	.word	0xcd5
	.word	gUnknown_03007880
.Lfe147:
	.size	 sub_8010750,.Lfe147-sub_8010750
	.align	2, 0
	.globl	sub_80107A0
	.type	 sub_80107A0,function
	.thumb_func
sub_80107A0:
	push	{r4, r5, lr}
	mov	r4, #0x0
	ldr	r1, .L1783
	ldr	r2, .L1783+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0x8
	bne	.L1776	@cond_branch
	ldr	r2, .L1783+0x8
	ldr	r0, .L1783+0xc
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	ldrh	r0, [r0]
	cmp	r0, #0x26
	beq	.L1778	@cond_branch
	ldrb	r0, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	ldrh	r0, [r0]
	cmp	r0, #0x27
	bne	.L1776	@cond_branch
.L1778:
	ldrb	r1, [r1]
	mov	r0, #0x4
	bl	rfu_clearSlot
.L1776:
	ldr	r2, .L1783+0x8
	ldr	r5, .L1783
	ldr	r0, .L1783+0xc
	add	r1, r5, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x34]
	cmp	r0, #0x46
	beq	.L1780	@cond_branch
	ldrb	r0, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x34]
	cmp	r0, #0x48
	bne	.L1779	@cond_branch
.L1780:
	ldrb	r1, [r1]
	mov	r0, #0x8
	bl	rfu_clearSlot
	ldr	r2, .L1783+0x10
	add	r4, r5, r2
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	sub_8011A64
	ldrb	r4, [r4]
	b	.L1781
.L1784:
	.align	2, 0
.L1783:
	.word	gUnknown_03005000
	.word	0xc85
	.word	gUnknown_03007880
	.word	0xc3e
	.word	0xc86
.L1779:
	ldrb	r0, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x34]
	cmp	r0, #0x47
	bne	.L1781	@cond_branch
	ldrb	r1, [r1]
	mov	r0, #0x8
	bl	rfu_clearSlot
	mov	r4, #0x6
.L1781:
	add	r0, r4, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe148:
	.size	 sub_80107A0,.Lfe148-sub_80107A0
	.align	2, 0
	.globl	sub_801084C
	.type	 sub_801084C,function
	.thumb_func
sub_801084C:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r5, .L1825
	add	r0, r5, #0
	add	r0, r0, #0xf1
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L1786	@cond_branch
	ldr	r0, .L1825+0x4
	add	r1, r5, r0
	mov	r0, #0x0
	strb	r0, [r1]
	add	r0, r6, #0
	bl	DestroyTask
.L1786:
	ldr	r2, .L1825+0x8
	lsl	r1, r6, #0x2
	add	r0, r1, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	mov	r2, #0x8
	ldrsh	r0, [r4, r2]
	add	r7, r1, #0
	cmp	r0, #0x3
	beq	.L1799	@cond_branch
	cmp	r0, #0x3
	bgt	.L1821	@cond_branch
	cmp	r0, #0x1
	beq	.L1790	@cond_branch
	cmp	r0, #0x1
	bgt	.L1797	@cond_branch
	cmp	r0, #0
	beq	.L1788	@cond_branch
	b	.L1787
.L1826:
	.align	2, 0
.L1825:
	.word	gUnknown_03005000
	.word	0xce8
	.word	gTasks
.L1821:
	cmp	r0, #0x5
	beq	.L1805	@cond_branch
	cmp	r0, #0x5
	blt	.L1803	@cond_branch
	cmp	r0, #0x6
	beq	.L1811	@cond_branch
	cmp	r0, #0x65
	beq	.L1795	@cond_branch
	b	.L1787
.L1788:
	bl	sub_800FC60
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB13689
	b	.L1787	@long jump
.LCB13689:
	bl	ResetBlockReceivedFlags
	bl	sub_800B348
	b	.L1822
.L1790:
	ldrb	r0, [r5, #0xc]
	cmp	r0, #0x1
	bne	.L1823	@cond_branch
	ldr	r0, .L1827
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1792	@cond_branch
	mov	r0, #0xf0
	lsl	r0, r0, #0x7
	bl	sub_800FD14
	b	.L1793
.L1828:
	.align	2, 0
.L1827:
	.word	gReceivedRemoteLinkPlayers
.L1792:
	mov	r0, #0xee
	lsl	r0, r0, #0x7
	bl	sub_800FD14
.L1793:
	ldr	r0, .L1829
	add	r1, r7, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x65
	strh	r0, [r1, #0x8]
	b	.L1787
.L1830:
	.align	2, 0
.L1829:
	.word	gTasks
.L1795:
	ldr	r0, .L1831
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L1787	@cond_branch
.L1823:
	mov	r0, #0x2
	strh	r0, [r4, #0x8]
	b	.L1787
.L1832:
	.align	2, 0
.L1831:
	.word	gSendCmd
.L1797:
	ldrb	r0, [r5, #0xd]
	b	.L1824
.L1799:
	ldrb	r0, [r5, #0xc]
	cmp	r0, #0x1
	bne	.L1822	@cond_branch
	bl	sub_800FC60
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1787	@cond_branch
	add	r1, r5, #0
	add	r1, r1, #0x5a
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r0, #0xa1
	lsl	r0, r0, #0x8
	bl	sub_800FD14
	b	.L1822
.L1803:
	bl	sub_800FC88
	lsl	r0, r0, #0x18
.L1824:
	cmp	r0, #0
	beq	.L1787	@cond_branch
.L1822:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L1787
.L1805:
	mov	r4, #0x0
	ldrb	r0, [r5, #0xd]
	cmp	r4, r0
	bge	.L1807	@cond_branch
.L1809:
	add	r0, r4, #0
	bl	sub_800B3A4
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	sub_800F728
	add	r4, r4, #0x1
	ldrb	r2, [r5, #0xd]
	cmp	r4, r2
	blt	.L1809	@cond_branch
.L1807:
	ldr	r0, .L1833
	add	r1, r7, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L1787
.L1834:
	.align	2, 0
.L1833:
	.word	gTasks
.L1811:
	add	r0, r6, #0
	bl	DestroyTask
	ldr	r1, .L1835
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L1835+0x4
	add	r1, r5, r0
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r1, #0x96
	lsl	r1, r1, #0x2
	mov	r0, #0x1
	bl	sub_800D550
	ldr	r2, .L1835+0x8
	add	r1, r5, r2
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L1787	@cond_branch
	mov	r4, #0x0
	add	r2, r1, #0
	mov	r3, #0x1
	ldr	r0, .L1835+0xc
	add	r5, r5, r0
.L1816:
	ldrb	r0, [r2]
	asr	r0, r0, r4
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1815	@cond_branch
	add	r0, r3, #0
	lsl	r0, r0, r4
	strb	r0, [r5]
	ldrb	r1, [r2]
	eor	r0, r0, r1
	strb	r0, [r2]
.L1815:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1816	@cond_branch
.L1787:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1836:
	.align	2, 0
.L1835:
	.word	gReceivedRemoteLinkPlayers
	.word	0xce8
	.word	0xce6
	.word	0xce5
.Lfe149:
	.size	 sub_801084C,.Lfe149-sub_801084C
	.align	2, 0
	.globl	sub_80109E8
	.type	 sub_80109E8,function
	.thumb_func
sub_80109E8:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	mov	r1, #0x0
	mov	r5, #0x1
	ldr	r4, .L1844
	mov	r3, #0x0
.L1841:
	add	r0, r2, #0
	asr	r0, r0, r1
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1840	@cond_branch
	add	r0, r1, r4
	strb	r3, [r0]
.L1840:
	add	r1, r1, #0x1
	cmp	r1, #0x3
	ble	.L1841	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1845:
	.align	2, 0
.L1844:
	.word	gUnknown_03005000+0xcde
.Lfe150:
	.size	 sub_80109E8,.Lfe150-sub_80109E8
	.align	2, 0
	.globl	sub_8010A14
	.type	 sub_8010A14,function
	.thumb_func
sub_8010A14:
	push	{r4, r5, r6, r7, lr}
	add	r2, r0, #0
	ldr	r1, .L1857
	ldrb	r0, [r2, #0xf]
	strb	r0, [r1, #0xd]
	mov	r4, #0x0
	ldr	r0, .L1857+0x4
	add	r5, r1, r0
	add	r3, r2, #0
	add	r3, r3, #0x10
.L1850:
	add	r0, r4, r5
	add	r1, r3, r4
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1850	@cond_branch
	add	r6, r2, #0
	ldr	r5, .L1857+0x8
	mov	r4, #0x4
.L1855:
	add	r0, r5, #0
	add	r1, r6, #0
	add	r1, r1, #0x14
	ldmia	r1!, {r2, r3, r7}
	stmia	r0!, {r2, r3, r7}
	ldmia	r1!, {r2, r3, r7}
	stmia	r0!, {r2, r3, r7}
	ldr	r1, [r1]
	str	r1, [r0]
	add	r0, r5, #0
	bl	sub_800B524
	add	r6, r6, #0x1c
	add	r5, r5, #0x1c
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L1855	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1858:
	.align	2, 0
.L1857:
	.word	gUnknown_03005000
	.word	0xcde
	.word	gLinkPlayers
.Lfe151:
	.size	 sub_8010A14,.Lfe151-sub_8010A14
	.align	2, 0
	.globl	sub_8010A70
	.type	 sub_8010A70,function
	.thumb_func
sub_8010A70:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	ldr	r0, .L1861
	add	r1, r4, #0
	bl	strcmp
	add	r5, r0, #0
	cmp	r5, #0
	bne	.L1860	@cond_branch
	add	r0, r4, #0
	bl	sub_8010A14
	mov	r0, sp
	strh	r5, [r0]
	ldr	r2, .L1861+0x4
	add	r1, r4, #0
	bl	CpuSet
	mov	r0, #0x0
	bl	ResetBlockReceivedFlag
.L1860:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1862:
	.align	2, 0
.L1861:
	.word	gUnknown_082ED7EC
	.word	0x100007e
.Lfe152:
	.size	 sub_8010A70,.Lfe152-sub_8010A70
	.align	2, 0
	.globl	sub_8010AAC
	.type	 sub_8010AAC,function
	.thumb_func
sub_8010AAC:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r3, .L1899
	ldr	r2, .L1899+0x4
	ldr	r1, .L1899+0x8
	add	r0, r3, r1
	ldrb	r1, [r0]
	add	r1, r1, r2
	ldr	r2, .L1899+0xc
	add	r0, r3, r2
	ldrb	r1, [r1]
	add	r0, r0, r1
	ldrb	r4, [r0]
	add	r0, r3, #0
	add	r0, r0, #0xf1
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L1864	@cond_branch
	ldr	r5, .L1899+0x10
	add	r1, r3, r5
	mov	r0, #0x0
	strb	r0, [r1]
	add	r0, r6, #0
	bl	DestroyTask
.L1864:
	ldr	r0, .L1899+0x14
	lsl	r2, r6, #0x2
	add	r1, r2, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r3, #0x8
	ldrsh	r1, [r1, r3]
	add	r3, r0, #0
	add	r7, r2, #0
	cmp	r1, #0x5
	bls	.LCB14123
	b	.L1865	@long jump
.LCB14123:
	lsl	r0, r1, #0x2
	ldr	r1, .L1899+0x18
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1900:
	.align	2, 0
.L1899:
	.word	gUnknown_03005000
	.word	gUnknown_082ED68C
	.word	0xce9
	.word	0xcde
	.word	0xce8
	.word	gTasks
	.word	.L1894
	.align	2, 0
	.align	2, 0
.L1894:
	.word	.L1866
	.word	.L1868
	.word	.L1870
	.word	.L1872
	.word	.L1878
	.word	.L1885
.L1866:
	ldr	r0, .L1901
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.LCB14153
	b	.L1865	@long jump
.LCB14153:
	add	r0, r4, #0
	bl	ResetBlockReceivedFlag
	mov	r0, #0xf0
	lsl	r0, r0, #0x7
	bl	sub_800FD14
	b	.L1897
.L1902:
	.align	2, 0
.L1901:
	.word	gSendCmd
.L1868:
	ldr	r0, .L1903
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.LCB14176
	b	.L1865	@long jump
.LCB14176:
	add	r1, r7, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r3
	b	.L1898
.L1904:
	.align	2, 0
.L1903:
	.word	gSendCmd
.L1870:
	bl	GetBlockReceivedStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	asr	r0, r0, r4
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB14199
	b	.L1865	@long jump
.LCB14199:
	add	r0, r4, #0
	bl	ResetBlockReceivedFlag
	lsl	r2, r4, #0x8
	ldr	r0, .L1905
	add	r2, r2, r0
	ldr	r1, .L1905+0x4
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r1, r0, #0
	add	r2, r2, #0x10
	ldmia	r2!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldmia	r2!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldr	r2, [r2]
	str	r2, [r1]
	bl	sub_800B524
	b	.L1897
.L1906:
	.align	2, 0
.L1905:
	.word	gBlockRecvBuffer
	.word	gLinkPlayers
.L1872:
	ldr	r5, .L1907
	add	r1, r5, #0
	ldr	r0, .L1907+0x4
	ldmia	r0!, {r2, r3, r4}
	stmia	r1!, {r2, r3, r4}
	ldrh	r2, [r0]
	strh	r2, [r1]
	ldrb	r0, [r0, #0x2]
	strb	r0, [r1, #0x2]
	ldr	r1, .L1907+0x8
	ldrb	r0, [r1, #0xd]
	strb	r0, [r5, #0xf]
	mov	r2, #0x0
	add	r4, r5, #0
	add	r4, r4, #0x10
	ldr	r0, .L1907+0xc
	add	r3, r1, r0
.L1876:
	add	r0, r4, r2
	add	r1, r2, r3
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L1876	@cond_branch
	ldr	r1, .L1907+0x10
	add	r0, r5, #0
	add	r0, r0, #0x14
	mov	r2, #0x8c
	bl	memcpy
	ldr	r0, .L1907+0x14
	add	r1, r7, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
.L1878:
	ldr	r5, .L1907
	ldr	r1, .L1907+0x8
	ldrb	r0, [r1, #0xd]
	strb	r0, [r5, #0xf]
	mov	r2, #0x0
	ldr	r3, .L1907+0x10
	mov	ip, r3
	add	r4, r5, #0
	add	r4, r4, #0x10
	ldr	r0, .L1907+0xc
	add	r3, r1, r0
.L1882:
	add	r0, r4, r2
	add	r1, r2, r3
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L1882	@cond_branch
	add	r0, r5, #0
	add	r0, r0, #0x14
	mov	r1, ip
	mov	r2, #0x8c
	bl	memcpy
	ldr	r1, .L1907
	mov	r0, #0x0
	mov	r2, #0xa0
	bl	SendBlock
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1865	@cond_branch
.L1897:
	ldr	r0, .L1907+0x14
	add	r1, r7, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
.L1898:
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L1865
.L1908:
	.align	2, 0
.L1907:
	.word	gBlockSendBuffer
	.word	gUnknown_082ED7EC
	.word	gUnknown_03005000
	.word	0xcde
	.word	gLinkPlayers
	.word	gTasks
.L1896:
	add	r0, r3, #0
	lsl	r0, r0, r2
	ldr	r2, .L1909
	add	r1, r5, r2
	strb	r0, [r1]
	ldrb	r1, [r4]
	eor	r0, r0, r1
	strb	r0, [r4]
	ldr	r4, .L1909+0x4
	add	r0, r5, r4
	strb	r3, [r0]
	b	.L1887
.L1910:
	.align	2, 0
.L1909:
	.word	0xce5
	.word	0xce8
.L1885:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1865	@cond_branch
	bl	GetBlockReceivedStatus
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1865	@cond_branch
	mov	r0, sp
	mov	r4, #0x0
	strh	r4, [r0]
	ldr	r1, .L1911
	ldr	r2, .L1911+0x4
	bl	CpuSet
	mov	r0, #0x0
	bl	ResetBlockReceivedFlag
	ldr	r1, .L1911+0x8
	ldr	r5, .L1911+0xc
	add	r0, r1, r5
	strb	r4, [r0]
	ldr	r0, .L1911+0x10
	add	r3, r1, r0
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L1887	@cond_branch
	mov	r2, #0x0
	add	r5, r1, #0
	add	r4, r3, #0
	ldrb	r1, [r4]
	mov	r3, #0x1
.L1891:
	add	r0, r1, #0
	asr	r0, r0, r2
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L1896	@cond_branch
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L1891	@cond_branch
.L1887:
	add	r0, r6, #0
	bl	DestroyTask
.L1865:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1912:
	.align	2, 0
.L1911:
	.word	gBlockRecvBuffer
	.word	0x100007e
	.word	gUnknown_03005000
	.word	0xce8
	.word	0xce6
.Lfe153:
	.size	 sub_8010AAC,.Lfe153-sub_8010AAC
	.align	2, 0
	.globl	sub_8010D0C
	.type	 sub_8010D0C,function
	.thumb_func
sub_8010D0C:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r6, .L1926
	add	r0, r6, #0
	add	r0, r0, #0xf1
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L1914	@cond_branch
	add	r0, r5, #0
	bl	DestroyTask
.L1914:
	ldr	r1, .L1926+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L1918	@cond_branch
	cmp	r0, #0x1
	bgt	.L1924	@cond_branch
	cmp	r0, #0
	beq	.L1916	@cond_branch
	b	.L1915
.L1927:
	.align	2, 0
.L1926:
	.word	gUnknown_03005000
	.word	gTasks
.L1924:
	cmp	r0, #0x2
	beq	.L1920	@cond_branch
	b	.L1915
.L1916:
	ldrb	r0, [r6, #0xd]
	cmp	r0, #0
	beq	.L1915	@cond_branch
	bl	sub_800B348
	ldr	r1, .L1928
	mov	r0, #0x0
	mov	r2, #0x3c
	bl	SendBlock
	b	.L1925
.L1929:
	.align	2, 0
.L1928:
	.word	gBlockSendBuffer
.L1918:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1915	@cond_branch
.L1925:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L1915
.L1920:
	bl	GetBlockReceivedStatus
	mov	r4, #0x1
	add	r1, r4, #0
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L1915	@cond_branch
	ldr	r0, .L1930
	bl	sub_8010A14
	mov	r0, #0x0
	bl	ResetBlockReceivedFlag
	ldr	r0, .L1930+0x4
	strb	r4, [r0]
	add	r0, r5, #0
	bl	DestroyTask
.L1915:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1931:
	.align	2, 0
.L1930:
	.word	gBlockRecvBuffer
	.word	gReceivedRemoteLinkPlayers
.Lfe154:
	.size	 sub_8010D0C,.Lfe154-sub_8010D0C
	.align	2, 0
	.globl	sub_8010DB4
	.type	 sub_8010DB4,function
	.thumb_func
sub_8010DB4:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L1941
	add	r1, r0, #0
	add	r1, r1, #0xee
	ldrb	r1, [r1]
	add	r3, r0, #0
	cmp	r1, #0x1
	bne	.L1933	@cond_branch
	ldr	r2, .L1941+0x4
	ldrb	r0, [r2, #0x2]
	cmp	r0, #0
	bne	.L1933	@cond_branch
	ldr	r0, .L1941+0x8
	ldr	r1, [r0, #0x4]
	ldr	r0, .L1941+0xc
	cmp	r1, r0
	beq	.L1935	@cond_branch
	ldr	r0, [r2, #0x3c]
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	beq	.L1934	@cond_branch
.L1935:
	ldr	r1, .L1941+0x10
	mov	r0, #0x2
	strb	r0, [r1]
.L1934:
	ldr	r4, .L1941+0x14
	add	r0, r4, #0
	bl	SetMainCallback2
	ldr	r0, .L1941+0x8
	str	r4, [r0, #0x8]
	ldr	r5, .L1941
	ldrh	r0, [r5, #0xa]
	lsl	r4, r0, #0x10
	ldrh	r0, [r5, #0x10]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldrh	r0, [r5, #0x12]
	orr	r4, r4, r0
	ldr	r1, .L1941+0x18
	add	r0, r5, r1
	ldrb	r0, [r0]
	add	r7, r0, #0
	ldr	r1, .L1941+0x1c
	add	r0, r5, r1
	ldrb	r0, [r0]
	add	r6, r0, #0
	bl	sub_8011A74
	mov	r3, #0x0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L1936	@cond_branch
	mov	r3, #0x1
.L1936:
	add	r0, r4, #0
	add	r1, r7, #0
	add	r2, r6, #0
	bl	sub_800AF18
	add	r0, r5, #0
	add	r0, r0, #0xee
	ldrb	r1, [r0]
	mov	r1, #0x2
	strb	r1, [r0]
	bl	CloseLink
	b	.L1937
.L1942:
	.align	2, 0
.L1941:
	.word	gUnknown_03005000
	.word	gUnknown_03004140
	.word	gMain
	.word	c2_mystery_gift_e_reader_run
	.word	gWirelessCommType
	.word	CB2_LinkError
	.word	0x9e6
	.word	0xc1a
.L1933:
	ldr	r1, .L1943
	add	r0, r3, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L1939	@cond_branch
	ldr	r1, .L1943+0x4
	add	r0, r3, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L1937	@cond_branch
.L1939:
	ldr	r0, .L1943+0x8
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L1940	@cond_branch
	bl	sub_800D630
.L1940:
	mov	r4, #0xe0
	lsl	r4, r4, #0x7
	mov	r0, #0x1
	add	r1, r4, #0
	bl	sub_8011A64
	add	r0, r4, #0
	bl	sub_8011170
.L1937:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1944:
	.align	2, 0
.L1943:
	.word	0xc1b
	.word	0x9e7
	.word	gUnknown_03004140
.Lfe155:
	.size	 sub_8010DB4,.Lfe155-sub_8010DB4
	.align	2, 0
	.globl	rfu_REQ_recvData_then_sendData
	.type	 rfu_REQ_recvData_then_sendData,function
	.thumb_func
rfu_REQ_recvData_then_sendData:
	push	{lr}
	ldr	r0, .L1947
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0x1
	bne	.L1946	@cond_branch
	bl	rfu_REQ_recvData
	bl	rfu_waitREQComplete
	mov	r0, #0x0
	bl	rfu_REQ_sendData_wrapper
.L1946:
	pop	{r0}
	bx	r0
.L1948:
	.align	2, 0
.L1947:
	.word	gUnknown_03004140
.Lfe156:
	.size	 rfu_REQ_recvData_then_sendData,.Lfe156-rfu_REQ_recvData_then_sendData
	.align	2, 0
	.globl	sub_8010EC0
	.type	 sub_8010EC0,function
	.thumb_func
sub_8010EC0:
	push	{r4, r5, lr}
	mov	r5, #0x0
	ldr	r4, .L1958
	ldr	r1, .L1958+0x4
	add	r0, r4, r1
	strb	r5, [r0]
	bl	Random2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	sub_800C54C
	add	r0, r4, #0
	add	r0, r0, #0xef
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1950	@cond_branch
	ldrb	r0, [r4, #0xc]
	cmp	r0, #0x1
	beq	.L1952	@cond_branch
	cmp	r0, #0x1
	bgt	.L1957	@cond_branch
	cmp	r0, #0
	beq	.L1953	@cond_branch
	b	.L1950
.L1959:
	.align	2, 0
.L1958:
	.word	gUnknown_03005000
	.word	0xccd
.L1957:
	cmp	r0, #0x2
	beq	.L1954	@cond_branch
	b	.L1950
.L1952:
	bl	sub_800F0F8
	b	.L1950
.L1953:
	bl	sub_800F4F0
	add	r5, r0, #0
	b	.L1950
.L1954:
	bl	rfu_REQ_recvData_then_sendData
.L1950:
	add	r0, r5, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe157:
	.size	 sub_8010EC0,.Lfe157-sub_8010EC0
	.align	2, 0
	.globl	sub_8010F1C
	.type	 sub_8010F1C,function
	.thumb_func
sub_8010F1C:
	push	{r4, lr}
	mov	r4, #0x0
	ldr	r1, .L1963
	add	r0, r1, #0
	add	r0, r0, #0xef
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1961	@cond_branch
	ldrb	r0, [r1, #0xc]
	cmp	r0, #0x1
	bne	.L1962	@cond_branch
	bl	sub_800F1E0
	add	r4, r0, #0
.L1962:
	bl	sub_8010DB4
.L1961:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L1964:
	.align	2, 0
.L1963:
	.word	gUnknown_03005000
.Lfe158:
	.size	 sub_8010F1C,.Lfe158-sub_8010F1C
	.align	2, 0
	.globl	sub_8010F48
	.type	 sub_8010F48,function
	.thumb_func
sub_8010F48:
	push	{lr}
	ldr	r0, .L1966
	ldr	r1, .L1966+0x4
	ldr	r1, [r1]
	bl	StringCopy
	pop	{r0}
	bx	r0
.L1967:
	.align	2, 0
.L1966:
	.word	gUnknown_02022B22
	.word	gSaveBlock2Ptr
.Lfe159:
	.size	 sub_8010F48,.Lfe159-sub_8010F48
	.align	2, 0
	.globl	sub_8010F60
	.type	 sub_8010F60,function
	.thumb_func
sub_8010F60:
	push	{r4, lr}
	ldr	r4, .L1969
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0xd
	bl	memset
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_800DD94
	pop	{r4}
	pop	{r0}
	bx	r0
.L1970:
	.align	2, 0
.L1969:
	.word	gUnknown_02022B14
.Lfe160:
	.size	 sub_8010F60,.Lfe160-sub_8010F60
	.align	2, 0
	.globl	sub_8010F84
	.type	 sub_8010F84,function
	.thumb_func
sub_8010F84:
	push	{r4, lr}
	add	r4, r0, #0
	add	r3, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L1972
	add	r1, r4, #0
	bl	sub_800DD94
	pop	{r4}
	pop	{r0}
	bx	r0
.L1973:
	.align	2, 0
.L1972:
	.word	gUnknown_02022B14
.Lfe161:
	.size	 sub_8010F84,.Lfe161-sub_8010F84
	.align	2, 0
	.globl	sub_8010FA0
	.type	 sub_8010FA0,function
	.thumb_func
sub_8010FA0:
	push	{r4, r5, lr}
	ldr	r5, .L1975
	mov	r4, #0x1
	and	r0, r0, r4
	lsl	r0, r0, #0x4
	ldrb	r3, [r5]
	mov	r2, #0x11
	neg	r2, r2
	and	r2, r2, r3
	orr	r2, r2, r0
	and	r1, r1, r4
	lsl	r1, r1, #0x5
	mov	r0, #0x21
	neg	r0, r0
	and	r2, r2, r0
	orr	r2, r2, r1
	strb	r2, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1976:
	.align	2, 0
.L1975:
	.word	gUnknown_02022B14
.Lfe162:
	.size	 sub_8010FA0,.Lfe162-sub_8010FA0
	.align	2, 0
	.globl	sub_8010FCC
	.type	 sub_8010FCC,function
	.thumb_func
sub_8010FCC:
	push	{r4, r5, lr}
	ldr	r5, .L1978
	lsl	r0, r0, #0x2
	ldrb	r4, [r5, #0x9]
	mov	r3, #0x3
	and	r3, r3, r4
	orr	r3, r3, r0
	strb	r3, [r5, #0x9]
	ldr	r3, .L1978+0x4
	add	r0, r3, #0
	and	r1, r1, r0
	ldrh	r3, [r5, #0x8]
	ldr	r0, .L1978+0x8
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r5, #0x8]
	lsl	r2, r2, #0x1
	ldrb	r1, [r5, #0xb]
	mov	r0, #0x1
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0xb]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1979:
	.align	2, 0
.L1978:
	.word	gUnknown_02022B14
	.word	0x3ff
	.word	-0x400
.Lfe163:
	.size	 sub_8010FCC,.Lfe163-sub_8010FCC
	.align	2, 0
	.globl	sub_801100C
	.type	 sub_801100C,function
	.thumb_func
sub_801100C:
	push	{r4, lr}
	mov	r4, #0x80
	ldr	r3, .L1981
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r0, r1, r3
	ldrb	r2, [r0, #0x13]
	lsl	r2, r2, #0x3
	orr	r2, r2, r4
	add	r3, r3, #0x4
	add	r1, r1, r3
	ldr	r0, [r1]
	mov	r1, #0x7
	and	r0, r0, r1
	orr	r0, r0, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4}
	pop	{r1}
	bx	r1
.L1982:
	.align	2, 0
.L1981:
	.word	gLinkPlayers
.Lfe164:
	.size	 sub_801100C,.Lfe164-sub_801100C
	.align	2, 0
	.globl	sub_801103C
	.type	 sub_801103C,function
	.thumb_func
sub_801103C:
	push	{r4, r5, lr}
	ldr	r5, .L1989
	mov	r4, #0x1
	b	.L1984
.L1990:
	.align	2, 0
.L1989:
	.word	gUnknown_02022B14
.L1987:
	add	r0, r4, #0
	bl	sub_801100C
	add	r1, r5, r4
	strb	r0, [r1, #0x3]
	add	r4, r4, #0x1
.L1984:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	blt	.L1987	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe165:
	.size	 sub_801103C,.Lfe165-sub_801103C
	.align	2, 0
	.globl	sub_8011068
	.type	 sub_8011068,function
	.thumb_func
sub_8011068:
	push	{lr}
	lsl	r0, r0, #0x18
	ldr	r2, .L1992
	lsr	r0, r0, #0x11
	ldrb	r3, [r2, #0xa]
	mov	r1, #0x7f
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r2, #0xa]
	ldr	r3, .L1992+0x4
	mov	r0, #0x0
	mov	r1, #0x2
	bl	rfu_REQ_configGameData
	pop	{r0}
	bx	r0
.L1993:
	.align	2, 0
.L1992:
	.word	gUnknown_02022B14
	.word	gUnknown_02022B22
.Lfe166:
	.size	 sub_8011068,.Lfe166-sub_8011068
	.align	2, 0
	.globl	sub_8011090
	.type	 sub_8011090,function
	.thumb_func
sub_8011090:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1995	@cond_branch
	bl	sub_8010F84
.L1995:
	ldr	r2, .L1996
	ldr	r3, .L1996+0x4
	mov	r0, #0x0
	mov	r1, #0x2
	bl	rfu_REQ_configGameData
	pop	{r0}
	bx	r0
.L1997:
	.align	2, 0
.L1996:
	.word	gUnknown_02022B14
	.word	gUnknown_02022B22
.Lfe167:
	.size	 sub_8011090,.Lfe167-sub_8011090
	.align	2, 0
	.globl	sub_80110B8
	.type	 sub_80110B8,function
	.thumb_func
sub_80110B8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r9, r0
	bl	sub_800F7DC
	ldrb	r1, [r0, #0xa]
	mov	r0, #0x7f
	and	r0, r0, r1
	cmp	r0, #0x45
	bne	.L1999	@cond_branch
	mov	r5, #0x0
	mov	r7, #0x0
	ldr	r3, .L2007
	ldr	r1, .L2007+0x4
	add	r0, r3, r1
	ldr	r2, .L2007+0x8
	add	r1, r3, r2
	ldrb	r2, [r0]
	ldrb	r0, [r1]
	add	r1, r0, #0
	eor	r1, r1, r2
	mov	r8, r1
	mov	r4, #0x0
	mov	r6, #0x1
	ldr	r2, .L2007+0xc
	mov	ip, r2
	ldr	r0, .L2007+0x10
	add	r0, r0, r3
	mov	sl, r0
	mov	r3, ip
	add	r3, r3, #0x4
.L2003:
	mov	r0, r8
	asr	r0, r0, r4
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L2002	@cond_branch
	mov	r1, sl
	add	r0, r4, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r2, ip
	add	r1, r0, r2
	ldrb	r1, [r1, #0x13]
	add	r2, r6, #0
	and	r2, r2, r1
	lsl	r2, r2, #0x3
	add	r0, r0, r3
	ldr	r1, [r0]
	mov	r0, #0x7
	and	r1, r1, r0
	mov	r0, #0x80
	orr	r1, r1, r0
	orr	r2, r2, r1
	lsl	r0, r5, #0x3
	lsl	r2, r2, r0
	orr	r7, r7, r2
	add	r5, r5, #0x1
	mov	r0, r9
	sub	r0, r0, #0x1
	cmp	r5, r0
	beq	.L2001	@cond_branch
.L2002:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L2003	@cond_branch
.L2001:
	mov	r0, #0x45
	add	r1, r7, #0
	mov	r2, #0x0
	bl	sub_8011090
.L1999:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2008:
	.align	2, 0
.L2007:
	.word	gUnknown_03005000
	.word	0xce2
	.word	0xce3
	.word	gLinkPlayers
	.word	0xcde
.Lfe168:
	.size	 sub_80110B8,.Lfe168-sub_80110B8
	.align	2, 0
	.globl	sub_8011170
	.type	 sub_8011170,function
	.thumb_func
sub_8011170:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r2, .L2011
	add	r3, r2, #0
	add	r3, r3, #0xee
	ldrb	r0, [r3]
	cmp	r0, #0
	bne	.L2010	@cond_branch
	ldr	r1, .L2011+0x4
	ldrh	r0, [r1, #0x14]
	strh	r0, [r2, #0x10]
	ldrh	r0, [r1, #0x16]
	strh	r0, [r2, #0x12]
	strh	r4, [r2, #0xa]
	ldrb	r0, [r3]
	mov	r0, #0x1
	strb	r0, [r3]
.L2010:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2012:
	.align	2, 0
.L2011:
	.word	gUnknown_03005000
	.word	gUnknown_03004140
.Lfe169:
	.size	 sub_8011170,.Lfe169-sub_8011170
	.align	2, 0
	.globl	sub_80111A0
	.type	 sub_80111A0,function
	.thumb_func
sub_80111A0:
	ldr	r0, .L2014
	add	r0, r0, #0xee
	ldrb	r1, [r0]
	mov	r1, #0x0
	strb	r1, [r0]
	bx	lr
.L2015:
	.align	2, 0
.L2014:
	.word	gUnknown_03005000
.Lfe170:
	.size	 sub_80111A0,.Lfe170-sub_80111A0
	.align	2, 0
	.globl	sub_80111B0
	.type	 sub_80111B0,function
	.thumb_func
sub_80111B0:
	push	{lr}
	add	r2, r0, #0
	cmp	r2, #0
	bne	.L2017	@cond_branch
	ldr	r0, .L2019
	add	r0, r0, #0xee
	ldrb	r1, [r0]
	strb	r2, [r0]
	b	.L2018
.L2020:
	.align	2, 0
.L2019:
	.word	gUnknown_03005000
.L2017:
	ldr	r0, .L2021
	add	r0, r0, #0xee
	ldrb	r1, [r0]
	mov	r1, #0x4
	strb	r1, [r0]
.L2018:
	pop	{r0}
	bx	r0
.L2022:
	.align	2, 0
.L2021:
	.word	gUnknown_03005000
.Lfe171:
	.size	 sub_80111B0,.Lfe171-sub_80111B0
	.align	2, 0
	.globl	sub_80111DC
	.type	 sub_80111DC,function
	.thumb_func
sub_80111DC:
	push	{lr}
	ldr	r0, .L2024
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	sub_8011E94
	ldr	r1, .L2024+0x4
	mov	r0, #0x0
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L2025:
	.align	2, 0
.L2024:
	.word	gUnknown_03004140
	.word	gUnknown_03005000
.Lfe172:
	.size	 sub_80111DC,.Lfe172-sub_80111DC
	.align	2, 0
	.globl	sub_80111FC
	.type	 sub_80111FC,function
	.thumb_func
sub_80111FC:
	ldr	r1, .L2027
	ldr	r0, .L2027+0x4
	str	r0, [r1]
	bx	lr
.L2028:
	.align	2, 0
.L2027:
	.word	gUnknown_03005000
	.word	sub_80111DC
.Lfe173:
	.size	 sub_80111FC,.Lfe173-sub_80111FC
	.align	2, 0
	.globl	sub_801120C
	.type	 sub_801120C,function
	.thumb_func
sub_801120C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r6, #0x0
	cmp	r4, #0x32
	bne	.LCB15410
	b	.L2048	@long jump
.LCB15410:
	cmp	r4, #0x32
	bgt	.L2061	@cond_branch
	cmp	r4, #0x13
	bgt	.L2062	@cond_branch
	cmp	r4, #0x12
	blt	.LCB15416
	b	.L2030	@long jump
.LCB15416:
	cmp	r4, #0x10
	bne	.LCB15418
	b	.L2030	@long jump
.LCB15418:
	cmp	r4, #0x10
	bgt	.L2033	@cond_branch
	cmp	r4, #0
	beq	.L2031	@cond_branch
	b	.L2030
.L2062:
	cmp	r4, #0x30
	bne	.LCB15427
	b	.L2050	@long jump
.LCB15427:
	cmp	r4, #0x30
	ble	.LCB15429
	b	.L2047	@long jump
.LCB15429:
	cmp	r4, #0x14
	beq	.L2045	@cond_branch
	b	.L2030
.L2061:
	cmp	r4, #0x44
	bgt	.L2063	@cond_branch
	cmp	r4, #0x42
	blt	.LCB15438
	b	.L2030	@long jump
.LCB15438:
	cmp	r4, #0x33
	bne	.LCB15440
	b	.L2050	@long jump
.LCB15440:
	b	.L2030
.L2063:
	cmp	r4, #0xf3
	bne	.LCB15445
	b	.L2056	@long jump
.LCB15445:
	cmp	r4, #0xf3
	bgt	.L2064	@cond_branch
	cmp	r4, #0xf0
	bge	.LCB15449
	b	.L2030	@long jump
.LCB15449:
	b	.L2058
.L2064:
	cmp	r4, #0xff
	bne	.LCB15454
	b	.L2058	@long jump
.LCB15454:
	b	.L2030
.L2031:
	ldr	r1, .L2067
	mov	r0, #0x2
	strh	r0, [r1, #0x4]
	b	.L2030
.L2068:
	.align	2, 0
.L2067:
	.word	gUnknown_03005000
.L2033:
	ldr	r0, .L2069
	ldrh	r0, [r0, #0x14]
	bl	sub_80115EC
	mov	r5, #0x0
	mov	r0, #0x1
	mov	r8, r0
	ldr	r1, .L2069+0x4
	mov	r9, r1
	ldr	r3, .L2069+0x8
	add	r3, r3, r9
	mov	sl, r3
	mov	r7, #0x7f
.L2037:
	ldr	r0, .L2069
	ldrh	r0, [r0, #0x14]
	asr	r0, r0, r5
	mov	r1, r8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2036	@cond_branch
	ldr	r0, .L2069+0xc
	lsl	r1, r5, #0x5
	add	r1, r1, #0x14
	ldr	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0, #0x10]
	add	r4, r7, #0
	and	r4, r4, r0
	bl	sub_800F7DC
	ldrb	r1, [r0, #0xa]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r4, r0
	bne	.L2039	@cond_branch
	ldr	r0, .L2069+0x10
	add	r0, r0, r9
	add	r0, r5, r0
	mov	r1, #0x0
	strb	r1, [r0]
	mov	r3, sl
	add	r2, r5, r3
	strb	r1, [r2]
	mov	r0, #0x20
	add	r1, r5, #0
	mov	r3, #0x1
	bl	rfu_setRecvBuffer
	b	.L2036
.L2070:
	.align	2, 0
.L2069:
	.word	gUnknown_03004140
	.word	gUnknown_03005000
	.word	0xcd5
	.word	gUnknown_03007890
	.word	0xcd1
.L2039:
	mov	r0, r8
	lsl	r0, r0, r5
	orr	r6, r6, r0
	lsl	r0, r6, #0x18
	lsr	r6, r0, #0x18
.L2036:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L2037	@cond_branch
	cmp	r6, #0
	beq	.L2030	@cond_branch
	add	r0, r6, #0
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
	b	.L2030
.L2045:
	ldr	r4, .L2071
	ldr	r1, .L2071+0x4
	add	r0, r4, r1
	ldr	r1, .L2071+0x8
	ldrb	r2, [r0]
	ldrb	r0, [r1]
	cmp	r2, r0
	beq	.L2046	@cond_branch
	eor	r0, r0, r2
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
.L2046:
	mov	r0, #0x11
	strh	r0, [r4, #0x4]
	b	.L2030
.L2072:
	.align	2, 0
.L2071:
	.word	gUnknown_03005000
	.word	0xce7
	.word	gUnknown_03004140
.L2047:
	ldr	r0, .L2073
	add	r0, r0, #0xf0
	b	.L2065
.L2074:
	.align	2, 0
.L2073:
	.word	gUnknown_03005000
.L2048:
	ldr	r0, .L2075
	add	r0, r0, #0xf0
	mov	r1, #0x3
	b	.L2066
.L2076:
	.align	2, 0
.L2075:
	.word	gUnknown_03005000
.L2050:
	ldr	r1, .L2077
	add	r2, r1, #0
	add	r2, r2, #0xf0
	mov	r0, #0x4
	strb	r0, [r2]
	ldr	r3, .L2077+0x4
	add	r1, r1, r3
	ldr	r0, .L2077+0x8
	ldrb	r2, [r0, #0x14]
	ldrb	r0, [r1]
	add	r3, r0, #0
	bic	r3, r3, r2
	add	r2, r3, #0
	strb	r2, [r1]
	ldr	r0, .L2077+0xc
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L2051	@cond_branch
	cmp	r2, #0
	bne	.L2052	@cond_branch
	add	r0, r4, #0
	bl	sub_8011170
	b	.L2051
.L2078:
	.align	2, 0
.L2077:
	.word	gUnknown_03005000
	.word	0xce2
	.word	gUnknown_03004140
	.word	gReceivedRemoteLinkPlayers
.L2052:
	bl	sub_80111FC
.L2051:
	mov	r0, #0x2
	add	r1, r4, #0
	bl	sub_8011A64
	b	.L2030
.L2056:
	mov	r0, #0x1
	mov	r1, #0xf3
	bl	sub_8011A64
	mov	r0, #0xf3
	bl	sub_8011170
	ldr	r0, .L2079
	add	r0, r0, #0xef
	b	.L2065
.L2080:
	.align	2, 0
.L2079:
	.word	gUnknown_03005000
.L2058:
	add	r0, r4, #0
	bl	sub_8011170
	mov	r0, #0x1
	add	r1, r4, #0
	bl	sub_8011A64
	ldr	r0, .L2081
	ldr	r1, .L2081+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
.L2065:
	mov	r1, #0x1
.L2066:
	strb	r1, [r0]
.L2030:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2082:
	.align	2, 0
.L2081:
	.word	gUnknown_03005000
	.word	0xcdb
.Lfe174:
	.size	 sub_801120C,.Lfe174-sub_801120C
	.align	2, 0
	.globl	sub_8011404
	.type	 sub_8011404,function
	.thumb_func
sub_8011404:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x31
	bne	.LCB15734
	b	.L2098	@long jump
.LCB15734:
	cmp	r4, #0x31
	bgt	.L2107	@cond_branch
	cmp	r4, #0x22
	beq	.L2088	@cond_branch
	cmp	r4, #0x22
	bgt	.L2108	@cond_branch
	cmp	r4, #0x20
	beq	.L2086	@cond_branch
	cmp	r4, #0x20
	ble	.LCB15744
	b	.L2084	@long jump
.LCB15744:
	cmp	r4, #0
	beq	.L2085	@cond_branch
	b	.L2084
.L2108:
	cmp	r4, #0x24
	beq	.L2090	@cond_branch
	cmp	r4, #0x24
	blt	.L2089	@cond_branch
	cmp	r4, #0x25
	beq	.L2091	@cond_branch
	cmp	r4, #0x30
	beq	.L2092	@cond_branch
	b	.L2084
.L2107:
	cmp	r4, #0x44
	bgt	.L2109	@cond_branch
	cmp	r4, #0x42
	blt	.LCB15764
	b	.L2084	@long jump
.LCB15764:
	cmp	r4, #0x33
	beq	.L2094	@cond_branch
	cmp	r4, #0x33
	bge	.LCB15768
	b	.L2099	@long jump
.LCB15768:
	b	.L2084
.L2109:
	cmp	r4, #0xf3
	bne	.LCB15773
	b	.L2102	@long jump
.LCB15773:
	cmp	r4, #0xf3
	bgt	.L2110	@cond_branch
	cmp	r4, #0xf0
	bge	.LCB15777
	b	.L2084	@long jump
.LCB15777:
	b	.L2104
.L2110:
	cmp	r4, #0xff
	bne	.LCB15782
	b	.L2104	@long jump
.LCB15782:
	b	.L2084
.L2085:
	ldr	r1, .L2113
	mov	r0, #0x6
	strh	r0, [r1, #0x4]
	b	.L2084
.L2114:
	.align	2, 0
.L2113:
	.word	gUnknown_03005000
.L2086:
	ldr	r0, .L2115
	ldr	r1, .L2115+0x4
	ldrh	r1, [r1, #0x14]
	ldr	r2, .L2115+0x8
	add	r0, r0, r2
	b	.L2111
.L2116:
	.align	2, 0
.L2115:
	.word	gUnknown_03005000
	.word	gUnknown_03004140
	.word	0xccd
.L2088:
	ldr	r0, .L2117
	ldr	r1, .L2117+0x4
	ldrh	r1, [r1, #0x14]
	ldr	r2, .L2117+0x8
	add	r0, r0, r2
	ldrb	r2, [r0]
	b	.L2111
.L2118:
	.align	2, 0
.L2117:
	.word	gUnknown_03005000
	.word	gUnknown_03004140
	.word	0xc3e
.L2089:
	mov	r0, #0x2
	add	r1, r4, #0
	bl	sub_8011A64
	b	.L2084
.L2090:
	ldr	r4, .L2119
	mov	r1, #0x0
	mov	r0, #0xb
	strh	r0, [r4, #0x4]
	ldr	r2, .L2119+0x4
	add	r0, r4, r2
	strb	r1, [r0]
	ldr	r0, .L2119+0x8
	add	r2, r4, r0
	strb	r1, [r2]
	ldr	r1, .L2119+0xc
	add	r5, r4, r1
	ldrb	r1, [r5]
	mov	r0, #0x20
	mov	r3, #0x1
	bl	rfu_setRecvBuffer
	ldrb	r1, [r5]
	ldr	r2, .L2119+0x10
	add	r4, r4, r2
	mov	r0, #0x10
	add	r2, r4, #0
	mov	r3, #0x46
	bl	rfu_setRecvBuffer
	b	.L2084
.L2120:
	.align	2, 0
.L2119:
	.word	gUnknown_03005000
	.word	0xc85
	.word	0xc86
	.word	0xc3e
	.word	0xc3f
.L2091:
	mov	r0, #0x2
	mov	r1, #0x25
	bl	sub_8011A64
	b	.L2084
.L2092:
	ldr	r0, .L2121
	add	r2, r0, #0
	add	r2, r2, #0xf0
	mov	r1, #0x2
	strb	r1, [r2]
	ldr	r1, .L2121+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x6
	beq	.L2084	@cond_branch
.L2094:
	ldr	r2, .L2121
	add	r1, r2, #0
	add	r1, r1, #0xf0
	ldrb	r0, [r1]
	cmp	r0, #0x2
	beq	.L2095	@cond_branch
	mov	r0, #0x4
	strb	r0, [r1]
.L2095:
	ldr	r1, .L2121+0x4
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0x9
	beq	.L2096	@cond_branch
	mov	r0, #0x2
	add	r1, r4, #0
	bl	sub_8011A64
.L2096:
	ldr	r0, .L2121+0x8
	mov	r1, #0x5
	mov	r2, #0x5
	bl	nullsub_5
	ldr	r0, .L2121+0xc
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L2084	@cond_branch
	add	r0, r4, #0
	bl	sub_8011170
	b	.L2084
.L2122:
	.align	2, 0
.L2121:
	.word	gUnknown_03005000
	.word	0xc86
	.word	gUnknown_082ED7FC
	.word	gReceivedRemoteLinkPlayers
.L2098:
	ldr	r0, .L2123
	add	r0, r0, #0xf0
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r0, .L2123+0x4
	mov	r1, #0x5
	mov	r2, #0x5
	bl	nullsub_5
	b	.L2084
.L2124:
	.align	2, 0
.L2123:
	.word	gUnknown_03005000
	.word	gUnknown_082ED814
.L2099:
	ldr	r1, .L2125
	add	r2, r1, #0
	add	r2, r2, #0xf0
	mov	r0, #0x3
	strb	r0, [r2]
	ldr	r2, .L2125+0x4
	add	r1, r1, r2
	ldrb	r0, [r1]
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L2084
.L2126:
	.align	2, 0
.L2125:
	.word	gUnknown_03005000
	.word	0xc3c
.L2102:
	mov	r0, #0x1
	mov	r1, #0xf3
	bl	sub_8011A64
	mov	r0, #0xf3
	bl	sub_8011170
	ldr	r0, .L2127
	add	r0, r0, #0xef
	b	.L2112
.L2128:
	.align	2, 0
.L2127:
	.word	gUnknown_03005000
.L2104:
	mov	r0, #0x1
	add	r1, r4, #0
	bl	sub_8011A64
	add	r0, r4, #0
	bl	sub_8011170
	ldr	r0, .L2129
	ldr	r1, .L2129+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
.L2112:
	mov	r1, #0x1
.L2111:
	strb	r1, [r0]
.L2084:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L2130:
	.align	2, 0
.L2129:
	.word	gUnknown_03005000
	.word	0xcdb
.Lfe175:
	.size	 sub_8011404,.Lfe175-sub_8011404
	.align	2, 0
	.globl	sub_80115EC
	.type	 sub_80115EC,function
	.thumb_func
sub_80115EC:
	push	{r4, r5, r6, lr}
	add	r3, r0, #0
	mov	r2, #0x0
	mov	r6, #0x1
	ldr	r0, .L2138
	ldr	r4, .L2138+0x4
	add	r1, r0, r4
	mov	r5, #0x0
	mov	r4, #0xff
.L2135:
	add	r0, r3, #0
	asr	r0, r0, r2
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L2134	@cond_branch
	strb	r5, [r1]
	ldrb	r0, [r1, #0x4]
	orr	r0, r0, r4
	strb	r0, [r1, #0x4]
.L2134:
	add	r1, r1, #0x1
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L2135	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2139:
	.align	2, 0
.L2138:
	.word	gUnknown_03005000
	.word	0xcea
.Lfe176:
	.size	 sub_80115EC,.Lfe176-sub_80115EC
	.align	2, 0
	.globl	sub_8011628
	.type	 sub_8011628,function
	.thumb_func
sub_8011628:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	mov	r3, #0x0
	mov	r2, #0x0
	mov	r4, #0x1
	ldr	r6, .L2148
	mov	r7, #0x7f
.L2144:
	add	r0, r5, #0
	asr	r0, r0, r2
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L2143	@cond_branch
	lsl	r1, r2, #0x5
	add	r1, r1, #0x14
	ldr	r0, [r6]
	add	r0, r0, r1
	ldrb	r1, [r0, #0x10]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0x45
	bne	.L2143	@cond_branch
	add	r0, r4, #0
	lsl	r0, r0, r2
	orr	r3, r3, r0
	lsl	r0, r3, #0x18
	lsr	r3, r0, #0x18
.L2143:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L2144	@cond_branch
	add	r0, r3, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L2149:
	.align	2, 0
.L2148:
	.word	gUnknown_03007890
.Lfe177:
	.size	 sub_8011628,.Lfe177-sub_8011628
	.align	2, 0
	.globl	sub_8011674
	.type	 sub_8011674,function
	.thumb_func
sub_8011674:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x25
	bne	.LCB16159
	b	.L2174	@long jump
.LCB16159:
	cmp	r4, #0x25
	bgt	.L2196	@cond_branch
	cmp	r4, #0x14
	bne	.LCB16163
	b	.L2164	@long jump
.LCB16163:
	cmp	r4, #0x14
	bgt	.L2197	@cond_branch
	cmp	r4, #0x11
	beq	.L2154	@cond_branch
	cmp	r4, #0x11
	ble	.LCB16169
	b	.L2151	@long jump
.LCB16169:
	cmp	r4, #0
	beq	.L2152	@cond_branch
	cmp	r4, #0x10
	beq	.L2153	@cond_branch
	b	.L2151
.L2197:
	cmp	r4, #0x22
	bne	.LCB16178
	b	.L2169	@long jump
.LCB16178:
	cmp	r4, #0x22
	bgt	.L2198	@cond_branch
	cmp	r4, #0x20
	bne	.LCB16182
	b	.L2167	@long jump
.LCB16182:
	b	.L2151
.L2198:
	cmp	r4, #0x23
	bne	.LCB16187
	b	.L2170	@long jump
.LCB16187:
	cmp	r4, #0x24
	bne	.LCB16189
	b	.L2173	@long jump
.LCB16189:
	b	.L2151
.L2196:
	cmp	r4, #0x44
	bgt	.L2199	@cond_branch
	cmp	r4, #0x42
	blt	.LCB16196
	b	.L2151	@long jump
.LCB16196:
	cmp	r4, #0x32
	bne	.LCB16198
	b	.L2177	@long jump
.LCB16198:
	cmp	r4, #0x32
	bgt	.L2200	@cond_branch
	cmp	r4, #0x30
	bne	.LCB16202
	b	.L2179	@long jump
.LCB16202:
	cmp	r4, #0x31
	bne	.LCB16204
	b	.L2175	@long jump
.LCB16204:
	b	.L2151
.L2200:
	cmp	r4, #0x33
	bne	.LCB16209
	b	.L2180	@long jump
.LCB16209:
	cmp	r4, #0x40
	bne	.LCB16211
	b	.L2189	@long jump
.LCB16211:
	b	.L2151
.L2199:
	cmp	r4, #0xf3
	bne	.LCB16216
	b	.L2191	@long jump
.LCB16216:
	cmp	r4, #0xf3
	bgt	.L2201	@cond_branch
	cmp	r4, #0xf0
	bge	.LCB16220
	b	.L2151	@long jump
.LCB16220:
	b	.L2193
.L2201:
	cmp	r4, #0xff
	bne	.LCB16225
	b	.L2193	@long jump
.LCB16225:
	b	.L2151
.L2152:
	ldr	r1, .L2204
	mov	r0, #0x11
	strh	r0, [r1, #0x4]
	b	.L2151
.L2205:
	.align	2, 0
.L2204:
	.word	gUnknown_03005000
.L2153:
	mov	r0, #0x4
	mov	r1, #0x0
	bl	sub_8011A64
	b	.L2151
.L2154:
	bl	sub_800F7DC
	ldrb	r1, [r0, #0xa]
	mov	r0, #0x7f
	and	r0, r0, r1
	cmp	r0, #0x45
	bne	.L2155	@cond_branch
	ldr	r5, .L2206
	ldr	r1, .L2206+0x4
	add	r0, r5, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L2155	@cond_branch
	ldr	r0, .L2206+0x8
	ldrh	r0, [r0, #0x14]
	bl	sub_8011628
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	beq	.L2156	@cond_branch
	add	r0, r4, #0
	bl	sub_800E87C
	mov	r2, #0x1
	mov	ip, r2
	mov	r1, ip
	lsl	r1, r1, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r7, .L2206+0xc
	add	r6, r5, r7
	ldrb	r2, [r6]
	cmp	r2, #0
	bne	.L2157	@cond_branch
	ldr	r0, .L2206+0x10
	add	r3, r5, r0
	ldrb	r0, [r3]
	cmp	r0, #0
	bne	.L2157	@cond_branch
	sub	r7, r7, #0x1
	add	r0, r5, r7
	strb	r1, [r0]
	eor	r1, r1, r4
	orr	r1, r1, r2
	strb	r1, [r6]
	mov	r0, ip
	strb	r0, [r3]
	b	.L2156
.L2207:
	.align	2, 0
.L2206:
	.word	gUnknown_03005000
	.word	0xcd9
	.word	gUnknown_03004140
	.word	0xce6
	.word	0xce8
.L2157:
	ldr	r0, .L2208
	ldr	r1, .L2208+0x4
	add	r0, r0, r1
	ldrb	r2, [r0]
	add	r1, r4, #0
	orr	r1, r1, r2
	strb	r1, [r0]
.L2156:
	ldr	r0, .L2208+0x8
	ldrh	r1, [r0, #0x14]
	cmp	r4, r1
	beq	.L2160	@cond_branch
	ldr	r2, .L2208
	ldr	r7, .L2208+0xc
	add	r3, r2, r7
	add	r0, r4, #0
	eor	r0, r0, r1
	ldrb	r1, [r3]
	orr	r0, r0, r1
	strb	r0, [r3]
	ldr	r0, .L2208+0x10
	add	r2, r2, r0
	mov	r0, #0x2
	strb	r0, [r2]
	b	.L2160
.L2209:
	.align	2, 0
.L2208:
	.word	gUnknown_03005000
	.word	0xce6
	.word	gUnknown_03004140
	.word	0xce3
	.word	0xce4
.L2155:
	bl	sub_800F7DC
	ldrb	r1, [r0, #0xa]
	mov	r0, #0x7f
	and	r0, r0, r1
	cmp	r0, #0x54
	bne	.L2160	@cond_branch
	ldr	r0, .L2210
	ldrb	r0, [r0]
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
.L2160:
	ldr	r0, .L2210
	ldrh	r0, [r0, #0x14]
	bl	sub_80115EC
	b	.L2151
.L2211:
	.align	2, 0
.L2210:
	.word	gUnknown_03004140
.L2164:
	bl	sub_800F7DC
	ldrb	r1, [r0, #0xa]
	mov	r0, #0x7f
	and	r0, r0, r1
	cmp	r0, #0x45
	beq	.L2165	@cond_branch
	ldr	r4, .L2212
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0x1
	bls	.L2165	@cond_branch
	ldrb	r0, [r4, #0x14]
	bl	sub_800E87C
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	lsl	r1, r1, r0
	lsr	r1, r1, #0x18
	ldrb	r0, [r4]
	eor	r1, r1, r0
	add	r0, r1, #0
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
.L2165:
	ldr	r1, .L2212+0x4
	ldrh	r0, [r1, #0x4]
	cmp	r0, #0xf
	beq	.LCB16447
	b	.L2151	@long jump
.LCB16447:
	mov	r0, #0x10
	strh	r0, [r1, #0x4]
	b	.L2151
.L2213:
	.align	2, 0
.L2212:
	.word	gUnknown_03004140
	.word	gUnknown_03005000
.L2167:
	ldr	r0, .L2214
	ldr	r1, .L2214+0x4
	ldrh	r1, [r1, #0x14]
	ldr	r2, .L2214+0x8
	add	r0, r0, r2
	b	.L2202
.L2215:
	.align	2, 0
.L2214:
	.word	gUnknown_03005000
	.word	gUnknown_03004140
	.word	0xccd
.L2169:
	ldr	r0, .L2216
	ldr	r1, .L2216+0x4
	ldrh	r1, [r1, #0x14]
	ldr	r7, .L2216+0x8
	add	r0, r0, r7
	ldrb	r2, [r0]
	b	.L2202
.L2217:
	.align	2, 0
.L2216:
	.word	gUnknown_03005000
	.word	gUnknown_03004140
	.word	0xc3e
.L2170:
	ldr	r1, .L2218
	mov	r0, #0x12
	strh	r0, [r1, #0x4]
	ldr	r0, .L2218+0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0x1
	bhi	.L2171	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r0, .L2218+0x8
	mov	r1, #0x2
	bl	CreateTask
	b	.L2151
.L2219:
	.align	2, 0
.L2218:
	.word	gUnknown_03005000
	.word	0xccf
	.word	sub_801209C
.L2171:
	mov	r0, #0x2
	mov	r1, #0x23
	bl	sub_8011A64
	b	.L2151
.L2173:
	ldr	r4, .L2220
	mov	r0, #0xd
	strh	r0, [r4, #0x4]
	mov	r0, #0x3
	mov	r1, #0x0
	bl	sub_8011A64
	ldr	r1, .L2220+0x4
	add	r0, r4, r1
	ldrb	r1, [r0]
	ldr	r2, .L2220+0x8
	add	r4, r4, r2
	mov	r0, #0x10
	add	r2, r4, #0
	mov	r3, #0x46
	bl	rfu_setRecvBuffer
	b	.L2151
.L2221:
	.align	2, 0
.L2220:
	.word	gUnknown_03005000
	.word	0xc3e
	.word	0xc3f
.L2174:
	mov	r0, #0x2
	mov	r1, #0x25
	bl	sub_8011A64
	b	.L2151
.L2175:
	ldr	r0, .L2222
	ldrb	r1, [r0]
	ldrh	r0, [r0, #0x14]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.LCB16572
	b	.L2151	@long jump
.LCB16572:
	ldr	r0, .L2222+0x4
	add	r0, r0, #0xf0
	mov	r1, #0x1
	b	.L2202
.L2223:
	.align	2, 0
.L2222:
	.word	gUnknown_03004140
	.word	gUnknown_03005000
.L2177:
	ldr	r2, .L2224
	add	r1, r2, #0
	add	r1, r1, #0xf0
	mov	r0, #0x3
	strb	r0, [r1]
	ldr	r0, .L2224+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB16597
	b	.L2151	@long jump
.LCB16597:
	ldr	r7, .L2224+0x8
	add	r0, r2, r7
	ldrb	r1, [r0]
	mov	r1, #0x1
	b	.L2202
.L2225:
	.align	2, 0
.L2224:
	.word	gUnknown_03005000
	.word	gUnknown_03007890
	.word	0xc3c
.L2179:
	ldr	r0, .L2226
	add	r0, r0, #0xf0
	mov	r1, #0x2
	strb	r1, [r0]
.L2180:
	ldr	r2, .L2226
	add	r1, r2, #0
	add	r1, r1, #0xf0
	ldrb	r0, [r1]
	cmp	r0, #0x2
	beq	.L2181	@cond_branch
	mov	r0, #0x4
	strb	r0, [r1]
.L2181:
	ldrb	r0, [r2, #0xc]
	cmp	r0, #0x1
	bne	.L2182	@cond_branch
	ldr	r0, .L2226+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L2186	@cond_branch
	ldr	r0, .L2226+0x8
	add	r2, r2, r0
	ldr	r0, .L2226+0xc
	ldrb	r1, [r0, #0x14]
	ldrb	r0, [r2]
	bic	r0, r0, r1
	strb	r0, [r2]
	cmp	r0, #0
	bne	.L2184	@cond_branch
	add	r0, r4, #0
	bl	sub_8011170
	b	.L2186
.L2227:
	.align	2, 0
.L2226:
	.word	gUnknown_03005000
	.word	gReceivedRemoteLinkPlayers
	.word	0xce2
	.word	gUnknown_03004140
.L2184:
	bl	sub_80111FC
	b	.L2186
.L2182:
	ldr	r1, .L2228
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.L2186	@cond_branch
	ldr	r0, .L2228+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L2186	@cond_branch
	add	r0, r4, #0
	bl	sub_8011170
	mov	r0, #0x0
	bl	sub_800C27C
.L2186:
	ldr	r0, .L2228+0x8
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L2188	@cond_branch
	ldr	r0, .L2228+0xc
	ldrb	r0, [r0, #0x7]
	cmp	r0, #0
	bne	.L2188	@cond_branch
	ldr	r0, .L2228+0x10
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L2188	@cond_branch
	ldr	r1, .L2228+0x14
	mov	r0, #0x11
	strh	r0, [r1, #0x4]
.L2188:
	mov	r0, #0x2
	add	r1, r4, #0
	bl	sub_8011A64
	b	.L2151
.L2229:
	.align	2, 0
.L2228:
	.word	0xce4
	.word	gReceivedRemoteLinkPlayers
	.word	gUnknown_03007890
	.word	gUnknown_03004140
	.word	sub_800EB44
	.word	gUnknown_03005000
.L2189:
	ldr	r0, .L2230
	ldr	r2, .L2230+0x4
	add	r0, r0, r2
	b	.L2203
.L2231:
	.align	2, 0
.L2230:
	.word	gUnknown_03005000
	.word	0xce3
.L2191:
	mov	r0, #0x1
	mov	r1, #0xf3
	bl	sub_8011A64
	mov	r0, #0xf3
	bl	sub_8011170
	ldr	r0, .L2232
	add	r0, r0, #0xef
	mov	r1, #0x1
	b	.L2202
.L2233:
	.align	2, 0
.L2232:
	.word	gUnknown_03005000
.L2193:
	add	r0, r4, #0
	bl	sub_8011170
	mov	r0, #0x1
	add	r1, r4, #0
	bl	sub_8011A64
	ldr	r0, .L2234
	ldr	r7, .L2234+0x4
	add	r0, r0, r7
	ldrb	r1, [r0]
.L2203:
	mov	r1, #0x0
.L2202:
	strb	r1, [r0]
.L2151:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2235:
	.align	2, 0
.L2234:
	.word	gUnknown_03005000
	.word	0xcdb
.Lfe178:
	.size	 sub_8011674,.Lfe178-sub_8011674
	.align	2, 0
	.globl	sub_8011A50
	.type	 sub_8011A50,function
	.thumb_func
sub_8011A50:
	ldr	r0, .L2237
	ldr	r1, .L2237+0x4
	add	r0, r0, r1
	mov	r1, #0x2
	strb	r1, [r0]
	bx	lr
.L2238:
	.align	2, 0
.L2237:
	.word	gUnknown_03005000
	.word	0xce4
.Lfe179:
	.size	 sub_8011A50,.Lfe179-sub_8011A50
	.align	2, 0
	.globl	sub_8011A64
	.type	 sub_8011A64,function
	.thumb_func
sub_8011A64:
	ldr	r2, .L2240
	add	r3, r2, #0
	add	r3, r3, #0xf1
	strb	r0, [r3]
	strh	r1, [r2, #0xa]
	bx	lr
.L2241:
	.align	2, 0
.L2240:
	.word	gUnknown_03005000
.Lfe180:
	.size	 sub_8011A64,.Lfe180-sub_8011A64
	.align	2, 0
	.globl	sub_8011A74
	.type	 sub_8011A74,function
	.thumb_func
sub_8011A74:
	ldr	r0, .L2243
	add	r0, r0, #0xf1
	ldrb	r0, [r0]
	bx	lr
.L2244:
	.align	2, 0
.L2243:
	.word	gUnknown_03005000
.Lfe181:
	.size	 sub_8011A74,.Lfe181-sub_8011A74
	.align	2, 0
	.globl	sub_8011A80
	.type	 sub_8011A80,function
	.thumb_func
sub_8011A80:
	push	{lr}
	bl	sub_8011A74
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x1
	cmp	r0, #0x1
	bls	.L2246	@cond_branch
	mov	r0, #0x0
	b	.L2248
.L2246:
	mov	r0, #0x1
.L2248:
	pop	{r1}
	bx	r1
.Lfe182:
	.size	 sub_8011A80,.Lfe182-sub_8011A80
	.align	2, 0
	.globl	sub_8011A9C
	.type	 sub_8011A9C,function
	.thumb_func
sub_8011A9C:
	ldr	r0, .L2250
	ldr	r1, .L2250+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	bx	lr
.L2251:
	.align	2, 0
.L2250:
	.word	gUnknown_03005000
	.word	0xce8
.Lfe183:
	.size	 sub_8011A9C,.Lfe183-sub_8011A9C
	.align	2, 0
	.globl	Rfu_IsMaster
	.type	 Rfu_IsMaster,function
	.thumb_func
Rfu_IsMaster:
	ldr	r0, .L2253
	ldrb	r0, [r0, #0xc]
	bx	lr
.L2254:
	.align	2, 0
.L2253:
	.word	gUnknown_03005000
.Lfe184:
	.size	 Rfu_IsMaster,.Lfe184-Rfu_IsMaster
	.align	2, 0
	.globl	RfuVSync
	.type	 RfuVSync,function
	.thumb_func
RfuVSync:
	push	{lr}
	bl	rfu_syncVBlank_
	pop	{r0}
	bx	r0
.Lfe185:
	.size	 RfuVSync,.Lfe185-RfuVSync
	.align	2, 0
	.globl	sub_8011AC8
	.type	 sub_8011AC8,function
	.thumb_func
sub_8011AC8:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r1, .L2257
	ldr	r2, .L2257+0x4
	mov	r0, sp
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L2258:
	.align	2, 0
.L2257:
	.word	gRecvCmds
	.word	0x5000014
.Lfe186:
	.size	 sub_8011AC8,.Lfe186-sub_8011AC8
	.align	2, 0
	.globl	sub_8011AE8
	.type	 sub_8011AE8,function
	.thumb_func
sub_8011AE8:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe187:
	.size	 sub_8011AE8,.Lfe187-sub_8011AE8
	.align	2, 0
	.globl	sub_8011AFC
	.type	 sub_8011AFC,function
	.thumb_func
sub_8011AFC:
	push	{r4, lr}
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	bl	ResetTasks
	bl	ResetPaletteFade
	ldr	r0, .L2267
	bl	SetVBlankCallback
	bl	IsWirelessAdapterConnected
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2261	@cond_branch
	ldr	r1, .L2267+0x4
	ldr	r2, .L2267+0x8
	add	r0, r2, #0
	strh	r0, [r1]
	bl	sub_800B488
	bl	OpenLink
	ldr	r0, .L2267+0xc
	ldrh	r0, [r0, #0x24]
	bl	SeedRng
	mov	r4, #0x0
.L2265:
	bl	Random
	ldr	r1, .L2267+0x10
	ldr	r1, [r1]
	add	r1, r1, #0xa
	add	r1, r1, r4
	strb	r0, [r1]
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L2265	@cond_branch
	mov	r1, #0xaa
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	bl	sub_8011BA4
	ldr	r0, .L2267+0x14
	bl	SetMainCallback2
.L2261:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2268:
	.align	2, 0
.L2267:
	.word	sub_8011AE8
	.word	gLinkType
	.word	0x1111
	.word	gMain
	.word	gSaveBlock2Ptr
	.word	sub_8011BF8
.Lfe188:
	.size	 sub_8011AFC,.Lfe188-sub_8011AFC
	.align	2, 0
	.globl	sub_8011B90
	.type	 sub_8011B90,function
	.thumb_func
sub_8011B90:
	push	{lr}
	ldr	r0, .L2270
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L2271:
	.align	2, 0
.L2270:
	.word	sub_800EB44
.Lfe189:
	.size	 sub_8011B90,.Lfe189-sub_8011B90
	.align	2, 0
	.globl	sub_8011BA4
	.type	 sub_8011BA4,function
	.thumb_func
sub_8011BA4:
	push	{r4, lr}
	ldr	r4, .L2274
	add	r0, r4, #0
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2273	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	CreateTask
	ldr	r1, .L2274+0x4
	add	r1, r1, #0x66
	strb	r0, [r1]
.L2273:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2275:
	.align	2, 0
.L2274:
	.word	nullsub_89
	.word	gUnknown_03005000
.Lfe190:
	.size	 sub_8011BA4,.Lfe190-sub_8011BA4
	.align	2, 0
	.globl	sub_8011BD0
	.type	 sub_8011BD0,function
	.thumb_func
sub_8011BD0:
	push	{lr}
	ldr	r0, .L2278
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L2277	@cond_branch
	ldr	r0, .L2278+0x4
	add	r0, r0, #0x66
	ldrb	r0, [r0]
	bl	DestroyTask
.L2277:
	pop	{r0}
	bx	r0
.L2279:
	.align	2, 0
.L2278:
	.word	nullsub_89
	.word	gUnknown_03005000
.Lfe191:
	.size	 sub_8011BD0,.Lfe191-sub_8011BD0
	.align	2, 0
	.globl	sub_8011BF8
	.type	 sub_8011BF8,function
	.thumb_func
sub_8011BF8:
	push	{lr}
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe192:
	.size	 sub_8011BF8,.Lfe192-sub_8011BF8
	.align	2, 0
	.globl	sub_8011C10
	.type	 sub_8011C10,function
	.thumb_func
sub_8011C10:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r1, .L2282
	mov	r0, #0x1
	strb	r0, [r1, #0xc]
	bl	sub_8010F48
	ldr	r0, .L2282+0x4
	mov	r1, #0x0
	bl	sub_800BF4C
	ldr	r2, .L2282+0x8
	add	r1, r2, #0
	ldr	r0, .L2282+0xc
	ldmia	r0!, {r3, r5, r6}
	stmia	r1!, {r3, r5, r6}
	ldmia	r0!, {r3, r5, r6}
	stmia	r1!, {r3, r5, r6}
	ldr	r0, .L2282+0x10
	sub	r4, r4, #0x1
	add	r4, r4, r0
	ldrb	r0, [r4]
	strh	r0, [r2, #0x2]
	bl	sub_800EE78
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2283:
	.align	2, 0
.L2282:
	.word	gUnknown_03005000
	.word	sub_801120C
	.word	gUnknown_02022B2C
	.word	gUnknown_082ED608
	.word	gUnknown_082ED620
.Lfe193:
	.size	 sub_8011C10,.Lfe193-sub_8011C10
	.align	2, 0
	.globl	sub_8011C5C
	.type	 sub_8011C5C,function
	.thumb_func
sub_8011C5C:
	push	{lr}
	ldr	r1, .L2285
	mov	r0, #0x0
	strb	r0, [r1, #0xc]
	bl	sub_8010F48
	ldr	r0, .L2285+0x4
	ldr	r1, .L2285+0x8
	bl	sub_800BF4C
	bl	sub_800EF00
	pop	{r0}
	bx	r0
.L2286:
	.align	2, 0
.L2285:
	.word	gUnknown_03005000
	.word	sub_8011404
	.word	sub_800ED34
.Lfe194:
	.size	 sub_8011C5C,.Lfe194-sub_8011C5C
	.align	2, 0
	.globl	sub_8011C84
	.type	 sub_8011C84,function
	.thumb_func
sub_8011C84:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L2288
	mov	r5, #0x0
	mov	r0, #0x2
	strb	r0, [r4, #0xc]
	bl	sub_8010F48
	ldr	r0, .L2288+0x4
	mov	r1, #0x0
	bl	sub_800BF4C
	ldr	r2, .L2288+0x8
	add	r1, r2, #0
	ldr	r0, .L2288+0xc
	ldmia	r0!, {r3, r6, r7}
	stmia	r1!, {r3, r6, r7}
	ldmia	r0!, {r3, r6, r7}
	stmia	r1!, {r3, r6, r7}
	strb	r5, [r2, #0x11]
	mov	r0, #0x96
	lsl	r0, r0, #0x2
	strh	r0, [r2, #0x12]
	ldr	r0, .L2288+0x10
	mov	r1, #0x1
	bl	CreateTask
	add	r4, r4, #0x67
	strb	r0, [r4]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2289:
	.align	2, 0
.L2288:
	.word	gUnknown_03005000
	.word	sub_8011674
	.word	gUnknown_02022B2C
	.word	gUnknown_082ED608
	.word	sub_800EB44
.Lfe195:
	.size	 sub_8011C84,.Lfe195-sub_8011C84
	.align	2, 0
	.type	 ReadU16,function
	.thumb_func
ReadU16:
	ldrb	r1, [r0, #0x1]
	lsl	r1, r1, #0x8
	ldrb	r0, [r0]
	orr	r0, r0, r1
	bx	lr
.Lfe196:
	.size	 ReadU16,.Lfe196-ReadU16
	.align	2, 0
	.globl	sub_8011CE4
	.type	 sub_8011CE4,function
	.thumb_func
sub_8011CE4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	str	r0, [sp]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	sl, r1
	mov	r0, #0xff
	mov	r9, r0
	mov	r7, #0x0
	ldr	r1, .L2299
	mov	r8, r1
.L2295:
	lsl	r4, r7, #0x5
	add	r5, r4, #0
	add	r5, r5, #0x14
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r5
	add	r0, r0, #0x8
	bl	ReadU16
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r4
	ldrh	r0, [r0, #0x18]
	bl	sub_8010454
	cmp	r0, #0
	beq	.L2294	@cond_branch
	mov	r0, r8
	ldr	r1, [r0]
	add	r1, r1, r5
	add	r1, r1, #0x15
	ldr	r0, [sp]
	bl	StringCompare
	cmp	r0, #0
	bne	.L2294	@cond_branch
	cmp	sl, r6
	bne	.L2294	@cond_branch
	mov	r9, r7
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r4
	ldrb	r0, [r0, #0x16]
	cmp	r0, #0xff
	bne	.L2293	@cond_branch
.L2294:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x3
	bls	.L2295	@cond_branch
.L2293:
	mov	r0, r9
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L2300:
	.align	2, 0
.L2299:
	.word	gUnknown_03007890
.Lfe197:
	.size	 sub_8011CE4,.Lfe197-sub_8011CE4
	.align	2, 0
	.globl	sub_8011D6C
	.type	 sub_8011D6C,function
	.thumb_func
sub_8011D6C:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	bl	rfu_REQ_disconnect
	bl	rfu_waitREQComplete
	ldr	r4, .L2302
	ldr	r0, .L2302+0x4
	add	r5, r4, r0
	ldrb	r0, [r5]
	bic	r0, r0, r6
	strb	r0, [r5]
	ldr	r1, .L2302+0x8
	add	r6, r4, r1
	ldrb	r1, [r6]
	mov	r0, #0x1
	bl	rfu_clearSlot
	ldrb	r0, [r5]
	ldr	r1, .L2302+0xc
	add	r4, r4, r1
	add	r1, r4, #0
	mov	r2, #0x46
	bl	rfu_UNI_setSendData
	ldrb	r0, [r5]
	bl	sub_800E87C
	strb	r0, [r6]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2303:
	.align	2, 0
.L2302:
	.word	gUnknown_03005000
	.word	0xce2
	.word	0xcda
	.word	0xc87
.Lfe198:
	.size	 sub_8011D6C,.Lfe198-sub_8011D6C
	.align	2, 0
	.globl	sub_8011DC0
	.type	 sub_8011DC0,function
	.thumb_func
sub_8011DC0:
	push	{lr}
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	sub_8011CE4
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0xff
	beq	.L2305	@cond_branch
	mov	r0, #0x1
	lsl	r0, r0, r1
	bl	sub_8011D6C
.L2305:
	pop	{r0}
	bx	r0
.Lfe199:
	.size	 sub_8011DC0,.Lfe199-sub_8011DC0
	.align	2, 0
	.globl	sub_8011DE0
	.type	 sub_8011DE0,function
	.thumb_func
sub_8011DE0:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L2307	@cond_branch
	mov	r3, #0x0
	mov	r2, #0x0
	ldr	r5, .L2315
	add	r6, r5, #0x4
.L2311:
	add	r0, r2, r5
	ldrb	r0, [r0]
	cmp	r0, r4
	bne	.L2310	@cond_branch
	ldrb	r0, [r6]
	asr	r0, r0, r2
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2310	@cond_branch
	add	r0, r1, #0
	lsl	r0, r0, r2
	orr	r3, r3, r0
	lsl	r0, r3, #0x18
	lsr	r3, r0, #0x18
.L2310:
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L2311	@cond_branch
	cmp	r3, #0
	beq	.L2307	@cond_branch
	add	r0, r3, #0
	mov	r1, #0x2
	bl	sub_8011E94
.L2307:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2316:
	.align	2, 0
.L2315:
	.word	gUnknown_03005000+0xcde
.Lfe200:
	.size	 sub_8011DE0,.Lfe200-sub_8011DE0
	.align	2, 0
	.globl	sub_8011E2C
	.type	 sub_8011E2C,function
	.thumb_func
sub_8011E2C:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r6, .L2319
	ldrh	r0, [r6]
	cmp	r0, #0
	bne	.L2318	@cond_branch
	ldr	r5, .L2319+0x4
	ldr	r1, .L2319+0x8
	add	r0, r5, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L2318	@cond_branch
	mov	r0, #0xed
	lsl	r0, r0, #0x8
	bl	sub_800FD14
	ldr	r1, .L2319+0xc
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x8]
	strh	r1, [r6, #0x2]
	ldrh	r1, [r0, #0xa]
	strh	r1, [r6, #0x4]
	ldr	r1, .L2319+0x10
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	add	r0, r0, r1
	ldrb	r1, [r5, #0xd]
	ldrb	r0, [r0]
	sub	r1, r1, r0
	strb	r1, [r5, #0xd]
	ldrb	r0, [r5, #0xd]
	strh	r0, [r6, #0x6]
	add	r0, r4, #0
	bl	DestroyTask
.L2318:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2320:
	.align	2, 0
.L2319:
	.word	gSendCmd
	.word	gUnknown_03005000
	.word	0xce8
	.word	gTasks
	.word	gUnknown_082ED695
.Lfe201:
	.size	 sub_8011E2C,.Lfe201-sub_8011E2C
	.align	2, 0
	.globl	sub_8011E94
	.type	 sub_8011E94,function
	.thumb_func
sub_8011E94:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r6, r1, #0
	ldr	r5, .L2324
	add	r0, r5, #0
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	bne	.L2322	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L2324+0x4
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r4, [r0, #0x8]
	b	.L2323
.L2325:
	.align	2, 0
.L2324:
	.word	sub_8011E2C
	.word	gTasks
.L2322:
	ldr	r0, .L2326
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	orr	r4, r4, r0
	strh	r4, [r1, #0x8]
.L2323:
	ldr	r1, .L2326
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r6, [r0, #0xa]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2327:
	.align	2, 0
.L2326:
	.word	gTasks
.Lfe202:
	.size	 sub_8011E94,.Lfe202-sub_8011E94
	.align	2, 0
	.globl	sub_8011EF4
	.type	 sub_8011EF4,function
	.thumb_func
sub_8011EF4:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L2341
	add	r4, r0, r1
	bl	sub_800EE94
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2329	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x10
	bl	ReadU16
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	bl	sub_8011CE4
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	beq	.L2330	@cond_branch
	ldr	r0, .L2341+0x4
	ldr	r0, [r0]
	lsl	r1, r2, #0x5
	add	r0, r0, r1
	ldrb	r0, [r0, #0x16]
	cmp	r0, #0xff
	beq	.L2331	@cond_branch
	ldr	r0, .L2341+0x8
	ldr	r1, .L2341+0xc
	add	r0, r0, r1
	strb	r2, [r0]
	bl	sub_800EEBC
	cmp	r0, #0
	beq	.L2338	@cond_branch
	b	.L2340
.L2342:
	.align	2, 0
.L2341:
	.word	gTasks+0x8
	.word	gUnknown_03007890
	.word	gUnknown_03005000
	.word	0xc3d
.L2331:
	bl	sub_800F7DC
	ldrb	r1, [r0, #0xa]
	mov	r5, #0x7f
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0x15
	beq	.L2329	@cond_branch
	bl	sub_800F7DC
	ldrb	r1, [r0, #0xa]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0x16
	beq	.L2329	@cond_branch
	mov	r1, #0xe0
	lsl	r1, r1, #0x7
	mov	r0, #0x2
	bl	sub_8011A64
.L2340:
	add	r0, r6, #0
	bl	DestroyTask
	b	.L2338
.L2330:
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1e]
	ldr	r0, .L2343
	ldr	r1, .L2343+0x4
	add	r0, r0, r1
	strb	r2, [r0]
	b	.L2338
.L2344:
	.align	2, 0
.L2343:
	.word	gUnknown_03005000
	.word	0xc3d
.L2329:
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1e]
.L2338:
	mov	r1, #0x1e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xf0
	ble	.L2339	@cond_branch
	mov	r1, #0xe0
	lsl	r1, r1, #0x7
	mov	r0, #0x2
	bl	sub_8011A64
	add	r0, r6, #0
	bl	DestroyTask
.L2339:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe203:
	.size	 sub_8011EF4,.Lfe203-sub_8011EF4
	.align	2, 0
	.globl	sub_8011FC8
	.type	 sub_8011FC8,function
	.thumb_func
sub_8011FC8:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	lsl	r5, r1, #0x10
	lsr	r5, r5, #0x10
	ldr	r0, .L2346
	add	r0, r0, #0xf1
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L2346+0x4
	mov	r1, #0x3
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L2346+0x8
	add	r4, r4, r0
	add	r0, r4, #0
	add	r1, r6, #0
	bl	StringCopy
	strh	r5, [r4, #0x10]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2347:
	.align	2, 0
.L2346:
	.word	gUnknown_03005000
	.word	sub_8011EF4
	.word	gTasks+0x8
.Lfe204:
	.size	 sub_8011FC8,.Lfe204-sub_8011FC8
	.align	2, 0
	.globl	sub_801200C
	.type	 sub_801200C,function
	.thumb_func
sub_801200C:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	bl	sub_800F7DC
	ldrb	r1, [r0, #0xa]
	mov	r2, #0x7f
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0x45
	bne	.L2349	@cond_branch
	ldrb	r1, [r4, #0xa]
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0x45
	beq	.L2351	@cond_branch
.L2362:
	mov	r0, #0x1
	b	.L2361
.L2349:
	ldrb	r1, [r4, #0xa]
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0x40
	bne	.L2362	@cond_branch
	cmp	r5, #0x44
	bne	.L2351	@cond_branch
	ldr	r5, .L2363
	ldrh	r0, [r5, #0x8]
	ldr	r3, .L2363+0x4
	add	r2, r3, #0
	and	r2, r2, r0
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r2, r0
	bne	.L2355	@cond_branch
	ldrh	r1, [r4, #0x8]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, r2
	beq	.L2351	@cond_branch
	b	.L2362
.L2364:
	.align	2, 0
.L2363:
	.word	gUnknown_03005000+0x10a
	.word	0x3ff
.L2355:
	ldrh	r1, [r4, #0x8]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, r2
	bne	.L2362	@cond_branch
	ldrb	r2, [r4, #0xb]
	mov	r0, #0xfe
	ldrb	r3, [r5, #0xb]
	add	r1, r0, #0
	and	r1, r1, r2
	and	r0, r0, r3
	cmp	r1, r0
	bne	.L2362	@cond_branch
	ldrb	r2, [r4, #0x9]
	mov	r0, #0xfc
	ldrb	r3, [r5, #0x9]
	add	r1, r0, #0
	and	r1, r1, r2
	and	r0, r0, r3
	cmp	r1, r0
	bne	.L2362	@cond_branch
.L2351:
	mov	r0, #0x0
.L2361:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe205:
	.size	 sub_801200C,.Lfe205-sub_801200C
	.align	2, 0
	.globl	sub_801209C
	.type	 sub_801209C,function
	.thumb_func
sub_801209C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r8, r5
	ldr	r6, .L2373
	add	r0, r6, #0
	add	r0, r0, #0xf1
	ldrb	r0, [r0]
	cmp	r0, #0x4
	bne	.L2366	@cond_branch
	add	r0, r5, #0
	bl	DestroyTask
.L2366:
	ldr	r1, .L2373+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	mov	r1, #0x96
	lsl	r1, r1, #0x11
	cmp	r0, r1
	ble	.L2367	@cond_branch
	mov	r1, #0xe0
	lsl	r1, r1, #0x7
	mov	r0, #0x2
	bl	sub_8011A64
	add	r0, r5, #0
	bl	DestroyTask
.L2367:
	ldr	r1, .L2373+0x8
	add	r0, r6, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L2368	@cond_branch
	ldr	r0, .L2373+0xc
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0
	bne	.L2368	@cond_branch
	mov	r2, #0x86
	lsl	r2, r2, #0x1
	add	r0, r6, r2
	bl	ReadU16
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r2, .L2373+0x10
	add	r0, r6, r2
	bl	sub_8011CE4
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	beq	.L2368	@cond_branch
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	ldr	r7, .L2373+0x14
	lsl	r4, r2, #0x5
	add	r2, r4, #0
	add	r2, r2, #0x14
	ldr	r1, [r7]
	add	r1, r1, r2
	add	r1, r1, #0x6
	bl	sub_801200C
	cmp	r0, #0
	bne	.L2370	@cond_branch
	ldr	r0, [r7]
	add	r1, r0, r4
	ldrb	r0, [r1, #0x16]
	cmp	r0, #0xff
	beq	.L2368	@cond_branch
	ldrh	r0, [r1, #0x14]
	mov	r1, #0x5a
	bl	sub_800C12C
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L2368	@cond_branch
	mov	r0, #0xa
	strh	r0, [r6, #0x4]
	add	r0, r5, #0
	bl	DestroyTask
	b	.L2368
.L2374:
	.align	2, 0
.L2373:
	.word	gUnknown_03005000
	.word	gTasks
	.word	0xccd
	.word	gUnknown_03004140
	.word	0x119
	.word	gUnknown_03007890
.L2370:
	mov	r1, #0xe0
	lsl	r1, r1, #0x7
	mov	r0, #0x2
	bl	sub_8011A64
	mov	r0, r8
	bl	DestroyTask
.L2368:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe206:
	.size	 sub_801209C,.Lfe206-sub_801209C
	.align	2, 0
	.globl	sub_8012188
	.type	 sub_8012188,function
	.thumb_func
sub_8012188:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	add	r5, r1, #0
	lsl	r4, r2, #0x18
	lsr	r4, r4, #0x18
	ldr	r6, .L2380
	ldr	r1, .L2380+0x4
	add	r0, r6, r1
	mov	r7, #0x0
	strb	r7, [r0]
	add	r0, r6, #0
	add	r0, r0, #0xf1
	strb	r7, [r0]
	ldr	r1, .L2380+0x8
	add	r0, r6, r1
	add	r1, r3, #0
	bl	StringCopy
	mov	r1, #0x85
	lsl	r1, r1, #0x1
	add	r0, r6, r1
	add	r1, r5, #0
	mov	r2, #0xd
	bl	memcpy
	bl	sub_800D658
	ldr	r0, .L2380+0xc
	mov	r1, #0x2
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L2380+0x10
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r5
	strh	r4, [r1, #0xa]
	ldr	r0, .L2380+0x14
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	add	r2, r1, #0
	cmp	r4, #0x45
	bne	.L2376	@cond_branch
	cmp	r1, #0xff
	beq	.L2378	@cond_branch
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r1, #0x1
	strh	r1, [r0, #0x16]
	b	.L2378
.L2381:
	.align	2, 0
.L2380:
	.word	gUnknown_03005000
	.word	0xccf
	.word	0x119
	.word	sub_801209C
	.word	gTasks
	.word	sub_800EB44
.L2376:
	cmp	r2, #0xff
	beq	.L2378	@cond_branch
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r7, [r0, #0x16]
.L2378:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe207:
	.size	 sub_8012188,.Lfe207-sub_8012188
	.align	2, 0
	.globl	sub_8012224
	.type	 sub_8012224,function
	.thumb_func
sub_8012224:
	push	{lr}
	ldr	r0, .L2386
	add	r0, r0, #0xf0
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L2383	@cond_branch
	mov	r0, #0x0
	b	.L2385
.L2387:
	.align	2, 0
.L2386:
	.word	gUnknown_03005000
.L2383:
	mov	r0, #0x1
.L2385:
	pop	{r1}
	bx	r1
.Lfe208:
	.size	 sub_8012224,.Lfe208-sub_8012224
	.align	2, 0
	.globl	sub_8012240
	.type	 sub_8012240,function
	.thumb_func
sub_8012240:
	push	{r4, lr}
	mov	r1, #0x0
	ldr	r0, .L2396
	ldrb	r2, [r0]
	ldr	r4, .L2396+0x4
	mov	r3, #0x1
.L2392:
	add	r0, r2, #0
	asr	r0, r0, r1
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L2391	@cond_branch
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L2391	@cond_branch
	mov	r0, #0x0
	b	.L2395
.L2397:
	.align	2, 0
.L2396:
	.word	gUnknown_03004140
	.word	gUnknown_03005000+0xcd1
.L2391:
	add	r1, r1, #0x1
	cmp	r1, #0x3
	ble	.L2392	@cond_branch
	mov	r0, #0x1
.L2395:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe209:
	.size	 sub_8012240,.Lfe209-sub_8012240
	.align	2, 0
	.globl	sub_801227C
	.type	 sub_801227C,function
	.thumb_func
sub_801227C:
	push	{r4, lr}
	mov	r4, #0x0
.L2402:
	lsl	r2, r4, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L2404
	mov	r1, #0x0
	bl	nullsub_5
	add	r4, r4, #0x1
	cmp	r4, #0x13
	ble	.L2402	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L2405:
	.align	2, 0
.L2404:
	.word	gUnknown_082ED82C
.Lfe210:
	.size	 sub_801227C,.Lfe210-sub_801227C
	.align	2, 0
	.globl	sub_801229C
	.type	 sub_801229C,function
	.thumb_func
sub_801229C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	bl	GetBlockReceivedStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1c
	mov	r2, #0x13
	mov	r3, #0x2
	bl	nullsub_13
	ldr	r4, .L2443
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x2]
	mov	r1, #0x14
	mov	r2, #0x1
	mov	r3, #0x1
	bl	nullsub_13
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x3]
	mov	r1, #0x17
	mov	r2, #0x1
	mov	r3, #0x1
	bl	nullsub_13
	ldr	r0, .L2443+0x4
	ldrb	r0, [r0, #0xc]
	cmp	r0, #0x1
	bne	.L2407	@cond_branch
	mov	r6, #0x0
	add	r7, r4, #0
	mov	r5, #0x14
.L2411:
	ldr	r2, [r7]
	ldrb	r0, [r2, #0x7]
	asr	r0, r0, r6
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2410	@cond_branch
	lsl	r0, r6, #0x5
	add	r0, r2, r0
	ldrh	r0, [r0, #0x18]
	add	r4, r6, #0x3
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r2, r4, #0
	mov	r3, #0x4
	bl	nullsub_13
	ldr	r0, [r7]
	add	r0, r0, r5
	add	r0, r0, #0x6
	mov	r1, #0x6
	add	r2, r4, #0
	bl	nullsub_5
	ldr	r0, [r7]
	add	r0, r0, r5
	add	r0, r0, #0x15
	mov	r1, #0x16
	add	r2, r4, #0
	bl	nullsub_5
.L2410:
	add	r5, r5, #0x20
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L2411	@cond_branch
	mov	r6, #0x0
	ldr	r0, .L2443+0x4
	mov	r8, r0
.L2417:
	mov	r5, #0x0
	add	r7, r6, #0x1
	lsl	r0, r6, #0x3
	add	r2, r6, #0
	add	r2, r2, #0xb
	sub	r0, r0, r6
	lsl	r0, r0, #0x1
	mov	r1, r8
	add	r1, r1, #0x14
	add	r4, r0, r1
	lsl	r6, r2, #0x18
.L2421:
	ldrb	r0, [r4]
	lsl	r1, r5, #0x19
	lsr	r1, r1, #0x18
	lsr	r2, r6, #0x18
	mov	r3, #0x2
	bl	nullsub_13
	add	r4, r4, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0xd
	ble	.L2421	@cond_branch
	add	r6, r7, #0
	cmp	r6, #0x3
	ble	.L2417	@cond_branch
	ldr	r0, .L2443+0x8
	mov	r1, #0x1
	mov	r2, #0xf
	bl	nullsub_5
	b	.L2424
.L2444:
	.align	2, 0
.L2443:
	.word	gUnknown_03007890
	.word	gUnknown_03005000
	.word	gUnknown_082ED868
.L2407:
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0
	beq	.L2425	@cond_branch
	ldrb	r0, [r1, #0x7]
	cmp	r0, #0
	beq	.L2425	@cond_branch
	mov	r6, #0x0
	mov	r5, #0xc0
	lsl	r5, r5, #0x12
.L2429:
	lsr	r4, r5, #0x18
	mov	r0, #0x0
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x4
	bl	nullsub_13
	ldr	r0, .L2445
	mov	r1, #0x6
	add	r2, r4, #0
	bl	nullsub_5
	ldr	r0, .L2445+0x4
	mov	r1, #0x16
	add	r2, r4, #0
	bl	nullsub_5
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r5, r5, r1
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L2429	@cond_branch
	ldr	r5, .L2445+0x8
	ldr	r1, [r5]
	ldr	r4, .L2445+0xc
	ldr	r0, .L2445+0x10
	add	r4, r4, r0
	ldrb	r0, [r4]
	lsl	r0, r0, #0x5
	add	r1, r1, r0
	ldrh	r0, [r1, #0x18]
	mov	r1, #0x1
	mov	r2, #0x3
	mov	r3, #0x4
	bl	nullsub_13
	ldrb	r1, [r4]
	lsl	r1, r1, #0x5
	add	r1, r1, #0x14
	ldr	r0, [r5]
	add	r0, r0, r1
	add	r0, r0, #0x6
	mov	r1, #0x6
	mov	r2, #0x3
	bl	nullsub_5
	ldrb	r1, [r4]
	lsl	r1, r1, #0x5
	add	r1, r1, #0x14
	ldr	r0, [r5]
	add	r0, r0, r1
	add	r0, r0, #0x15
	mov	r1, #0x16
	mov	r2, #0x3
	bl	nullsub_5
	b	.L2424
.L2446:
	.align	2, 0
.L2445:
	.word	gUnknown_082ED84B
	.word	gUnknown_082ED85B
	.word	gUnknown_03007890
	.word	gUnknown_03005000
	.word	0xc3e
.L2425:
	mov	r6, #0x0
	ldr	r1, .L2447
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x8]
	cmp	r6, r0
	bge	.L2433	@cond_branch
	add	r7, r1, #0
	mov	r1, #0x14
	mov	r8, r1
.L2435:
	ldr	r0, [r7]
	lsl	r5, r6, #0x5
	add	r1, r0, r5
	ldrb	r0, [r1, #0x16]
	cmp	r0, #0xff
	beq	.L2434	@cond_branch
	ldrh	r0, [r1, #0x18]
	add	r4, r6, #0x3
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x4
	bl	nullsub_13
	ldr	r0, [r7]
	add	r0, r0, r5
	ldrh	r0, [r0, #0x14]
	mov	r1, #0x6
	add	r2, r4, #0
	mov	r3, #0x4
	bl	nullsub_13
	ldr	r0, [r7]
	add	r0, r0, r8
	add	r0, r0, #0x15
	mov	r1, #0x16
	add	r2, r4, #0
	bl	nullsub_5
.L2434:
	mov	r0, #0x20
	add	r8, r8, r0
	add	r6, r6, #0x1
	ldr	r0, [r7]
	ldrb	r0, [r0, #0x8]
	cmp	r6, r0
	blt	.L2435	@cond_branch
.L2433:
	cmp	r6, #0x3
	bgt	.L2424	@cond_branch
	lsl	r0, r6, #0x18
	mov	r1, #0xc0
	lsl	r1, r1, #0x12
	add	r5, r0, r1
.L2441:
	lsr	r4, r5, #0x18
	mov	r0, #0x0
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x4
	bl	nullsub_13
	ldr	r0, .L2447+0x4
	mov	r1, #0x6
	add	r2, r4, #0
	bl	nullsub_5
	ldr	r0, .L2447+0x8
	mov	r1, #0x16
	add	r2, r4, #0
	bl	nullsub_5
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	add	r5, r5, r0
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L2441	@cond_branch
.L2424:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2448:
	.align	2, 0
.L2447:
	.word	gUnknown_03007890
	.word	gUnknown_082ED84B
	.word	gUnknown_082ED85B
.Lfe211:
	.size	 sub_801229C,.Lfe211-sub_801229C
	.align	2, 0
	.globl	sub_80124C0
	.type	 sub_80124C0,function
	.thumb_func
sub_80124C0:
	ldr	r0, .L2450
	ldr	r1, .L2450+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	bx	lr
.L2451:
	.align	2, 0
.L2450:
	.word	gUnknown_03005000
	.word	0xc1a
.Lfe212:
	.size	 sub_80124C0,.Lfe212-sub_80124C0
	.align	2, 0
	.globl	GetRfuRecvQueueLength
	.type	 GetRfuRecvQueueLength,function
	.thumb_func
GetRfuRecvQueueLength:
	ldr	r0, .L2453
	ldr	r1, .L2453+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	bx	lr
.L2454:
	.align	2, 0
.L2453:
	.word	gUnknown_03005000
	.word	0x9e6
.Lfe213:
	.size	 GetRfuRecvQueueLength,.Lfe213-GetRfuRecvQueueLength
	.comm	gUnknown_03004140, 3776	@ 3776
	.comm	gUnknown_03005000, 3316	@ 3316
	.globl	gUnknown_03000D74
.bss
	.type	 gUnknown_03000D74,object
	.size	 gUnknown_03000D74,1
gUnknown_03000D74:
	.space	1
	.globl	gUnknown_03000D78
	.align	2, 0
	.type	 gUnknown_03000D78,object
	.size	 gUnknown_03000D78,8
gUnknown_03000D78:
	.space	8
	.globl	gUnknown_03000D80
	.type	 gUnknown_03000D80,object
	.size	 gUnknown_03000D80,16
gUnknown_03000D80:
	.space	16
	.globl	gUnknown_03000D90
	.align	1, 0
	.type	 gUnknown_03000D90,object
	.size	 gUnknown_03000D90,16
gUnknown_03000D90:
	.space	16
.text
	.align	2, 0

